
test_612.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002618c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037f0  0802635c  0802635c  0003635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000698  08029b4c  08029b4c  00039b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00066840  0802a1e4  0802a1e4  0003a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000078  08090a24  08090a24  000a0a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08090a9c  08090a9c  000b012c  2**0
                  CONTENTS
  7 .ARM          00000008  08090a9c  08090a9c  000a0a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08090aa4  08090aa4  000b012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08090aa4  08090aa4  000a0aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08090ab8  08090ab8  000a0ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000012c  20000000  08090ac0  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ad48  2000012c  08090bec  000b012c  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ae74  08090bec  000bae74  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000b012c  2**0
                  CONTENTS, READONLY
 15 .debug_info   000650f4  00000000  00000000  000b015c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000f057  00000000  00000000  00115250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000048d8  00000000  00000000  001242a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004338  00000000  00000000  00128b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003e45d  00000000  00000000  0012ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00046e34  00000000  00000000  0016b315  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013088b  00000000  00000000  001b2149  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002e29d4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013c60  00000000  00000000  002e2ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08026344 	.word	0x08026344

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000130 	.word	0x20000130
 800020c:	08026344 	.word	0x08026344

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f012 ff12 	bl	80133e4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 f9b4 	bl	800092c <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f998 	bl	800092c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f012 fecd 	bl	80133a8 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f97e 	bl	800094c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f012 fe97 	bl	80133a8 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000148 	.word	0x20000148

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f012 fde4 	bl	80133a8 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f012 fdd6 	bl	80133a8 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f012 fdbb 	bl	80133a8 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f012 fdad 	bl	80133a8 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000148 	.word	0x20000148
 8000890:	2000014c 	.word	0x2000014c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f012 fd60 	bl	8013374 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f012 fd4c 	bl	8013374 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
	...

08000914 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800091a:	781b      	ldrb	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000148 	.word	0x20000148

0800092c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000930:	f7ff fff0 	bl	8000914 <ft5336_Get_I2C_InitializedStatus>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800093a:	f012 fd11 	bl	8013360 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800093e:	4b02      	ldr	r3, [pc, #8]	; (8000948 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000148 	.word	0x20000148

0800094c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80009ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <vApplicationGetIdleTaskMemory+0x30>)
 80009b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000150 	.word	0x20000150
 80009cc:	200001a8 	.word	0x200001a8

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f002 fc20 	bl	800321a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f84b 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f001 f897 	bl	8001b10 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 f907 	bl	8000bf4 <MX_ADC3_Init>
  MX_CRC_Init();
 80009e6:	f000 f957 	bl	8000c98 <MX_CRC_Init>
  MX_DCMI_Init();
 80009ea:	f000 f977 	bl	8000cdc <MX_DCMI_Init>
  MX_DMA2D_Init();
 80009ee:	f000 f9a9 	bl	8000d44 <MX_DMA2D_Init>
  MX_FMC_Init();
 80009f2:	f000 ffe1 	bl	80019b8 <MX_FMC_Init>
  MX_I2C1_Init();
 80009f6:	f000 f9d7 	bl	8000da8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009fa:	f000 fa15 	bl	8000e28 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009fe:	f000 fa53 	bl	8000ea8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 fad3 	bl	8000fac <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000a06:	f000 fafd 	bl	8001004 <MX_RTC_Init>
  MX_SAI2_Init();
 8000a0a:	f000 fb9b 	bl	8001144 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000a0e:	f000 fc41 	bl	8001294 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000a12:	f000 fc5f 	bl	80012d4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a16:	f000 fc8d 	bl	8001334 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a1a:	f000 fcc9 	bl	80013b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a1e:	f000 fd73 	bl	8001508 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a22:	f000 fde7 	bl	80015f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a26:	f000 fe5b 	bl	80016e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a2a:	f000 fecf 	bl	80017cc <MX_TIM8_Init>
  MX_TIM12_Init();
 8000a2e:	f000 ff1f 	bl	8001870 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000a32:	f000 ff61 	bl	80018f8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a36:	f000 ff8f 	bl	8001958 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000a3a:	f00d fa7f 	bl	800df3c <MX_FATFS_Init>
  MX_TouchGFX_Init();
 8000a3e:	f012 fcdc 	bl	80133fa <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <main+0x9c>)
 8000a44:	1d3c      	adds	r4, r7, #4
 8000a46:	461d      	mov	r5, r3
 8000a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00f fda7 	bl	80105ac <osThreadCreate>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <main+0xa0>)
 8000a62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a64:	f00f fd7f 	bl	8010566 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x98>
 8000a6a:	bf00      	nop
 8000a6c:	08026368 	.word	0x08026368
 8000a70:	20009c0c 	.word	0x20009c0c

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0b4      	sub	sp, #208	; 0xd0
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f024 fce1 	bl	802544a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	2284      	movs	r2, #132	; 0x84
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f024 fcd2 	bl	802544a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000aa6:	f006 fe01 	bl	80076ac <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b4f      	ldr	r3, [pc, #316]	; (8000be8 <SystemClock_Config+0x174>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <SystemClock_Config+0x174>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <SystemClock_Config+0x174>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <SystemClock_Config+0x178>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <SystemClock_Config+0x178>)
 8000ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <SystemClock_Config+0x178>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ada:	2309      	movs	r3, #9
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000afc:	2319      	movs	r3, #25
 8000afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b10:	2309      	movs	r3, #9
 8000b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f006 fef6 	bl	800790c <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000b26:	f001 fa03 	bl	8001f30 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b2a:	f006 fdcf 	bl	80076cc <HAL_PWREx_EnableOverDrive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b34:	f001 f9fc 	bl	8001f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b5e:	2106      	movs	r1, #6
 8000b60:	4618      	mov	r0, r3
 8000b62:	f007 f943 	bl	8007dec <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b6c:	f001 f9e0 	bl	8001f30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <SystemClock_Config+0x17c>)
 8000b72:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000b84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b88:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000baa:	2300      	movs	r3, #0
 8000bac:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000bbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 fb0b 	bl	80081ec <HAL_RCCEx_PeriphCLKConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000bdc:	f001 f9a8 	bl	8001f30 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	37d0      	adds	r7, #208	; 0xd0
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000
 8000bf0:	01b14868 	.word	0x01b14868

08000bf4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_ADC3_Init+0x9c>)
 8000c0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c12:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c36:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <MX_ADC3_Init+0xa0>)
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c56:	f002 fb2f 	bl	80032b8 <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c60:	f001 f966 	bl	8001f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c64:	2304      	movs	r3, #4
 8000c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC3_Init+0x98>)
 8000c76:	f002 fb63 	bl	8003340 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c80:	f001 f956 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20009fec 	.word	0x20009fec
 8000c90:	40012200 	.word	0x40012200
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <MX_CRC_Init+0x40>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_CRC_Init+0x3c>)
 8000cc2:	f002 fe7d 	bl	80039c0 <HAL_CRC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ccc:	f001 f930 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20009e1c 	.word	0x20009e1c
 8000cd8:	40023000 	.word	0x40023000

08000cdc <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_DCMI_Init+0x64>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_DCMI_Init+0x60>)
 8000d2a:	f002 ff33 	bl	8003b94 <HAL_DCMI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d34:	f001 f8fc 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000a034 	.word	0x2000a034
 8000d40:	50050000 	.word	0x50050000

08000d44 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <MX_DMA2D_Init+0x60>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d7a:	f003 f817 	bl	8003dac <HAL_DMA2D_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d84:	f001 f8d4 	bl	8001f30 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_DMA2D_Init+0x5c>)
 8000d8c:	f003 fad8 	bl	8004340 <HAL_DMA2D_ConfigLayer>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d96:	f001 f8cb 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000a1e4 	.word	0x2000a1e4
 8000da4:	4002b000 	.word	0x4002b000

08000da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_I2C1_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <MX_I2C1_Init+0x7c>)
 8000db6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000de4:	f005 fb1a 	bl	800641c <HAL_I2C_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dee:	f001 f89f 	bl	8001f30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000df6:	f006 f829 	bl	8006e4c <HAL_I2CEx_ConfigAnalogFilter>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e00:	f001 f896 	bl	8001f30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_I2C1_Init+0x74>)
 8000e08:	f006 f86b 	bl	8006ee2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f001 f88d 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20009dd0 	.word	0x20009dd0
 8000e20:	40005400 	.word	0x40005400
 8000e24:	00c0eaff 	.word	0x00c0eaff

08000e28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <MX_I2C3_Init+0x78>)
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e34:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <MX_I2C3_Init+0x7c>)
 8000e36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e62:	480e      	ldr	r0, [pc, #56]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e64:	f005 fada 	bl	800641c <HAL_I2C_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e6e:	f001 f85f 	bl	8001f30 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e72:	2100      	movs	r1, #0
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e76:	f005 ffe9 	bl	8006e4c <HAL_I2CEx_ConfigAnalogFilter>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e80:	f001 f856 	bl	8001f30 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_I2C3_Init+0x74>)
 8000e88:	f006 f82b 	bl	8006ee2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e92:	f001 f84d 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20009c10 	.word	0x20009c10
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	00c0eaff 	.word	0x00c0eaff

08000ea8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2234      	movs	r2, #52	; 0x34
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f024 fac8 	bl	802544a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ebc:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <MX_LTDC_Init+0x100>)
 8000ebe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ec0:	4b38      	ldr	r3, [pc, #224]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ecc:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ed8:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000eda:	2228      	movs	r2, #40	; 0x28
 8000edc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ede:	4b31      	ldr	r3, [pc, #196]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ee0:	2209      	movs	r2, #9
 8000ee2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ee4:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ee6:	2235      	movs	r2, #53	; 0x35
 8000ee8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000eec:	220b      	movs	r2, #11
 8000eee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000ef2:	f240 2215 	movw	r2, #533	; 0x215
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000efa:	f240 121b 	movw	r2, #283	; 0x11b
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f02:	f240 2235 	movw	r2, #565	; 0x235
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f0a:	f240 121d 	movw	r2, #285	; 0x11d
 8000f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f28:	481e      	ldr	r0, [pc, #120]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f2a:	f006 f827 	bl	8006f7c <HAL_LTDC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000f34:	f000 fffc 	bl	8001f30 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000f3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f40:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000f46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f4a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f50:	23ff      	movs	r3, #255	; 0xff
 8000f52:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f62:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_LTDC_Init+0xfc>)
 8000f8e:	f006 f97d 	bl	800728c <HAL_LTDC_ConfigLayer>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000f98:	f000 ffca 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3738      	adds	r7, #56	; 0x38
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20009f44 	.word	0x20009f44
 8000fa8:	40016800 	.word	0x40016800

08000fac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <MX_QUADSPI_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_QUADSPI_Init+0x50>)
 8000fe8:	f006 fbc0 	bl	800776c <HAL_QSPI_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ff2:	f000 ff9d 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000a2d8 	.word	0x2000a2d8
 8001000:	a0001000 	.word	0xa0001000

08001004 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b092      	sub	sp, #72	; 0x48
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800100a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	222c      	movs	r2, #44	; 0x2c
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f024 fa0f 	bl	802544a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800102c:	4b43      	ldr	r3, [pc, #268]	; (800113c <MX_RTC_Init+0x138>)
 800102e:	4a44      	ldr	r2, [pc, #272]	; (8001140 <MX_RTC_Init+0x13c>)
 8001030:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <MX_RTC_Init+0x138>)
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001038:	4b40      	ldr	r3, [pc, #256]	; (800113c <MX_RTC_Init+0x138>)
 800103a:	227f      	movs	r2, #127	; 0x7f
 800103c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <MX_RTC_Init+0x138>)
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001044:	483d      	ldr	r0, [pc, #244]	; (800113c <MX_RTC_Init+0x138>)
 8001046:	f007 fdf3 	bl	8008c30 <HAL_RTC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 8001050:	f000 ff6e 	bl	8001f30 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800105a:	2300      	movs	r3, #0
 800105c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001066:	2300      	movs	r3, #0
 8001068:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	4831      	ldr	r0, [pc, #196]	; (800113c <MX_RTC_Init+0x138>)
 8001078:	f007 fe56 	bl	8008d28 <HAL_RTC_SetTime>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001082:	f000 ff55 	bl	8001f30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001086:	2301      	movs	r3, #1
 8001088:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 800108c:	2301      	movs	r3, #1
 800108e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001092:	2301      	movs	r3, #1
 8001094:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800109e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	4825      	ldr	r0, [pc, #148]	; (800113c <MX_RTC_Init+0x138>)
 80010a8:	f007 fefc 	bl	8008ea4 <HAL_RTC_SetDate>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_RTC_Init+0xb2>
  {
    Error_Handler();
 80010b2:	f000 ff3d 	bl	8001f30 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010be:	2300      	movs	r3, #0
 80010c0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80010da:	2301      	movs	r3, #1
 80010dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_RTC_Init+0x138>)
 80010ee:	f007 ff81 	bl	8008ff4 <HAL_RTC_SetAlarm>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_RTC_Init+0xf8>
  {
    Error_Handler();
 80010f8:	f000 ff1a 	bl	8001f30 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	2201      	movs	r2, #1
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <MX_RTC_Init+0x138>)
 8001110:	f007 ff70 	bl	8008ff4 <HAL_RTC_SetAlarm>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_RTC_Init+0x11a>
  {
    Error_Handler();
 800111a:	f000 ff09 	bl	8001f30 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800111e:	2202      	movs	r2, #2
 8001120:	2100      	movs	r1, #0
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_RTC_Init+0x138>)
 8001124:	f008 f8f0 	bl	8009308 <HAL_RTCEx_SetTimeStamp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0x12e>
  {
    Error_Handler();
 800112e:	f000 feff 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3748      	adds	r7, #72	; 0x48
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000a104 	.word	0x2000a104
 8001140:	40002800 	.word	0x40002800

08001144 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001148:	4b4d      	ldr	r3, [pc, #308]	; (8001280 <MX_SAI2_Init+0x13c>)
 800114a:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <MX_SAI2_Init+0x140>)
 800114c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001154:	4b4a      	ldr	r3, [pc, #296]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <MX_SAI2_Init+0x13c>)
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001160:	4b47      	ldr	r3, [pc, #284]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800116c:	4b44      	ldr	r3, [pc, #272]	; (8001280 <MX_SAI2_Init+0x13c>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001178:	4b41      	ldr	r3, [pc, #260]	; (8001280 <MX_SAI2_Init+0x13c>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800117e:	4b40      	ldr	r3, [pc, #256]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001184:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <MX_SAI2_Init+0x144>)
 8001188:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <MX_SAI2_Init+0x13c>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001196:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <MX_SAI2_Init+0x13c>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800119c:	4b38      	ldr	r3, [pc, #224]	; (8001280 <MX_SAI2_Init+0x13c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011a4:	2208      	movs	r2, #8
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80011ba:	4b31      	ldr	r3, [pc, #196]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80011c6:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80011d8:	4829      	ldr	r0, [pc, #164]	; (8001280 <MX_SAI2_Init+0x13c>)
 80011da:	f008 f8eb 	bl	80093b4 <HAL_SAI_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80011e4:	f000 fea4 	bl	8001f30 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_SAI2_Init+0x148>)
 80011ea:	4a29      	ldr	r2, [pc, #164]	; (8001290 <MX_SAI2_Init+0x14c>)
 80011ec:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_SAI2_Init+0x148>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_SAI2_Init+0x148>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <MX_SAI2_Init+0x148>)
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_SAI2_Init+0x148>)
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_SAI2_Init+0x148>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800120c:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_SAI2_Init+0x148>)
 800120e:	2201      	movs	r2, #1
 8001210:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <MX_SAI2_Init+0x148>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_SAI2_Init+0x148>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_SAI2_Init+0x148>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_SAI2_Init+0x148>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_SAI2_Init+0x148>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_SAI2_Init+0x148>)
 8001232:	2200      	movs	r2, #0
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_SAI2_Init+0x148>)
 8001238:	2208      	movs	r2, #8
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_SAI2_Init+0x148>)
 800123e:	2201      	movs	r2, #1
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_SAI2_Init+0x148>)
 8001244:	2200      	movs	r2, #0
 8001246:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <MX_SAI2_Init+0x148>)
 800124a:	2200      	movs	r2, #0
 800124c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_SAI2_Init+0x148>)
 8001250:	2200      	movs	r2, #0
 8001252:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <MX_SAI2_Init+0x148>)
 8001256:	2200      	movs	r2, #0
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_SAI2_Init+0x148>)
 800125c:	2200      	movs	r2, #0
 800125e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_SAI2_Init+0x148>)
 8001262:	2201      	movs	r2, #1
 8001264:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_SAI2_Init+0x148>)
 8001268:	2200      	movs	r2, #0
 800126a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_SAI2_Init+0x148>)
 800126e:	f008 f8a1 	bl	80093b4 <HAL_SAI_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001278:	f000 fe5a 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20009d4c 	.word	0x20009d4c
 8001284:	40015c04 	.word	0x40015c04
 8001288:	0002ee00 	.word	0x0002ee00
 800128c:	20009b88 	.word	0x20009b88
 8001290:	40015c24 	.word	0x40015c24

08001294 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 800129a:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <MX_SDMMC1_SD_Init+0x3c>)
 800129c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <MX_SDMMC1_SD_Init+0x38>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	20009e40 	.word	0x20009e40
 80012d0:	40012c00 	.word	0x40012c00

080012d4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 80012da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80012de:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_SPDIFRX_Init+0x5c>)
 800131e:	f009 fb3b 	bl	800a998 <HAL_SPDIFRX_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001328:	f000 fe02 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20009d00 	.word	0x20009d00

08001334 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_SPI2_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_SPI2_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_SPI2_Init+0x74>)
 800134e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001352:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <MX_SPI2_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001366:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_SPI2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MX_SPI2_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001382:	2207      	movs	r2, #7
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_SPI2_Init+0x74>)
 800138e:	2208      	movs	r2, #8
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_SPI2_Init+0x74>)
 8001394:	f009 fb5c 	bl	800aa50 <HAL_SPI_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 fdc7 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20009c5c 	.word	0x20009c5c
 80013ac:	40003800 	.word	0x40003800

080013b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b09a      	sub	sp, #104	; 0x68
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
 80013e0:	615a      	str	r2, [r3, #20]
 80013e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	222c      	movs	r2, #44	; 0x2c
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f024 f82d 	bl	802544a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f0:	4b43      	ldr	r3, [pc, #268]	; (8001500 <MX_TIM1_Init+0x150>)
 80013f2:	4a44      	ldr	r2, [pc, #272]	; (8001504 <MX_TIM1_Init+0x154>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <MX_TIM1_Init+0x150>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <MX_TIM1_Init+0x150>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001402:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <MX_TIM1_Init+0x150>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <MX_TIM1_Init+0x150>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <MX_TIM1_Init+0x150>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <MX_TIM1_Init+0x150>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141a:	4839      	ldr	r0, [pc, #228]	; (8001500 <MX_TIM1_Init+0x150>)
 800141c:	f009 fbaa 	bl	800ab74 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001426:	f000 fd83 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001434:	4619      	mov	r1, r3
 8001436:	4832      	ldr	r0, [pc, #200]	; (8001500 <MX_TIM1_Init+0x150>)
 8001438:	f009 fe54 	bl	800b0e4 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001442:	f000 fd75 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001446:	482e      	ldr	r0, [pc, #184]	; (8001500 <MX_TIM1_Init+0x150>)
 8001448:	f009 fbea 	bl	800ac20 <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001452:	f000 fd6d 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001462:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001466:	4619      	mov	r1, r3
 8001468:	4825      	ldr	r0, [pc, #148]	; (8001500 <MX_TIM1_Init+0x150>)
 800146a:	f00a fab5 	bl	800b9d8 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001474:	f000 fd5c 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4818      	ldr	r0, [pc, #96]	; (8001500 <MX_TIM1_Init+0x150>)
 800149e:	f009 fd09 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80014a8:	f000 fd42 	bl	8001f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4807      	ldr	r0, [pc, #28]	; (8001500 <MX_TIM1_Init+0x150>)
 80014e2:	f00a fad5 	bl	800ba90 <HAL_TIMEx_ConfigBreakDeadTime>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80014ec:	f000 fd20 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014f0:	4803      	ldr	r0, [pc, #12]	; (8001500 <MX_TIM1_Init+0x150>)
 80014f2:	f001 fa77 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80014f6:	bf00      	nop
 80014f8:	3768      	adds	r7, #104	; 0x68
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000a124 	.word	0x2000a124
 8001504:	40010000 	.word	0x40010000

08001508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <MX_TIM2_Init+0xe8>)
 800153c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_TIM2_Init+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_TIM2_Init+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_TIM2_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_TIM2_Init+0xe8>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_TIM2_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001560:	4823      	ldr	r0, [pc, #140]	; (80015f0 <MX_TIM2_Init+0xe8>)
 8001562:	f009 fb07 	bl	800ab74 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800156c:	f000 fce0 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	481c      	ldr	r0, [pc, #112]	; (80015f0 <MX_TIM2_Init+0xe8>)
 800157e:	f009 fdb1 	bl	800b0e4 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001588:	f000 fcd2 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM2_Init+0xe8>)
 800158e:	f009 fb47 	bl	800ac20 <HAL_TIM_PWM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001598:	f000 fcca 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_TIM2_Init+0xe8>)
 80015ac:	f00a fa14 	bl	800b9d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015b6:	f000 fcbb 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ba:	2360      	movs	r3, #96	; 0x60
 80015bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM2_Init+0xe8>)
 80015d2:	f009 fc6f 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015dc:	f000 fca8 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM2_Init+0xe8>)
 80015e2:	f001 f9ff 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000a224 	.word	0x2000a224

080015f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001628:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <MX_TIM3_Init+0xe8>)
 800162a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <MX_TIM3_Init+0xe4>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_TIM3_Init+0xe4>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800164a:	4823      	ldr	r0, [pc, #140]	; (80016d8 <MX_TIM3_Init+0xe4>)
 800164c:	f009 fa92 	bl	800ab74 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001656:	f000 fc6b 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001664:	4619      	mov	r1, r3
 8001666:	481c      	ldr	r0, [pc, #112]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001668:	f009 fd3c 	bl	800b0e4 <HAL_TIM_ConfigClockSource>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001672:	f000 fc5d 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001676:	4818      	ldr	r0, [pc, #96]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001678:	f009 fad2 	bl	800ac20 <HAL_TIM_PWM_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001682:	f000 fc55 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	4619      	mov	r1, r3
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <MX_TIM3_Init+0xe4>)
 8001696:	f00a f99f 	bl	800b9d8 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016a0:	f000 fc46 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a4:	2360      	movs	r3, #96	; 0x60
 80016a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	4619      	mov	r1, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_TIM3_Init+0xe4>)
 80016bc:	f009 fbfa 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016c6:	f000 fc33 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ca:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_TIM3_Init+0xe4>)
 80016cc:	f001 f98a 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80016d0:	bf00      	nop
 80016d2:	3738      	adds	r7, #56	; 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20009f04 	.word	0x20009f04
 80016dc:	40000400 	.word	0x40000400

080016e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	; 0x38
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001712:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001714:	4a2c      	ldr	r2, [pc, #176]	; (80017c8 <MX_TIM5_Init+0xe8>)
 8001716:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <MX_TIM5_Init+0xe4>)
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <MX_TIM5_Init+0xe4>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001736:	4823      	ldr	r0, [pc, #140]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001738:	f009 fa1c 	bl	800ab74 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001742:	f000 fbf5 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800174c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001750:	4619      	mov	r1, r3
 8001752:	481c      	ldr	r0, [pc, #112]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001754:	f009 fcc6 	bl	800b0e4 <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800175e:	f000 fbe7 	bl	8001f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001762:	4818      	ldr	r0, [pc, #96]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001764:	f009 fa5c 	bl	800ac20 <HAL_TIM_PWM_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800176e:	f000 fbdf 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4810      	ldr	r0, [pc, #64]	; (80017c4 <MX_TIM5_Init+0xe4>)
 8001782:	f00a f929 	bl	800b9d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800178c:	f000 fbd0 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001790:	2360      	movs	r3, #96	; 0x60
 8001792:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	220c      	movs	r2, #12
 80017a4:	4619      	mov	r1, r3
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <MX_TIM5_Init+0xe4>)
 80017a8:	f009 fb84 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80017b2:	f000 fbbd 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_TIM5_Init+0xe4>)
 80017b8:	f001 f914 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80017bc:	bf00      	nop
 80017be:	3738      	adds	r7, #56	; 0x38
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20009ec4 	.word	0x20009ec4
 80017c8:	40000c00 	.word	0x40000c00

080017cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <MX_TIM8_Init+0x9c>)
 80017ec:	4a1f      	ldr	r2, [pc, #124]	; (800186c <MX_TIM8_Init+0xa0>)
 80017ee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <MX_TIM8_Init+0x9c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <MX_TIM8_Init+0x9c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_TIM8_Init+0x9c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b19      	ldr	r3, [pc, #100]	; (8001868 <MX_TIM8_Init+0x9c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001808:	4b17      	ldr	r3, [pc, #92]	; (8001868 <MX_TIM8_Init+0x9c>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_TIM8_Init+0x9c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001814:	4814      	ldr	r0, [pc, #80]	; (8001868 <MX_TIM8_Init+0x9c>)
 8001816:	f009 f9ad 	bl	800ab74 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001820:	f000 fb86 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4619      	mov	r1, r3
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <MX_TIM8_Init+0x9c>)
 8001832:	f009 fc57 	bl	800b0e4 <HAL_TIM_ConfigClockSource>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800183c:	f000 fb78 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_TIM8_Init+0x9c>)
 8001852:	f00a f8c1 	bl	800b9d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800185c:	f000 fb68 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20009cc0 	.word	0x20009cc0
 800186c:	40010400 	.word	0x40010400

08001870 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM12_Init+0x80>)
 800188a:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <MX_TIM12_Init+0x84>)
 800188c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_TIM12_Init+0x80>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM12_Init+0x80>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_TIM12_Init+0x80>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_TIM12_Init+0x80>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_TIM12_Init+0x80>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80018ac:	4810      	ldr	r0, [pc, #64]	; (80018f0 <MX_TIM12_Init+0x80>)
 80018ae:	f009 f9b7 	bl	800ac20 <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 80018b8:	f000 fb3a 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018bc:	2360      	movs	r3, #96	; 0x60
 80018be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <MX_TIM12_Init+0x80>)
 80018d4:	f009 faee 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80018de:	f000 fb27 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <MX_TIM12_Init+0x80>)
 80018e4:	f001 f87e 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000a264 	.word	0x2000a264
 80018f4:	40001800 	.word	0x40001800

080018f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART1_UART_Init+0x58>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_USART1_UART_Init+0x5c>)
 8001900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART1_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART1_UART_Init+0x58>)
 800193c:	f00a f944 	bl	800bbc8 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001946:	f000 faf3 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000a084 	.word	0x2000a084
 8001954:	40011000 	.word	0x40011000

08001958 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART6_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART6_UART_Init+0x58>)
 800199c:	f00a f914 	bl	800bbc8 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f000 fac3 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000a164 	.word	0x2000a164
 80019b4:	40011400 	.word	0x40011400

080019b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80019d0:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019d2:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <MX_FMC_Init+0x150>)
 80019d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80019d6:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80019dc:	4b49      	ldr	r3, [pc, #292]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80019e2:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019ea:	2210      	movs	r2, #16
 80019ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80019f4:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019f6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80019fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <MX_FMC_Init+0x14c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a08:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a12:	4b3c      	ldr	r3, [pc, #240]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a24:	2307      	movs	r3, #7
 8001a26:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4832      	ldr	r0, [pc, #200]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001a3a:	f008 ff2d 	bl	800a898 <HAL_SDRAM_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001a44:	f000 fa74 	bl	8001f30 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]

     /* Step 1: Configure a clock configuration enable command */
     Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001a4c:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
     Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a54:	2210      	movs	r2, #16
 8001a56:	605a      	str	r2, [r3, #4]
     Command.AutoRefreshNumber      = 1;
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	609a      	str	r2, [r3, #8]
     Command.ModeRegisterDefinition = 0;
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]

     /* Send the command */
     HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a68:	4928      	ldr	r1, [pc, #160]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a6a:	4826      	ldr	r0, [pc, #152]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001a6c:	f008 ff48 	bl	800a900 <HAL_SDRAM_SendCommand>

     /* Step 2: Insert 100 us minimum delay */
     /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
     HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f001 fbff 	bl	8003274 <HAL_Delay>

     /* Step 3: Configure a PALL (precharge all) command */
     Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a78:	2202      	movs	r2, #2
 8001a7a:	601a      	str	r2, [r3, #0]
     Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a7e:	2210      	movs	r2, #16
 8001a80:	605a      	str	r2, [r3, #4]
     Command.AutoRefreshNumber      = 1;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	609a      	str	r2, [r3, #8]
     Command.ModeRegisterDefinition = 0;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]

     /* Send the command */
     HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a92:	491e      	ldr	r1, [pc, #120]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a94:	481b      	ldr	r0, [pc, #108]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001a96:	f008 ff33 	bl	800a900 <HAL_SDRAM_SendCommand>

     /* Step 4: Configure an Auto Refresh command */
     Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_FMC_Init+0x154>)
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	601a      	str	r2, [r3, #0]
     Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_FMC_Init+0x154>)
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	605a      	str	r2, [r3, #4]
     Command.AutoRefreshNumber      = 8;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_FMC_Init+0x154>)
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	609a      	str	r2, [r3, #8]
     Command.ModeRegisterDefinition = 0;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_FMC_Init+0x154>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]

     /* Send the command */
     HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab6:	4915      	ldr	r1, [pc, #84]	; (8001b0c <MX_FMC_Init+0x154>)
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001aba:	f008 ff21 	bl	800a900 <HAL_SDRAM_SendCommand>

     /* Step 5: Program the external memory mode register */
     tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001abe:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001ac2:	603b      	str	r3, [r7, #0]
              SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
              SDRAM_MODEREG_CAS_LATENCY_3            | \
              SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
              SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

     Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_FMC_Init+0x154>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	601a      	str	r2, [r3, #0]
     Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_FMC_Init+0x154>)
 8001acc:	2210      	movs	r2, #16
 8001ace:	605a      	str	r2, [r3, #4]
     Command.AutoRefreshNumber      = 1;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_FMC_Init+0x154>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	609a      	str	r2, [r3, #8]
     Command.ModeRegisterDefinition = tmpmrd;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <MX_FMC_Init+0x154>)
 8001ada:	60d3      	str	r3, [r2, #12]

     /* Send the command */
     HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae0:	490a      	ldr	r1, [pc, #40]	; (8001b0c <MX_FMC_Init+0x154>)
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001ae4:	f008 ff0c 	bl	800a900 <HAL_SDRAM_SendCommand>

     /* Step 6: Set the refresh rate counter */
     /* Set the device refresh rate */
     HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001ae8:	f240 712b 	movw	r1, #1835	; 0x72b
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_FMC_Init+0x14c>)
 8001aee:	f008 ff32 	bl	800a956 <HAL_SDRAM_ProgramRefreshRate>

     //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
     FMC_Bank1->BTCR[0] = 0x000030D2;
 8001af2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001af6:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001afa:	601a      	str	r2, [r3, #0]


  /* USER CODE END FMC_Init 2 */
}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000a2a4 	.word	0x2000a2a4
 8001b08:	a0000140 	.word	0xa0000140
 8001b0c:	200003a8 	.word	0x200003a8

08001b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b090      	sub	sp, #64	; 0x40
 8001b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b26:	4baf      	ldr	r3, [pc, #700]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4aae      	ldr	r2, [pc, #696]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4bac      	ldr	r3, [pc, #688]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3e:	4ba9      	ldr	r3, [pc, #676]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4aa8      	ldr	r2, [pc, #672]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4ba6      	ldr	r3, [pc, #664]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4ba3      	ldr	r3, [pc, #652]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4aa2      	ldr	r2, [pc, #648]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4ba0      	ldr	r3, [pc, #640]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	4b9d      	ldr	r3, [pc, #628]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a9c      	ldr	r2, [pc, #624]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b9a      	ldr	r3, [pc, #616]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b97      	ldr	r3, [pc, #604]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a96      	ldr	r2, [pc, #600]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b91      	ldr	r3, [pc, #580]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a90      	ldr	r2, [pc, #576]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001bb6:	4b8b      	ldr	r3, [pc, #556]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a8a      	ldr	r2, [pc, #552]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b88      	ldr	r3, [pc, #544]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bce:	4b85      	ldr	r3, [pc, #532]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a84      	ldr	r2, [pc, #528]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001be6:	4b7f      	ldr	r3, [pc, #508]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a7e      	ldr	r2, [pc, #504]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b7c      	ldr	r3, [pc, #496]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfe:	4b79      	ldr	r3, [pc, #484]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a78      	ldr	r2, [pc, #480]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c16:	4b73      	ldr	r3, [pc, #460]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a72      	ldr	r2, [pc, #456]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <MX_GPIO_Init+0x2d4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2120      	movs	r1, #32
 8001c32:	486d      	ldr	r0, [pc, #436]	; (8001de8 <MX_GPIO_Init+0x2d8>)
 8001c34:	f002 ff7e 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	210c      	movs	r1, #12
 8001c3c:	486b      	ldr	r0, [pc, #428]	; (8001dec <MX_GPIO_Init+0x2dc>)
 8001c3e:	f002 ff79 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2108      	movs	r1, #8
 8001c46:	486a      	ldr	r0, [pc, #424]	; (8001df0 <MX_GPIO_Init+0x2e0>)
 8001c48:	f002 ff74 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c52:	4866      	ldr	r0, [pc, #408]	; (8001dec <MX_GPIO_Init+0x2dc>)
 8001c54:	f002 ff6e 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5e:	4865      	ldr	r0, [pc, #404]	; (8001df4 <MX_GPIO_Init+0x2e4>)
 8001c60:	f002 ff68 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	21c8      	movs	r1, #200	; 0xc8
 8001c68:	4863      	ldr	r0, [pc, #396]	; (8001df8 <MX_GPIO_Init+0x2e8>)
 8001c6a:	f002 ff63 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	485e      	ldr	r0, [pc, #376]	; (8001dfc <MX_GPIO_Init+0x2ec>)
 8001c82:	f002 fc8b 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001c86:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c98:	230b      	movs	r3, #11
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4855      	ldr	r0, [pc, #340]	; (8001df8 <MX_GPIO_Init+0x2e8>)
 8001ca4:	f002 fc7a 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8001ca8:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	484e      	ldr	r0, [pc, #312]	; (8001e00 <MX_GPIO_Init+0x2f0>)
 8001cc6:	f002 fc69 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4849      	ldr	r0, [pc, #292]	; (8001e04 <MX_GPIO_Init+0x2f4>)
 8001ce0:	f002 fc5c 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001ce4:	2340      	movs	r3, #64	; 0x40
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ce8:	4b47      	ldr	r3, [pc, #284]	; (8001e08 <MX_GPIO_Init+0x2f8>)
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	483c      	ldr	r0, [pc, #240]	; (8001de8 <MX_GPIO_Init+0x2d8>)
 8001cf8:	f002 fc50 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d10:	4619      	mov	r1, r3
 8001d12:	4835      	ldr	r0, [pc, #212]	; (8001de8 <MX_GPIO_Init+0x2d8>)
 8001d14:	f002 fc42 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001d18:	f241 030c 	movw	r3, #4108	; 0x100c
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	482e      	ldr	r0, [pc, #184]	; (8001dec <MX_GPIO_Init+0x2dc>)
 8001d32:	f002 fc33 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001d36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4830      	ldr	r0, [pc, #192]	; (8001e0c <MX_GPIO_Init+0x2fc>)
 8001d4c:	f002 fc26 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001d50:	2308      	movs	r3, #8
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d64:	4619      	mov	r1, r3
 8001d66:	4822      	ldr	r0, [pc, #136]	; (8001df0 <MX_GPIO_Init+0x2e0>)
 8001d68:	f002 fc18 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	481a      	ldr	r0, [pc, #104]	; (8001de8 <MX_GPIO_Init+0x2d8>)
 8001d80:	f002 fc0c 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001d84:	f248 0304 	movw	r3, #32772	; 0x8004
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	4619      	mov	r1, r3
 8001d98:	4816      	ldr	r0, [pc, #88]	; (8001df4 <MX_GPIO_Init+0x2e4>)
 8001d9a:	f002 fbff 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <MX_GPIO_Init+0x2e4>)
 8001db8:	f002 fbf0 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_GPIO_Init+0x2f8>)
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4806      	ldr	r0, [pc, #24]	; (8001dec <MX_GPIO_Init+0x2dc>)
 8001dd2:	f002 fbe3 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e016      	b.n	8001e10 <MX_GPIO_Init+0x300>
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40022000 	.word	0x40022000
 8001df0:	40022800 	.word	0x40022800
 8001df4:	40021c00 	.word	0x40021c00
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40020400 	.word	0x40020400
 8001e04:	40022400 	.word	0x40022400
 8001e08:	10120000 	.word	0x10120000
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e16:	230a      	movs	r3, #10
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4830      	ldr	r0, [pc, #192]	; (8001ee4 <MX_GPIO_Init+0x3d4>)
 8001e22:	f002 fbbb 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001e26:	23c8      	movs	r3, #200	; 0xc8
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	482a      	ldr	r0, [pc, #168]	; (8001ee8 <MX_GPIO_Init+0x3d8>)
 8001e3e:	f002 fbad 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001e42:	2305      	movs	r3, #5
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e52:	230a      	movs	r3, #10
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <MX_GPIO_Init+0x3dc>)
 8001e5e:	f002 fb9d 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e62:	2332      	movs	r3, #50	; 0x32
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e72:	230b      	movs	r3, #11
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481b      	ldr	r0, [pc, #108]	; (8001eec <MX_GPIO_Init+0x3dc>)
 8001e7e:	f002 fb8d 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001e82:	2304      	movs	r3, #4
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e92:	4619      	mov	r1, r3
 8001e94:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <MX_GPIO_Init+0x3d8>)
 8001e96:	f002 fb81 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e9a:	2386      	movs	r3, #134	; 0x86
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eaa:	230b      	movs	r3, #11
 8001eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <MX_GPIO_Init+0x3e0>)
 8001eb6:	f002 fb71 	bl	800459c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001eba:	2328      	movs	r3, #40	; 0x28
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001eca:	230a      	movs	r3, #10
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <MX_GPIO_Init+0x3e0>)
 8001ed6:	f002 fb61 	bl	800459c <HAL_GPIO_Init>

}
 8001eda:	bf00      	nop
 8001edc:	3740      	adds	r7, #64	; 0x40
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40021800 	.word	0x40021800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001efc:	f016 f866 	bl	8017fcc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001f00:	f011 fa81 	bl	8013406 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f00e fb9d 	bl	8010644 <osDelay>
 8001f0a:	e7fb      	b.n	8001f04 <StartDefaultTask+0x10>

08001f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f1e:	f001 f989 	bl	8003234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40001000 	.word	0x40001000

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	210f      	movs	r1, #15
 8001f7a:	f06f 0001 	mvn.w	r0, #1
 8001f7e:	f001 fce7 	bl	8003950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a21      	ldr	r2, [pc, #132]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d13c      	bne.n	800202c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fd0:	f043 0320 	orr.w	r3, r3, #32
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_ADC_MspInit+0xa8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8001ffa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001ffe:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	; (800203c <HAL_ADC_MspInit+0xac>)
 8002010:	f002 fac4 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002014:	2301      	movs	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002018:	2303      	movs	r3, #3
 800201a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <HAL_ADC_MspInit+0xb0>)
 8002028:	f002 fab8 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40012200 	.word	0x40012200
 8002038:	40023800 	.word	0x40023800
 800203c:	40021400 	.word	0x40021400
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_CRC_MspInit+0x38>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10b      	bne.n	800206e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_CRC_MspInit+0x3c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_CRC_MspInit+0x3c>)
 800205c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <HAL_CRC_MspInit+0x3c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40023000 	.word	0x40023000
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	; 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a50      	ldr	r2, [pc, #320]	; (80021e4 <HAL_DCMI_MspInit+0x160>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 809a 	bne.w	80021dc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80020a8:	4b4f      	ldr	r3, [pc, #316]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6353      	str	r3, [r2, #52]	; 0x34
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020c0:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d8:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4a42      	ldr	r2, [pc, #264]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6313      	str	r3, [r2, #48]	; 0x30
 80020e4:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020f0:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	4a3c      	ldr	r2, [pc, #240]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fa:	6313      	str	r3, [r2, #48]	; 0x30
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 800210e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	4a30      	ldr	r2, [pc, #192]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6313      	str	r3, [r2, #48]	; 0x30
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_DCMI_MspInit+0x164>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002138:	2360      	movs	r3, #96	; 0x60
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002148:	230d      	movs	r3, #13
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4826      	ldr	r0, [pc, #152]	; (80021ec <HAL_DCMI_MspInit+0x168>)
 8002154:	f002 fa22 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002158:	2308      	movs	r3, #8
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002168:	230d      	movs	r3, #13
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	481f      	ldr	r0, [pc, #124]	; (80021f0 <HAL_DCMI_MspInit+0x16c>)
 8002174:	f002 fa12 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800218a:	230d      	movs	r3, #13
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	4817      	ldr	r0, [pc, #92]	; (80021f4 <HAL_DCMI_MspInit+0x170>)
 8002196:	f002 fa01 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800219a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021ac:	230d      	movs	r3, #13
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	4810      	ldr	r0, [pc, #64]	; (80021f8 <HAL_DCMI_MspInit+0x174>)
 80021b8:	f002 f9f0 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80021bc:	2350      	movs	r3, #80	; 0x50
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80021cc:	230d      	movs	r3, #13
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <HAL_DCMI_MspInit+0x178>)
 80021d8:	f002 f9e0 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80021dc:	bf00      	nop
 80021de:	3738      	adds	r7, #56	; 0x38
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	50050000 	.word	0x50050000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40020c00 	.word	0x40020c00
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40021c00 	.word	0x40021c00
 80021fc:	40020000 	.word	0x40020000

08002200 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_DMA2D_MspInit+0x44>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d113      	bne.n	800223a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002212:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_DMA2D_MspInit+0x48>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <HAL_DMA2D_MspInit+0x48>)
 8002218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_DMA2D_MspInit+0x48>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2105      	movs	r1, #5
 800222e:	205a      	movs	r0, #90	; 0x5a
 8002230:	f001 fb8e 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002234:	205a      	movs	r0, #90	; 0x5a
 8002236:	f001 fba7 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	4002b000 	.word	0x4002b000
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_DMA2D_MspDeInit+0x2c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d108      	bne.n	8002270 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <HAL_DMA2D_MspDeInit+0x30>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_DMA2D_MspDeInit+0x30>)
 8002264:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002268:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 800226a:	205a      	movs	r0, #90	; 0x5a
 800226c:	f001 fb9a 	bl	80039a4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	4002b000 	.word	0x4002b000
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_I2C_MspInit+0xdc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d129      	bne.n	80022f6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a2e      	ldr	r2, [pc, #184]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 80022a8:	f043 0302 	orr.w	r3, r3, #2
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80022ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c0:	2312      	movs	r3, #18
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022cc:	2304      	movs	r3, #4
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	4823      	ldr	r0, [pc, #140]	; (8002364 <HAL_I2C_MspInit+0xe4>)
 80022d8:	f002 f960 	bl	800459c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 80022e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022f4:	e02d      	b.n	8002352 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_I2C_MspInit+0xe8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d128      	bne.n	8002352 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 8002306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002318:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	2312      	movs	r3, #18
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800232a:	2304      	movs	r3, #4
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	480d      	ldr	r0, [pc, #52]	; (800236c <HAL_I2C_MspInit+0xec>)
 8002336:	f002 f931 	bl	800459c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 8002340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_I2C_MspInit+0xe0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	bf00      	nop
 8002354:	3730      	adds	r7, #48	; 0x30
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40005400 	.word	0x40005400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400
 8002368:	40005c00 	.word	0x40005c00
 800236c:	40021c00 	.word	0x40021c00

08002370 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a11      	ldr	r2, [pc, #68]	; (80023c4 <HAL_I2C_MspDeInit+0x54>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10b      	bne.n	800239a <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_I2C_MspDeInit+0x58>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_I2C_MspDeInit+0x58>)
 8002388:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 800238e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002392:	480e      	ldr	r0, [pc, #56]	; (80023cc <HAL_I2C_MspDeInit+0x5c>)
 8002394:	f002 faac 	bl	80048f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002398:	e00f      	b.n	80023ba <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <HAL_I2C_MspDeInit+0x60>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d10a      	bne.n	80023ba <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_I2C_MspDeInit+0x58>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_I2C_MspDeInit+0x58>)
 80023aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023ae:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80023b0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80023b4:	4807      	ldr	r0, [pc, #28]	; (80023d4 <HAL_I2C_MspDeInit+0x64>)
 80023b6:	f002 fa9b 	bl	80048f0 <HAL_GPIO_DeInit>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40005400 	.word	0x40005400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40005c00 	.word	0x40005c00
 80023d4:	40021c00 	.word	0x40021c00

080023d8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	; 0x38
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_LTDC_MspInit+0x174>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f040 80a3 	bne.w	8002542 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002402:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002406:	6453      	str	r3, [r2, #68]	; 0x44
 8002408:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800241a:	f043 0310 	orr.w	r3, r3, #16
 800241e:	6313      	str	r3, [r2, #48]	; 0x30
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800242c:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	4b45      	ldr	r3, [pc, #276]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4a41      	ldr	r2, [pc, #260]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800244a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244e:	6313      	str	r3, [r2, #48]	; 0x30
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800245c:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002466:	6313      	str	r3, [r2, #48]	; 0x30
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a35      	ldr	r2, [pc, #212]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <HAL_LTDC_MspInit+0x178>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800248c:	2310      	movs	r3, #16
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800249c:	230e      	movs	r3, #14
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80024a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a4:	4619      	mov	r1, r3
 80024a6:	482b      	ldr	r0, [pc, #172]	; (8002554 <HAL_LTDC_MspInit+0x17c>)
 80024a8:	f002 f878 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80024ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ba:	2300      	movs	r3, #0
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024be:	230e      	movs	r3, #14
 80024c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c6:	4619      	mov	r1, r3
 80024c8:	4823      	ldr	r0, [pc, #140]	; (8002558 <HAL_LTDC_MspInit+0x180>)
 80024ca:	f002 f867 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80024ce:	23f7      	movs	r3, #247	; 0xf7
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024de:	230e      	movs	r3, #14
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	481c      	ldr	r0, [pc, #112]	; (800255c <HAL_LTDC_MspInit+0x184>)
 80024ea:	f002 f857 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80024ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002500:	2309      	movs	r3, #9
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4815      	ldr	r0, [pc, #84]	; (8002560 <HAL_LTDC_MspInit+0x188>)
 800250c:	f002 f846 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002510:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002522:	230e      	movs	r3, #14
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252a:	4619      	mov	r1, r3
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <HAL_LTDC_MspInit+0x18c>)
 800252e:	f002 f835 	bl	800459c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2105      	movs	r1, #5
 8002536:	2058      	movs	r0, #88	; 0x58
 8002538:	f001 fa0a 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800253c:	2058      	movs	r0, #88	; 0x58
 800253e:	f001 fa23 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3738      	adds	r7, #56	; 0x38
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40016800 	.word	0x40016800
 8002550:	40023800 	.word	0x40023800
 8002554:	40021000 	.word	0x40021000
 8002558:	40022400 	.word	0x40022400
 800255c:	40022800 	.word	0x40022800
 8002560:	40021800 	.word	0x40021800
 8002564:	40022000 	.word	0x40022000

08002568 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3b      	ldr	r2, [pc, #236]	; (8002674 <HAL_QSPI_MspInit+0x10c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d170      	bne.n	800266c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4a3a      	ldr	r2, [pc, #232]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6393      	str	r3, [r2, #56]	; 0x38
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a34      	ldr	r2, [pc, #208]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025a8:	f043 0310 	orr.w	r3, r3, #16
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a2e      	ldr	r2, [pc, #184]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a28      	ldr	r2, [pc, #160]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <HAL_QSPI_MspInit+0x110>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80025ea:	2304      	movs	r3, #4
 80025ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80025fa:	2309      	movs	r3, #9
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80025fe:	f107 031c 	add.w	r3, r7, #28
 8002602:	4619      	mov	r1, r3
 8002604:	481d      	ldr	r0, [pc, #116]	; (800267c <HAL_QSPI_MspInit+0x114>)
 8002606:	f001 ffc9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800260a:	2340      	movs	r3, #64	; 0x40
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800261a:	230a      	movs	r3, #10
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	4619      	mov	r1, r3
 8002624:	4816      	ldr	r0, [pc, #88]	; (8002680 <HAL_QSPI_MspInit+0x118>)
 8002626:	f001 ffb9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800262a:	2304      	movs	r3, #4
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800263a:	2309      	movs	r3, #9
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f107 031c 	add.w	r3, r7, #28
 8002642:	4619      	mov	r1, r3
 8002644:	480e      	ldr	r0, [pc, #56]	; (8002680 <HAL_QSPI_MspInit+0x118>)
 8002646:	f001 ffa9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800264a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800265c:	2309      	movs	r3, #9
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <HAL_QSPI_MspInit+0x11c>)
 8002668:	f001 ff98 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800266c:	bf00      	nop
 800266e:	3730      	adds	r7, #48	; 0x30
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	a0001000 	.word	0xa0001000
 8002678:	40023800 	.word	0x40023800
 800267c:	40021000 	.word	0x40021000
 8002680:	40020400 	.word	0x40020400
 8002684:	40020c00 	.word	0x40020c00

08002688 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_RTC_MspInit+0x2c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d105      	bne.n	80026a6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_RTC_MspInit+0x30>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_RTC_MspInit+0x30>)
 80026a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40002800 	.word	0x40002800
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_SD_MspInit+0xb4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d144      	bne.n	8002768 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_SD_MspInit+0xb8>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a24      	ldr	r2, [pc, #144]	; (8002774 <HAL_SD_MspInit+0xb8>)
 80026e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_SD_MspInit+0xb8>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_SD_MspInit+0xb8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_SD_MspInit+0xb8>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_SD_MspInit+0xb8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_SD_MspInit+0xb8>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a18      	ldr	r2, [pc, #96]	; (8002774 <HAL_SD_MspInit+0xb8>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_SD_MspInit+0xb8>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002726:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800272a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002738:	230c      	movs	r3, #12
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <HAL_SD_MspInit+0xbc>)
 8002744:	f001 ff2a 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002748:	2304      	movs	r3, #4
 800274a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002754:	2303      	movs	r3, #3
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002758:	230c      	movs	r3, #12
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	4806      	ldr	r0, [pc, #24]	; (800277c <HAL_SD_MspInit+0xc0>)
 8002764:	f001 ff1a 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40023800 	.word	0x40023800
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00

08002780 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80027a0:	d127      	bne.n	80027f2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <HAL_SPDIFRX_MspInit+0x7c>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	4a15      	ldr	r2, [pc, #84]	; (80027fc <HAL_SPDIFRX_MspInit+0x7c>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6413      	str	r3, [r2, #64]	; 0x40
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <HAL_SPDIFRX_MspInit+0x7c>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_SPDIFRX_MspInit+0x7c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_SPDIFRX_MspInit+0x7c>)
 80027c0:	f043 0308 	orr.w	r3, r3, #8
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_SPDIFRX_MspInit+0x7c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80027e2:	2308      	movs	r3, #8
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4804      	ldr	r0, [pc, #16]	; (8002800 <HAL_SPDIFRX_MspInit+0x80>)
 80027ee:	f001 fed5 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020c00 	.word	0x40020c00

08002804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <HAL_SPI_MspInit+0xb4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d144      	bne.n	80028b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a24      	ldr	r2, [pc, #144]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_SPI_MspInit+0xb8>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800286e:	2302      	movs	r3, #2
 8002870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800287e:	2305      	movs	r3, #5
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <HAL_SPI_MspInit+0xbc>)
 800288a:	f001 fe87 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800288e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289c:	2300      	movs	r3, #0
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028a0:	2305      	movs	r3, #5
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	; (80028c4 <HAL_SPI_MspInit+0xc0>)
 80028ac:	f001 fe76 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40003800 	.word	0x40003800
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40022000 	.word	0x40022000
 80028c4:	40020400 	.word	0x40020400

080028c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2e      	ldr	r2, [pc, #184]	; (8002990 <HAL_TIM_Base_MspInit+0xc8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10c      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028f2:	e046      	b.n	8002982 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d10c      	bne.n	8002918 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
}
 8002916:	e034      	b.n	8002982 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_TIM_Base_MspInit+0xd0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10c      	bne.n	800293c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
}
 800293a:	e022      	b.n	8002982 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_TIM_Base_MspInit+0xd4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10c      	bne.n	8002960 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
}
 800295e:	e010      	b.n	8002982 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_TIM_Base_MspInit+0xd8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10b      	bne.n	8002982 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_TIM_Base_MspInit+0xcc>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	; 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000
 8002994:	40023800 	.word	0x40023800
 8002998:	40000400 	.word	0x40000400
 800299c:	40000c00 	.word	0x40000c00
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_TIM_PWM_MspInit+0x38>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10b      	bne.n	80029ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80029ce:	bf00      	nop
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40001800 	.word	0x40001800
 80029e0:	40023800 	.word	0x40023800

080029e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a56      	ldr	r2, [pc, #344]	; (8002b5c <HAL_TIM_MspPostInit+0x178>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11d      	bne.n	8002a42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a55      	ldr	r2, [pc, #340]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b53      	ldr	r3, [pc, #332]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	484a      	ldr	r0, [pc, #296]	; (8002b64 <HAL_TIM_MspPostInit+0x180>)
 8002a3c:	f001 fdae 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002a40:	e087      	b.n	8002b52 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d11d      	bne.n	8002a88 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	4a43      	ldr	r2, [pc, #268]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6313      	str	r3, [r2, #48]	; 0x30
 8002a58:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a76:	2301      	movs	r3, #1
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 031c 	add.w	r3, r7, #28
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4838      	ldr	r0, [pc, #224]	; (8002b64 <HAL_TIM_MspPostInit+0x180>)
 8002a82:	f001 fd8b 	bl	800459c <HAL_GPIO_Init>
}
 8002a86:	e064      	b.n	8002b52 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a36      	ldr	r2, [pc, #216]	; (8002b68 <HAL_TIM_MspPostInit+0x184>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d11c      	bne.n	8002acc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a32      	ldr	r2, [pc, #200]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002a98:	f043 0302 	orr.w	r3, r3, #2
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002aaa:	2310      	movs	r3, #16
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aba:	2302      	movs	r3, #2
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4829      	ldr	r0, [pc, #164]	; (8002b6c <HAL_TIM_MspPostInit+0x188>)
 8002ac6:	f001 fd69 	bl	800459c <HAL_GPIO_Init>
}
 8002aca:	e042      	b.n	8002b52 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <HAL_TIM_MspPostInit+0x18c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d11c      	bne.n	8002b10 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002afe:	2302      	movs	r3, #2
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	4619      	mov	r1, r3
 8002b08:	481a      	ldr	r0, [pc, #104]	; (8002b74 <HAL_TIM_MspPostInit+0x190>)
 8002b0a:	f001 fd47 	bl	800459c <HAL_GPIO_Init>
}
 8002b0e:	e020      	b.n	8002b52 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_TIM_MspPostInit+0x194>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b24:	6313      	str	r3, [r2, #48]	; 0x30
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_TIM_MspPostInit+0x17c>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002b32:	2340      	movs	r3, #64	; 0x40
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002b42:	2309      	movs	r3, #9
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002b46:	f107 031c 	add.w	r3, r7, #28
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	480b      	ldr	r0, [pc, #44]	; (8002b7c <HAL_TIM_MspPostInit+0x198>)
 8002b4e:	f001 fd25 	bl	800459c <HAL_GPIO_Init>
}
 8002b52:	bf00      	nop
 8002b54:	3730      	adds	r7, #48	; 0x30
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40022000 	.word	0x40022000
 8002b78:	40001800 	.word	0x40001800
 8002b7c:	40021c00 	.word	0x40021c00

08002b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	; 0x30
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3c      	ldr	r2, [pc, #240]	; (8002c90 <HAL_UART_MspInit+0x110>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d145      	bne.n	8002c2e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba2:	4b3c      	ldr	r3, [pc, #240]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a3b      	ldr	r2, [pc, #236]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002ba8:	f043 0310 	orr.w	r3, r3, #16
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a35      	ldr	r2, [pc, #212]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4824      	ldr	r0, [pc, #144]	; (8002c98 <HAL_UART_MspInit+0x118>)
 8002c06:	f001 fcc9 	bl	800459c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4619      	mov	r1, r3
 8002c26:	481d      	ldr	r0, [pc, #116]	; (8002c9c <HAL_UART_MspInit+0x11c>)
 8002c28:	f001 fcb8 	bl	800459c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c2c:	e02c      	b.n	8002c88 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_UART_MspInit+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d127      	bne.n	8002c88 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	6453      	str	r3, [r2, #68]	; 0x44
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_UART_MspInit+0x114>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002c68:	23c0      	movs	r3, #192	; 0xc0
 8002c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c78:	2308      	movs	r3, #8
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7c:	f107 031c 	add.w	r3, r7, #28
 8002c80:	4619      	mov	r1, r3
 8002c82:	4808      	ldr	r0, [pc, #32]	; (8002ca4 <HAL_UART_MspInit+0x124>)
 8002c84:	f001 fc8a 	bl	800459c <HAL_GPIO_Init>
}
 8002c88:	bf00      	nop
 8002c8a:	3730      	adds	r7, #48	; 0x30
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40011000 	.word	0x40011000
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40011400 	.word	0x40011400
 8002ca4:	40020800 	.word	0x40020800

08002ca8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cae:	1d3b      	adds	r3, r7, #4
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_FMC_MspInit+0x100>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d16d      	bne.n	8002da0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002cc4:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_FMC_MspInit+0x100>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_FMC_MspInit+0x104>)
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_FMC_MspInit+0x104>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6393      	str	r3, [r2, #56]	; 0x38
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_FMC_MspInit+0x104>)
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8002ce2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ce6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cf4:	230c      	movs	r3, #12
 8002cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	482c      	ldr	r0, [pc, #176]	; (8002db0 <HAL_FMC_MspInit+0x108>)
 8002cfe:	f001 fc4d 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8002d02:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d14:	230c      	movs	r3, #12
 8002d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4825      	ldr	r0, [pc, #148]	; (8002db4 <HAL_FMC_MspInit+0x10c>)
 8002d1e:	f001 fc3d 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8002d22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d34:	230c      	movs	r3, #12
 8002d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	481e      	ldr	r0, [pc, #120]	; (8002db8 <HAL_FMC_MspInit+0x110>)
 8002d3e:	f001 fc2d 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8002d42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d54:	230c      	movs	r3, #12
 8002d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4817      	ldr	r0, [pc, #92]	; (8002dbc <HAL_FMC_MspInit+0x114>)
 8002d5e:	f001 fc1d 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002d62:	2328      	movs	r3, #40	; 0x28
 8002d64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d72:	230c      	movs	r3, #12
 8002d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <HAL_FMC_MspInit+0x118>)
 8002d7c:	f001 fc0e 	bl	800459c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002d80:	2308      	movs	r3, #8
 8002d82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d90:	230c      	movs	r3, #12
 8002d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <HAL_FMC_MspInit+0x11c>)
 8002d9a:	f001 fbff 	bl	800459c <HAL_GPIO_Init>
 8002d9e:	e000      	b.n	8002da2 <HAL_FMC_MspInit+0xfa>
    return;
 8002da0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200003b8 	.word	0x200003b8
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40021800 	.word	0x40021800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021400 	.word	0x40021400
 8002dc0:	40021c00 	.word	0x40021c00
 8002dc4:	40020800 	.word	0x40020800

08002dc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002dd0:	f7ff ff6a 	bl	8002ca8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2b      	ldr	r2, [pc, #172]	; (8002e98 <HAL_SAI_MspInit+0xbc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d124      	bne.n	8002e38 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_SAI_MspInit+0xc0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002df6:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_SAI_MspInit+0xc4>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <HAL_SAI_MspInit+0xc4>)
 8002dfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e00:	6453      	str	r3, [r2, #68]	; 0x44
 8002e02:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_SAI_MspInit+0xc4>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002e0e:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_SAI_MspInit+0xc0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a21      	ldr	r2, [pc, #132]	; (8002e9c <HAL_SAI_MspInit+0xc0>)
 8002e16:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002e18:	23f0      	movs	r3, #240	; 0xf0
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002e28:	230a      	movs	r3, #10
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4619      	mov	r1, r3
 8002e32:	481c      	ldr	r0, [pc, #112]	; (8002ea4 <HAL_SAI_MspInit+0xc8>)
 8002e34:	f001 fbb2 	bl	800459c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <HAL_SAI_MspInit+0xcc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d125      	bne.n	8002e8e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_SAI_MspInit+0xc0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10b      	bne.n	8002e62 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002e4a:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_SAI_MspInit+0xc4>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_SAI_MspInit+0xc4>)
 8002e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_SAI_MspInit+0xc4>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_SAI_MspInit+0xc0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <HAL_SAI_MspInit+0xc0>)
 8002e6a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002e7e:	230a      	movs	r3, #10
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4808      	ldr	r0, [pc, #32]	; (8002eac <HAL_SAI_MspInit+0xd0>)
 8002e8a:	f001 fb87 	bl	800459c <HAL_GPIO_Init>

    }
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40015c04 	.word	0x40015c04
 8002e9c:	200003bc 	.word	0x200003bc
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40015c24 	.word	0x40015c24
 8002eac:	40021800 	.word	0x40021800

08002eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	2036      	movs	r0, #54	; 0x36
 8002ec6:	f000 fd43 	bl	8003950 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002eca:	2036      	movs	r0, #54	; 0x36
 8002ecc:	f000 fd5c 	bl	8003988 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ed0:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <HAL_InitTick+0xa0>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_InitTick+0xa0>)
 8002ed6:	f043 0310 	orr.w	r3, r3, #16
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_InitTick+0xa0>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ee8:	f107 0210 	add.w	r2, r7, #16
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f005 f948 	bl	8008188 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ef8:	f005 f91e 	bl	8008138 <HAL_RCC_GetPCLK1Freq>
 8002efc:	4603      	mov	r3, r0
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_InitTick+0xa4>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9b      	lsrs	r3, r3, #18
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <HAL_InitTick+0xac>)
 8002f14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f1e:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f32:	f007 fe1f 	bl	800ab74 <HAL_TIM_Base_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d104      	bne.n	8002f46 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002f3c:	4806      	ldr	r0, [pc, #24]	; (8002f58 <HAL_InitTick+0xa8>)
 8002f3e:	f007 fe45 	bl	800abcc <HAL_TIM_Base_Start_IT>
 8002f42:	4603      	mov	r3, r0
 8002f44:	e000      	b.n	8002f48 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3730      	adds	r7, #48	; 0x30
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40023800 	.word	0x40023800
 8002f54:	431bde83 	.word	0x431bde83
 8002f58:	2000a324 	.word	0x2000a324
 8002f5c:	40001000 	.word	0x40001000

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <HardFault_Handler+0x4>

08002f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <MemManage_Handler+0x4>

08002f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <TIM6_DAC_IRQHandler+0x10>)
 8002f9a:	f007 fe6c 	bl	800ac76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000a324 	.word	0x2000a324

08002fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <OTG_FS_IRQHandler+0x10>)
 8002fae:	f002 f853 	bl	8005058 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000abac 	.word	0x2000abac

08002fbc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <LTDC_IRQHandler+0x10>)
 8002fc2:	f004 f8ab 	bl	800711c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20009f44 	.word	0x20009f44

08002fd0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <DMA2D_IRQHandler+0x10>)
 8002fd6:	f001 f8a2 	bl	800411e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	2000a1e4 	.word	0x2000a1e4

08002fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	return 1;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_kill>:

int _kill(int pid, int sig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ffe:	f022 f9cd 	bl	802539c <__errno>
 8003002:	4602      	mov	r2, r0
 8003004:	2316      	movs	r3, #22
 8003006:	6013      	str	r3, [r2, #0]
	return -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_exit>:

void _exit (int status)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffe7 	bl	8002ff4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003026:	e7fe      	b.n	8003026 <_exit+0x12>

08003028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e00a      	b.n	8003050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800303a:	f3af 8000 	nop.w
 800303e:	4601      	mov	r1, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	60ba      	str	r2, [r7, #8]
 8003046:	b2ca      	uxtb	r2, r1
 8003048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	dbf0      	blt.n	800303a <_read+0x12>
	}

return len;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e009      	b.n	8003088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	60ba      	str	r2, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	dbf1      	blt.n	8003074 <_write+0x12>
	}
	return len;
 8003090:	687b      	ldr	r3, [r7, #4]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_close>:

int _close(int file)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	return -1;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c2:	605a      	str	r2, [r3, #4]
	return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <_isatty>:

int _isatty(int file)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	return 1;
 80030da:	2301      	movs	r3, #1
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
	return 0;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <_sbrk+0x50>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d102      	bne.n	800311a <_sbrk+0x16>
		heap_end = &end;
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <_sbrk+0x50>)
 8003116:	4a10      	ldr	r2, [pc, #64]	; (8003158 <_sbrk+0x54>)
 8003118:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <_sbrk+0x50>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <_sbrk+0x50>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	466a      	mov	r2, sp
 800312a:	4293      	cmp	r3, r2
 800312c:	d907      	bls.n	800313e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800312e:	f022 f935 	bl	802539c <__errno>
 8003132:	4602      	mov	r2, r0
 8003134:	230c      	movs	r3, #12
 8003136:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
 800313c:	e006      	b.n	800314c <_sbrk+0x48>
	}

	heap_end += incr;
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <_sbrk+0x50>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	4a03      	ldr	r2, [pc, #12]	; (8003154 <_sbrk+0x50>)
 8003148:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200003c0 	.word	0x200003c0
 8003158:	2000ae78 	.word	0x2000ae78

0800315c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <SystemInit+0x5c>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <SystemInit+0x5c>)
 8003168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800316c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <SystemInit+0x60>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <SystemInit+0x60>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <SystemInit+0x60>)
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <SystemInit+0x60>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	490d      	ldr	r1, [pc, #52]	; (80031bc <SystemInit+0x60>)
 8003188:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <SystemInit+0x64>)
 800318a:	4013      	ands	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <SystemInit+0x60>)
 8003190:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <SystemInit+0x68>)
 8003192:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003194:	4b09      	ldr	r3, [pc, #36]	; (80031bc <SystemInit+0x60>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <SystemInit+0x60>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <SystemInit+0x60>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SystemInit+0x5c>)
 80031a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ac:	609a      	str	r2, [r3, #8]
#endif
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	fef6ffff 	.word	0xfef6ffff
 80031c4:	24003010 	.word	0x24003010

080031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ce:	e003      	b.n	80031d8 <LoopCopyDataInit>

080031d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031d6:	3104      	adds	r1, #4

080031d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031d8:	480b      	ldr	r0, [pc, #44]	; (8003208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031e0:	d3f6      	bcc.n	80031d0 <CopyDataInit>
  ldr  r2, =_sbss
 80031e2:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031e4:	e002      	b.n	80031ec <LoopFillZerobss>

080031e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031e8:	f842 3b04 	str.w	r3, [r2], #4

080031ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031f0:	d3f9      	bcc.n	80031e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031f2:	f7ff ffb3 	bl	800315c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f6:	f022 f8e9 	bl	80253cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031fa:	f7fd fbe9 	bl	80009d0 <main>
  bx  lr    
 80031fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003200:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003204:	08090ac0 	.word	0x08090ac0
  ldr  r0, =_sdata
 8003208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800320c:	2000012c 	.word	0x2000012c
  ldr  r2, =_sbss
 8003210:	2000012c 	.word	0x2000012c
  ldr  r3, = _ebss
 8003214:	2000ae74 	.word	0x2000ae74

08003218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC_IRQHandler>

0800321a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321e:	2003      	movs	r0, #3
 8003220:	f000 fb8b 	bl	800393a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003224:	2000      	movs	r0, #0
 8003226:	f7ff fe43 	bl	8002eb0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800322a:	f7fe fe89 	bl	8001f40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000030 	.word	0x20000030
 8003258:	2000a364 	.word	0x2000a364

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	2000a364 	.word	0x2000a364

08003274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7ff ffee 	bl	800325c <HAL_GetTick>
 8003280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d005      	beq.n	800329a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_Delay+0x40>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4413      	add	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800329a:	bf00      	nop
 800329c:	f7ff ffde 	bl	800325c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d8f7      	bhi.n	800329c <HAL_Delay+0x28>
  {
  }
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000030 	.word	0x20000030

080032b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e031      	b.n	8003332 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fe5a 	bl	8001f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_ADC_Init+0x84>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	f043 0202 	orr.w	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f94e 	bl	80035a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
 8003322:	e001      	b.n	8003328 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	ffffeefd 	.word	0xffffeefd

08003340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1c>
 8003358:	2302      	movs	r3, #2
 800335a:	e115      	b.n	8003588 <HAL_ADC_ConfigChannel+0x248>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b09      	cmp	r3, #9
 800336a:	d935      	bls.n	80033d8 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68d9      	ldr	r1, [r3, #12]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	3b1e      	subs	r3, #30
 8003382:	2207      	movs	r2, #7
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43da      	mvns	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	400a      	ands	r2, r1
 8003390:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7f      	ldr	r2, [pc, #508]	; (8003594 <HAL_ADC_ConfigChannel+0x254>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10a      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68d9      	ldr	r1, [r3, #12]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	061a      	lsls	r2, r3, #24
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e035      	b.n	800341e <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68d9      	ldr	r1, [r3, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	4618      	mov	r0, r3
 80033c4:	4603      	mov	r3, r0
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4403      	add	r3, r0
 80033ca:	3b1e      	subs	r3, #30
 80033cc:	409a      	lsls	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e022      	b.n	800341e <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	2207      	movs	r2, #7
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	400a      	ands	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6919      	ldr	r1, [r3, #16]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	4618      	mov	r0, r3
 800340e:	4603      	mov	r3, r0
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4403      	add	r3, r0
 8003414:	409a      	lsls	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d824      	bhi.n	8003470 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	3b05      	subs	r3, #5
 8003438:	221f      	movs	r2, #31
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	400a      	ands	r2, r1
 8003446:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	4618      	mov	r0, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b05      	subs	r3, #5
 8003462:	fa00 f203 	lsl.w	r2, r0, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	635a      	str	r2, [r3, #52]	; 0x34
 800346e:	e04c      	b.n	800350a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d824      	bhi.n	80034c2 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b23      	subs	r3, #35	; 0x23
 800348a:	221f      	movs	r2, #31
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	3b23      	subs	r3, #35	; 0x23
 80034b4:	fa00 f203 	lsl.w	r2, r0, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
 80034c0:	e023      	b.n	800350a <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b41      	subs	r3, #65	; 0x41
 80034d4:	221f      	movs	r2, #31
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4618      	mov	r0, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	3b41      	subs	r3, #65	; 0x41
 80034fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_ADC_ConfigChannel+0x258>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d109      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1e8>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b12      	cmp	r3, #18
 800351a:	d105      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_ADC_ConfigChannel+0x25c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_ADC_ConfigChannel+0x25c>)
 8003522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003526:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_ADC_ConfigChannel+0x258>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d125      	bne.n	800357e <HAL_ADC_ConfigChannel+0x23e>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_ADC_ConfigChannel+0x254>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x204>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b11      	cmp	r3, #17
 8003542:	d11c      	bne.n	800357e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003544:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_ADC_ConfigChannel+0x25c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_ADC_ConfigChannel+0x25c>)
 800354a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800354e:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0f      	ldr	r2, [pc, #60]	; (8003594 <HAL_ADC_ConfigChannel+0x254>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d111      	bne.n	800357e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_ADC_ConfigChannel+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a11      	ldr	r2, [pc, #68]	; (80035a4 <HAL_ADC_ConfigChannel+0x264>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	0c9a      	lsrs	r2, r3, #18
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003570:	e002      	b.n	8003578 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3b01      	subs	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	10000012 	.word	0x10000012
 8003598:	40012000 	.word	0x40012000
 800359c:	40012300 	.word	0x40012300
 80035a0:	2000002c 	.word	0x2000002c
 80035a4:	431bde83 	.word	0x431bde83

080035a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035b0:	4b78      	ldr	r3, [pc, #480]	; (8003794 <ADC_Init+0x1ec>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a77      	ldr	r2, [pc, #476]	; (8003794 <ADC_Init+0x1ec>)
 80035b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80035ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035bc:	4b75      	ldr	r3, [pc, #468]	; (8003794 <ADC_Init+0x1ec>)
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4973      	ldr	r1, [pc, #460]	; (8003794 <ADC_Init+0x1ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	4a58      	ldr	r2, [pc, #352]	; (8003798 <ADC_Init+0x1f0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d022      	beq.n	8003682 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800364a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800366c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e00f      	b.n	80036a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0202 	bic.w	r2, r2, #2
 80036b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	005a      	lsls	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	3b01      	subs	r3, #1
 80036fc:	035a      	lsls	r2, r3, #13
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	e007      	b.n	8003718 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003716:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	3b01      	subs	r3, #1
 8003734:	051a      	lsls	r2, r3, #20
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800374c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800375a:	025a      	lsls	r2, r3, #9
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	029a      	lsls	r2, r3, #10
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40012300 	.word	0x40012300
 8003798:	0f000001 	.word	0x0f000001

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <__NVIC_SetPriorityGrouping+0x40>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <__NVIC_SetPriorityGrouping+0x40>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00
 80037e0:	05fa0000 	.word	0x05fa0000

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	; (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db10      	blt.n	8003870 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4909      	ldr	r1, [pc, #36]	; (800387c <__NVIC_DisableIRQ+0x40>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	3320      	adds	r3, #32
 8003864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800386c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100

08003880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	2b00      	cmp	r3, #0
 8003892:	db0a      	blt.n	80038aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	490c      	ldr	r1, [pc, #48]	; (80038cc <__NVIC_SetPriority+0x4c>)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	440b      	add	r3, r1
 80038a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a8:	e00a      	b.n	80038c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4908      	ldr	r1, [pc, #32]	; (80038d0 <__NVIC_SetPriority+0x50>)
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	3b04      	subs	r3, #4
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	440b      	add	r3, r1
 80038be:	761a      	strb	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f1c3 0307 	rsb	r3, r3, #7
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	bf28      	it	cs
 80038f2:	2304      	movcs	r3, #4
 80038f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3304      	adds	r3, #4
 80038fa:	2b06      	cmp	r3, #6
 80038fc:	d902      	bls.n	8003904 <NVIC_EncodePriority+0x30>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b03      	subs	r3, #3
 8003902:	e000      	b.n	8003906 <NVIC_EncodePriority+0x32>
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003908:	f04f 32ff 	mov.w	r2, #4294967295
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	43d9      	mvns	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800392c:	4313      	orrs	r3, r2
         );
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff2a 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003962:	f7ff ff3f 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 8003966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f7ff ffb1 	bl	80038d4 <NVIC_EncodePriority>
 8003972:	4602      	mov	r2, r0
 8003974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff80 	bl	8003880 <__NVIC_SetPriority>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff32 	bl	8003800 <__NVIC_EnableIRQ>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff42 	bl	800383c <__NVIC_DisableIRQ>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e054      	b.n	8003a7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7f5b      	ldrb	r3, [r3, #29]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe fb2e 	bl	8002044 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	791b      	ldrb	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_CRC_Init+0xc4>)
 80039fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0218 	bic.w	r2, r2, #24
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	e00c      	b.n	8003a2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f834 	bl	8003a88 <HAL_CRCEx_Polynomial_Set>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e028      	b.n	8003a7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	795b      	ldrb	r3, [r3, #5]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	611a      	str	r2, [r3, #16]
 8003a3c:	e004      	b.n	8003a48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6912      	ldr	r2, [r2, #16]
 8003a46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	04c11db7 	.word	0x04c11db7

08003a88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a98:	231f      	movs	r3, #31
 8003a9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a9c:	bf00      	nop
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	613a      	str	r2, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_CRCEx_Polynomial_Set+0x34>
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b18      	cmp	r3, #24
 8003ac0:	d846      	bhi.n	8003b50 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b57 	.word	0x08003b57
 8003acc:	08003b51 	.word	0x08003b51
 8003ad0:	08003b51 	.word	0x08003b51
 8003ad4:	08003b51 	.word	0x08003b51
 8003ad8:	08003b51 	.word	0x08003b51
 8003adc:	08003b51 	.word	0x08003b51
 8003ae0:	08003b51 	.word	0x08003b51
 8003ae4:	08003b51 	.word	0x08003b51
 8003ae8:	08003b45 	.word	0x08003b45
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003b51 	.word	0x08003b51
 8003af4:	08003b51 	.word	0x08003b51
 8003af8:	08003b51 	.word	0x08003b51
 8003afc:	08003b51 	.word	0x08003b51
 8003b00:	08003b51 	.word	0x08003b51
 8003b04:	08003b51 	.word	0x08003b51
 8003b08:	08003b39 	.word	0x08003b39
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	08003b51 	.word	0x08003b51
 8003b14:	08003b51 	.word	0x08003b51
 8003b18:	08003b51 	.word	0x08003b51
 8003b1c:	08003b51 	.word	0x08003b51
 8003b20:	08003b51 	.word	0x08003b51
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b2d 	.word	0x08003b2d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d913      	bls.n	8003b5a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b36:	e010      	b.n	8003b5a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d90f      	bls.n	8003b5e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b42:	e00c      	b.n	8003b5e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d90b      	bls.n	8003b62 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b4e:	e008      	b.n	8003b62 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
      break;
 8003b54:	e006      	b.n	8003b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b56:	bf00      	nop
 8003b58:	e004      	b.n	8003b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b5a:	bf00      	nop
 8003b5c:	e002      	b.n	8003b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003b62:	bf00      	nop
  }
  if (status == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 0118 	bic.w	r1, r3, #24
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e062      	b.n	8003c6c <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fa66 	bl	8002084 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_DCMI_Init+0xe0>)
 8003bcc:	400b      	ands	r3, r1
 8003bce:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003be4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003bf0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003bfc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003c08:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003c14:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d112      	bne.n	8003c4c <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7f1b      	ldrb	r3, [r3, #28]
 8003c2a:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7f5b      	ldrb	r3, [r3, #29]
 8003c30:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003c32:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7f9b      	ldrb	r3, [r3, #30]
 8003c38:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003c3a:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7fdb      	ldrb	r3, [r3, #31]
 8003c42:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8003c48:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8003c4a:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 021e 	orr.w	r2, r2, #30
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	ffe0f007 	.word	0xffe0f007

08003c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_DMA_Start_IT+0x26>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e048      	b.n	8003d30 <HAL_DMA_Start_IT+0xb8>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d137      	bne.n	8003d22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f842 	bl	8003d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	223f      	movs	r2, #63	; 0x3f
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0216 	orr.w	r2, r2, #22
 8003ce6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cf6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0208 	orr.w	r2, r2, #8
 8003d0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e005      	b.n	8003d2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d108      	bne.n	8003d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d8e:	e007      	b.n	8003da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e039      	b.n	8003e32 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe fa14 	bl	8002200 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f023 0107 	bic.w	r1, r3, #7
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_DMA2D_Init+0x90>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68d1      	ldr	r1, [r2, #12]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	ffffc000 	.word	0xffffc000

08003e40 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e05f      	b.n	8003f12 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003e52:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <HAL_DMA2D_DeInit+0xdc>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d02e      	beq.n	8003ebc <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8c1 	bl	8003ff4 <HAL_DMA2D_Abort>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d021      	beq.n	8003ebc <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e04a      	b.n	8003f12 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d108      	bne.n	8003e9c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8f7 	bl	8004080 <HAL_DMA2D_CLUTLoading_Abort>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d011      	beq.n	8003ebc <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e03a      	b.n	8003f12 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d108      	bne.n	8003ebc <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f8e7 	bl	8004080 <HAL_DMA2D_CLUTLoading_Abort>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e02a      	b.n	8003f12 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	223f      	movs	r2, #63	; 0x3f
 8003eca:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fe f9a9 	bl	800224c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800

08003f20 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_DMA2D_Start_IT+0x1c>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e020      	b.n	8003f7e <HAL_DMA2D_Start_IT+0x5e>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fa84 	bl	8004464 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e024      	b.n	8003fec <HAL_DMA2D_BlendingStart_IT+0x66>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fa4d 	bl	8004464 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0205 	bic.w	r2, r3, #5
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0204 	orr.w	r2, r2, #4
 800400e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004010:	f7ff f924 	bl	800325c <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004016:	e017      	b.n	8004048 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004018:	f7ff f920 	bl	800325c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004026:	d90f      	bls.n	8004048 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2203      	movs	r2, #3
 8004038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e017      	b.n	8004078 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e0      	bne.n	8004018 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8004064:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0204 	orr.w	r2, r2, #4
 80040a0:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d103      	bne.n	80040b0 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	331c      	adds	r3, #28
 80040ae:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80040b0:	f7ff f8d4 	bl	800325c <HAL_GetTick>
 80040b4:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80040b6:	e017      	b.n	80040e8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80040b8:	f7ff f8d0 	bl	800325c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040c6:	d90f      	bls.n	80040e8 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2203      	movs	r2, #3
 80040d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e016      	b.n	8004116 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e1      	bne.n	80040b8 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8004102:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d026      	beq.n	800418e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d021      	beq.n	800418e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004158:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2204      	movs	r2, #4
 8004172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d026      	beq.n	80041e6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d021      	beq.n	80041e6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2220      	movs	r2, #32
 80041b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	f043 0202 	orr.w	r2, r3, #2
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2204      	movs	r2, #4
 80041ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d026      	beq.n	800423e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d021      	beq.n	800423e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004208:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00e      	beq.n	8004270 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2204      	movs	r2, #4
 8004268:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f853 	bl	8004316 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d024      	beq.n	80042c4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01f      	beq.n	80042c4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004292:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2202      	movs	r2, #2
 800429a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01f      	beq.n	800430e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01a      	beq.n	800430e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042e6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2210      	movs	r2, #16
 80042ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f80e 	bl	800432a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_DMA2D_ConfigLayer+0x20>
 800435c:	2302      	movs	r3, #2
 800435e:	e079      	b.n	8004454 <HAL_DMA2D_ConfigLayer+0x114>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	3318      	adds	r3, #24
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800438a:	4b35      	ldr	r3, [pc, #212]	; (8004460 <HAL_DMA2D_ConfigLayer+0x120>)
 800438c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b0a      	cmp	r3, #10
 8004394:	d003      	beq.n	800439e <HAL_DMA2D_ConfigLayer+0x5e>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b09      	cmp	r3, #9
 800439c:	d107      	bne.n	80043ae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e005      	b.n	80043ba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d120      	bne.n	8004402 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	ea02 0103 	and.w	r1, r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b0a      	cmp	r3, #10
 80043e8:	d003      	beq.n	80043f2 <HAL_DMA2D_ConfigLayer+0xb2>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b09      	cmp	r3, #9
 80043f0:	d127      	bne.n	8004442 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004400:	e01f      	b.n	8004442 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	43db      	mvns	r3, r3
 800440c:	ea02 0103 	and.w	r1, r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	430a      	orrs	r2, r1
 8004418:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b0a      	cmp	r3, #10
 800442a:	d003      	beq.n	8004434 <HAL_DMA2D_ConfigLayer+0xf4>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b09      	cmp	r3, #9
 8004432:	d106      	bne.n	8004442 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004440:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	ff03000f 	.word	0xff03000f

08004464 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004464:	b480      	push	{r7}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	041a      	lsls	r2, r3, #16
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800449c:	d174      	bne.n	8004588 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044ac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044b4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d108      	bne.n	80044d6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	e053      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	e048      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d111      	bne.n	8004518 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	0cdb      	lsrs	r3, r3, #19
 80044f8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	0a9b      	lsrs	r3, r3, #10
 80044fe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	08db      	lsrs	r3, r3, #3
 8004504:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	02db      	lsls	r3, r3, #11
 800450e:	4313      	orrs	r3, r2
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	e032      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d117      	bne.n	8004550 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	0fdb      	lsrs	r3, r3, #31
 8004524:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	0cdb      	lsrs	r3, r3, #19
 800452a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	0adb      	lsrs	r3, r3, #11
 8004530:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	431a      	orrs	r2, r3
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	03db      	lsls	r3, r3, #15
 8004546:	4313      	orrs	r3, r2
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	e016      	b.n	800457e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	0f1b      	lsrs	r3, r3, #28
 8004554:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	0d1b      	lsrs	r3, r3, #20
 800455a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	0b1b      	lsrs	r3, r3, #12
 8004560:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	011a      	lsls	r2, r3, #4
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	431a      	orrs	r2, r3
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	4313      	orrs	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004586:	e003      	b.n	8004590 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	60da      	str	r2, [r3, #12]
}
 8004590:	bf00      	nop
 8004592:	372c      	adds	r7, #44	; 0x2c
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	e175      	b.n	80048a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045bc:	2201      	movs	r2, #1
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	f040 8164 	bne.w	80048a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x4e>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b12      	cmp	r3, #18
 80045e8:	d123      	bne.n	8004632 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	08da      	lsrs	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3208      	adds	r2, #8
 80045f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	220f      	movs	r2, #15
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	08da      	lsrs	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3208      	adds	r2, #8
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d00b      	beq.n	8004686 <HAL_GPIO_Init+0xea>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d007      	beq.n	8004686 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800467a:	2b11      	cmp	r3, #17
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b12      	cmp	r3, #18
 8004684:	d130      	bne.n	80046e8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	2203      	movs	r2, #3
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046bc:	2201      	movs	r2, #1
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4013      	ands	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 0201 	and.w	r2, r3, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80be 	beq.w	80048a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004726:	4b65      	ldr	r3, [pc, #404]	; (80048bc <HAL_GPIO_Init+0x320>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4a64      	ldr	r2, [pc, #400]	; (80048bc <HAL_GPIO_Init+0x320>)
 800472c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004730:	6453      	str	r3, [r2, #68]	; 0x44
 8004732:	4b62      	ldr	r3, [pc, #392]	; (80048bc <HAL_GPIO_Init+0x320>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800473e:	4a60      	ldr	r2, [pc, #384]	; (80048c0 <HAL_GPIO_Init+0x324>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a57      	ldr	r2, [pc, #348]	; (80048c4 <HAL_GPIO_Init+0x328>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d037      	beq.n	80047da <HAL_GPIO_Init+0x23e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a56      	ldr	r2, [pc, #344]	; (80048c8 <HAL_GPIO_Init+0x32c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_GPIO_Init+0x23a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a55      	ldr	r2, [pc, #340]	; (80048cc <HAL_GPIO_Init+0x330>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d02b      	beq.n	80047d2 <HAL_GPIO_Init+0x236>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a54      	ldr	r2, [pc, #336]	; (80048d0 <HAL_GPIO_Init+0x334>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d025      	beq.n	80047ce <HAL_GPIO_Init+0x232>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a53      	ldr	r2, [pc, #332]	; (80048d4 <HAL_GPIO_Init+0x338>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d01f      	beq.n	80047ca <HAL_GPIO_Init+0x22e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a52      	ldr	r2, [pc, #328]	; (80048d8 <HAL_GPIO_Init+0x33c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d019      	beq.n	80047c6 <HAL_GPIO_Init+0x22a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a51      	ldr	r2, [pc, #324]	; (80048dc <HAL_GPIO_Init+0x340>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_GPIO_Init+0x226>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a50      	ldr	r2, [pc, #320]	; (80048e0 <HAL_GPIO_Init+0x344>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00d      	beq.n	80047be <HAL_GPIO_Init+0x222>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a4f      	ldr	r2, [pc, #316]	; (80048e4 <HAL_GPIO_Init+0x348>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d007      	beq.n	80047ba <HAL_GPIO_Init+0x21e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a4e      	ldr	r2, [pc, #312]	; (80048e8 <HAL_GPIO_Init+0x34c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_GPIO_Init+0x21a>
 80047b2:	2309      	movs	r3, #9
 80047b4:	e012      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047b6:	230a      	movs	r3, #10
 80047b8:	e010      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047ba:	2308      	movs	r3, #8
 80047bc:	e00e      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047be:	2307      	movs	r3, #7
 80047c0:	e00c      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047c2:	2306      	movs	r3, #6
 80047c4:	e00a      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047c6:	2305      	movs	r3, #5
 80047c8:	e008      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047ca:	2304      	movs	r3, #4
 80047cc:	e006      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e004      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e002      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_GPIO_Init+0x240>
 80047da:	2300      	movs	r3, #0
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	f002 0203 	and.w	r2, r2, #3
 80047e2:	0092      	lsls	r2, r2, #2
 80047e4:	4093      	lsls	r3, r2
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047ec:	4934      	ldr	r1, [pc, #208]	; (80048c0 <HAL_GPIO_Init+0x324>)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047fa:	4b3c      	ldr	r3, [pc, #240]	; (80048ec <HAL_GPIO_Init+0x350>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800481e:	4a33      	ldr	r2, [pc, #204]	; (80048ec <HAL_GPIO_Init+0x350>)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004824:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_GPIO_Init+0x350>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <HAL_GPIO_Init+0x350>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484e:	4b27      	ldr	r3, [pc, #156]	; (80048ec <HAL_GPIO_Init+0x350>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_GPIO_Init+0x350>)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004878:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <HAL_GPIO_Init+0x350>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_GPIO_Init+0x350>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3301      	adds	r3, #1
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b0f      	cmp	r3, #15
 80048ac:	f67f ae86 	bls.w	80045bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048b0:	bf00      	nop
 80048b2:	3724      	adds	r7, #36	; 0x24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40013800 	.word	0x40013800
 80048c4:	40020000 	.word	0x40020000
 80048c8:	40020400 	.word	0x40020400
 80048cc:	40020800 	.word	0x40020800
 80048d0:	40020c00 	.word	0x40020c00
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40021400 	.word	0x40021400
 80048dc:	40021800 	.word	0x40021800
 80048e0:	40021c00 	.word	0x40021c00
 80048e4:	40022000 	.word	0x40022000
 80048e8:	40022400 	.word	0x40022400
 80048ec:	40013c00 	.word	0x40013c00

080048f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e0d9      	b.n	8004ac0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800490c:	2201      	movs	r2, #1
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	f040 80c9 	bne.w	8004aba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004928:	4a6a      	ldr	r2, [pc, #424]	; (8004ad4 <HAL_GPIO_DeInit+0x1e4>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	3302      	adds	r3, #2
 8004930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004934:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	220f      	movs	r2, #15
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a62      	ldr	r2, [pc, #392]	; (8004ad8 <HAL_GPIO_DeInit+0x1e8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d037      	beq.n	80049c2 <HAL_GPIO_DeInit+0xd2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a61      	ldr	r2, [pc, #388]	; (8004adc <HAL_GPIO_DeInit+0x1ec>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_GPIO_DeInit+0xce>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a60      	ldr	r2, [pc, #384]	; (8004ae0 <HAL_GPIO_DeInit+0x1f0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02b      	beq.n	80049ba <HAL_GPIO_DeInit+0xca>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a5f      	ldr	r2, [pc, #380]	; (8004ae4 <HAL_GPIO_DeInit+0x1f4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d025      	beq.n	80049b6 <HAL_GPIO_DeInit+0xc6>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a5e      	ldr	r2, [pc, #376]	; (8004ae8 <HAL_GPIO_DeInit+0x1f8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01f      	beq.n	80049b2 <HAL_GPIO_DeInit+0xc2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a5d      	ldr	r2, [pc, #372]	; (8004aec <HAL_GPIO_DeInit+0x1fc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d019      	beq.n	80049ae <HAL_GPIO_DeInit+0xbe>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a5c      	ldr	r2, [pc, #368]	; (8004af0 <HAL_GPIO_DeInit+0x200>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_GPIO_DeInit+0xba>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a5b      	ldr	r2, [pc, #364]	; (8004af4 <HAL_GPIO_DeInit+0x204>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00d      	beq.n	80049a6 <HAL_GPIO_DeInit+0xb6>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_GPIO_DeInit+0x208>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <HAL_GPIO_DeInit+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a59      	ldr	r2, [pc, #356]	; (8004afc <HAL_GPIO_DeInit+0x20c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_GPIO_DeInit+0xae>
 800499a:	2309      	movs	r3, #9
 800499c:	e012      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 800499e:	230a      	movs	r3, #10
 80049a0:	e010      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049a2:	2308      	movs	r3, #8
 80049a4:	e00e      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049a6:	2307      	movs	r3, #7
 80049a8:	e00c      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049aa:	2306      	movs	r3, #6
 80049ac:	e00a      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049ae:	2305      	movs	r3, #5
 80049b0:	e008      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049b2:	2304      	movs	r3, #4
 80049b4:	e006      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049b6:	2303      	movs	r3, #3
 80049b8:	e004      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e002      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_GPIO_DeInit+0xd4>
 80049c2:	2300      	movs	r3, #0
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	f002 0203 	and.w	r2, r2, #3
 80049ca:	0092      	lsls	r2, r2, #2
 80049cc:	4093      	lsls	r3, r2
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d132      	bne.n	8004a3a <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	220f      	movs	r2, #15
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80049e4:	4a3b      	ldr	r2, [pc, #236]	; (8004ad4 <HAL_GPIO_DeInit+0x1e4>)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	43da      	mvns	r2, r3
 80049f4:	4837      	ldr	r0, [pc, #220]	; (8004ad4 <HAL_GPIO_DeInit+0x1e4>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	400a      	ands	r2, r1
 80049fc:	3302      	adds	r3, #2
 80049fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a02:	4b3f      	ldr	r3, [pc, #252]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	493d      	ldr	r1, [pc, #244]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a10:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	4939      	ldr	r1, [pc, #228]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004a1e:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	4936      	ldr	r1, [pc, #216]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004a2c:	4b34      	ldr	r3, [pc, #208]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	4932      	ldr	r1, [pc, #200]	; (8004b00 <HAL_GPIO_DeInit+0x210>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	2103      	movs	r1, #3
 8004a44:	fa01 f303 	lsl.w	r3, r1, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	08da      	lsrs	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3208      	adds	r2, #8
 8004a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	08d2      	lsrs	r2, r2, #3
 8004a70:	4019      	ands	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3208      	adds	r2, #8
 8004a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2103      	movs	r1, #3
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	2101      	movs	r1, #1
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	2103      	movs	r1, #3
 8004aae:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	3301      	adds	r3, #1
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	f67f af22 	bls.w	800490c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40020000 	.word	0x40020000
 8004adc:	40020400 	.word	0x40020400
 8004ae0:	40020800 	.word	0x40020800
 8004ae4:	40020c00 	.word	0x40020c00
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40021400 	.word	0x40021400
 8004af0:	40021800 	.word	0x40021800
 8004af4:	40021c00 	.word	0x40021c00
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40022400 	.word	0x40022400
 8004b00:	40013c00 	.word	0x40013c00

08004b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
 8004b20:	e001      	b.n	8004b26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b68:	b08d      	sub	sp, #52	; 0x34
 8004b6a:	af0a      	add	r7, sp, #40	; 0x28
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e048      	b.n	8004c0a <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f013 fa71 	bl	8018074 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2203      	movs	r2, #3
 8004b96:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f008 faff 	bl	800d1a2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	687e      	ldr	r6, [r7, #4]
 8004bac:	466d      	mov	r5, sp
 8004bae:	f106 0410 	add.w	r4, r6, #16
 8004bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bc2:	1d33      	adds	r3, r6, #4
 8004bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc6:	6838      	ldr	r0, [r7, #0]
 8004bc8:	f008 fa82 	bl	800d0d0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f008 faf6 	bl	800d1c4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	687e      	ldr	r6, [r7, #4]
 8004be0:	466d      	mov	r5, sp
 8004be2:	f106 0410 	add.w	r4, r6, #16
 8004be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bf6:	1d33      	adds	r3, r6, #4
 8004bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bfa:	6838      	ldr	r0, [r7, #0]
 8004bfc:	f008 fc08 	bl	800d410 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c12 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004c12:	b590      	push	{r4, r7, lr}
 8004c14:	b089      	sub	sp, #36	; 0x24
 8004c16:	af04      	add	r7, sp, #16
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	70fb      	strb	r3, [r7, #3]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70bb      	strb	r3, [r7, #2]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_HCD_HC_Init+0x28>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e07f      	b.n	8004d3a <HAL_HCD_HC_Init+0x128>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	440b      	add	r3, r1
 8004c50:	333d      	adds	r3, #61	; 0x3d
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	440b      	add	r3, r1
 8004c64:	3338      	adds	r3, #56	; 0x38
 8004c66:	787a      	ldrb	r2, [r7, #1]
 8004c68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	440b      	add	r3, r1
 8004c78:	3340      	adds	r3, #64	; 0x40
 8004c7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c7c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3339      	adds	r3, #57	; 0x39
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	440b      	add	r3, r1
 8004ca0:	333f      	adds	r3, #63	; 0x3f
 8004ca2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	78bb      	ldrb	r3, [r7, #2]
 8004cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb0:	b2d8      	uxtb	r0, r3
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	333a      	adds	r3, #58	; 0x3a
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004cc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da0a      	bge.n	8004ce2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	440b      	add	r3, r1
 8004cda:	333b      	adds	r3, #59	; 0x3b
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e009      	b.n	8004cf6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	333b      	adds	r3, #59	; 0x3b
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	333c      	adds	r3, #60	; 0x3c
 8004d06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d0a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	787c      	ldrb	r4, [r7, #1]
 8004d12:	78ba      	ldrb	r2, [r7, #2]
 8004d14:	78f9      	ldrb	r1, [r7, #3]
 8004d16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d18:	9302      	str	r3, [sp, #8]
 8004d1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4623      	mov	r3, r4
 8004d28:	f008 fce8 	bl	800d6fc <USB_HC_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd90      	pop	{r4, r7, pc}

08004d42 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_HCD_HC_Halt+0x1e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e00f      	b.n	8004d80 <HAL_HCD_HC_Halt+0x3e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f008 ff22 	bl	800dbba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	70fb      	strb	r3, [r7, #3]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70bb      	strb	r3, [r7, #2]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	333b      	adds	r3, #59	; 0x3b
 8004db2:	78ba      	ldrb	r2, [r7, #2]
 8004db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	440b      	add	r3, r1
 8004dc4:	333f      	adds	r3, #63	; 0x3f
 8004dc6:	787a      	ldrb	r2, [r7, #1]
 8004dc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004dca:	7c3b      	ldrb	r3, [r7, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	440b      	add	r3, r1
 8004dde:	3342      	adds	r3, #66	; 0x42
 8004de0:	2203      	movs	r2, #3
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e009      	b.n	8004dfa <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	440b      	add	r3, r1
 8004df4:	3342      	adds	r3, #66	; 0x42
 8004df6:	2202      	movs	r2, #2
 8004df8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004dfa:	787b      	ldrb	r3, [r7, #1]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	f200 80d6 	bhi.w	8004fae <HAL_HCD_HC_SubmitRequest+0x226>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <HAL_HCD_HC_SubmitRequest+0x80>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004f99 	.word	0x08004f99
 8004e10:	08004e85 	.word	0x08004e85
 8004e14:	08004f0f 	.word	0x08004f0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004e18:	7c3b      	ldrb	r3, [r7, #16]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	f040 80c9 	bne.w	8004fb2 <HAL_HCD_HC_SubmitRequest+0x22a>
 8004e20:	78bb      	ldrb	r3, [r7, #2]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f040 80c5 	bne.w	8004fb2 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8004e28:	8b3b      	ldrh	r3, [r7, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3351      	adds	r3, #81	; 0x51
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	440b      	add	r3, r1
 8004e50:	3351      	adds	r3, #81	; 0x51
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	440b      	add	r3, r1
 8004e66:	3342      	adds	r3, #66	; 0x42
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e6c:	e0a1      	b.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3342      	adds	r3, #66	; 0x42
 8004e7e:	2202      	movs	r2, #2
 8004e80:	701a      	strb	r2, [r3, #0]
      break;
 8004e82:	e096      	b.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e84:	78bb      	ldrb	r3, [r7, #2]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d120      	bne.n	8004ecc <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	3351      	adds	r3, #81	; 0x51
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	3342      	adds	r3, #66	; 0x42
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004eb4:	e07e      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3342      	adds	r3, #66	; 0x42
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e073      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	440b      	add	r3, r1
 8004eda:	3350      	adds	r3, #80	; 0x50
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	440b      	add	r3, r1
 8004ef0:	3342      	adds	r3, #66	; 0x42
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
      break;
 8004ef6:	e05d      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	440b      	add	r3, r1
 8004f06:	3342      	adds	r3, #66	; 0x42
 8004f08:	2202      	movs	r2, #2
 8004f0a:	701a      	strb	r2, [r3, #0]
      break;
 8004f0c:	e052      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004f0e:	78bb      	ldrb	r3, [r7, #2]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d120      	bne.n	8004f56 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	440b      	add	r3, r1
 8004f22:	3351      	adds	r3, #81	; 0x51
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	3342      	adds	r3, #66	; 0x42
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f3e:	e039      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3342      	adds	r3, #66	; 0x42
 8004f50:	2202      	movs	r2, #2
 8004f52:	701a      	strb	r2, [r3, #0]
      break;
 8004f54:	e02e      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	3350      	adds	r3, #80	; 0x50
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	440b      	add	r3, r1
 8004f7a:	3342      	adds	r3, #66	; 0x42
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
      break;
 8004f80:	e018      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3342      	adds	r3, #66	; 0x42
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]
      break;
 8004f96:	e00d      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	3342      	adds	r3, #66	; 0x42
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
      break;
 8004fac:	e002      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8004fb2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3344      	adds	r3, #68	; 0x44
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	8b39      	ldrh	r1, [r7, #24]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4403      	add	r3, r0
 8004fd8:	3348      	adds	r3, #72	; 0x48
 8004fda:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	440b      	add	r3, r1
 8004fea:	335c      	adds	r3, #92	; 0x5c
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	334c      	adds	r3, #76	; 0x4c
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	440b      	add	r3, r1
 8005012:	3339      	adds	r3, #57	; 0x39
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	440b      	add	r3, r1
 8005026:	335d      	adds	r3, #93	; 0x5d
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	3338      	adds	r3, #56	; 0x38
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	18d1      	adds	r1, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	f008 fc62 	bl	800d910 <USB_HC_StartXfer>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop

08005058 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f008 f98b 	bl	800d38a <USB_GetMode>
 8005074:	4603      	mov	r3, r0
 8005076:	2b01      	cmp	r3, #1
 8005078:	f040 80f1 	bne.w	800525e <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f008 f96f 	bl	800d364 <USB_ReadInterrupts>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80e7 	beq.w	800525c <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f008 f966 	bl	800d364 <USB_ReadInterrupts>
 8005098:	4603      	mov	r3, r0
 800509a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800509e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a2:	d104      	bne.n	80050ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80050ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 f956 	bl	800d364 <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d104      	bne.n	80050ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f008 f946 	bl	800d364 <USB_ReadInterrupts>
 80050d8:	4603      	mov	r3, r0
 80050da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050e2:	d104      	bne.n	80050ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f008 f936 	bl	800d364 <USB_ReadInterrupts>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2202      	movs	r2, #2
 8005108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f008 f928 	bl	800d364 <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800511a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511e:	d117      	bne.n	8005150 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800512e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005132:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f013 f80f 	bl	8018158 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f008 fa15 	bl	800d570 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800514e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f008 f905 	bl	800d364 <USB_ReadInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005164:	d102      	bne.n	800516c <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 f8c8 	bl	80062fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f008 f8f7 	bl	800d364 <USB_ReadInterrupts>
 8005176:	4603      	mov	r3, r0
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b08      	cmp	r3, #8
 800517e:	d106      	bne.n	800518e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f012 ffcd 	bl	8018120 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2208      	movs	r2, #8
 800518c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f008 f8e6 	bl	800d364 <USB_ReadInterrupts>
 8005198:	4603      	mov	r3, r0
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a2:	d138      	bne.n	8005216 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f008 fcf5 	bl	800db98 <USB_HC_ReadInterrupt>
 80051ae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e025      	b.n	8005202 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	fa22 f303 	lsr.w	r3, r2, r3
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d018      	beq.n	80051fc <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e0:	d106      	bne.n	80051f0 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f8cf 	bl	800538c <HCD_HC_IN_IRQHandler>
 80051ee:	e005      	b.n	80051fc <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fc5f 	bl	8005aba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3301      	adds	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	429a      	cmp	r2, r3
 800520a:	d3d4      	bcc.n	80051b6 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005214:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f008 f8a2 	bl	800d364 <USB_ReadInterrupts>
 8005220:	4603      	mov	r3, r0
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2b10      	cmp	r3, #16
 8005228:	d101      	bne.n	800522e <HAL_HCD_IRQHandler+0x1d6>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_HCD_IRQHandler+0x1d8>
 800522e:	2300      	movs	r3, #0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0210 	bic.w	r2, r2, #16
 8005242:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 ffad 	bl	80061a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0210 	orr.w	r2, r2, #16
 8005258:	619a      	str	r2, [r3, #24]
 800525a:	e000      	b.n	800525e <HAL_HCD_IRQHandler+0x206>
      return;
 800525c:	bf00      	nop
    }
  }
}
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_HCD_Start+0x16>
 8005276:	2302      	movs	r3, #2
 8005278:	e013      	b.n	80052a2 <HAL_HCD_Start+0x3e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f007 ff7a 	bl	800d180 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2101      	movs	r1, #1
 8005292:	4618      	mov	r0, r3
 8005294:	f008 f9d0 	bl	800d638 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_HCD_Stop+0x16>
 80052bc:	2302      	movs	r3, #2
 80052be:	e00d      	b.n	80052dc <HAL_HCD_Stop+0x32>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f008 fdaf 	bl	800de30 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f008 f977 	bl	800d5e4 <USB_ResetPort>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	335c      	adds	r3, #92	; 0x5c
 800531c:	781b      	ldrb	r3, [r3, #0]
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	334c      	adds	r3, #76	; 0x4c
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f008 f9b9 	bl	800d6d8 <USB_GetCurrentFrame>
 8005366:	4603      	mov	r3, r0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f008 f994 	bl	800d6aa <USB_GetHostSpeed>
 8005382:	4603      	mov	r3, r0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d119      	bne.n	80053f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	461a      	mov	r2, r3
 80053ca:	2304      	movs	r3, #4
 80053cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	60d3      	str	r3, [r2, #12]
 80053ee:	e095      	b.n	800551c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b20      	cmp	r3, #32
 8005404:	d109      	bne.n	800541a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	461a      	mov	r2, r3
 8005414:	2320      	movs	r3, #32
 8005416:	6093      	str	r3, [r2, #8]
 8005418:	e080      	b.n	800551c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b08      	cmp	r3, #8
 800542e:	d134      	bne.n	800549a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	440a      	add	r2, r1
 8005446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	440b      	add	r3, r1
 800545e:	335d      	adds	r3, #93	; 0x5d
 8005460:	2205      	movs	r2, #5
 8005462:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	2310      	movs	r3, #16
 8005474:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	461a      	mov	r2, r3
 8005484:	2308      	movs	r3, #8
 8005486:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f008 fb91 	bl	800dbba <USB_HC_Halt>
 8005498:	e040      	b.n	800551c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d134      	bne.n	800551c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f008 fb6c 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	461a      	mov	r2, r3
 80054f0:	2310      	movs	r3, #16
 80054f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	335d      	adds	r3, #93	; 0x5d
 8005504:	2208      	movs	r2, #8
 8005506:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	461a      	mov	r2, r3
 8005516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4413      	add	r3, r2
 8005524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800552e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005532:	d122      	bne.n	800557a <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	440a      	add	r2, r1
 800554a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554e:	f043 0302 	orr.w	r3, r3, #2
 8005552:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f008 fb2b 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005570:	461a      	mov	r2, r3
 8005572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005576:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005578:	e29b      	b.n	8005ab2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	f040 80c1 	bne.w	8005714 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01b      	beq.n	80055d2 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	440b      	add	r3, r1
 80055a8:	3348      	adds	r3, #72	; 0x48
 80055aa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	0159      	lsls	r1, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	440b      	add	r3, r1
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80055be:	1ad1      	subs	r1, r2, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4403      	add	r3, r0
 80055ce:	334c      	adds	r3, #76	; 0x4c
 80055d0:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	440b      	add	r3, r1
 80055e0:	335d      	adds	r3, #93	; 0x5d
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	440b      	add	r3, r1
 80055f4:	3358      	adds	r3, #88	; 0x58
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005606:	461a      	mov	r2, r3
 8005608:	2301      	movs	r3, #1
 800560a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	440b      	add	r3, r1
 800561a:	333f      	adds	r3, #63	; 0x3f
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	333f      	adds	r3, #63	; 0x3f
 8005632:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005634:	2b02      	cmp	r3, #2
 8005636:	d121      	bne.n	800567c <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	440a      	add	r2, r1
 800564e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f008 faa9 	bl	800dbba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	2310      	movs	r3, #16
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	e034      	b.n	80056e6 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	440b      	add	r3, r1
 800568a:	333f      	adds	r3, #63	; 0x3f
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d129      	bne.n	80056e6 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	335c      	adds	r3, #92	; 0x5c
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	b2d8      	uxtb	r0, r3
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	440b      	add	r3, r1
 80056d8:	335c      	adds	r3, #92	; 0x5c
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	461a      	mov	r2, r3
 80056de:	4601      	mov	r1, r0
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f012 fd47 	bl	8018174 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	440b      	add	r3, r1
 80056f4:	3350      	adds	r3, #80	; 0x50
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f083 0301 	eor.w	r3, r3, #1
 80056fc:	b2d8      	uxtb	r0, r3
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	440b      	add	r3, r1
 800570c:	3350      	adds	r3, #80	; 0x50
 800570e:	4602      	mov	r2, r0
 8005710:	701a      	strb	r2, [r3, #0]
}
 8005712:	e1ce      	b.n	8005ab2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4413      	add	r3, r2
 800571c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	f040 80f1 	bne.w	800590e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	440a      	add	r2, r1
 8005742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005746:	f023 0302 	bic.w	r3, r3, #2
 800574a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	335d      	adds	r3, #93	; 0x5d
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d10a      	bne.n	8005778 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	335c      	adds	r3, #92	; 0x5c
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e0b0      	b.n	80058da <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	335d      	adds	r3, #93	; 0x5d
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b05      	cmp	r3, #5
 800578c:	d10a      	bne.n	80057a4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4613      	mov	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	440b      	add	r3, r1
 800579c:	335c      	adds	r3, #92	; 0x5c
 800579e:	2205      	movs	r2, #5
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e09a      	b.n	80058da <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	440b      	add	r3, r1
 80057b2:	335d      	adds	r3, #93	; 0x5d
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b06      	cmp	r3, #6
 80057b8:	d00a      	beq.n	80057d0 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	440b      	add	r3, r1
 80057c8:	335d      	adds	r3, #93	; 0x5d
 80057ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d156      	bne.n	800587e <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3358      	adds	r3, #88	; 0x58
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4403      	add	r3, r0
 80057f2:	3358      	adds	r3, #88	; 0x58
 80057f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	3358      	adds	r3, #88	; 0x58
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d914      	bls.n	8005836 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	440b      	add	r3, r1
 800581a:	3358      	adds	r3, #88	; 0x58
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	335c      	adds	r3, #92	; 0x5c
 8005830:	2204      	movs	r2, #4
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e009      	b.n	800584a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	335c      	adds	r3, #92	; 0x5c
 8005846:	2202      	movs	r2, #2
 8005848:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005860:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005868:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e02d      	b.n	80058da <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	335d      	adds	r3, #93	; 0x5d
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b03      	cmp	r3, #3
 8005892:	d122      	bne.n	80058da <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	440b      	add	r3, r1
 80058a2:	335c      	adds	r3, #92	; 0x5c
 80058a4:	2202      	movs	r2, #2
 80058a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e6:	461a      	mov	r2, r3
 80058e8:	2302      	movs	r3, #2
 80058ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	b2d8      	uxtb	r0, r3
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	440b      	add	r3, r1
 80058fe:	335c      	adds	r3, #92	; 0x5c
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	4601      	mov	r1, r0
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f012 fc34 	bl	8018174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800590c:	e0d1      	b.n	8005ab2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d13e      	bne.n	80059a2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	440a      	add	r2, r1
 800593a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593e:	f043 0302 	orr.w	r3, r3, #2
 8005942:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	3358      	adds	r3, #88	; 0x58
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	1c59      	adds	r1, r3, #1
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4403      	add	r3, r0
 8005966:	3358      	adds	r3, #88	; 0x58
 8005968:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	335d      	adds	r3, #93	; 0x5d
 800597a:	2206      	movs	r2, #6
 800597c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f008 f916 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	461a      	mov	r2, r3
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	6093      	str	r3, [r2, #8]
}
 80059a0:	e087      	b.n	8005ab2 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d17c      	bne.n	8005ab2 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	440b      	add	r3, r1
 80059c6:	333f      	adds	r3, #63	; 0x3f
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d122      	bne.n	8005a14 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	3358      	adds	r3, #88	; 0x58
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f008 f8d4 	bl	800dbba <USB_HC_Halt>
 8005a12:	e045      	b.n	8005aa0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	333f      	adds	r3, #63	; 0x3f
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	333f      	adds	r3, #63	; 0x3f
 8005a3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d12f      	bne.n	8005aa0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	3358      	adds	r3, #88	; 0x58
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d121      	bne.n	8005aa0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	440b      	add	r3, r1
 8005a6a:	335d      	adds	r3, #93	; 0x5d
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8a:	f043 0302 	orr.w	r3, r3, #2
 8005a8e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f008 f88d 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	461a      	mov	r2, r3
 8005aae:	2310      	movs	r3, #16
 8005ab0:	6093      	str	r3, [r2, #8]
}
 8005ab2:	bf00      	nop
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b086      	sub	sp, #24
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d119      	bne.n	8005b1e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af6:	461a      	mov	r2, r3
 8005af8:	2304      	movs	r3, #4
 8005afa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	0151      	lsls	r1, r2, #5
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	440a      	add	r2, r1
 8005b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b16:	f043 0302 	orr.w	r3, r3, #2
 8005b1a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005b1c:	e33e      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d141      	bne.n	8005bb8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	461a      	mov	r2, r3
 8005b42:	2320      	movs	r3, #32
 8005b44:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	440b      	add	r3, r1
 8005b54:	333d      	adds	r3, #61	; 0x3d
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 831f 	bne.w	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	333d      	adds	r3, #61	; 0x3d
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	440b      	add	r3, r1
 8005b80:	335c      	adds	r3, #92	; 0x5c
 8005b82:	2202      	movs	r2, #2
 8005b84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba0:	f043 0302 	orr.w	r3, r3, #2
 8005ba4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f008 f802 	bl	800dbba <USB_HC_Halt>
}
 8005bb6:	e2f1      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d13f      	bne.n	8005c4e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	440b      	add	r3, r1
 8005bdc:	335d      	adds	r3, #93	; 0x5d
 8005bde:	2204      	movs	r2, #4
 8005be0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	440b      	add	r3, r1
 8005bf0:	333d      	adds	r3, #61	; 0x3d
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	440b      	add	r3, r1
 8005c04:	3358      	adds	r3, #88	; 0x58
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c24:	f043 0302 	orr.w	r3, r3, #2
 8005c28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	4611      	mov	r1, r2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f007 ffc0 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	461a      	mov	r2, r3
 8005c48:	2340      	movs	r3, #64	; 0x40
 8005c4a:	6093      	str	r3, [r2, #8]
}
 8005c4c:	e2a6      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c64:	d122      	bne.n	8005cac <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c80:	f043 0302 	orr.w	r3, r3, #2
 8005c84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f007 ff92 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ca8:	6093      	str	r3, [r2, #8]
}
 8005caa:	e277      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d135      	bne.n	8005d2e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	440b      	add	r3, r1
 8005cd0:	3358      	adds	r3, #88	; 0x58
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf0:	f043 0302 	orr.w	r3, r3, #2
 8005cf4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f007 ff5a 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	461a      	mov	r2, r3
 8005d14:	2301      	movs	r3, #1
 8005d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	440b      	add	r3, r1
 8005d26:	335d      	adds	r3, #93	; 0x5d
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
}
 8005d2c:	e236      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d12b      	bne.n	8005d9c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	2308      	movs	r3, #8
 8005d54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d70:	f043 0302 	orr.w	r3, r3, #2
 8005d74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	b2d2      	uxtb	r2, r2
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f007 ff1a 	bl	800dbba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	440b      	add	r3, r1
 8005d94:	335d      	adds	r3, #93	; 0x5d
 8005d96:	2205      	movs	r2, #5
 8005d98:	701a      	strb	r2, [r3, #0]
}
 8005d9a:	e1ff      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d155      	bne.n	8005e5e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3358      	adds	r3, #88	; 0x58
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	440b      	add	r3, r1
 8005dd4:	335d      	adds	r3, #93	; 0x5d
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	440b      	add	r3, r1
 8005de8:	333d      	adds	r3, #61	; 0x3d
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d114      	bne.n	8005e1a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	440b      	add	r3, r1
 8005dfe:	333c      	adds	r3, #60	; 0x3c
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	333d      	adds	r3, #61	; 0x3d
 8005e16:	2201      	movs	r2, #1
 8005e18:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e34:	f043 0302 	orr.w	r3, r3, #2
 8005e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f007 feb8 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	461a      	mov	r2, r3
 8005e58:	2310      	movs	r3, #16
 8005e5a:	6093      	str	r3, [r2, #8]
}
 8005e5c:	e19e      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	d12b      	bne.n	8005ecc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	0151      	lsls	r1, r2, #5
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	440a      	add	r2, r1
 8005e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e8e:	f043 0302 	orr.w	r3, r3, #2
 8005e92:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f007 fe8b 	bl	800dbba <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	440b      	add	r3, r1
 8005eb2:	335d      	adds	r3, #93	; 0x5d
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2380      	movs	r3, #128	; 0x80
 8005ec8:	6093      	str	r3, [r2, #8]
}
 8005eca:	e167      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee2:	d135      	bne.n	8005f50 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efe:	f043 0302 	orr.w	r3, r3, #2
 8005f02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f007 fe53 	bl	800dbba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f20:	461a      	mov	r2, r3
 8005f22:	2310      	movs	r3, #16
 8005f24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f32:	461a      	mov	r2, r3
 8005f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f3a:	6879      	ldr	r1, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	440b      	add	r3, r1
 8005f48:	335d      	adds	r3, #93	; 0x5d
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	701a      	strb	r2, [r3, #0]
}
 8005f4e:	e125      	b.n	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	f040 811a 	bne.w	800619c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f82:	f023 0302 	bic.w	r3, r3, #2
 8005f86:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	440b      	add	r3, r1
 8005f96:	335d      	adds	r3, #93	; 0x5d
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d137      	bne.n	800600e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005f9e:	6879      	ldr	r1, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	440b      	add	r3, r1
 8005fac:	335c      	adds	r3, #92	; 0x5c
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	333f      	adds	r3, #63	; 0x3f
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d00b      	beq.n	8005fe0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	440b      	add	r3, r1
 8005fd6:	333f      	adds	r3, #63	; 0x3f
 8005fd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	f040 80c5 	bne.w	800616a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	440b      	add	r3, r1
 8005fee:	3351      	adds	r3, #81	; 0x51
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f083 0301 	eor.w	r3, r3, #1
 8005ff6:	b2d8      	uxtb	r0, r3
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	440b      	add	r3, r1
 8006006:	3351      	adds	r3, #81	; 0x51
 8006008:	4602      	mov	r2, r0
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	e0ad      	b.n	800616a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	440b      	add	r3, r1
 800601c:	335d      	adds	r3, #93	; 0x5d
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d10a      	bne.n	800603a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	440b      	add	r3, r1
 8006032:	335c      	adds	r3, #92	; 0x5c
 8006034:	2202      	movs	r2, #2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	e097      	b.n	800616a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	440b      	add	r3, r1
 8006048:	335d      	adds	r3, #93	; 0x5d
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b04      	cmp	r3, #4
 800604e:	d10a      	bne.n	8006066 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	440b      	add	r3, r1
 800605e:	335c      	adds	r3, #92	; 0x5c
 8006060:	2202      	movs	r2, #2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e081      	b.n	800616a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	440b      	add	r3, r1
 8006074:	335d      	adds	r3, #93	; 0x5d
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d10a      	bne.n	8006092 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	440b      	add	r3, r1
 800608a:	335c      	adds	r3, #92	; 0x5c
 800608c:	2205      	movs	r2, #5
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e06b      	b.n	800616a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	440b      	add	r3, r1
 80060a0:	335d      	adds	r3, #93	; 0x5d
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b06      	cmp	r3, #6
 80060a6:	d00a      	beq.n	80060be <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	335d      	adds	r3, #93	; 0x5d
 80060b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d155      	bne.n	800616a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	440b      	add	r3, r1
 80060cc:	3358      	adds	r3, #88	; 0x58
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1c59      	adds	r1, r3, #1
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4403      	add	r3, r0
 80060e0:	3358      	adds	r3, #88	; 0x58
 80060e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	3358      	adds	r3, #88	; 0x58
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d914      	bls.n	8006124 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060fa:	6879      	ldr	r1, [r7, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	440b      	add	r3, r1
 8006108:	3358      	adds	r3, #88	; 0x58
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4613      	mov	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	440b      	add	r3, r1
 800611c:	335c      	adds	r3, #92	; 0x5c
 800611e:	2204      	movs	r2, #4
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	e009      	b.n	8006138 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	440b      	add	r3, r1
 8006132:	335c      	adds	r3, #92	; 0x5c
 8006134:	2202      	movs	r2, #2
 8006136:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006156:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006164:	461a      	mov	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	461a      	mov	r2, r3
 8006178:	2302      	movs	r3, #2
 800617a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	b2d8      	uxtb	r0, r3
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	335c      	adds	r3, #92	; 0x5c
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	4601      	mov	r1, r0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f011 ffec 	bl	8018174 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800619c:	bf00      	nop
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	; 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f003 030f 	and.w	r3, r3, #15
 80061c4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	0c5b      	lsrs	r3, r3, #17
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	091b      	lsrs	r3, r3, #4
 80061d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d003      	beq.n	80061e8 <HCD_RXQLVL_IRQHandler+0x44>
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	f000 8082 	beq.w	80062ea <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80061e6:	e083      	b.n	80062f0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d07f      	beq.n	80062ee <HCD_RXQLVL_IRQHandler+0x14a>
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	440b      	add	r3, r1
 80061fc:	3344      	adds	r3, #68	; 0x44
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d074      	beq.n	80062ee <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	3344      	adds	r3, #68	; 0x44
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	b292      	uxth	r2, r2
 800621e:	4619      	mov	r1, r3
 8006220:	f007 f877 	bl	800d312 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	440b      	add	r3, r1
 8006232:	3344      	adds	r3, #68	; 0x44
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	18d1      	adds	r1, r2, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4403      	add	r3, r0
 8006248:	3344      	adds	r3, #68	; 0x44
 800624a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	440b      	add	r3, r1
 800625a:	334c      	adds	r3, #76	; 0x4c
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	18d1      	adds	r1, r2, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	4403      	add	r3, r0
 8006270:	334c      	adds	r3, #76	; 0x4c
 8006272:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	4b1d      	ldr	r3, [pc, #116]	; (80062f8 <HCD_RXQLVL_IRQHandler+0x154>)
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d031      	beq.n	80062ee <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	440b      	add	r3, r1
 80062ca:	3350      	adds	r3, #80	; 0x50
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f083 0301 	eor.w	r3, r3, #1
 80062d2:	b2d8      	uxtb	r0, r3
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	440b      	add	r3, r1
 80062e2:	3350      	adds	r3, #80	; 0x50
 80062e4:	4602      	mov	r2, r0
 80062e6:	701a      	strb	r2, [r3, #0]
      break;
 80062e8:	e001      	b.n	80062ee <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80062ee:	bf00      	nop
  }
}
 80062f0:	bf00      	nop
 80062f2:	3728      	adds	r7, #40	; 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	1ff80000 	.word	0x1ff80000

080062fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006328:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d113      	bne.n	800635c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10a      	bne.n	8006354 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800634c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f011 fef4 	bl	801813c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f043 0302 	orr.w	r3, r3, #2
 800635a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b08      	cmp	r3, #8
 8006364:	d147      	bne.n	80063f6 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f043 0308 	orr.w	r3, r3, #8
 800636c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b04      	cmp	r3, #4
 8006376:	d129      	bne.n	80063cc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d113      	bne.n	80063a8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800638a:	d106      	bne.n	800639a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2102      	movs	r1, #2
 8006392:	4618      	mov	r0, r3
 8006394:	f007 f8ec 	bl	800d570 <USB_InitFSLSPClkSel>
 8006398:	e011      	b.n	80063be <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2101      	movs	r1, #1
 80063a0:	4618      	mov	r0, r3
 80063a2:	f007 f8e5 	bl	800d570 <USB_InitFSLSPClkSel>
 80063a6:	e00a      	b.n	80063be <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b03      	cmp	r3, #3
 80063ae:	d106      	bne.n	80063be <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b6:	461a      	mov	r2, r3
 80063b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80063bc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f011 feea 	bl	8018198 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f011 feb9 	bl	801813c <HAL_HCD_Connect_Callback>
 80063ca:	e014      	b.n	80063f6 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f011 fef1 	bl	80181b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80063e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063e4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80063f4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d103      	bne.n	8006408 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f043 0320 	orr.w	r3, r3, #32
 8006406:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800640e:	461a      	mov	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6013      	str	r3, [r2, #0]
}
 8006414:	bf00      	nop
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e07f      	b.n	800652e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb ff1c 	bl	8002280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	; 0x24
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800646c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800647c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d107      	bne.n	8006496 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	e006      	b.n	80064a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d104      	bne.n	80064b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <HAL_I2C_Init+0x11c>)
 80064c2:	430b      	orrs	r3, r1
 80064c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	ea42 0103 	orr.w	r1, r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69d9      	ldr	r1, [r3, #28]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	02008000 	.word	0x02008000

0800653c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e021      	b.n	8006592 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2224      	movs	r2, #36	; 0x24
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fb ff02 	bl	8002370 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	817b      	strh	r3, [r7, #10]
 80065ae:	460b      	mov	r3, r1
 80065b0:	813b      	strh	r3, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b20      	cmp	r3, #32
 80065c0:	f040 80f9 	bne.w	80067b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_I2C_Mem_Write+0x34>
 80065ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0ed      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_I2C_Mem_Write+0x4e>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e0e6      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065f2:	f7fc fe33 	bl	800325c <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2319      	movs	r3, #25
 80065fe:	2201      	movs	r2, #1
 8006600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fad1 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0d1      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2221      	movs	r2, #33	; 0x21
 8006618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2240      	movs	r2, #64	; 0x40
 8006620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800663c:	88f8      	ldrh	r0, [r7, #6]
 800663e:	893a      	ldrh	r2, [r7, #8]
 8006640:	8979      	ldrh	r1, [r7, #10]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	4603      	mov	r3, r0
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f9e1 	bl	8006a14 <I2C_RequestMemoryWrite>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e0a9      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2bff      	cmp	r3, #255	; 0xff
 800666c:	d90e      	bls.n	800668c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	22ff      	movs	r2, #255	; 0xff
 8006672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006678:	b2da      	uxtb	r2, r3
 800667a:	8979      	ldrh	r1, [r7, #10]
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fbb3 	bl	8006df0 <I2C_TransferConfig>
 800668a:	e00f      	b.n	80066ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669a:	b2da      	uxtb	r2, r3
 800669c:	8979      	ldrh	r1, [r7, #10]
 800669e:	2300      	movs	r3, #0
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fba2 	bl	8006df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fabb 	bl	8006c2c <I2C_WaitOnTXISFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e07b      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d034      	beq.n	8006764 <HAL_I2C_Mem_Write+0x1c8>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d130      	bne.n	8006764 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fa4d 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e04d      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	2bff      	cmp	r3, #255	; 0xff
 8006724:	d90e      	bls.n	8006744 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006730:	b2da      	uxtb	r2, r3
 8006732:	8979      	ldrh	r1, [r7, #10]
 8006734:	2300      	movs	r3, #0
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fb57 	bl	8006df0 <I2C_TransferConfig>
 8006742:	e00f      	b.n	8006764 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	b2da      	uxtb	r2, r3
 8006754:	8979      	ldrh	r1, [r7, #10]
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fb46 	bl	8006df0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d19e      	bne.n	80066ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fa9a 	bl	8006cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e01a      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2220      	movs	r2, #32
 8006788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <HAL_I2C_Mem_Write+0x224>)
 8006796:	400b      	ands	r3, r1
 8006798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	fe00e800 	.word	0xfe00e800

080067c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	461a      	mov	r2, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	817b      	strh	r3, [r7, #10]
 80067d6:	460b      	mov	r3, r1
 80067d8:	813b      	strh	r3, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	f040 80fd 	bne.w	80069e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <HAL_I2C_Mem_Read+0x34>
 80067f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0f1      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800680a:	2b01      	cmp	r3, #1
 800680c:	d101      	bne.n	8006812 <HAL_I2C_Mem_Read+0x4e>
 800680e:	2302      	movs	r3, #2
 8006810:	e0ea      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800681a:	f7fc fd1f 	bl	800325c <HAL_GetTick>
 800681e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	2319      	movs	r3, #25
 8006826:	2201      	movs	r2, #1
 8006828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f9bd 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0d5      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2222      	movs	r2, #34	; 0x22
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2240      	movs	r2, #64	; 0x40
 8006848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800685c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006864:	88f8      	ldrh	r0, [r7, #6]
 8006866:	893a      	ldrh	r2, [r7, #8]
 8006868:	8979      	ldrh	r1, [r7, #10]
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	4603      	mov	r3, r0
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f921 	bl	8006abc <I2C_RequestMemoryRead>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0ad      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2bff      	cmp	r3, #255	; 0xff
 8006894:	d90e      	bls.n	80068b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	22ff      	movs	r2, #255	; 0xff
 800689a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	8979      	ldrh	r1, [r7, #10]
 80068a4:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <HAL_I2C_Mem_Read+0x22c>)
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fa9f 	bl	8006df0 <I2C_TransferConfig>
 80068b2:	e00f      	b.n	80068d4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	8979      	ldrh	r1, [r7, #10]
 80068c6:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <HAL_I2C_Mem_Read+0x22c>)
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fa8e 	bl	8006df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2200      	movs	r2, #0
 80068dc:	2104      	movs	r1, #4
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f964 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e07c      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d034      	beq.n	8006994 <HAL_I2C_Mem_Read+0x1d0>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d130      	bne.n	8006994 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	2200      	movs	r2, #0
 800693a:	2180      	movs	r1, #128	; 0x80
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f935 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e04d      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2bff      	cmp	r3, #255	; 0xff
 8006954:	d90e      	bls.n	8006974 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22ff      	movs	r2, #255	; 0xff
 800695a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006960:	b2da      	uxtb	r2, r3
 8006962:	8979      	ldrh	r1, [r7, #10]
 8006964:	2300      	movs	r3, #0
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fa3f 	bl	8006df0 <I2C_TransferConfig>
 8006972:	e00f      	b.n	8006994 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006982:	b2da      	uxtb	r2, r3
 8006984:	8979      	ldrh	r1, [r7, #10]
 8006986:	2300      	movs	r3, #0
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fa2e 	bl	8006df0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d19a      	bne.n	80068d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f982 	bl	8006cac <I2C_WaitOnSTOPFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e01a      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2220      	movs	r2, #32
 80069b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6859      	ldr	r1, [r3, #4]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <HAL_I2C_Mem_Read+0x230>)
 80069c6:	400b      	ands	r3, r1
 80069c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	80002400 	.word	0x80002400
 80069f4:	fe00e800 	.word	0xfe00e800

080069f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a06:	b2db      	uxtb	r3, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	817b      	strh	r3, [r7, #10]
 8006a26:	460b      	mov	r3, r1
 8006a28:	813b      	strh	r3, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	8979      	ldrh	r1, [r7, #10]
 8006a34:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <I2C_RequestMemoryWrite+0xa4>)
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f9d7 	bl	8006df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	69b9      	ldr	r1, [r7, #24]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 f8f0 	bl	8006c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e02c      	b.n	8006ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d105      	bne.n	8006a68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a5c:	893b      	ldrh	r3, [r7, #8]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	629a      	str	r2, [r3, #40]	; 0x28
 8006a66:	e015      	b.n	8006a94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a68:	893b      	ldrh	r3, [r7, #8]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	69b9      	ldr	r1, [r7, #24]
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f8d6 	bl	8006c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e012      	b.n	8006ab0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a8a:	893b      	ldrh	r3, [r7, #8]
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2180      	movs	r1, #128	; 0x80
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f884 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	80002000 	.word	0x80002000

08006abc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b086      	sub	sp, #24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	817b      	strh	r3, [r7, #10]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	813b      	strh	r3, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	8979      	ldrh	r1, [r7, #10]
 8006adc:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <I2C_RequestMemoryRead+0xa4>)
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f984 	bl	8006df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	69b9      	ldr	r1, [r7, #24]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f89d 	bl	8006c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e02c      	b.n	8006b56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d105      	bne.n	8006b0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b02:	893b      	ldrh	r3, [r7, #8]
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b0c:	e015      	b.n	8006b3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b0e:	893b      	ldrh	r3, [r7, #8]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b1c:	69fa      	ldr	r2, [r7, #28]
 8006b1e:	69b9      	ldr	r1, [r7, #24]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f883 	bl	8006c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e012      	b.n	8006b56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2140      	movs	r1, #64	; 0x40
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f831 	bl	8006bac <I2C_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	80002000 	.word	0x80002000

08006b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d103      	bne.n	8006b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d007      	beq.n	8006ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	619a      	str	r2, [r3, #24]
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bbc:	e022      	b.n	8006c04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d01e      	beq.n	8006c04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc6:	f7fc fb49 	bl	800325c <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d302      	bcc.n	8006bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d113      	bne.n	8006c04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be0:	f043 0220 	orr.w	r2, r3, #32
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e00f      	b.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d0cd      	beq.n	8006bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c38:	e02c      	b.n	8006c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f870 	bl	8006d24 <I2C_IsAcknowledgeFailed>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e02a      	b.n	8006ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d01e      	beq.n	8006c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c56:	f7fc fb01 	bl	800325c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d302      	bcc.n	8006c6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d113      	bne.n	8006c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c70:	f043 0220 	orr.w	r2, r3, #32
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e007      	b.n	8006ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d1cb      	bne.n	8006c3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cb8:	e028      	b.n	8006d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f830 	bl	8006d24 <I2C_IsAcknowledgeFailed>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e026      	b.n	8006d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cce:	f7fc fac5 	bl	800325c <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d302      	bcc.n	8006ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d113      	bne.n	8006d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e007      	b.n	8006d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d1cf      	bne.n	8006cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d151      	bne.n	8006de2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d3e:	e022      	b.n	8006d86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d01e      	beq.n	8006d86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d48:	f7fc fa88 	bl	800325c <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d302      	bcc.n	8006d5e <I2C_IsAcknowledgeFailed+0x3a>
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d113      	bne.n	8006d86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e02e      	b.n	8006de4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d1d5      	bne.n	8006d40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2210      	movs	r2, #16
 8006d9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2220      	movs	r2, #32
 8006da2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fedd 	bl	8006b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <I2C_IsAcknowledgeFailed+0xc8>)
 8006db6:	400b      	ands	r3, r1
 8006db8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f043 0204 	orr.w	r2, r3, #4
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	fe00e800 	.word	0xfe00e800

08006df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	817b      	strh	r3, [r7, #10]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	0d5b      	lsrs	r3, r3, #21
 8006e0c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <I2C_TransferConfig+0x58>)
 8006e12:	430b      	orrs	r3, r1
 8006e14:	43db      	mvns	r3, r3
 8006e16:	ea02 0103 	and.w	r1, r2, r3
 8006e1a:	897b      	ldrh	r3, [r7, #10]
 8006e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e20:	7a7b      	ldrb	r3, [r7, #9]
 8006e22:	041b      	lsls	r3, r3, #16
 8006e24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	431a      	orrs	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	03ff63ff 	.word	0x03ff63ff

08006e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d138      	bne.n	8006ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e032      	b.n	8006ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2224      	movs	r2, #36	; 0x24
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6819      	ldr	r1, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e000      	b.n	8006ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d139      	bne.n	8006f6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e033      	b.n	8006f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2224      	movs	r2, #36	; 0x24
 8006f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e000      	b.n	8006f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
  }
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0bf      	b.n	800710e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fb fa18 	bl	80023d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006fbe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6999      	ldr	r1, [r3, #24]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fd4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6899      	ldr	r1, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b4a      	ldr	r3, [pc, #296]	; (8007118 <HAL_LTDC_Init+0x19c>)
 8006ff0:	400b      	ands	r3, r1
 8006ff2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	041b      	lsls	r3, r3, #16
 8006ffa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6899      	ldr	r1, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68d9      	ldr	r1, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4b3e      	ldr	r3, [pc, #248]	; (8007118 <HAL_LTDC_Init+0x19c>)
 800701e:	400b      	ands	r3, r1
 8007020:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68d9      	ldr	r1, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6919      	ldr	r1, [r3, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b33      	ldr	r3, [pc, #204]	; (8007118 <HAL_LTDC_Init+0x19c>)
 800704c:	400b      	ands	r3, r1
 800704e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	041b      	lsls	r3, r3, #16
 8007056:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6919      	ldr	r1, [r3, #16]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6959      	ldr	r1, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4b27      	ldr	r3, [pc, #156]	; (8007118 <HAL_LTDC_Init+0x19c>)
 800707a:	400b      	ands	r3, r1
 800707c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6959      	ldr	r1, [r3, #20]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80070be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0206 	orr.w	r2, r2, #6
 80070ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	f000f800 	.word	0xf000f800

0800711c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d023      	beq.n	8007186 <HAL_LTDC_IRQHandler+0x6a>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01e      	beq.n	8007186 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0204 	bic.w	r2, r2, #4
 8007156:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2204      	movs	r2, #4
 800715e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007166:	f043 0201 	orr.w	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2204      	movs	r2, #4
 8007174:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f86f 	bl	8007264 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d023      	beq.n	80071d8 <HAL_LTDC_IRQHandler+0xbc>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01e      	beq.n	80071d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0202 	bic.w	r2, r2, #2
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2202      	movs	r2, #2
 80071b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071b8:	f043 0202 	orr.w	r2, r3, #2
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2204      	movs	r2, #4
 80071c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f846 	bl	8007264 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d01b      	beq.n	800721a <HAL_LTDC_IRQHandler+0xfe>
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d016      	beq.n	800721a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2201      	movs	r2, #1
 8007202:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f010 fe99 	bl	8017f4c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01b      	beq.n	800725c <HAL_LTDC_IRQHandler+0x140>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d016      	beq.n	800725c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0208 	bic.w	r2, r2, #8
 800723c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2208      	movs	r2, #8
 8007244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f80e 	bl	8007278 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800728c:	b5b0      	push	{r4, r5, r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_LTDC_ConfigLayer+0x1a>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e02c      	b.n	8007300 <HAL_LTDC_ConfigLayer+0x74>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2134      	movs	r1, #52	; 0x34
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f849 	bl	8007378 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2201      	movs	r2, #1
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bdb0      	pop	{r4, r5, r7, pc}

08007308 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_LTDC_ProgramLineEvent+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e023      	b.n	8007368 <HAL_LTDC_ProgramLineEvent+0x60>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8007340:	4a0c      	ldr	r2, [pc, #48]	; (8007374 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40016800 	.word	0x40016800

08007378 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007394:	4413      	add	r3, r2
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	01db      	lsls	r3, r3, #7
 80073a4:	4413      	add	r3, r2
 80073a6:	3384      	adds	r3, #132	; 0x84
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	4611      	mov	r1, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	01d2      	lsls	r2, r2, #7
 80073b4:	440a      	add	r2, r1
 80073b6:	3284      	adds	r2, #132	; 0x84
 80073b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80073bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	0c1b      	lsrs	r3, r3, #16
 80073ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ce:	4413      	add	r3, r2
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	01db      	lsls	r3, r3, #7
 80073dc:	440b      	add	r3, r1
 80073de:	3384      	adds	r3, #132	; 0x84
 80073e0:	4619      	mov	r1, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073f6:	4413      	add	r3, r2
 80073f8:	041b      	lsls	r3, r3, #16
 80073fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	01db      	lsls	r3, r3, #7
 8007406:	4413      	add	r3, r2
 8007408:	3384      	adds	r3, #132	; 0x84
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	4611      	mov	r1, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	01d2      	lsls	r2, r2, #7
 8007416:	440a      	add	r2, r1
 8007418:	3284      	adds	r2, #132	; 0x84
 800741a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800741e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800742e:	4413      	add	r3, r2
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	440b      	add	r3, r1
 800743e:	3384      	adds	r3, #132	; 0x84
 8007440:	4619      	mov	r1, r3
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4313      	orrs	r3, r2
 8007446:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	01db      	lsls	r3, r3, #7
 8007452:	4413      	add	r3, r2
 8007454:	3384      	adds	r3, #132	; 0x84
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	4611      	mov	r1, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	01d2      	lsls	r2, r2, #7
 8007462:	440a      	add	r2, r1
 8007464:	3284      	adds	r2, #132	; 0x84
 8007466:	f023 0307 	bic.w	r3, r3, #7
 800746a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	461a      	mov	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	01db      	lsls	r3, r3, #7
 8007476:	4413      	add	r3, r2
 8007478:	3384      	adds	r3, #132	; 0x84
 800747a:	461a      	mov	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007492:	041b      	lsls	r3, r3, #16
 8007494:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	061b      	lsls	r3, r3, #24
 800749c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	01db      	lsls	r3, r3, #7
 80074a8:	4413      	add	r3, r2
 80074aa:	3384      	adds	r3, #132	; 0x84
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	01db      	lsls	r3, r3, #7
 80074b8:	4413      	add	r3, r2
 80074ba:	3384      	adds	r3, #132	; 0x84
 80074bc:	461a      	mov	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074c8:	461a      	mov	r2, r3
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4619      	mov	r1, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	01db      	lsls	r3, r3, #7
 80074dc:	440b      	add	r3, r1
 80074de:	3384      	adds	r3, #132	; 0x84
 80074e0:	4619      	mov	r1, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	01db      	lsls	r3, r3, #7
 80074f2:	4413      	add	r3, r2
 80074f4:	3384      	adds	r3, #132	; 0x84
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	4611      	mov	r1, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	01d2      	lsls	r2, r2, #7
 8007502:	440a      	add	r2, r1
 8007504:	3284      	adds	r2, #132	; 0x84
 8007506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800750a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	01db      	lsls	r3, r3, #7
 8007516:	4413      	add	r3, r2
 8007518:	3384      	adds	r3, #132	; 0x84
 800751a:	461a      	mov	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	01db      	lsls	r3, r3, #7
 800752c:	4413      	add	r3, r2
 800752e:	3384      	adds	r3, #132	; 0x84
 8007530:	69da      	ldr	r2, [r3, #28]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4619      	mov	r1, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	01db      	lsls	r3, r3, #7
 800753c:	440b      	add	r3, r1
 800753e:	3384      	adds	r3, #132	; 0x84
 8007540:	4619      	mov	r1, r3
 8007542:	4b58      	ldr	r3, [pc, #352]	; (80076a4 <LTDC_SetConfig+0x32c>)
 8007544:	4013      	ands	r3, r2
 8007546:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	6a1b      	ldr	r3, [r3, #32]
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	6809      	ldr	r1, [r1, #0]
 8007554:	4608      	mov	r0, r1
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	01c9      	lsls	r1, r1, #7
 800755a:	4401      	add	r1, r0
 800755c:	3184      	adds	r1, #132	; 0x84
 800755e:	4313      	orrs	r3, r2
 8007560:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	4413      	add	r3, r2
 800756e:	3384      	adds	r3, #132	; 0x84
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	01db      	lsls	r3, r3, #7
 800757c:	4413      	add	r3, r2
 800757e:	3384      	adds	r3, #132	; 0x84
 8007580:	461a      	mov	r2, r3
 8007582:	2300      	movs	r3, #0
 8007584:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	01db      	lsls	r3, r3, #7
 8007590:	4413      	add	r3, r2
 8007592:	3384      	adds	r3, #132	; 0x84
 8007594:	461a      	mov	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80075a4:	2304      	movs	r3, #4
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	e01b      	b.n	80075e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d102      	bne.n	80075b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80075b2:	2303      	movs	r3, #3
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e014      	b.n	80075e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d00b      	beq.n	80075d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d007      	beq.n	80075d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d003      	beq.n	80075d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80075d4:	2b07      	cmp	r3, #7
 80075d6:	d102      	bne.n	80075de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80075d8:	2302      	movs	r3, #2
 80075da:	61fb      	str	r3, [r7, #28]
 80075dc:	e001      	b.n	80075e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80075de:	2301      	movs	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	4413      	add	r3, r2
 80075ee:	3384      	adds	r3, #132	; 0x84
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	4611      	mov	r1, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	01d2      	lsls	r2, r2, #7
 80075fc:	440a      	add	r2, r1
 80075fe:	3284      	adds	r2, #132	; 0x84
 8007600:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007604:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	041a      	lsls	r2, r3, #16
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6859      	ldr	r1, [r3, #4]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	1acb      	subs	r3, r1, r3
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	fb01 f303 	mul.w	r3, r1, r3
 8007622:	3303      	adds	r3, #3
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	6809      	ldr	r1, [r1, #0]
 8007628:	4608      	mov	r0, r1
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	01c9      	lsls	r1, r1, #7
 800762e:	4401      	add	r1, r0
 8007630:	3184      	adds	r1, #132	; 0x84
 8007632:	4313      	orrs	r3, r2
 8007634:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	01db      	lsls	r3, r3, #7
 8007640:	4413      	add	r3, r2
 8007642:	3384      	adds	r3, #132	; 0x84
 8007644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4619      	mov	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	01db      	lsls	r3, r3, #7
 8007650:	440b      	add	r3, r1
 8007652:	3384      	adds	r3, #132	; 0x84
 8007654:	4619      	mov	r1, r3
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <LTDC_SetConfig+0x330>)
 8007658:	4013      	ands	r3, r2
 800765a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	01db      	lsls	r3, r3, #7
 8007666:	4413      	add	r3, r2
 8007668:	3384      	adds	r3, #132	; 0x84
 800766a:	461a      	mov	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	01db      	lsls	r3, r3, #7
 800767c:	4413      	add	r3, r2
 800767e:	3384      	adds	r3, #132	; 0x84
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	4611      	mov	r1, r2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	01d2      	lsls	r2, r2, #7
 800768c:	440a      	add	r2, r1
 800768e:	3284      	adds	r2, #132	; 0x84
 8007690:	f043 0301 	orr.w	r3, r3, #1
 8007694:	6013      	str	r3, [r2, #0]
}
 8007696:	bf00      	nop
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	fffff8f8 	.word	0xfffff8f8
 80076a8:	fffff800 	.word	0xfffff800

080076ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a04      	ldr	r2, [pc, #16]	; (80076c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80076b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ba:	6013      	str	r3, [r2, #0]
}
 80076bc:	bf00      	nop
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40007000 	.word	0x40007000

080076cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80076d6:	4b23      	ldr	r3, [pc, #140]	; (8007764 <HAL_PWREx_EnableOverDrive+0x98>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	4a22      	ldr	r2, [pc, #136]	; (8007764 <HAL_PWREx_EnableOverDrive+0x98>)
 80076dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e0:	6413      	str	r3, [r2, #64]	; 0x40
 80076e2:	4b20      	ldr	r3, [pc, #128]	; (8007764 <HAL_PWREx_EnableOverDrive+0x98>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076ee:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1d      	ldr	r2, [pc, #116]	; (8007768 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076fa:	f7fb fdaf 	bl	800325c <HAL_GetTick>
 80076fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007700:	e009      	b.n	8007716 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007702:	f7fb fdab 	bl	800325c <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007710:	d901      	bls.n	8007716 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e022      	b.n	800775c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800771e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007722:	d1ee      	bne.n	8007702 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007724:	4b10      	ldr	r3, [pc, #64]	; (8007768 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a0f      	ldr	r2, [pc, #60]	; (8007768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800772a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007730:	f7fb fd94 	bl	800325c <HAL_GetTick>
 8007734:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007736:	e009      	b.n	800774c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007738:	f7fb fd90 	bl	800325c <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007746:	d901      	bls.n	800774c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e007      	b.n	800775c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <HAL_PWREx_EnableOverDrive+0x9c>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007758:	d1ee      	bne.n	8007738 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40023800 	.word	0x40023800
 8007768:	40007000 	.word	0x40007000

0800776c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af02      	add	r7, sp, #8
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007778:	f7fb fd70 	bl	800325c <HAL_GetTick>
 800777c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e073      	b.n	8007870 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_QSPI_Init+0x2c>
 8007794:	2302      	movs	r3, #2
 8007796:	e06b      	b.n	8007870 <HAL_QSPI_Init+0x104>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7fa fed7 	bl	8002568 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80077ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f85e 	bl	8007880 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	021a      	lsls	r2, r3, #8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	2120      	movs	r1, #32
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f856 	bl	800789c <QSPI_WaitFlagStateUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d135      	bne.n	8007866 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <HAL_QSPI_Init+0x10c>)
 8007802:	4013      	ands	r3, r2
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6852      	ldr	r2, [r2, #4]
 8007808:	0611      	lsls	r1, r2, #24
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	68d2      	ldr	r2, [r2, #12]
 800780e:	4311      	orrs	r1, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	69d2      	ldr	r2, [r2, #28]
 8007814:	4311      	orrs	r1, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6a12      	ldr	r2, [r2, #32]
 800781a:	4311      	orrs	r1, r2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	430b      	orrs	r3, r1
 8007822:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	4b14      	ldr	r3, [pc, #80]	; (800787c <HAL_QSPI_Init+0x110>)
 800782c:	4013      	ands	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6912      	ldr	r2, [r2, #16]
 8007832:	0411      	lsls	r1, r2, #16
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6952      	ldr	r2, [r2, #20]
 8007838:	4311      	orrs	r1, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6992      	ldr	r2, [r2, #24]
 800783e:	4311      	orrs	r1, r2
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	430b      	orrs	r3, r1
 8007846:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	00ffff2f 	.word	0x00ffff2f
 800787c:	ffe0f8fe 	.word	0xffe0f8fe

08007880 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80078ac:	e01a      	b.n	80078e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d016      	beq.n	80078e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80078bc:	f7fb fcce 	bl	800325c <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d20b      	bcs.n	80078e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2204      	movs	r2, #4
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	f043 0201 	orr.w	r2, r3, #1
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e00e      	b.n	8007902 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	79fb      	ldrb	r3, [r7, #7]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d1d6      	bne.n	80078ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e25c      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8087 	beq.w	8007a3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007930:	4b96      	ldr	r3, [pc, #600]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 030c 	and.w	r3, r3, #12
 8007938:	2b04      	cmp	r3, #4
 800793a:	d00c      	beq.n	8007956 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800793c:	4b93      	ldr	r3, [pc, #588]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 030c 	and.w	r3, r3, #12
 8007944:	2b08      	cmp	r3, #8
 8007946:	d112      	bne.n	800796e <HAL_RCC_OscConfig+0x62>
 8007948:	4b90      	ldr	r3, [pc, #576]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007954:	d10b      	bne.n	800796e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007956:	4b8d      	ldr	r3, [pc, #564]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d06c      	beq.n	8007a3c <HAL_RCC_OscConfig+0x130>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d168      	bne.n	8007a3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e236      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007976:	d106      	bne.n	8007986 <HAL_RCC_OscConfig+0x7a>
 8007978:	4b84      	ldr	r3, [pc, #528]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a83      	ldr	r2, [pc, #524]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 800797e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e02e      	b.n	80079e4 <HAL_RCC_OscConfig+0xd8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10c      	bne.n	80079a8 <HAL_RCC_OscConfig+0x9c>
 800798e:	4b7f      	ldr	r3, [pc, #508]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a7e      	ldr	r2, [pc, #504]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	4b7c      	ldr	r3, [pc, #496]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a7b      	ldr	r2, [pc, #492]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	e01d      	b.n	80079e4 <HAL_RCC_OscConfig+0xd8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079b0:	d10c      	bne.n	80079cc <HAL_RCC_OscConfig+0xc0>
 80079b2:	4b76      	ldr	r3, [pc, #472]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a75      	ldr	r2, [pc, #468]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	4b73      	ldr	r3, [pc, #460]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a72      	ldr	r2, [pc, #456]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e00b      	b.n	80079e4 <HAL_RCC_OscConfig+0xd8>
 80079cc:	4b6f      	ldr	r3, [pc, #444]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a6e      	ldr	r2, [pc, #440]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	4b6c      	ldr	r3, [pc, #432]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a6b      	ldr	r2, [pc, #428]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 80079de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d013      	beq.n	8007a14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ec:	f7fb fc36 	bl	800325c <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079f4:	f7fb fc32 	bl	800325c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b64      	cmp	r3, #100	; 0x64
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e1ea      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a06:	4b61      	ldr	r3, [pc, #388]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0f0      	beq.n	80079f4 <HAL_RCC_OscConfig+0xe8>
 8007a12:	e014      	b.n	8007a3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a14:	f7fb fc22 	bl	800325c <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a1c:	f7fb fc1e 	bl	800325c <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b64      	cmp	r3, #100	; 0x64
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e1d6      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a2e:	4b57      	ldr	r3, [pc, #348]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f0      	bne.n	8007a1c <HAL_RCC_OscConfig+0x110>
 8007a3a:	e000      	b.n	8007a3e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d069      	beq.n	8007b1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a4a:	4b50      	ldr	r3, [pc, #320]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f003 030c 	and.w	r3, r3, #12
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a56:	4b4d      	ldr	r3, [pc, #308]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 030c 	and.w	r3, r3, #12
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d11c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x190>
 8007a62:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d116      	bne.n	8007a9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a6e:	4b47      	ldr	r3, [pc, #284]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <HAL_RCC_OscConfig+0x17a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d001      	beq.n	8007a86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e1aa      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a86:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	493d      	ldr	r1, [pc, #244]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9a:	e040      	b.n	8007b1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d023      	beq.n	8007aec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aa4:	4b39      	ldr	r3, [pc, #228]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a38      	ldr	r2, [pc, #224]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7fb fbd4 	bl	800325c <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ab8:	f7fb fbd0 	bl	800325c <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e188      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aca:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f0      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad6:	4b2d      	ldr	r3, [pc, #180]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	4929      	ldr	r1, [pc, #164]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	600b      	str	r3, [r1, #0]
 8007aea:	e018      	b.n	8007b1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aec:	4b27      	ldr	r3, [pc, #156]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007af2:	f023 0301 	bic.w	r3, r3, #1
 8007af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af8:	f7fb fbb0 	bl	800325c <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b00:	f7fb fbac 	bl	800325c <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e164      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b12:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d038      	beq.n	8007b9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d019      	beq.n	8007b66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b36:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007b38:	f043 0301 	orr.w	r3, r3, #1
 8007b3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b3e:	f7fb fb8d 	bl	800325c <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b46:	f7fb fb89 	bl	800325c <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e141      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x23a>
 8007b64:	e01a      	b.n	8007b9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6a:	4a08      	ldr	r2, [pc, #32]	; (8007b8c <HAL_RCC_OscConfig+0x280>)
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b72:	f7fb fb73 	bl	800325c <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b78:	e00a      	b.n	8007b90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b7a:	f7fb fb6f 	bl	800325c <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d903      	bls.n	8007b90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e127      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
 8007b8c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b90:	4b94      	ldr	r3, [pc, #592]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1ee      	bne.n	8007b7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f000 80a4 	beq.w	8007cf2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007baa:	4b8e      	ldr	r3, [pc, #568]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10d      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb6:	4b8b      	ldr	r3, [pc, #556]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	4a8a      	ldr	r2, [pc, #552]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8007bc2:	4b88      	ldr	r3, [pc, #544]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bd2:	4b85      	ldr	r3, [pc, #532]	; (8007de8 <HAL_RCC_OscConfig+0x4dc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d118      	bne.n	8007c10 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bde:	4b82      	ldr	r3, [pc, #520]	; (8007de8 <HAL_RCC_OscConfig+0x4dc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a81      	ldr	r2, [pc, #516]	; (8007de8 <HAL_RCC_OscConfig+0x4dc>)
 8007be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bea:	f7fb fb37 	bl	800325c <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bf2:	f7fb fb33 	bl	800325c <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b64      	cmp	r3, #100	; 0x64
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e0eb      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c04:	4b78      	ldr	r3, [pc, #480]	; (8007de8 <HAL_RCC_OscConfig+0x4dc>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0f0      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d106      	bne.n	8007c26 <HAL_RCC_OscConfig+0x31a>
 8007c18:	4b72      	ldr	r3, [pc, #456]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1c:	4a71      	ldr	r2, [pc, #452]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c1e:	f043 0301 	orr.w	r3, r3, #1
 8007c22:	6713      	str	r3, [r2, #112]	; 0x70
 8007c24:	e02d      	b.n	8007c82 <HAL_RCC_OscConfig+0x376>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0x33c>
 8007c2e:	4b6d      	ldr	r3, [pc, #436]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	4a6c      	ldr	r2, [pc, #432]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c34:	f023 0301 	bic.w	r3, r3, #1
 8007c38:	6713      	str	r3, [r2, #112]	; 0x70
 8007c3a:	4b6a      	ldr	r3, [pc, #424]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	4a69      	ldr	r2, [pc, #420]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c40:	f023 0304 	bic.w	r3, r3, #4
 8007c44:	6713      	str	r3, [r2, #112]	; 0x70
 8007c46:	e01c      	b.n	8007c82 <HAL_RCC_OscConfig+0x376>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d10c      	bne.n	8007c6a <HAL_RCC_OscConfig+0x35e>
 8007c50:	4b64      	ldr	r3, [pc, #400]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c54:	4a63      	ldr	r2, [pc, #396]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c56:	f043 0304 	orr.w	r3, r3, #4
 8007c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c5c:	4b61      	ldr	r3, [pc, #388]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	4a60      	ldr	r2, [pc, #384]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	6713      	str	r3, [r2, #112]	; 0x70
 8007c68:	e00b      	b.n	8007c82 <HAL_RCC_OscConfig+0x376>
 8007c6a:	4b5e      	ldr	r3, [pc, #376]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6e:	4a5d      	ldr	r2, [pc, #372]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c70:	f023 0301 	bic.w	r3, r3, #1
 8007c74:	6713      	str	r3, [r2, #112]	; 0x70
 8007c76:	4b5b      	ldr	r3, [pc, #364]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7a:	4a5a      	ldr	r2, [pc, #360]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007c7c:	f023 0304 	bic.w	r3, r3, #4
 8007c80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d015      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8a:	f7fb fae7 	bl	800325c <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c90:	e00a      	b.n	8007ca8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c92:	f7fb fae3 	bl	800325c <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e099      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ca8:	4b4e      	ldr	r3, [pc, #312]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0ee      	beq.n	8007c92 <HAL_RCC_OscConfig+0x386>
 8007cb4:	e014      	b.n	8007ce0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb6:	f7fb fad1 	bl	800325c <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cbe:	f7fb facd 	bl	800325c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e083      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cd4:	4b43      	ldr	r3, [pc, #268]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1ee      	bne.n	8007cbe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d105      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ce6:	4b3f      	ldr	r3, [pc, #252]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	4a3e      	ldr	r2, [pc, #248]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d06f      	beq.n	8007dda <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cfa:	4b3a      	ldr	r3, [pc, #232]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 030c 	and.w	r3, r3, #12
 8007d02:	2b08      	cmp	r3, #8
 8007d04:	d067      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d149      	bne.n	8007da2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d0e:	4b35      	ldr	r3, [pc, #212]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a34      	ldr	r2, [pc, #208]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1a:	f7fb fa9f 	bl	800325c <HAL_GetTick>
 8007d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d20:	e008      	b.n	8007d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d22:	f7fb fa9b 	bl	800325c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e053      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d34:	4b2b      	ldr	r3, [pc, #172]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1f0      	bne.n	8007d22 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	69da      	ldr	r2, [r3, #28]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	019b      	lsls	r3, r3, #6
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	041b      	lsls	r3, r3, #16
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	061b      	lsls	r3, r3, #24
 8007d64:	4313      	orrs	r3, r2
 8007d66:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d6c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d6e:	4b1d      	ldr	r3, [pc, #116]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1c      	ldr	r2, [pc, #112]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7a:	f7fb fa6f 	bl	800325c <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d82:	f7fb fa6b 	bl	800325c <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e023      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d94:	4b13      	ldr	r3, [pc, #76]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0f0      	beq.n	8007d82 <HAL_RCC_OscConfig+0x476>
 8007da0:	e01b      	b.n	8007dda <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da2:	4b10      	ldr	r3, [pc, #64]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a0f      	ldr	r2, [pc, #60]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dae:	f7fb fa55 	bl	800325c <HAL_GetTick>
 8007db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007db6:	f7fb fa51 	bl	800325c <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e009      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dc8:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <HAL_RCC_OscConfig+0x4d8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f0      	bne.n	8007db6 <HAL_RCC_OscConfig+0x4aa>
 8007dd4:	e001      	b.n	8007dda <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40023800 	.word	0x40023800
 8007de8:	40007000 	.word	0x40007000

08007dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0ce      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e04:	4b69      	ldr	r3, [pc, #420]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d910      	bls.n	8007e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e12:	4b66      	ldr	r3, [pc, #408]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f023 020f 	bic.w	r2, r3, #15
 8007e1a:	4964      	ldr	r1, [pc, #400]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e22:	4b62      	ldr	r3, [pc, #392]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d001      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e0b6      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d020      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e4c:	4b58      	ldr	r3, [pc, #352]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	4a57      	ldr	r2, [pc, #348]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e64:	4b52      	ldr	r3, [pc, #328]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	4a51      	ldr	r2, [pc, #324]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e70:	4b4f      	ldr	r3, [pc, #316]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	494c      	ldr	r1, [pc, #304]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d040      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d107      	bne.n	8007ea6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e96:	4b46      	ldr	r3, [pc, #280]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d115      	bne.n	8007ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e07d      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d107      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eae:	4b40      	ldr	r3, [pc, #256]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e071      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ebe:	4b3c      	ldr	r3, [pc, #240]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d101      	bne.n	8007ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e069      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ece:	4b38      	ldr	r3, [pc, #224]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f023 0203 	bic.w	r2, r3, #3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4935      	ldr	r1, [pc, #212]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ee0:	f7fb f9bc 	bl	800325c <HAL_GetTick>
 8007ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ee6:	e00a      	b.n	8007efe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ee8:	f7fb f9b8 	bl	800325c <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e051      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007efe:	4b2c      	ldr	r3, [pc, #176]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 020c 	and.w	r2, r3, #12
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d1eb      	bne.n	8007ee8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f10:	4b26      	ldr	r3, [pc, #152]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d210      	bcs.n	8007f40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f1e:	4b23      	ldr	r3, [pc, #140]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f023 020f 	bic.w	r2, r3, #15
 8007f26:	4921      	ldr	r1, [pc, #132]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f2e:	4b1f      	ldr	r3, [pc, #124]	; (8007fac <HAL_RCC_ClockConfig+0x1c0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 030f 	and.w	r3, r3, #15
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d001      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e030      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f4c:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4915      	ldr	r1, [pc, #84]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f6a:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	490d      	ldr	r1, [pc, #52]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f7e:	f000 f81d 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 8007f82:	4601      	mov	r1, r0
 8007f84:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	091b      	lsrs	r3, r3, #4
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8007f90:	5cd3      	ldrb	r3, [r2, r3]
 8007f92:	fa21 f303 	lsr.w	r3, r1, r3
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8007f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	f7fa ff88 	bl	8002eb0 <HAL_InitTick>

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40023c00 	.word	0x40023c00
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	080269e8 	.word	0x080269e8
 8007fb8:	2000002c 	.word	0x2000002c

08007fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd2:	4b50      	ldr	r3, [pc, #320]	; (8008114 <HAL_RCC_GetSysClockFreq+0x158>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d007      	beq.n	8007fee <HAL_RCC_GetSysClockFreq+0x32>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d008      	beq.n	8007ff4 <HAL_RCC_GetSysClockFreq+0x38>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f040 808d 	bne.w	8008102 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fe8:	4b4b      	ldr	r3, [pc, #300]	; (8008118 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007fea:	60bb      	str	r3, [r7, #8]
       break;
 8007fec:	e08c      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fee:	4b4b      	ldr	r3, [pc, #300]	; (800811c <HAL_RCC_GetSysClockFreq+0x160>)
 8007ff0:	60bb      	str	r3, [r7, #8]
      break;
 8007ff2:	e089      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ff4:	4b47      	ldr	r3, [pc, #284]	; (8008114 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ffc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007ffe:	4b45      	ldr	r3, [pc, #276]	; (8008114 <HAL_RCC_GetSysClockFreq+0x158>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d023      	beq.n	8008052 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800800a:	4b42      	ldr	r3, [pc, #264]	; (8008114 <HAL_RCC_GetSysClockFreq+0x158>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	099b      	lsrs	r3, r3, #6
 8008010:	f04f 0400 	mov.w	r4, #0
 8008014:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	ea03 0501 	and.w	r5, r3, r1
 8008020:	ea04 0602 	and.w	r6, r4, r2
 8008024:	4a3d      	ldr	r2, [pc, #244]	; (800811c <HAL_RCC_GetSysClockFreq+0x160>)
 8008026:	fb02 f106 	mul.w	r1, r2, r6
 800802a:	2200      	movs	r2, #0
 800802c:	fb02 f205 	mul.w	r2, r2, r5
 8008030:	440a      	add	r2, r1
 8008032:	493a      	ldr	r1, [pc, #232]	; (800811c <HAL_RCC_GetSysClockFreq+0x160>)
 8008034:	fba5 0101 	umull	r0, r1, r5, r1
 8008038:	1853      	adds	r3, r2, r1
 800803a:	4619      	mov	r1, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f04f 0400 	mov.w	r4, #0
 8008042:	461a      	mov	r2, r3
 8008044:	4623      	mov	r3, r4
 8008046:	f7f8 f933 	bl	80002b0 <__aeabi_uldivmod>
 800804a:	4603      	mov	r3, r0
 800804c:	460c      	mov	r4, r1
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e049      	b.n	80080e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008052:	4b30      	ldr	r3, [pc, #192]	; (8008114 <HAL_RCC_GetSysClockFreq+0x158>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	099b      	lsrs	r3, r3, #6
 8008058:	f04f 0400 	mov.w	r4, #0
 800805c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	ea03 0501 	and.w	r5, r3, r1
 8008068:	ea04 0602 	and.w	r6, r4, r2
 800806c:	4629      	mov	r1, r5
 800806e:	4632      	mov	r2, r6
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	f04f 0400 	mov.w	r4, #0
 8008078:	0154      	lsls	r4, r2, #5
 800807a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800807e:	014b      	lsls	r3, r1, #5
 8008080:	4619      	mov	r1, r3
 8008082:	4622      	mov	r2, r4
 8008084:	1b49      	subs	r1, r1, r5
 8008086:	eb62 0206 	sbc.w	r2, r2, r6
 800808a:	f04f 0300 	mov.w	r3, #0
 800808e:	f04f 0400 	mov.w	r4, #0
 8008092:	0194      	lsls	r4, r2, #6
 8008094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008098:	018b      	lsls	r3, r1, #6
 800809a:	1a5b      	subs	r3, r3, r1
 800809c:	eb64 0402 	sbc.w	r4, r4, r2
 80080a0:	f04f 0100 	mov.w	r1, #0
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	00e2      	lsls	r2, r4, #3
 80080aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80080ae:	00d9      	lsls	r1, r3, #3
 80080b0:	460b      	mov	r3, r1
 80080b2:	4614      	mov	r4, r2
 80080b4:	195b      	adds	r3, r3, r5
 80080b6:	eb44 0406 	adc.w	r4, r4, r6
 80080ba:	f04f 0100 	mov.w	r1, #0
 80080be:	f04f 0200 	mov.w	r2, #0
 80080c2:	02a2      	lsls	r2, r4, #10
 80080c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80080c8:	0299      	lsls	r1, r3, #10
 80080ca:	460b      	mov	r3, r1
 80080cc:	4614      	mov	r4, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	4621      	mov	r1, r4
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f04f 0400 	mov.w	r4, #0
 80080d8:	461a      	mov	r2, r3
 80080da:	4623      	mov	r3, r4
 80080dc:	f7f8 f8e8 	bl	80002b0 <__aeabi_uldivmod>
 80080e0:	4603      	mov	r3, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <HAL_RCC_GetSysClockFreq+0x158>)
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	3301      	adds	r3, #1
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	60bb      	str	r3, [r7, #8]
      break;
 8008100:	e002      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008104:	60bb      	str	r3, [r7, #8]
      break;
 8008106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008108:	68bb      	ldr	r3, [r7, #8]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008112:	bf00      	nop
 8008114:	40023800 	.word	0x40023800
 8008118:	00f42400 	.word	0x00f42400
 800811c:	017d7840 	.word	0x017d7840

08008120 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008124:	4b03      	ldr	r3, [pc, #12]	; (8008134 <HAL_RCC_GetHCLKFreq+0x14>)
 8008126:	681b      	ldr	r3, [r3, #0]
}
 8008128:	4618      	mov	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000002c 	.word	0x2000002c

08008138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800813c:	f7ff fff0 	bl	8008120 <HAL_RCC_GetHCLKFreq>
 8008140:	4601      	mov	r1, r0
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	0a9b      	lsrs	r3, r3, #10
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	4a03      	ldr	r2, [pc, #12]	; (800815c <HAL_RCC_GetPCLK1Freq+0x24>)
 800814e:	5cd3      	ldrb	r3, [r2, r3]
 8008150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	40023800 	.word	0x40023800
 800815c:	080269f8 	.word	0x080269f8

08008160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008164:	f7ff ffdc 	bl	8008120 <HAL_RCC_GetHCLKFreq>
 8008168:	4601      	mov	r1, r0
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	0b5b      	lsrs	r3, r3, #13
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	4a03      	ldr	r2, [pc, #12]	; (8008184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008176:	5cd3      	ldrb	r3, [r2, r3]
 8008178:	fa21 f303 	lsr.w	r3, r1, r3
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40023800 	.word	0x40023800
 8008184:	080269f8 	.word	0x080269f8

08008188 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	220f      	movs	r2, #15
 8008196:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008198:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <HAL_RCC_GetClockConfig+0x5c>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0203 	and.w	r2, r3, #3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081a4:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <HAL_RCC_GetClockConfig+0x5c>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <HAL_RCC_GetClockConfig+0x5c>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80081bc:	4b09      	ldr	r3, [pc, #36]	; (80081e4 <HAL_RCC_GetClockConfig+0x5c>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	08db      	lsrs	r3, r3, #3
 80081c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081ca:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <HAL_RCC_GetClockConfig+0x60>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 020f 	and.w	r2, r3, #15
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	601a      	str	r2, [r3, #0]
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40023800 	.word	0x40023800
 80081e8:	40023c00 	.word	0x40023c00

080081ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d012      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008214:	4b69      	ldr	r3, [pc, #420]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	4a68      	ldr	r2, [pc, #416]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800821a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800821e:	6093      	str	r3, [r2, #8]
 8008220:	4b66      	ldr	r3, [pc, #408]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	4964      	ldr	r1, [pc, #400]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822a:	4313      	orrs	r3, r2
 800822c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008236:	2301      	movs	r3, #1
 8008238:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d017      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008246:	4b5d      	ldr	r3, [pc, #372]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800824c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008254:	4959      	ldr	r1, [pc, #356]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008264:	d101      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008272:	2301      	movs	r3, #1
 8008274:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d017      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008282:	4b4e      	ldr	r3, [pc, #312]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008290:	494a      	ldr	r1, [pc, #296]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a0:	d101      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80082be:	2301      	movs	r3, #1
 80082c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 808b 	beq.w	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80082d0:	4b3a      	ldr	r3, [pc, #232]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d4:	4a39      	ldr	r2, [pc, #228]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082da:	6413      	str	r3, [r2, #64]	; 0x40
 80082dc:	4b37      	ldr	r3, [pc, #220]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082e4:	60bb      	str	r3, [r7, #8]
 80082e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082e8:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a34      	ldr	r2, [pc, #208]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082f4:	f7fa ffb2 	bl	800325c <HAL_GetTick>
 80082f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082fa:	e008      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082fc:	f7fa ffae 	bl	800325c <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b64      	cmp	r3, #100	; 0x64
 8008308:	d901      	bls.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e355      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800830e:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0f0      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800831a:	4b28      	ldr	r3, [pc, #160]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008322:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d035      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	429a      	cmp	r2, r3
 8008336:	d02e      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008338:	4b20      	ldr	r3, [pc, #128]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008340:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008342:	4b1e      	ldr	r3, [pc, #120]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008346:	4a1d      	ldr	r2, [pc, #116]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800834c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800834e:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	4a1a      	ldr	r2, [pc, #104]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008358:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800835a:	4a18      	ldr	r2, [pc, #96]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008360:	4b16      	ldr	r3, [pc, #88]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b01      	cmp	r3, #1
 800836a:	d114      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fa ff76 	bl	800325c <HAL_GetTick>
 8008370:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008372:	e00a      	b.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008374:	f7fa ff72 	bl	800325c <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008382:	4293      	cmp	r3, r2
 8008384:	d901      	bls.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e317      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800838c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ee      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800839e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083a2:	d111      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80083b0:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80083b2:	400b      	ands	r3, r1
 80083b4:	4901      	ldr	r1, [pc, #4]	; (80083bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	608b      	str	r3, [r1, #8]
 80083ba:	e00b      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80083bc:	40023800 	.word	0x40023800
 80083c0:	40007000 	.word	0x40007000
 80083c4:	0ffffcff 	.word	0x0ffffcff
 80083c8:	4bb0      	ldr	r3, [pc, #704]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	4aaf      	ldr	r2, [pc, #700]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80083d2:	6093      	str	r3, [r2, #8]
 80083d4:	4bad      	ldr	r3, [pc, #692]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083e0:	49aa      	ldr	r1, [pc, #680]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0310 	and.w	r3, r3, #16
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d010      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80083f2:	4ba6      	ldr	r3, [pc, #664]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	4aa4      	ldr	r2, [pc, #656]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008402:	4ba2      	ldr	r3, [pc, #648]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008404:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	499f      	ldr	r1, [pc, #636]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008420:	4b9a      	ldr	r3, [pc, #616]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008426:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842e:	4997      	ldr	r1, [pc, #604]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008430:	4313      	orrs	r3, r2
 8008432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008442:	4b92      	ldr	r3, [pc, #584]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008450:	498e      	ldr	r1, [pc, #568]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008452:	4313      	orrs	r3, r2
 8008454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008464:	4b89      	ldr	r3, [pc, #548]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008472:	4986      	ldr	r1, [pc, #536]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008474:	4313      	orrs	r3, r2
 8008476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008486:	4b81      	ldr	r3, [pc, #516]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008494:	497d      	ldr	r1, [pc, #500]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084a8:	4b78      	ldr	r3, [pc, #480]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ae:	f023 0203 	bic.w	r2, r3, #3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	4975      	ldr	r1, [pc, #468]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084ca:	4b70      	ldr	r3, [pc, #448]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d0:	f023 020c 	bic.w	r2, r3, #12
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d8:	496c      	ldr	r1, [pc, #432]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084ec:	4b67      	ldr	r3, [pc, #412]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fa:	4964      	ldr	r1, [pc, #400]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800850e:	4b5f      	ldr	r3, [pc, #380]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008514:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851c:	495b      	ldr	r1, [pc, #364]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800851e:	4313      	orrs	r3, r2
 8008520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00a      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008530:	4b56      	ldr	r3, [pc, #344]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	4953      	ldr	r1, [pc, #332]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008540:	4313      	orrs	r3, r2
 8008542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008552:	4b4e      	ldr	r3, [pc, #312]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008558:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008560:	494a      	ldr	r1, [pc, #296]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008574:	4b45      	ldr	r3, [pc, #276]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	4942      	ldr	r1, [pc, #264]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008596:	4b3d      	ldr	r3, [pc, #244]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a4:	4939      	ldr	r1, [pc, #228]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085b8:	4b34      	ldr	r3, [pc, #208]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085c6:	4931      	ldr	r1, [pc, #196]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d011      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80085da:	4b2c      	ldr	r3, [pc, #176]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e8:	4928      	ldr	r1, [pc, #160]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f8:	d101      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800861a:	4b1c      	ldr	r3, [pc, #112]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800861c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008620:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008628:	4918      	ldr	r1, [pc, #96]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800863c:	4b13      	ldr	r3, [pc, #76]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008642:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864c:	490f      	ldr	r1, [pc, #60]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800864e:	4313      	orrs	r3, r2
 8008650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d005      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008662:	f040 80d8 	bne.w	8008816 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a08      	ldr	r2, [pc, #32]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800866c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008672:	f7fa fdf3 	bl	800325c <HAL_GetTick>
 8008676:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008678:	e00a      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800867a:	f7fa fdef 	bl	800325c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b64      	cmp	r3, #100	; 0x64
 8008686:	d903      	bls.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e196      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800868c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008690:	4b6c      	ldr	r3, [pc, #432]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ee      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d021      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d11d      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086b0:	4b64      	ldr	r3, [pc, #400]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b6:	0c1b      	lsrs	r3, r3, #16
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80086be:	4b61      	ldr	r3, [pc, #388]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086c4:	0e1b      	lsrs	r3, r3, #24
 80086c6:	f003 030f 	and.w	r3, r3, #15
 80086ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	019a      	lsls	r2, r3, #6
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	431a      	orrs	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	061b      	lsls	r3, r3, #24
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	071b      	lsls	r3, r3, #28
 80086e4:	4957      	ldr	r1, [pc, #348]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008700:	d00a      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800870a:	2b00      	cmp	r3, #0
 800870c:	d02e      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008716:	d129      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008718:	4b4a      	ldr	r3, [pc, #296]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800871a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800871e:	0c1b      	lsrs	r3, r3, #16
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008726:	4b47      	ldr	r3, [pc, #284]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872c:	0f1b      	lsrs	r3, r3, #28
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	019a      	lsls	r2, r3, #6
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	041b      	lsls	r3, r3, #16
 800873e:	431a      	orrs	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	061b      	lsls	r3, r3, #24
 8008746:	431a      	orrs	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	071b      	lsls	r3, r3, #28
 800874c:	493d      	ldr	r1, [pc, #244]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800874e:	4313      	orrs	r3, r2
 8008750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008754:	4b3b      	ldr	r3, [pc, #236]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800875a:	f023 021f 	bic.w	r2, r3, #31
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	3b01      	subs	r3, #1
 8008764:	4937      	ldr	r1, [pc, #220]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01d      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008778:	4b32      	ldr	r3, [pc, #200]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800877a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877e:	0e1b      	lsrs	r3, r3, #24
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008786:	4b2f      	ldr	r3, [pc, #188]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878c:	0f1b      	lsrs	r3, r3, #28
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	019a      	lsls	r2, r3, #6
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	041b      	lsls	r3, r3, #16
 80087a0:	431a      	orrs	r2, r3
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	061b      	lsls	r3, r3, #24
 80087a6:	431a      	orrs	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	071b      	lsls	r3, r3, #28
 80087ac:	4925      	ldr	r1, [pc, #148]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d011      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	019a      	lsls	r2, r3, #6
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	061b      	lsls	r3, r3, #24
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	071b      	lsls	r3, r3, #28
 80087dc:	4919      	ldr	r1, [pc, #100]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80087e4:	4b17      	ldr	r3, [pc, #92]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a16      	ldr	r2, [pc, #88]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087f0:	f7fa fd34 	bl	800325c <HAL_GetTick>
 80087f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087f8:	f7fa fd30 	bl	800325c <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b64      	cmp	r3, #100	; 0x64
 8008804:	d901      	bls.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e0d7      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800880a:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	2b01      	cmp	r3, #1
 800881a:	f040 80cd 	bne.w	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a08      	ldr	r2, [pc, #32]	; (8008844 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882a:	f7fa fd17 	bl	800325c <HAL_GetTick>
 800882e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008830:	e00a      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008832:	f7fa fd13 	bl	800325c <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b64      	cmp	r3, #100	; 0x64
 800883e:	d903      	bls.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e0ba      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008844:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008848:	4b5e      	ldr	r3, [pc, #376]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008854:	d0ed      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008872:	2b00      	cmp	r3, #0
 8008874:	d02e      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d12a      	bne.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800887e:	4b51      	ldr	r3, [pc, #324]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	f003 0303 	and.w	r3, r3, #3
 800888a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800888c:	4b4d      	ldr	r3, [pc, #308]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800888e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008892:	0f1b      	lsrs	r3, r3, #28
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	019a      	lsls	r2, r3, #6
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	061b      	lsls	r3, r3, #24
 80088ac:	431a      	orrs	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	071b      	lsls	r3, r3, #28
 80088b2:	4944      	ldr	r1, [pc, #272]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80088ba:	4b42      	ldr	r3, [pc, #264]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	3b01      	subs	r3, #1
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	493d      	ldr	r1, [pc, #244]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d022      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088e8:	d11d      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088ea:	4b36      	ldr	r3, [pc, #216]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	0e1b      	lsrs	r3, r3, #24
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088f8:	4b32      	ldr	r3, [pc, #200]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	f003 0307 	and.w	r3, r3, #7
 8008904:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	019a      	lsls	r2, r3, #6
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	431a      	orrs	r2, r3
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	061b      	lsls	r3, r3, #24
 8008918:	431a      	orrs	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	071b      	lsls	r3, r3, #28
 800891e:	4929      	ldr	r1, [pc, #164]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008920:	4313      	orrs	r3, r2
 8008922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0308 	and.w	r3, r3, #8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d028      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008938:	0e1b      	lsrs	r3, r3, #24
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008940:	4b20      	ldr	r3, [pc, #128]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008946:	0c1b      	lsrs	r3, r3, #16
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	019a      	lsls	r2, r3, #6
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	041b      	lsls	r3, r3, #16
 8008958:	431a      	orrs	r2, r3
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	061b      	lsls	r3, r3, #24
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	071b      	lsls	r3, r3, #28
 8008966:	4917      	ldr	r1, [pc, #92]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008968:	4313      	orrs	r3, r2
 800896a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800896e:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4911      	ldr	r1, [pc, #68]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800897e:	4313      	orrs	r3, r2
 8008980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a0e      	ldr	r2, [pc, #56]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800898a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800898e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008990:	f7fa fc64 	bl	800325c <HAL_GetTick>
 8008994:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008996:	e008      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008998:	f7fa fc60 	bl	800325c <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b64      	cmp	r3, #100	; 0x64
 80089a4:	d901      	bls.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e007      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80089aa:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b6:	d1ef      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	40023800 	.word	0x40023800

080089c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089e6:	f040 8086 	bne.w	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80089ea:	4b8d      	ldr	r3, [pc, #564]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80089f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a00:	d03e      	beq.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8008a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a06:	d073      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d000      	beq.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008a0c:	e074      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a0e:	4b84      	ldr	r3, [pc, #528]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d108      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a1a:	4b81      	ldr	r3, [pc, #516]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a22:	4a80      	ldr	r2, [pc, #512]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	e007      	b.n	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a2c:	4b7c      	ldr	r3, [pc, #496]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a34:	4a7c      	ldr	r2, [pc, #496]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008a3c:	4b78      	ldr	r3, [pc, #480]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a42:	0e1b      	lsrs	r3, r3, #24
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008a4a:	4b75      	ldr	r3, [pc, #468]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	099b      	lsrs	r3, r3, #6
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	fb02 f203 	mul.w	r2, r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008a64:	4b6e      	ldr	r3, [pc, #440]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a7c:	617b      	str	r3, [r7, #20]
        break;
 8008a7e:	e03b      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008a80:	4b67      	ldr	r3, [pc, #412]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d108      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008a8c:	4b64      	ldr	r3, [pc, #400]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a94:	4a63      	ldr	r2, [pc, #396]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	e007      	b.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008a9e:	4b60      	ldr	r3, [pc, #384]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aa6:	4a60      	ldr	r2, [pc, #384]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008aae:	4b5c      	ldr	r3, [pc, #368]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ab4:	0e1b      	lsrs	r3, r3, #24
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008abc:	4b58      	ldr	r3, [pc, #352]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac2:	099b      	lsrs	r3, r3, #6
 8008ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	fb02 f203 	mul.w	r2, r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008ad6:	4b52      	ldr	r3, [pc, #328]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aec:	617b      	str	r3, [r7, #20]
        break;
 8008aee:	e003      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af0:	4b4e      	ldr	r3, [pc, #312]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008af2:	617b      	str	r3, [r7, #20]
        break;
 8008af4:	e000      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008af6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afe:	f040 8086 	bne.w	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008b02:	4b47      	ldr	r3, [pc, #284]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b08:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008b10:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b18:	d03e      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008b1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b1e:	d073      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d000      	beq.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008b24:	e074      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b26:	4b3e      	ldr	r3, [pc, #248]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d108      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008b32:	4b3b      	ldr	r3, [pc, #236]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b3a:	4a3a      	ldr	r2, [pc, #232]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	e007      	b.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008b44:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b4c:	4a36      	ldr	r2, [pc, #216]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b52:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008b54:	4b32      	ldr	r3, [pc, #200]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5a:	0e1b      	lsrs	r3, r3, #24
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008b62:	4b2f      	ldr	r3, [pc, #188]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b68:	099b      	lsrs	r3, r3, #6
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	fb02 f203 	mul.w	r2, r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008b7c:	4b28      	ldr	r3, [pc, #160]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	f003 031f 	and.w	r3, r3, #31
 8008b88:	3301      	adds	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b94:	617b      	str	r3, [r7, #20]
        break;
 8008b96:	e03b      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008b98:	4b21      	ldr	r3, [pc, #132]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d108      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008ba4:	4b1e      	ldr	r3, [pc, #120]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bac:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb2:	613b      	str	r3, [r7, #16]
 8008bb4:	e007      	b.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008bb6:	4b1a      	ldr	r3, [pc, #104]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bbe:	4a1a      	ldr	r2, [pc, #104]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008bc6:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bcc:	0e1b      	lsrs	r3, r3, #24
 8008bce:	f003 030f 	and.w	r3, r3, #15
 8008bd2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008bd4:	4b12      	ldr	r3, [pc, #72]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bda:	099b      	lsrs	r3, r3, #6
 8008bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	fb02 f203 	mul.w	r2, r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008bee:	4b0c      	ldr	r3, [pc, #48]	; (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf4:	f003 031f 	and.w	r3, r3, #31
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c04:	617b      	str	r3, [r7, #20]
        break;
 8008c06:	e003      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c08:	4b08      	ldr	r3, [pc, #32]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008c0a:	617b      	str	r3, [r7, #20]
        break;
 8008c0c:	e000      	b.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8008c0e:	bf00      	nop

  return frequency;
 8008c10:	697b      	ldr	r3, [r7, #20]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	40023800 	.word	0x40023800
 8008c24:	00f42400 	.word	0x00f42400
 8008c28:	017d7840 	.word	0x017d7840
 8008c2c:	00bb8000 	.word	0x00bb8000

08008c30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e06b      	b.n	8008d1a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7f5b      	ldrb	r3, [r3, #29]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d105      	bne.n	8008c58 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7f9 fd18 	bl	8002688 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	22ca      	movs	r2, #202	; 0xca
 8008c64:	625a      	str	r2, [r3, #36]	; 0x24
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2253      	movs	r2, #83	; 0x53
 8008c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb00 	bl	8009274 <RTC_EnterInitMode>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	22ff      	movs	r2, #255	; 0xff
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2204      	movs	r2, #4
 8008c86:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e046      	b.n	8008d1a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6899      	ldr	r1, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <HAL_RTC_Init+0xf4>)
 8008c98:	400b      	ands	r3, r1
 8008c9a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6899      	ldr	r1, [r3, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68d2      	ldr	r2, [r2, #12]
 8008cc2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6919      	ldr	r1, [r3, #16]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	041a      	lsls	r2, r3, #16
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ce6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0208 	bic.w	r2, r2, #8
 8008cf6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699a      	ldr	r2, [r3, #24]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	22ff      	movs	r2, #255	; 0xff
 8008d10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008d18:	2300      	movs	r3, #0
  }
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	ff8fffbf 	.word	0xff8fffbf

08008d28 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	7f1b      	ldrb	r3, [r3, #28]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d101      	bne.n	8008d44 <HAL_RTC_SetTime+0x1c>
 8008d40:	2302      	movs	r3, #2
 8008d42:	e0a8      	b.n	8008e96 <HAL_RTC_SetTime+0x16e>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d126      	bne.n	8008da4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d102      	bne.n	8008d6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2200      	movs	r2, #0
 8008d68:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 faac 	bl	80092cc <RTC_ByteToBcd2>
 8008d74:	4603      	mov	r3, r0
 8008d76:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	785b      	ldrb	r3, [r3, #1]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 faa5 	bl	80092cc <RTC_ByteToBcd2>
 8008d82:	4603      	mov	r3, r0
 8008d84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008d86:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	789b      	ldrb	r3, [r3, #2]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fa9d 	bl	80092cc <RTC_ByteToBcd2>
 8008d92:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008d94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	7b1b      	ldrb	r3, [r3, #12]
 8008d9c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	e018      	b.n	8008dd6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2200      	movs	r2, #0
 8008db6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008dc4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008dca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	7b1b      	ldrb	r3, [r3, #12]
 8008dd0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	22ca      	movs	r2, #202	; 0xca
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2253      	movs	r2, #83	; 0x53
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fa44 	bl	8009274 <RTC_EnterInitMode>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	22ff      	movs	r2, #255	; 0xff
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e045      	b.n	8008e96 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	6979      	ldr	r1, [r7, #20]
 8008e10:	4b23      	ldr	r3, [pc, #140]	; (8008ea0 <HAL_RTC_SetTime+0x178>)
 8008e12:	400b      	ands	r3, r1
 8008e14:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6899      	ldr	r1, [r3, #8]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f003 0320 	and.w	r3, r3, #32
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d111      	bne.n	8008e80 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f9e1 	bl	8009224 <HAL_RTC_WaitForSynchro>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	22ff      	movs	r2, #255	; 0xff
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2204      	movs	r2, #4
 8008e74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e00a      	b.n	8008e96 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008e94:	2300      	movs	r3, #0
  }
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	371c      	adds	r7, #28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd90      	pop	{r4, r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	007f7f7f 	.word	0x007f7f7f

08008ea4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	7f1b      	ldrb	r3, [r3, #28]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d101      	bne.n	8008ec0 <HAL_RTC_SetDate+0x1c>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e092      	b.n	8008fe6 <HAL_RTC_SetDate+0x142>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10e      	bne.n	8008ef0 <HAL_RTC_SetDate+0x4c>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	785b      	ldrb	r3, [r3, #1]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d008      	beq.n	8008ef0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	f023 0310 	bic.w	r3, r3, #16
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	330a      	adds	r3, #10
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d11c      	bne.n	8008f30 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	78db      	ldrb	r3, [r3, #3]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 f9e6 	bl	80092cc <RTC_ByteToBcd2>
 8008f00:	4603      	mov	r3, r0
 8008f02:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f9df 	bl	80092cc <RTC_ByteToBcd2>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f12:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	789b      	ldrb	r3, [r3, #2]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f9d7 	bl	80092cc <RTC_ByteToBcd2>
 8008f1e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008f20:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	e00e      	b.n	8008f4e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	78db      	ldrb	r3, [r3, #3]
 8008f34:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f3c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008f42:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	22ca      	movs	r2, #202	; 0xca
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2253      	movs	r2, #83	; 0x53
 8008f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 f988 	bl	8009274 <RTC_EnterInitMode>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00b      	beq.n	8008f82 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	22ff      	movs	r2, #255	; 0xff
 8008f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2204      	movs	r2, #4
 8008f76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e031      	b.n	8008fe6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	6979      	ldr	r1, [r7, #20]
 8008f88:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <HAL_RTC_SetDate+0x14c>)
 8008f8a:	400b      	ands	r3, r1
 8008f8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d111      	bne.n	8008fd0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f939 	bl	8009224 <HAL_RTC_WaitForSynchro>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	22ff      	movs	r2, #255	; 0xff
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e00a      	b.n	8008fe6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	22ff      	movs	r2, #255	; 0xff
 8008fd6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
  }
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd90      	pop	{r4, r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	00ffff3f 	.word	0x00ffff3f

08008ff4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b089      	sub	sp, #36	; 0x24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009000:	2300      	movs	r3, #0
 8009002:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	61fb      	str	r3, [r7, #28]
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	7f1b      	ldrb	r3, [r3, #28]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_RTC_SetAlarm+0x24>
 8009014:	2302      	movs	r3, #2
 8009016:	e101      	b.n	800921c <HAL_RTC_SetAlarm+0x228>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2202      	movs	r2, #2
 8009022:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d137      	bne.n	800909a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d102      	bne.n	800903e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f942 	bl	80092cc <RTC_ByteToBcd2>
 8009048:	4603      	mov	r3, r0
 800904a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f93b 	bl	80092cc <RTC_ByteToBcd2>
 8009056:	4603      	mov	r3, r0
 8009058:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800905a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	789b      	ldrb	r3, [r3, #2]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f933 	bl	80092cc <RTC_ByteToBcd2>
 8009066:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009068:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	7b1b      	ldrb	r3, [r3, #12]
 8009070:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009072:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f925 	bl	80092cc <RTC_ByteToBcd2>
 8009082:	4603      	mov	r3, r0
 8009084:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009086:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800908e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009094:	4313      	orrs	r3, r2
 8009096:	61fb      	str	r3, [r7, #28]
 8009098:	e023      	b.n	80090e2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	785b      	ldrb	r3, [r3, #1]
 80090b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80090ba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80090c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	7b1b      	ldrb	r3, [r3, #12]
 80090c6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80090c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80090d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80090d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80090de:	4313      	orrs	r3, r2
 80090e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	22ca      	movs	r2, #202	; 0xca
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2253      	movs	r2, #83	; 0x53
 80090fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009106:	d13f      	bne.n	8009188 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009116:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009126:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009128:	f7fa f898 	bl	800325c <HAL_GetTick>
 800912c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800912e:	e013      	b.n	8009158 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009130:	f7fa f894 	bl	800325c <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800913e:	d90b      	bls.n	8009158 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	22ff      	movs	r2, #255	; 0xff
 8009146:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2203      	movs	r2, #3
 800914c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e061      	b.n	800921c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0e4      	beq.n	8009130 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009184:	609a      	str	r2, [r3, #8]
 8009186:	e03e      	b.n	8009206 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009196:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091a6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091a8:	f7fa f858 	bl	800325c <HAL_GetTick>
 80091ac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80091ae:	e013      	b.n	80091d8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091b0:	f7fa f854 	bl	800325c <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091be:	d90b      	bls.n	80091d8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	22ff      	movs	r2, #255	; 0xff
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2203      	movs	r2, #3
 80091cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e021      	b.n	800921c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0e4      	beq.n	80091b0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009204:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	22ff      	movs	r2, #255	; 0xff
 800920c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2201      	movs	r2, #1
 8009212:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3724      	adds	r7, #36	; 0x24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd90      	pop	{r4, r7, pc}

08009224 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800923e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009240:	f7fa f80c 	bl	800325c <HAL_GetTick>
 8009244:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009246:	e009      	b.n	800925c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009248:	f7fa f808 	bl	800325c <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009256:	d901      	bls.n	800925c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e007      	b.n	800926c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ee      	beq.n	8009248 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928a:	2b00      	cmp	r3, #0
 800928c:	d119      	bne.n	80092c2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f04f 32ff 	mov.w	r2, #4294967295
 8009296:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009298:	f7f9 ffe0 	bl	800325c <HAL_GetTick>
 800929c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800929e:	e009      	b.n	80092b4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092a0:	f7f9 ffdc 	bl	800325c <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092ae:	d901      	bls.n	80092b4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e007      	b.n	80092c4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0ee      	beq.n	80092a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80092da:	e005      	b.n	80092e8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	3301      	adds	r3, #1
 80092e0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	3b0a      	subs	r3, #10
 80092e6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d8f6      	bhi.n	80092dc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	011b      	lsls	r3, r3, #4
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	b2db      	uxtb	r3, r3
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	7f1b      	ldrb	r3, [r3, #28]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009320:	2302      	movs	r3, #2
 8009322:	e03e      	b.n	80093a2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2202      	movs	r2, #2
 800932e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689a      	ldr	r2, [r3, #8]
 8009336:	4b1e      	ldr	r3, [pc, #120]	; (80093b0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009338:	4013      	ands	r3, r2
 800933a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	22ca      	movs	r2, #202	; 0xca
 800934a:	625a      	str	r2, [r3, #36]	; 0x24
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2253      	movs	r2, #83	; 0x53
 8009352:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0206 	bic.w	r2, r2, #6
 8009362:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	430a      	orrs	r2, r1
 8009372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800938a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	22ff      	movs	r2, #255	; 0xff
 8009392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	fffff7f7 	.word	0xfffff7f7

080093b4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b088      	sub	sp, #32
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e149      	b.n	8009666 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7f9 fcf8 	bl	8002ddc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f94f 	bl	8009698 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d007      	beq.n	8009412 <HAL_SAI_Init+0x5e>
 8009402:	2b01      	cmp	r3, #1
 8009404:	d302      	bcc.n	800940c <HAL_SAI_Init+0x58>
 8009406:	2b02      	cmp	r3, #2
 8009408:	d006      	beq.n	8009418 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800940a:	e008      	b.n	800941e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
      break;
 8009410:	e005      	b.n	800941e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009412:	2310      	movs	r3, #16
 8009414:	61fb      	str	r3, [r7, #28]
      break;
 8009416:	e002      	b.n	800941e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009418:	2320      	movs	r3, #32
 800941a:	61fb      	str	r3, [r7, #28]
      break;
 800941c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	2b03      	cmp	r3, #3
 8009424:	d81d      	bhi.n	8009462 <HAL_SAI_Init+0xae>
 8009426:	a201      	add	r2, pc, #4	; (adr r2, 800942c <HAL_SAI_Init+0x78>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009443 	.word	0x08009443
 8009434:	0800944b 	.word	0x0800944b
 8009438:	08009453 	.word	0x08009453
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	617b      	str	r3, [r7, #20]
      }
      break;
 8009440:	e010      	b.n	8009464 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8009442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009446:	617b      	str	r3, [r7, #20]
      }
      break;
 8009448:	e00c      	b.n	8009464 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800944a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800944e:	617b      	str	r3, [r7, #20]
      }
      break;
 8009450:	e008      	b.n	8009464 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009452:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009456:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f043 0301 	orr.w	r3, r3, #1
 800945e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8009460:	e000      	b.n	8009464 <HAL_SAI_Init+0xb0>
  default:
    break;
 8009462:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a81      	ldr	r2, [pc, #516]	; (8009670 <HAL_SAI_Init+0x2bc>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <HAL_SAI_Init+0xc4>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a80      	ldr	r2, [pc, #512]	; (8009674 <HAL_SAI_Init+0x2c0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d103      	bne.n	8009480 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8009478:	4a7f      	ldr	r2, [pc, #508]	; (8009678 <HAL_SAI_Init+0x2c4>)
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	e002      	b.n	8009486 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009480:	4a7e      	ldr	r2, [pc, #504]	; (800967c <HAL_SAI_Init+0x2c8>)
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d043      	beq.n	8009516 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a76      	ldr	r2, [pc, #472]	; (8009670 <HAL_SAI_Init+0x2bc>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d004      	beq.n	80094a6 <HAL_SAI_Init+0xf2>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a74      	ldr	r2, [pc, #464]	; (8009674 <HAL_SAI_Init+0x2c0>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d104      	bne.n	80094b0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80094a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80094aa:	f7ff fa8d 	bl	80089c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80094ae:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a72      	ldr	r2, [pc, #456]	; (8009680 <HAL_SAI_Init+0x2cc>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d004      	beq.n	80094c4 <HAL_SAI_Init+0x110>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a71      	ldr	r2, [pc, #452]	; (8009684 <HAL_SAI_Init+0x2d0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d104      	bne.n	80094ce <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80094c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80094c8:	f7ff fa7e 	bl	80089c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80094cc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	461a      	mov	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	025b      	lsls	r3, r3, #9
 80094e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	4a67      	ldr	r2, [pc, #412]	; (8009688 <HAL_SAI_Init+0x2d4>)
 80094ea:	fba2 2303 	umull	r2, r3, r2, r3
 80094ee:	08da      	lsrs	r2, r3, #3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80094f4:	68f9      	ldr	r1, [r7, #12]
 80094f6:	4b64      	ldr	r3, [pc, #400]	; (8009688 <HAL_SAI_Init+0x2d4>)
 80094f8:	fba3 2301 	umull	r2, r3, r3, r1
 80094fc:	08da      	lsrs	r2, r3, #3
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	1aca      	subs	r2, r1, r3
 8009508:	2a08      	cmp	r2, #8
 800950a:	d904      	bls.n	8009516 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_SAI_Init+0x172>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d109      	bne.n	800953a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <HAL_SAI_Init+0x17e>
 800952e:	2300      	movs	r3, #0
 8009530:	e001      	b.n	8009536 <HAL_SAI_Init+0x182>
 8009532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009536:	61bb      	str	r3, [r7, #24]
 8009538:	e008      	b.n	800954c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d102      	bne.n	8009548 <HAL_SAI_Init+0x194>
 8009542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009546:	e000      	b.n	800954a <HAL_SAI_Init+0x196>
 8009548:	2300      	movs	r3, #0
 800954a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6819      	ldr	r1, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b4d      	ldr	r3, [pc, #308]	; (800968c <HAL_SAI_Init+0x2d8>)
 8009558:	400b      	ands	r3, r1
 800955a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6819      	ldr	r1, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009570:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	431a      	orrs	r2, r3
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8009584:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009590:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	051b      	lsls	r3, r3, #20
 8009598:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6859      	ldr	r1, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	4b38      	ldr	r3, [pc, #224]	; (8009690 <HAL_SAI_Init+0x2dc>)
 80095ae:	400b      	ands	r3, r1
 80095b0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6859      	ldr	r1, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6899      	ldr	r1, [r3, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b2e      	ldr	r3, [pc, #184]	; (8009694 <HAL_SAI_Init+0x2e0>)
 80095dc:	400b      	ands	r3, r1
 80095de:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6899      	ldr	r1, [r3, #8]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ea:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80095f0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80095f6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80095fc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009602:	3b01      	subs	r3, #1
 8009604:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8009606:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68d9      	ldr	r1, [r3, #12]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800961e:	400b      	ands	r3, r1
 8009620:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68d9      	ldr	r1, [r3, #12]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	431a      	orrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800963e:	3b01      	subs	r3, #1
 8009640:	021b      	lsls	r3, r3, #8
 8009642:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40015804 	.word	0x40015804
 8009674:	40015824 	.word	0x40015824
 8009678:	40015800 	.word	0x40015800
 800967c:	40015c00 	.word	0x40015c00
 8009680:	40015c04 	.word	0x40015c04
 8009684:	40015c24 	.word	0x40015c24
 8009688:	cccccccd 	.word	0xcccccccd
 800968c:	ff05c010 	.word	0xff05c010
 8009690:	ffff1ff0 	.word	0xffff1ff0
 8009694:	fff88000 	.word	0xfff88000

08009698 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009698:	b490      	push	{r4, r7}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80096a0:	4b16      	ldr	r3, [pc, #88]	; (80096fc <SAI_Disable+0x64>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a16      	ldr	r2, [pc, #88]	; (8009700 <SAI_Disable+0x68>)
 80096a6:	fba2 2303 	umull	r2, r3, r2, r3
 80096aa:	0b1b      	lsrs	r3, r3, #12
 80096ac:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096c0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80096c2:	4623      	mov	r3, r4
 80096c4:	1e5c      	subs	r4, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	73fb      	strb	r3, [r7, #15]
      break;
 80096de:	e006      	b.n	80096ee <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e9      	bne.n	80096c2 <SAI_Disable+0x2a>

  return status;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc90      	pop	{r4, r7}
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	2000002c 	.word	0x2000002c
 8009700:	95cbec1b 	.word	0x95cbec1b

08009704 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e01d      	b.n	8009752 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d105      	bne.n	800972e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7f8 ffc7 	bl	80026bc <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2203      	movs	r2, #3
 8009732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f80f 	bl	800975a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800975a:	b5b0      	push	{r4, r5, r7, lr}
 800975c:	b08e      	sub	sp, #56	; 0x38
 800975e:	af04      	add	r7, sp, #16
 8009760:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009762:	2300      	movs	r3, #0
 8009764:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800976a:	2300      	movs	r3, #0
 800976c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009772:	2300      	movs	r3, #0
 8009774:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800977a:	2376      	movs	r3, #118	; 0x76
 800977c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681d      	ldr	r5, [r3, #0]
 8009782:	466c      	mov	r4, sp
 8009784:	f107 0318 	add.w	r3, r7, #24
 8009788:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800978c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009790:	f107 030c 	add.w	r3, r7, #12
 8009794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009796:	4628      	mov	r0, r5
 8009798:	f002 ff48 	bl	800c62c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097aa:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f002 ff74 	bl	800c69e <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097c4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80097c6:	2002      	movs	r0, #2
 80097c8:	f7f9 fd54 	bl	8003274 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fe2e 	bl	800a42e <SD_PowerON>
 80097d2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e013      	b.n	800981a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fd52 	bl	800a29c <SD_InitCard>
 80097f8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e000      	b.n	800981a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3728      	adds	r7, #40	; 0x28
 800981e:	46bd      	mov	sp, r7
 8009820:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009824 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08c      	sub	sp, #48	; 0x30
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009832:	2300      	movs	r3, #0
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d107      	bne.n	800984c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e0b0      	b.n	80099ae <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	f040 80a9 	bne.w	80099ac <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	441a      	add	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800986a:	429a      	cmp	r2, r3
 800986c:	d907      	bls.n	800987e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e097      	b.n	80099ae <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2203      	movs	r2, #3
 8009882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800989c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a2:	4a45      	ldr	r2, [pc, #276]	; (80099b8 <HAL_SD_ReadBlocks_DMA+0x194>)
 80098a4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098aa:	4a44      	ldr	r2, [pc, #272]	; (80099bc <HAL_SD_ReadBlocks_DMA+0x198>)
 80098ac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b2:	2200      	movs	r2, #0
 80098b4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3380      	adds	r3, #128	; 0x80
 80098c0:	4619      	mov	r1, r3
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	025b      	lsls	r3, r3, #9
 80098c8:	089b      	lsrs	r3, r3, #2
 80098ca:	f7fa f9d5 	bl	8003c78 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0208 	orr.w	r2, r2, #8
 80098dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d002      	beq.n	80098ec <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	025b      	lsls	r3, r3, #9
 80098ea:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098ec:	f04f 33ff 	mov.w	r3, #4294967295
 80098f0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	025b      	lsls	r3, r3, #9
 80098f6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80098f8:	2390      	movs	r3, #144	; 0x90
 80098fa:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098fc:	2302      	movs	r3, #2
 80098fe:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009900:	2300      	movs	r3, #0
 8009902:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009904:	2301      	movs	r3, #1
 8009906:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f107 0214 	add.w	r2, r7, #20
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f002 ff2c 	bl	800c770 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009920:	4618      	mov	r0, r3
 8009922:	f002 ff51 	bl	800c7c8 <SDMMC_CmdBlockLength>
 8009926:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d010      	beq.n	8009950 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009936:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	431a      	orrs	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e02e      	b.n	80099ae <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d90a      	bls.n	800996c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2282      	movs	r2, #130	; 0x82
 800995a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	4618      	mov	r0, r3
 8009964:	f002 ff78 	bl	800c858 <SDMMC_CmdReadMultiBlock>
 8009968:	62f8      	str	r0, [r7, #44]	; 0x2c
 800996a:	e009      	b.n	8009980 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2281      	movs	r2, #129	; 0x81
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	4618      	mov	r0, r3
 800997a:	f002 ff49 	bl	800c810 <SDMMC_CmdReadSingleBlock>
 800997e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d010      	beq.n	80099a8 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	431a      	orrs	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e002      	b.n	80099ae <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3730      	adds	r7, #48	; 0x30
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	0800a199 	.word	0x0800a199
 80099bc:	0800a207 	.word	0x0800a207

080099c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08c      	sub	sp, #48	; 0x30
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80099ce:	2300      	movs	r3, #0
 80099d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d107      	bne.n	80099e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e0b0      	b.n	8009b4a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	f040 80a9 	bne.w	8009b48 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d907      	bls.n	8009a1a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e097      	b.n	8009b4a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2200      	movs	r2, #0
 8009a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f042 021a 	orr.w	r2, r2, #26
 8009a38:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	4a45      	ldr	r2, [pc, #276]	; (8009b54 <HAL_SD_WriteBlocks_DMA+0x194>)
 8009a40:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	4a44      	ldr	r2, [pc, #272]	; (8009b58 <HAL_SD_WriteBlocks_DMA+0x198>)
 8009a48:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	2200      	movs	r2, #0
 8009a50:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d002      	beq.n	8009a60 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	025b      	lsls	r3, r3, #9
 8009a5e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 fead 	bl	800c7c8 <SDMMC_CmdBlockLength>
 8009a6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d010      	beq.n	8009a98 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	431a      	orrs	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e058      	b.n	8009b4a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d90a      	bls.n	8009ab4 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	22a0      	movs	r2, #160	; 0xa0
 8009aa2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f002 ff1c 	bl	800c8e8 <SDMMC_CmdWriteMultiBlock>
 8009ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009ab2:	e009      	b.n	8009ac8 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2290      	movs	r2, #144	; 0x90
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f002 feed 	bl	800c8a0 <SDMMC_CmdWriteSingleBlock>
 8009ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d010      	beq.n	8009af0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e02c      	b.n	8009b4a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f042 0208 	orr.w	r2, r2, #8
 8009afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009b04:	68b9      	ldr	r1, [r7, #8]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3380      	adds	r3, #128	; 0x80
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	025b      	lsls	r3, r3, #9
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	f7fa f8b0 	bl	8003c78 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b18:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	025b      	lsls	r3, r3, #9
 8009b22:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b24:	2390      	movs	r3, #144	; 0x90
 8009b26:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b30:	2301      	movs	r3, #1
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f107 0214 	add.w	r2, r7, #20
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f002 fe16 	bl	800c770 <SDMMC_ConfigData>
    
    return HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	e000      	b.n	8009b4a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009b48:	2302      	movs	r3, #2
  }
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3730      	adds	r7, #48	; 0x30
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	0800a16f 	.word	0x0800a16f
 8009b58:	0800a207 	.word	0x0800a207

08009b5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b96:	0e1b      	lsrs	r3, r3, #24
 8009b98:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	099b      	lsrs	r3, r3, #6
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 0303 	and.w	r3, r3, #3
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	089b      	lsrs	r3, r3, #2
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bcc:	0c1b      	lsrs	r3, r3, #16
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c00:	0e1b      	lsrs	r3, r3, #24
 8009c02:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	88db      	ldrh	r3, [r3, #6]
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	091b      	lsrs	r3, r3, #4
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	f003 030f 	and.w	r3, r3, #15
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f003 030f 	and.w	r3, r3, #15
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c46:	0a1b      	lsrs	r3, r3, #8
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	09db      	lsrs	r3, r3, #7
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	099b      	lsrs	r3, r3, #6
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	091b      	lsrs	r3, r3, #4
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f040 8086 	bne.w	8009da8 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	029b      	lsls	r3, r3, #10
 8009ca0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	691a      	ldr	r2, [r3, #16]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc2:	0e1b      	lsrs	r3, r3, #24
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	691a      	ldr	r2, [r3, #16]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	099b      	lsrs	r3, r3, #6
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	08db      	lsrs	r3, r3, #3
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfc:	0c1b      	lsrs	r3, r3, #16
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	095b      	lsrs	r3, r3, #5
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	f003 0307 	and.w	r3, r3, #7
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	089b      	lsrs	r3, r3, #2
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 0306 	and.w	r3, r3, #6
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d38:	0a1b      	lsrs	r3, r3, #8
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	7e1b      	ldrb	r3, [r3, #24]
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	09db      	lsrs	r3, r3, #7
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	7e1b      	ldrb	r3, [r3, #24]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	3302      	adds	r3, #2
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	409a      	lsls	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d72:	fb02 f203 	mul.w	r2, r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	7a1b      	ldrb	r3, [r3, #8]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	2301      	movs	r3, #1
 8009d84:	4093      	lsls	r3, r2
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009d94:	0a52      	lsrs	r2, r2, #9
 8009d96:	fb02 f203 	mul.w	r2, r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009da4:	661a      	str	r2, [r3, #96]	; 0x60
 8009da6:	e04d      	b.n	8009e44 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d138      	bne.n	8009e22 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	041b      	lsls	r3, r3, #16
 8009dbc:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dc8:	0e1b      	lsrs	r3, r3, #24
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	691a      	ldr	r2, [r3, #16]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de0:	0c1b      	lsrs	r3, r3, #16
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	691a      	ldr	r2, [r3, #16]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	431a      	orrs	r2, r3
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	3301      	adds	r3, #1
 8009e02:	029a      	lsls	r2, r3, #10
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	655a      	str	r2, [r3, #84]	; 0x54
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e16:	659a      	str	r2, [r3, #88]	; 0x58
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	661a      	str	r2, [r3, #96]	; 0x60
 8009e20:	e010      	b.n	8009e44 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0c1      	b.n	8009fc8 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	099b      	lsrs	r3, r3, #6
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	005b      	lsls	r3, r3, #1
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	7e9b      	ldrb	r3, [r3, #26]
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	09db      	lsrs	r3, r3, #7
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	4313      	orrs	r3, r2
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e9a:	0e1b      	lsrs	r3, r3, #24
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	09db      	lsrs	r3, r3, #7
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	095b      	lsrs	r3, r3, #5
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	089b      	lsrs	r3, r3, #2
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	f003 030c 	and.w	r3, r3, #12
 8009edc:	b2da      	uxtb	r2, r3
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	0c1b      	lsrs	r3, r3, #16
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	7fdb      	ldrb	r3, [r3, #31]
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	099b      	lsrs	r3, r3, #6
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	4313      	orrs	r3, r2
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	095b      	lsrs	r3, r3, #5
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f34:	0a1b      	lsrs	r3, r3, #8
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	09db      	lsrs	r3, r3, #7
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	099b      	lsrs	r3, r3, #6
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	095b      	lsrs	r3, r3, #5
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	091b      	lsrs	r3, r3, #4
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	089b      	lsrs	r3, r3, #2
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	f003 0303 	and.w	r3, r3, #3
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	f003 0303 	and.w	r3, r3, #3
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	085b      	lsrs	r3, r3, #1
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a02c:	b5b0      	push	{r4, r5, r7, lr}
 800a02e:	b08e      	sub	sp, #56	; 0x38
 800a030:	af04      	add	r7, sp, #16
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a036:	2300      	movs	r3, #0
 800a038:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2203      	movs	r2, #3
 800a03e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a046:	2b03      	cmp	r3, #3
 800a048:	d02e      	beq.n	800a0a8 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a050:	d106      	bne.n	800a060 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a056:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38
 800a05e:	e029      	b.n	800a0b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a066:	d10a      	bne.n	800a07e <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fab2 	bl	800a5d2 <SD_WideBus_Enable>
 800a06e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
 800a07c:	e01a      	b.n	800a0b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10a      	bne.n	800a09a <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 faf1 	bl	800a66c <SD_WideBus_Disable>
 800a08a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	639a      	str	r2, [r3, #56]	; 0x38
 800a098:	e00c      	b.n	800a0b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	639a      	str	r2, [r3, #56]	; 0x38
 800a0a6:	e005      	b.n	800a0b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a0c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e024      	b.n	800a11c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681d      	ldr	r5, [r3, #0]
 800a0f8:	466c      	mov	r4, sp
 800a0fa:	f107 0318 	add.w	r3, r7, #24
 800a0fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a106:	f107 030c 	add.w	r3, r7, #12
 800a10a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a10c:	4628      	mov	r0, r5
 800a10e:	f002 fa8d 	bl	800c62c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3728      	adds	r7, #40	; 0x28
 800a120:	46bd      	mov	sp, r7
 800a122:	bdb0      	pop	{r4, r5, r7, pc}

0800a124 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800a12c:	2304      	movs	r3, #4
 800a12e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a130:	2300      	movs	r3, #0
 800a132:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800a138:	f107 030c 	add.w	r3, r7, #12
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa1d 	bl	800a57e <SD_SendStatus>
 800a144:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	431a      	orrs	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	0a5b      	lsrs	r3, r3, #9
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 030f 	and.w	r3, r3, #15
 800a162:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800a164:	7dfb      	ldrb	r3, [r7, #23]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800a16e:	b480      	push	{r7}
 800a170:	b085      	sub	sp, #20
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17a:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a18a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a4:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	2b82      	cmp	r3, #130	; 0x82
 800a1b0:	d111      	bne.n	800a1d6 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f002 fbba 	bl	800c930 <SDMMC_CmdStopTransfer>
 800a1bc:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d008      	beq.n	800a1d6 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f7ff fccd 	bl	8009b70 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f022 0208 	bic.w	r2, r2, #8
 800a1e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff fcaf 	bl	8009b5c <HAL_SD_RxCpltCallback>
#endif
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7f9 fd8f 	bl	8003d38 <HAL_DMA_GetError>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d039      	beq.n	800a294 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a226:	2b01      	cmp	r3, #1
 800a228:	d004      	beq.n	800a234 <SD_DMAError+0x2e>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a230:	2b01      	cmp	r3, #1
 800a232:	d12c      	bne.n	800a28e <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a23c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a24c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7ff ff62 	bl	800a124 <HAL_SD_GetCardState>
 800a260:	4603      	mov	r3, r0
 800a262:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a264:	7afb      	ldrb	r3, [r7, #11]
 800a266:	2b06      	cmp	r3, #6
 800a268:	d002      	beq.n	800a270 <SD_DMAError+0x6a>
 800a26a:	7afb      	ldrb	r3, [r7, #11]
 800a26c:	2b05      	cmp	r3, #5
 800a26e:	d10a      	bne.n	800a286 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f002 fb5b 	bl	800c930 <SDMMC_CmdStopTransfer>
 800a27a:	4602      	mov	r2, r0
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a280:	431a      	orrs	r2, r3
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7ff fc6e 	bl	8009b70 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a294:	bf00      	nop
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a29c:	b5b0      	push	{r4, r5, r7, lr}
 800a29e:	b094      	sub	sp, #80	; 0x50
 800a2a0:	af04      	add	r7, sp, #16
 800a2a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f002 fa02 	bl	800c6ba <SDMMC_GetPowerState>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a2c0:	e0b1      	b.n	800a426 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	d02f      	beq.n	800a32a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f002 fc49 	bl	800cb66 <SDMMC_CmdSendCID>
 800a2d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <SD_InitCard+0x44>
    {
      return errorstate;
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2de:	e0a2      	b.n	800a426 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f002 fa2d 	bl	800c746 <SDMMC_GetResponse>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 fa24 	bl	800c746 <SDMMC_GetResponse>
 800a2fe:	4602      	mov	r2, r0
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2108      	movs	r1, #8
 800a30a:	4618      	mov	r0, r3
 800a30c:	f002 fa1b 	bl	800c746 <SDMMC_GetResponse>
 800a310:	4602      	mov	r2, r0
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	210c      	movs	r1, #12
 800a31c:	4618      	mov	r0, r3
 800a31e:	f002 fa12 	bl	800c746 <SDMMC_GetResponse>
 800a322:	4602      	mov	r2, r0
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d00d      	beq.n	800a34e <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f107 020e 	add.w	r2, r7, #14
 800a33a:	4611      	mov	r1, r2
 800a33c:	4618      	mov	r0, r3
 800a33e:	f002 fc53 	bl	800cbe8 <SDMMC_CmdSetRelAdd>
 800a342:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <SD_InitCard+0xb2>
    {
      return errorstate;
 800a34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a34c:	e06b      	b.n	800a426 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a352:	2b03      	cmp	r3, #3
 800a354:	d036      	beq.n	800a3c4 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a356:	89fb      	ldrh	r3, [r7, #14]
 800a358:	461a      	mov	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a366:	041b      	lsls	r3, r3, #16
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f002 fc1b 	bl	800cba6 <SDMMC_CmdSendCSD>
 800a370:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <SD_InitCard+0xe0>
    {
      return errorstate;
 800a378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37a:	e054      	b.n	800a426 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f002 f9df 	bl	800c746 <SDMMC_GetResponse>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2104      	movs	r1, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f002 f9d6 	bl	800c746 <SDMMC_GetResponse>
 800a39a:	4602      	mov	r2, r0
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2108      	movs	r1, #8
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f002 f9cd 	bl	800c746 <SDMMC_GetResponse>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	210c      	movs	r1, #12
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 f9c4 	bl	800c746 <SDMMC_GetResponse>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2104      	movs	r1, #4
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f002 f9bb 	bl	800c746 <SDMMC_GetResponse>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	0d1a      	lsrs	r2, r3, #20
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800a3d8:	f107 0310 	add.w	r3, r7, #16
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff fbd0 	bl	8009b84 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6819      	ldr	r1, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	f04f 0400 	mov.w	r4, #0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	f002 fabe 	bl	800c978 <SDMMC_CmdSelDesel>
 800a3fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <SD_InitCard+0x16c>
  {
    return errorstate;
 800a404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a406:	e00e      	b.n	800a426 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681d      	ldr	r5, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	466c      	mov	r4, sp
 800a410:	f103 0210 	add.w	r2, r3, #16
 800a414:	ca07      	ldmia	r2, {r0, r1, r2}
 800a416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a41a:	3304      	adds	r3, #4
 800a41c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a41e:	4628      	mov	r0, r5
 800a420:	f002 f904 	bl	800c62c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3740      	adds	r7, #64	; 0x40
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bdb0      	pop	{r4, r5, r7, pc}

0800a42e <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b086      	sub	sp, #24
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	2300      	movs	r3, #0
 800a440:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 fab9 	bl	800c9c2 <SDMMC_CmdGoIdleState>
 800a450:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <SD_PowerON+0x2e>
  {
    return errorstate;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	e08c      	b.n	800a576 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4618      	mov	r0, r3
 800a462:	f002 face 	bl	800ca02 <SDMMC_CmdOperCond>
 800a466:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d03d      	beq.n	800a4ea <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800a474:	e032      	b.n	800a4dc <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	60ba      	str	r2, [r7, #8]
 800a47c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a480:	4293      	cmp	r3, r2
 800a482:	d102      	bne.n	800a48a <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a488:	e075      	b.n	800a576 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2100      	movs	r1, #0
 800a490:	4618      	mov	r0, r3
 800a492:	f002 fad7 	bl	800ca44 <SDMMC_CmdAppCommand>
 800a496:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a49e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4a2:	e068      	b.n	800a576 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f002 faee 	bl	800ca8c <SDMMC_CmdAppOperCommand>
 800a4b0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4bc:	e05b      	b.n	800a576 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f002 f93e 	bl	800c746 <SDMMC_GetResponse>
 800a4ca:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	0fdb      	lsrs	r3, r3, #31
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	bf0c      	ite	eq
 800a4d4:	2301      	moveq	r3, #1
 800a4d6:	2300      	movne	r3, #0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0c9      	beq.n	800a476 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	645a      	str	r2, [r3, #68]	; 0x44
 800a4e8:	e044      	b.n	800a574 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800a4f0:	e031      	b.n	800a556 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	60ba      	str	r2, [r7, #8]
 800a4f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d102      	bne.n	800a506 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a504:	e037      	b.n	800a576 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2100      	movs	r1, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f002 fa99 	bl	800ca44 <SDMMC_CmdAppCommand>
 800a512:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <SD_PowerON+0xf0>
      {
        return errorstate;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	e02b      	b.n	800a576 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a526:	4618      	mov	r0, r3
 800a528:	f002 fab0 	bl	800ca8c <SDMMC_CmdAppOperCommand>
 800a52c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d001      	beq.n	800a538 <SD_PowerON+0x10a>
      {
        return errorstate;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	e01e      	b.n	800a576 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	2100      	movs	r1, #0
 800a53e:	4618      	mov	r0, r3
 800a540:	f002 f901 	bl	800c746 <SDMMC_GetResponse>
 800a544:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	0fdb      	lsrs	r3, r3, #31
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	bf0c      	ite	eq
 800a54e:	2301      	moveq	r3, #1
 800a550:	2300      	movne	r3, #0
 800a552:	b2db      	uxtb	r3, r3
 800a554:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d0ca      	beq.n	800a4f2 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	645a      	str	r2, [r3, #68]	; 0x44
 800a56c:	e002      	b.n	800a574 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800a592:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a596:	e018      	b.n	800a5ca <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a0:	041b      	lsls	r3, r3, #16
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	f002 fb42 	bl	800cc2e <SDMMC_CmdSendStatus>
 800a5aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <SD_SendStatus+0x38>
  {
    return errorstate;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	e009      	b.n	800a5ca <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f002 f8c2 	bl	800c746 <SDMMC_GetResponse>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f002 f8aa 	bl	800c746 <SDMMC_GetResponse>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5fc:	d102      	bne.n	800a604 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a5fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a602:	e02f      	b.n	800a664 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a604:	f107 030c 	add.w	r3, r7, #12
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f87b 	bl	800a706 <SD_FindSCR>
 800a610:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	e023      	b.n	800a664 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01c      	beq.n	800a660 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a62e:	041b      	lsls	r3, r3, #16
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f002 fa06 	bl	800ca44 <SDMMC_CmdAppCommand>
 800a638:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	e00f      	b.n	800a664 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2102      	movs	r1, #2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f002 fa44 	bl	800cad8 <SDMMC_CmdBusWidth>
 800a650:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	e003      	b.n	800a664 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	e001      	b.n	800a664 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a660:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	2300      	movs	r3, #0
 800a67a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f002 f85d 	bl	800c746 <SDMMC_GetResponse>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a692:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a696:	d102      	bne.n	800a69e <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a69c:	e02f      	b.n	800a6fe <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a69e:	f107 030c 	add.w	r3, r7, #12
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f82e 	bl	800a706 <SD_FindSCR>
 800a6aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	e023      	b.n	800a6fe <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01c      	beq.n	800a6fa <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c8:	041b      	lsls	r3, r3, #16
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	f002 f9b9 	bl	800ca44 <SDMMC_CmdAppCommand>
 800a6d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	e00f      	b.n	800a6fe <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f002 f9f7 	bl	800cad8 <SDMMC_CmdBusWidth>
 800a6ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	e003      	b.n	800a6fe <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	e001      	b.n	800a6fe <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a706:	b590      	push	{r4, r7, lr}
 800a708:	b08f      	sub	sp, #60	; 0x3c
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800a710:	2300      	movs	r3, #0
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800a714:	f7f8 fda2 	bl	800325c <HAL_GetTick>
 800a718:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 800a71e:	2300      	movs	r3, #0
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	2300      	movs	r3, #0
 800a724:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2108      	movs	r1, #8
 800a72c:	4618      	mov	r0, r3
 800a72e:	f002 f84b 	bl	800c7c8 <SDMMC_CmdBlockLength>
 800a732:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <SD_FindSCR+0x38>
  {
    return errorstate;
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	e0a8      	b.n	800a890 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a746:	041b      	lsls	r3, r3, #16
 800a748:	4619      	mov	r1, r3
 800a74a:	4610      	mov	r0, r2
 800a74c:	f002 f97a 	bl	800ca44 <SDMMC_CmdAppCommand>
 800a750:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <SD_FindSCR+0x56>
  {
    return errorstate;
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	e099      	b.n	800a890 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a75c:	f04f 33ff 	mov.w	r3, #4294967295
 800a760:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800a762:	2308      	movs	r3, #8
 800a764:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a766:	2330      	movs	r3, #48	; 0x30
 800a768:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a76a:	2302      	movs	r3, #2
 800a76c:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a76e:	2300      	movs	r3, #0
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a772:	2301      	movs	r3, #1
 800a774:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f107 0214 	add.w	r2, r7, #20
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f001 fff5 	bl	800c770 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f002 f9c8 	bl	800cb20 <SDMMC_CmdSendSCR>
 800a790:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	2b00      	cmp	r3, #0
 800a796:	d022      	beq.n	800a7de <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	e079      	b.n	800a890 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00e      	beq.n	800a7c8 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6819      	ldr	r1, [r3, #0]
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	f107 020c 	add.w	r2, r7, #12
 800a7b6:	18d4      	adds	r4, r2, r3
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	f001 ff63 	bl	800c684 <SDMMC_ReadFIFO>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6023      	str	r3, [r4, #0]
      index++;
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7c8:	f7f8 fd48 	bl	800325c <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d6:	d102      	bne.n	800a7de <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a7d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7dc:	e058      	b.n	800a890 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7e4:	f240 432a 	movw	r3, #1066	; 0x42a
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0d6      	beq.n	800a79c <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f4:	f003 0308 	and.w	r3, r3, #8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2208      	movs	r2, #8
 800a802:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a804:	2308      	movs	r3, #8
 800a806:	e043      	b.n	800a890 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d005      	beq.n	800a822 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2202      	movs	r2, #2
 800a81c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a81e:	2302      	movs	r3, #2
 800a820:	e036      	b.n	800a890 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2220      	movs	r2, #32
 800a836:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800a838:	2320      	movs	r3, #32
 800a83a:	e029      	b.n	800a890 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a844:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	061a      	lsls	r2, r3, #24
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a852:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	0a1b      	lsrs	r3, r3, #8
 800a858:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a85c:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800a868:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a86a:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	061a      	lsls	r2, r3, #24
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	021b      	lsls	r3, r3, #8
 800a874:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a878:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	0a1b      	lsrs	r3, r3, #8
 800a87e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a882:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	0e1b      	lsrs	r3, r3, #24
 800a888:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	373c      	adds	r7, #60	; 0x3c
 800a894:	46bd      	mov	sp, r7
 800a896:	bd90      	pop	{r4, r7, pc}

0800a898 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e025      	b.n	800a8f8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d106      	bne.n	800a8c6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7f8 fa81 	bl	8002dc8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f001 fd81 	bl	800c3e0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6818      	ldr	r0, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	f001 fdeb 	bl	800c4c4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a912:	b2db      	uxtb	r3, r3
 800a914:	2b02      	cmp	r3, #2
 800a916:	d101      	bne.n	800a91c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a918:	2302      	movs	r3, #2
 800a91a:	e018      	b.n	800a94e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 fe49 	bl	800c5c4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b02      	cmp	r3, #2
 800a938:	d104      	bne.n	800a944 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2205      	movs	r2, #5
 800a93e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a942:	e003      	b.n	800a94c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a966:	b2db      	uxtb	r3, r3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d101      	bne.n	800a970 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a96c:	2302      	movs	r3, #2
 800a96e:	e00e      	b.n	800a98e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 fe41 	bl	800c606 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
	...

0800a998 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e04c      	b.n	800aa44 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7f7 fede 	bl	8002780 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0203 	bic.w	r2, r2, #3
 800a9da:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	4b19      	ldr	r3, [pc, #100]	; (800aa4c <HAL_SPDIFRX_Init+0xb4>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a9f4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a9fa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800aa00:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800aa06:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800aa0c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800aa12:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800aa18:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800aa1e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800aa24:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	fff88407 	.word	0xfff88407

0800aa50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e084      	b.n	800ab6c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7f7 fec1 	bl	8002804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2202      	movs	r2, #2
 800aa86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa98:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aaa2:	d902      	bls.n	800aaaa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	e002      	b.n	800aab0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aaaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aab8:	d007      	beq.n	800aaca <HAL_SPI_Init+0x7a>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aac2:	d002      	beq.n	800aaca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10b      	bne.n	800aaea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aada:	d903      	bls.n	800aae4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2202      	movs	r2, #2
 800aae0:	631a      	str	r2, [r3, #48]	; 0x30
 800aae2:	e002      	b.n	800aaea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	431a      	orrs	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	ea42 0103 	orr.w	r1, r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	0c1b      	lsrs	r3, r3, #16
 800ab2a:	f003 0204 	and.w	r2, r3, #4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab32:	431a      	orrs	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	ea42 0103 	orr.w	r1, r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	430a      	orrs	r2, r1
 800ab4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	69da      	ldr	r2, [r3, #28]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e01d      	b.n	800abc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d106      	bne.n	800aba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7f7 fe94 	bl	80028c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3304      	adds	r3, #4
 800abb0:	4619      	mov	r1, r3
 800abb2:	4610      	mov	r0, r2
 800abb4:	f000 fb78 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68da      	ldr	r2, [r3, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0201 	orr.w	r2, r2, #1
 800abe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <HAL_TIM_Base_Start_IT+0x50>)
 800abec:	4013      	ands	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b06      	cmp	r3, #6
 800abf4:	d00b      	beq.n	800ac0e <HAL_TIM_Base_Start_IT+0x42>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abfc:	d007      	beq.n	800ac0e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f042 0201 	orr.w	r2, r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	00010007 	.word	0x00010007

0800ac20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e01d      	b.n	800ac6e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d106      	bne.n	800ac4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7f7 feac 	bl	80029a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	f000 fb22 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d122      	bne.n	800acd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d11b      	bne.n	800acd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f06f 0202 	mvn.w	r2, #2
 800aca2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f003 0303 	and.w	r3, r3, #3
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fad7 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800acbe:	e005      	b.n	800accc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fac9 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fada 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d122      	bne.n	800ad26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	f003 0304 	and.w	r3, r3, #4
 800acea:	2b04      	cmp	r3, #4
 800acec:	d11b      	bne.n	800ad26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f06f 0204 	mvn.w	r2, #4
 800acf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2202      	movs	r2, #2
 800acfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 faad 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800ad12:	e005      	b.n	800ad20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fa9f 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fab0 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d122      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	f003 0308 	and.w	r3, r3, #8
 800ad3e:	2b08      	cmp	r3, #8
 800ad40:	d11b      	bne.n	800ad7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f06f 0208 	mvn.w	r2, #8
 800ad4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2204      	movs	r2, #4
 800ad50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69db      	ldr	r3, [r3, #28]
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fa83 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800ad66:	e005      	b.n	800ad74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa75 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa86 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f003 0310 	and.w	r3, r3, #16
 800ad84:	2b10      	cmp	r3, #16
 800ad86:	d122      	bne.n	800adce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	f003 0310 	and.w	r3, r3, #16
 800ad92:	2b10      	cmp	r3, #16
 800ad94:	d11b      	bne.n	800adce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f06f 0210 	mvn.w	r2, #16
 800ad9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2208      	movs	r2, #8
 800ada4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa59 	bl	800b26c <HAL_TIM_IC_CaptureCallback>
 800adba:	e005      	b.n	800adc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fa4b 	bl	800b258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa5c 	bl	800b280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b01      	cmp	r3, #1
 800adda:	d10e      	bne.n	800adfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d107      	bne.n	800adfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f06f 0201 	mvn.w	r2, #1
 800adf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f7f7 f889 	bl	8001f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae04:	2b80      	cmp	r3, #128	; 0x80
 800ae06:	d10e      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae12:	2b80      	cmp	r3, #128	; 0x80
 800ae14:	d107      	bne.n	800ae26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 febd 	bl	800bba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae34:	d10e      	bne.n	800ae54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae40:	2b80      	cmp	r3, #128	; 0x80
 800ae42:	d107      	bne.n	800ae54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 feb0 	bl	800bbb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5e:	2b40      	cmp	r3, #64	; 0x40
 800ae60:	d10e      	bne.n	800ae80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6c:	2b40      	cmp	r3, #64	; 0x40
 800ae6e:	d107      	bne.n	800ae80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa0a 	bl	800b294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b20      	cmp	r3, #32
 800ae8c:	d10e      	bne.n	800aeac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f003 0320 	and.w	r3, r3, #32
 800ae98:	2b20      	cmp	r3, #32
 800ae9a:	d107      	bne.n	800aeac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f06f 0220 	mvn.w	r2, #32
 800aea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fe70 	bl	800bb8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d101      	bne.n	800aece <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aeca:	2302      	movs	r3, #2
 800aecc:	e105      	b.n	800b0da <HAL_TIM_PWM_ConfigChannel+0x226>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2202      	movs	r2, #2
 800aeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b14      	cmp	r3, #20
 800aee2:	f200 80f0 	bhi.w	800b0c6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <HAL_TIM_PWM_ConfigChannel+0x38>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af41 	.word	0x0800af41
 800aef0:	0800b0c7 	.word	0x0800b0c7
 800aef4:	0800b0c7 	.word	0x0800b0c7
 800aef8:	0800b0c7 	.word	0x0800b0c7
 800aefc:	0800af81 	.word	0x0800af81
 800af00:	0800b0c7 	.word	0x0800b0c7
 800af04:	0800b0c7 	.word	0x0800b0c7
 800af08:	0800b0c7 	.word	0x0800b0c7
 800af0c:	0800afc3 	.word	0x0800afc3
 800af10:	0800b0c7 	.word	0x0800b0c7
 800af14:	0800b0c7 	.word	0x0800b0c7
 800af18:	0800b0c7 	.word	0x0800b0c7
 800af1c:	0800b003 	.word	0x0800b003
 800af20:	0800b0c7 	.word	0x0800b0c7
 800af24:	0800b0c7 	.word	0x0800b0c7
 800af28:	0800b0c7 	.word	0x0800b0c7
 800af2c:	0800b045 	.word	0x0800b045
 800af30:	0800b0c7 	.word	0x0800b0c7
 800af34:	0800b0c7 	.word	0x0800b0c7
 800af38:	0800b0c7 	.word	0x0800b0c7
 800af3c:	0800b085 	.word	0x0800b085
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68b9      	ldr	r1, [r7, #8]
 800af46:	4618      	mov	r0, r3
 800af48:	f000 fa4e 	bl	800b3e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	699a      	ldr	r2, [r3, #24]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f042 0208 	orr.w	r2, r2, #8
 800af5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	699a      	ldr	r2, [r3, #24]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0204 	bic.w	r2, r2, #4
 800af6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6999      	ldr	r1, [r3, #24]
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	691a      	ldr	r2, [r3, #16]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	619a      	str	r2, [r3, #24]
      break;
 800af7e:	e0a3      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	4618      	mov	r0, r3
 800af88:	f000 faa0 	bl	800b4cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699a      	ldr	r2, [r3, #24]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6999      	ldr	r1, [r3, #24]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	021a      	lsls	r2, r3, #8
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	430a      	orrs	r2, r1
 800afbe:	619a      	str	r2, [r3, #24]
      break;
 800afc0:	e082      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 faf7 	bl	800b5bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	69da      	ldr	r2, [r3, #28]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f042 0208 	orr.w	r2, r2, #8
 800afdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	69da      	ldr	r2, [r3, #28]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0204 	bic.w	r2, r2, #4
 800afec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69d9      	ldr	r1, [r3, #28]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	691a      	ldr	r2, [r3, #16]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	61da      	str	r2, [r3, #28]
      break;
 800b000:	e062      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fb4d 	bl	800b6a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b01c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	69da      	ldr	r2, [r3, #28]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b02c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69d9      	ldr	r1, [r3, #28]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	021a      	lsls	r2, r3, #8
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	430a      	orrs	r2, r1
 800b040:	61da      	str	r2, [r3, #28]
      break;
 800b042:	e041      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68b9      	ldr	r1, [r7, #8]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fb84 	bl	800b758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f042 0208 	orr.w	r2, r2, #8
 800b05e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f022 0204 	bic.w	r2, r2, #4
 800b06e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	691a      	ldr	r2, [r3, #16]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b082:	e021      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68b9      	ldr	r1, [r7, #8]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f000 fbb6 	bl	800b7fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b09e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	021a      	lsls	r2, r3, #8
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0c4:	e000      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800b0c6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop

0800b0e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIM_ConfigClockSource+0x18>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e0a6      	b.n	800b24a <HAL_TIM_ConfigClockSource+0x166>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	4b4f      	ldr	r3, [pc, #316]	; (800b254 <HAL_TIM_ConfigClockSource+0x170>)
 800b118:	4013      	ands	r3, r2
 800b11a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b122:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b40      	cmp	r3, #64	; 0x40
 800b132:	d067      	beq.n	800b204 <HAL_TIM_ConfigClockSource+0x120>
 800b134:	2b40      	cmp	r3, #64	; 0x40
 800b136:	d80b      	bhi.n	800b150 <HAL_TIM_ConfigClockSource+0x6c>
 800b138:	2b10      	cmp	r3, #16
 800b13a:	d073      	beq.n	800b224 <HAL_TIM_ConfigClockSource+0x140>
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	d802      	bhi.n	800b146 <HAL_TIM_ConfigClockSource+0x62>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d06f      	beq.n	800b224 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b144:	e078      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b146:	2b20      	cmp	r3, #32
 800b148:	d06c      	beq.n	800b224 <HAL_TIM_ConfigClockSource+0x140>
 800b14a:	2b30      	cmp	r3, #48	; 0x30
 800b14c:	d06a      	beq.n	800b224 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b14e:	e073      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b150:	2b70      	cmp	r3, #112	; 0x70
 800b152:	d00d      	beq.n	800b170 <HAL_TIM_ConfigClockSource+0x8c>
 800b154:	2b70      	cmp	r3, #112	; 0x70
 800b156:	d804      	bhi.n	800b162 <HAL_TIM_ConfigClockSource+0x7e>
 800b158:	2b50      	cmp	r3, #80	; 0x50
 800b15a:	d033      	beq.n	800b1c4 <HAL_TIM_ConfigClockSource+0xe0>
 800b15c:	2b60      	cmp	r3, #96	; 0x60
 800b15e:	d041      	beq.n	800b1e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b160:	e06a      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b166:	d066      	beq.n	800b236 <HAL_TIM_ConfigClockSource+0x152>
 800b168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b16c:	d017      	beq.n	800b19e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b16e:	e063      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6818      	ldr	r0, [r3, #0]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	6899      	ldr	r1, [r3, #8]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f000 fc0a 	bl	800b998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b192:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	609a      	str	r2, [r3, #8]
      break;
 800b19c:	e04c      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6818      	ldr	r0, [r3, #0]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	6899      	ldr	r1, [r3, #8]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f000 fbf3 	bl	800b998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1c0:	609a      	str	r2, [r3, #8]
      break;
 800b1c2:	e039      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6818      	ldr	r0, [r3, #0]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	6859      	ldr	r1, [r3, #4]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	f000 fb67 	bl	800b8a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2150      	movs	r1, #80	; 0x50
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fbc0 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b1e2:	e029      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	6859      	ldr	r1, [r3, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	f000 fb86 	bl	800b902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2160      	movs	r1, #96	; 0x60
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 fbb0 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b202:	e019      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6818      	ldr	r0, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6859      	ldr	r1, [r3, #4]
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	461a      	mov	r2, r3
 800b212:	f000 fb47 	bl	800b8a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2140      	movs	r1, #64	; 0x40
 800b21c:	4618      	mov	r0, r3
 800b21e:	f000 fba0 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b222:	e009      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f000 fb97 	bl	800b962 <TIM_ITRx_SetConfig>
      break;
 800b234:	e000      	b.n	800b238 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	fffeff88 	.word	0xfffeff88

0800b258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a40      	ldr	r2, [pc, #256]	; (800b3bc <TIM_Base_SetConfig+0x114>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d013      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c6:	d00f      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a3d      	ldr	r2, [pc, #244]	; (800b3c0 <TIM_Base_SetConfig+0x118>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d00b      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a3c      	ldr	r2, [pc, #240]	; (800b3c4 <TIM_Base_SetConfig+0x11c>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d007      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a3b      	ldr	r2, [pc, #236]	; (800b3c8 <TIM_Base_SetConfig+0x120>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d003      	beq.n	800b2e8 <TIM_Base_SetConfig+0x40>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a3a      	ldr	r2, [pc, #232]	; (800b3cc <TIM_Base_SetConfig+0x124>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d108      	bne.n	800b2fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a2f      	ldr	r2, [pc, #188]	; (800b3bc <TIM_Base_SetConfig+0x114>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d02b      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b308:	d027      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a2c      	ldr	r2, [pc, #176]	; (800b3c0 <TIM_Base_SetConfig+0x118>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d023      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a2b      	ldr	r2, [pc, #172]	; (800b3c4 <TIM_Base_SetConfig+0x11c>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d01f      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a2a      	ldr	r2, [pc, #168]	; (800b3c8 <TIM_Base_SetConfig+0x120>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d01b      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a29      	ldr	r2, [pc, #164]	; (800b3cc <TIM_Base_SetConfig+0x124>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d017      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a28      	ldr	r2, [pc, #160]	; (800b3d0 <TIM_Base_SetConfig+0x128>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d013      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a27      	ldr	r2, [pc, #156]	; (800b3d4 <TIM_Base_SetConfig+0x12c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00f      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a26      	ldr	r2, [pc, #152]	; (800b3d8 <TIM_Base_SetConfig+0x130>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d00b      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a25      	ldr	r2, [pc, #148]	; (800b3dc <TIM_Base_SetConfig+0x134>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d007      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a24      	ldr	r2, [pc, #144]	; (800b3e0 <TIM_Base_SetConfig+0x138>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d003      	beq.n	800b35a <TIM_Base_SetConfig+0xb2>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a23      	ldr	r2, [pc, #140]	; (800b3e4 <TIM_Base_SetConfig+0x13c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d108      	bne.n	800b36c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	4313      	orrs	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	4313      	orrs	r3, r2
 800b378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	689a      	ldr	r2, [r3, #8]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <TIM_Base_SetConfig+0x114>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d003      	beq.n	800b3a0 <TIM_Base_SetConfig+0xf8>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a0c      	ldr	r2, [pc, #48]	; (800b3cc <TIM_Base_SetConfig+0x124>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d103      	bne.n	800b3a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	691a      	ldr	r2, [r3, #16]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	615a      	str	r2, [r3, #20]
}
 800b3ae:	bf00      	nop
 800b3b0:	3714      	adds	r7, #20
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40010000 	.word	0x40010000
 800b3c0:	40000400 	.word	0x40000400
 800b3c4:	40000800 	.word	0x40000800
 800b3c8:	40000c00 	.word	0x40000c00
 800b3cc:	40010400 	.word	0x40010400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	40014400 	.word	0x40014400
 800b3d8:	40014800 	.word	0x40014800
 800b3dc:	40001800 	.word	0x40001800
 800b3e0:	40001c00 	.word	0x40001c00
 800b3e4:	40002000 	.word	0x40002000

0800b3e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	f023 0201 	bic.w	r2, r3, #1
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <TIM_OC1_SetConfig+0xd8>)
 800b414:	4013      	ands	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f023 0302 	bic.w	r3, r3, #2
 800b430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	4313      	orrs	r3, r2
 800b43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a21      	ldr	r2, [pc, #132]	; (800b4c4 <TIM_OC1_SetConfig+0xdc>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d003      	beq.n	800b44c <TIM_OC1_SetConfig+0x64>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a20      	ldr	r2, [pc, #128]	; (800b4c8 <TIM_OC1_SetConfig+0xe0>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d10c      	bne.n	800b466 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f023 0308 	bic.w	r3, r3, #8
 800b452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f023 0304 	bic.w	r3, r3, #4
 800b464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a16      	ldr	r2, [pc, #88]	; (800b4c4 <TIM_OC1_SetConfig+0xdc>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d003      	beq.n	800b476 <TIM_OC1_SetConfig+0x8e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a15      	ldr	r2, [pc, #84]	; (800b4c8 <TIM_OC1_SetConfig+0xe0>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d111      	bne.n	800b49a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	fffeff8f 	.word	0xfffeff8f
 800b4c4:	40010000 	.word	0x40010000
 800b4c8:	40010400 	.word	0x40010400

0800b4cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f023 0210 	bic.w	r2, r3, #16
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <TIM_OC2_SetConfig+0xe4>)
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	021b      	lsls	r3, r3, #8
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f023 0320 	bic.w	r3, r3, #32
 800b516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	4313      	orrs	r3, r2
 800b522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a23      	ldr	r2, [pc, #140]	; (800b5b4 <TIM_OC2_SetConfig+0xe8>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d003      	beq.n	800b534 <TIM_OC2_SetConfig+0x68>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a22      	ldr	r2, [pc, #136]	; (800b5b8 <TIM_OC2_SetConfig+0xec>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d10d      	bne.n	800b550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b53a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	4313      	orrs	r3, r2
 800b546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b54e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a18      	ldr	r2, [pc, #96]	; (800b5b4 <TIM_OC2_SetConfig+0xe8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d003      	beq.n	800b560 <TIM_OC2_SetConfig+0x94>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a17      	ldr	r2, [pc, #92]	; (800b5b8 <TIM_OC2_SetConfig+0xec>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d113      	bne.n	800b588 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b56e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	695b      	ldr	r3, [r3, #20]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	4313      	orrs	r3, r2
 800b57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	4313      	orrs	r3, r2
 800b586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	621a      	str	r2, [r3, #32]
}
 800b5a2:	bf00      	nop
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	feff8fff 	.word	0xfeff8fff
 800b5b4:	40010000 	.word	0x40010000
 800b5b8:	40010400 	.word	0x40010400

0800b5bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <TIM_OC3_SetConfig+0xe0>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	021b      	lsls	r3, r3, #8
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	4313      	orrs	r3, r2
 800b610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4a22      	ldr	r2, [pc, #136]	; (800b6a0 <TIM_OC3_SetConfig+0xe4>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d003      	beq.n	800b622 <TIM_OC3_SetConfig+0x66>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a21      	ldr	r2, [pc, #132]	; (800b6a4 <TIM_OC3_SetConfig+0xe8>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d10d      	bne.n	800b63e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	4313      	orrs	r3, r2
 800b634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a17      	ldr	r2, [pc, #92]	; (800b6a0 <TIM_OC3_SetConfig+0xe4>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d003      	beq.n	800b64e <TIM_OC3_SetConfig+0x92>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a16      	ldr	r2, [pc, #88]	; (800b6a4 <TIM_OC3_SetConfig+0xe8>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d113      	bne.n	800b676 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b65c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	4313      	orrs	r3, r2
 800b668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	4313      	orrs	r3, r2
 800b674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	621a      	str	r2, [r3, #32]
}
 800b690:	bf00      	nop
 800b692:	371c      	adds	r7, #28
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	fffeff8f 	.word	0xfffeff8f
 800b6a0:	40010000 	.word	0x40010000
 800b6a4:	40010400 	.word	0x40010400

0800b6a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b087      	sub	sp, #28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	4b1e      	ldr	r3, [pc, #120]	; (800b74c <TIM_OC4_SetConfig+0xa4>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	021b      	lsls	r3, r3, #8
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	031b      	lsls	r3, r3, #12
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a13      	ldr	r2, [pc, #76]	; (800b750 <TIM_OC4_SetConfig+0xa8>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d003      	beq.n	800b710 <TIM_OC4_SetConfig+0x68>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a12      	ldr	r2, [pc, #72]	; (800b754 <TIM_OC4_SetConfig+0xac>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d109      	bne.n	800b724 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	019b      	lsls	r3, r3, #6
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	621a      	str	r2, [r3, #32]
}
 800b73e:	bf00      	nop
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	feff8fff 	.word	0xfeff8fff
 800b750:	40010000 	.word	0x40010000
 800b754:	40010400 	.word	0x40010400

0800b758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <TIM_OC5_SetConfig+0x98>)
 800b784:	4013      	ands	r3, r2
 800b786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	041b      	lsls	r3, r3, #16
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a12      	ldr	r2, [pc, #72]	; (800b7f4 <TIM_OC5_SetConfig+0x9c>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d003      	beq.n	800b7b6 <TIM_OC5_SetConfig+0x5e>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a11      	ldr	r2, [pc, #68]	; (800b7f8 <TIM_OC5_SetConfig+0xa0>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d109      	bne.n	800b7ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	697a      	ldr	r2, [r7, #20]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	621a      	str	r2, [r3, #32]
}
 800b7e4:	bf00      	nop
 800b7e6:	371c      	adds	r7, #28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	fffeff8f 	.word	0xfffeff8f
 800b7f4:	40010000 	.word	0x40010000
 800b7f8:	40010400 	.word	0x40010400

0800b7fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	4b1c      	ldr	r3, [pc, #112]	; (800b898 <TIM_OC6_SetConfig+0x9c>)
 800b828:	4013      	ands	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	4313      	orrs	r3, r2
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b83e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	051b      	lsls	r3, r3, #20
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a13      	ldr	r2, [pc, #76]	; (800b89c <TIM_OC6_SetConfig+0xa0>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d003      	beq.n	800b85c <TIM_OC6_SetConfig+0x60>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a12      	ldr	r2, [pc, #72]	; (800b8a0 <TIM_OC6_SetConfig+0xa4>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d109      	bne.n	800b870 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	029b      	lsls	r3, r3, #10
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	621a      	str	r2, [r3, #32]
}
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	feff8fff 	.word	0xfeff8fff
 800b89c:	40010000 	.word	0x40010000
 800b8a0:	40010400 	.word	0x40010400

0800b8a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6a1b      	ldr	r3, [r3, #32]
 800b8b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	f023 0201 	bic.w	r2, r3, #1
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	f023 030a 	bic.w	r3, r3, #10
 800b8e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	621a      	str	r2, [r3, #32]
}
 800b8f6:	bf00      	nop
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr

0800b902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b902:	b480      	push	{r7}
 800b904:	b087      	sub	sp, #28
 800b906:	af00      	add	r7, sp, #0
 800b908:	60f8      	str	r0, [r7, #12]
 800b90a:	60b9      	str	r1, [r7, #8]
 800b90c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	f023 0210 	bic.w	r2, r3, #16
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b92c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	031b      	lsls	r3, r3, #12
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	4313      	orrs	r3, r2
 800b936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b93e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	011b      	lsls	r3, r3, #4
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4313      	orrs	r3, r2
 800b948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	621a      	str	r2, [r3, #32]
}
 800b956:	bf00      	nop
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	f043 0307 	orr.w	r3, r3, #7
 800b984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	609a      	str	r2, [r3, #8]
}
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	021a      	lsls	r2, r3, #8
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	431a      	orrs	r2, r3
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	609a      	str	r2, [r3, #8]
}
 800b9cc:	bf00      	nop
 800b9ce:	371c      	adds	r7, #28
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d101      	bne.n	800b9f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	e045      	b.n	800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a1c      	ldr	r2, [pc, #112]	; (800ba88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d004      	beq.n	800ba24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a1b      	ldr	r2, [pc, #108]	; (800ba8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d108      	bne.n	800ba36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	4313      	orrs	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba4e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68fa      	ldr	r2, [r7, #12]
 800ba60:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	40010000 	.word	0x40010000
 800ba8c:	40010400 	.word	0x40010400

0800ba90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d101      	bne.n	800baac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800baa8:	2302      	movs	r3, #2
 800baaa:	e065      	b.n	800bb78 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	4313      	orrs	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	4313      	orrs	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	4313      	orrs	r3, r2
 800badc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	699b      	ldr	r3, [r3, #24]
 800bb20:	041b      	lsls	r3, r3, #16
 800bb22:	4313      	orrs	r3, r2
 800bb24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a16      	ldr	r2, [pc, #88]	; (800bb84 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d004      	beq.n	800bb3a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a14      	ldr	r2, [pc, #80]	; (800bb88 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d115      	bne.n	800bb66 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	051b      	lsls	r3, r3, #20
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	69db      	ldr	r3, [r3, #28]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	4313      	orrs	r3, r2
 800bb64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	40010000 	.word	0x40010000
 800bb88:	40010400 	.word	0x40010400

0800bb8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e040      	b.n	800bc5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d106      	bne.n	800bbf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7f6 ffc8 	bl	8002b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2224      	movs	r2, #36	; 0x24
 800bbf4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f022 0201 	bic.w	r2, r2, #1
 800bc04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f82c 	bl	800bc64 <UART_SetConfig>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d101      	bne.n	800bc16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e022      	b.n	800bc5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 fac4 	bl	800c1ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc42:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f042 0201 	orr.w	r2, r2, #1
 800bc52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fb4b 	bl	800c2f0 <UART_CheckIdleState>
 800bc5a:	4603      	mov	r3, r0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	689a      	ldr	r2, [r3, #8]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	695b      	ldr	r3, [r3, #20]
 800bc82:	431a      	orrs	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	69db      	ldr	r3, [r3, #28]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	4bb1      	ldr	r3, [pc, #708]	; (800bf58 <UART_SetConfig+0x2f4>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	6812      	ldr	r2, [r2, #0]
 800bc9a:	6939      	ldr	r1, [r7, #16]
 800bc9c:	430b      	orrs	r3, r1
 800bc9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68da      	ldr	r2, [r3, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a9f      	ldr	r2, [pc, #636]	; (800bf5c <UART_SetConfig+0x2f8>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d121      	bne.n	800bd28 <UART_SetConfig+0xc4>
 800bce4:	4b9e      	ldr	r3, [pc, #632]	; (800bf60 <UART_SetConfig+0x2fc>)
 800bce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d816      	bhi.n	800bd20 <UART_SetConfig+0xbc>
 800bcf2:	a201      	add	r2, pc, #4	; (adr r2, 800bcf8 <UART_SetConfig+0x94>)
 800bcf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd15 	.word	0x0800bd15
 800bd00:	0800bd0f 	.word	0x0800bd0f
 800bd04:	0800bd1b 	.word	0x0800bd1b
 800bd08:	2301      	movs	r3, #1
 800bd0a:	77fb      	strb	r3, [r7, #31]
 800bd0c:	e151      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd0e:	2302      	movs	r3, #2
 800bd10:	77fb      	strb	r3, [r7, #31]
 800bd12:	e14e      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd14:	2304      	movs	r3, #4
 800bd16:	77fb      	strb	r3, [r7, #31]
 800bd18:	e14b      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd1a:	2308      	movs	r3, #8
 800bd1c:	77fb      	strb	r3, [r7, #31]
 800bd1e:	e148      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd20:	2310      	movs	r3, #16
 800bd22:	77fb      	strb	r3, [r7, #31]
 800bd24:	bf00      	nop
 800bd26:	e144      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a8d      	ldr	r2, [pc, #564]	; (800bf64 <UART_SetConfig+0x300>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d134      	bne.n	800bd9c <UART_SetConfig+0x138>
 800bd32:	4b8b      	ldr	r3, [pc, #556]	; (800bf60 <UART_SetConfig+0x2fc>)
 800bd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd38:	f003 030c 	and.w	r3, r3, #12
 800bd3c:	2b0c      	cmp	r3, #12
 800bd3e:	d829      	bhi.n	800bd94 <UART_SetConfig+0x130>
 800bd40:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <UART_SetConfig+0xe4>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bd7d 	.word	0x0800bd7d
 800bd4c:	0800bd95 	.word	0x0800bd95
 800bd50:	0800bd95 	.word	0x0800bd95
 800bd54:	0800bd95 	.word	0x0800bd95
 800bd58:	0800bd89 	.word	0x0800bd89
 800bd5c:	0800bd95 	.word	0x0800bd95
 800bd60:	0800bd95 	.word	0x0800bd95
 800bd64:	0800bd95 	.word	0x0800bd95
 800bd68:	0800bd83 	.word	0x0800bd83
 800bd6c:	0800bd95 	.word	0x0800bd95
 800bd70:	0800bd95 	.word	0x0800bd95
 800bd74:	0800bd95 	.word	0x0800bd95
 800bd78:	0800bd8f 	.word	0x0800bd8f
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	77fb      	strb	r3, [r7, #31]
 800bd80:	e117      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd82:	2302      	movs	r3, #2
 800bd84:	77fb      	strb	r3, [r7, #31]
 800bd86:	e114      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd88:	2304      	movs	r3, #4
 800bd8a:	77fb      	strb	r3, [r7, #31]
 800bd8c:	e111      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd8e:	2308      	movs	r3, #8
 800bd90:	77fb      	strb	r3, [r7, #31]
 800bd92:	e10e      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd94:	2310      	movs	r3, #16
 800bd96:	77fb      	strb	r3, [r7, #31]
 800bd98:	bf00      	nop
 800bd9a:	e10a      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a71      	ldr	r2, [pc, #452]	; (800bf68 <UART_SetConfig+0x304>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d120      	bne.n	800bde8 <UART_SetConfig+0x184>
 800bda6:	4b6e      	ldr	r3, [pc, #440]	; (800bf60 <UART_SetConfig+0x2fc>)
 800bda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bdb0:	2b10      	cmp	r3, #16
 800bdb2:	d00f      	beq.n	800bdd4 <UART_SetConfig+0x170>
 800bdb4:	2b10      	cmp	r3, #16
 800bdb6:	d802      	bhi.n	800bdbe <UART_SetConfig+0x15a>
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <UART_SetConfig+0x164>
 800bdbc:	e010      	b.n	800bde0 <UART_SetConfig+0x17c>
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d005      	beq.n	800bdce <UART_SetConfig+0x16a>
 800bdc2:	2b30      	cmp	r3, #48	; 0x30
 800bdc4:	d009      	beq.n	800bdda <UART_SetConfig+0x176>
 800bdc6:	e00b      	b.n	800bde0 <UART_SetConfig+0x17c>
 800bdc8:	2300      	movs	r3, #0
 800bdca:	77fb      	strb	r3, [r7, #31]
 800bdcc:	e0f1      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bdce:	2302      	movs	r3, #2
 800bdd0:	77fb      	strb	r3, [r7, #31]
 800bdd2:	e0ee      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bdd4:	2304      	movs	r3, #4
 800bdd6:	77fb      	strb	r3, [r7, #31]
 800bdd8:	e0eb      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bdda:	2308      	movs	r3, #8
 800bddc:	77fb      	strb	r3, [r7, #31]
 800bdde:	e0e8      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bde0:	2310      	movs	r3, #16
 800bde2:	77fb      	strb	r3, [r7, #31]
 800bde4:	bf00      	nop
 800bde6:	e0e4      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a5f      	ldr	r2, [pc, #380]	; (800bf6c <UART_SetConfig+0x308>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d120      	bne.n	800be34 <UART_SetConfig+0x1d0>
 800bdf2:	4b5b      	ldr	r3, [pc, #364]	; (800bf60 <UART_SetConfig+0x2fc>)
 800bdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdfc:	2b40      	cmp	r3, #64	; 0x40
 800bdfe:	d00f      	beq.n	800be20 <UART_SetConfig+0x1bc>
 800be00:	2b40      	cmp	r3, #64	; 0x40
 800be02:	d802      	bhi.n	800be0a <UART_SetConfig+0x1a6>
 800be04:	2b00      	cmp	r3, #0
 800be06:	d005      	beq.n	800be14 <UART_SetConfig+0x1b0>
 800be08:	e010      	b.n	800be2c <UART_SetConfig+0x1c8>
 800be0a:	2b80      	cmp	r3, #128	; 0x80
 800be0c:	d005      	beq.n	800be1a <UART_SetConfig+0x1b6>
 800be0e:	2bc0      	cmp	r3, #192	; 0xc0
 800be10:	d009      	beq.n	800be26 <UART_SetConfig+0x1c2>
 800be12:	e00b      	b.n	800be2c <UART_SetConfig+0x1c8>
 800be14:	2300      	movs	r3, #0
 800be16:	77fb      	strb	r3, [r7, #31]
 800be18:	e0cb      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be1a:	2302      	movs	r3, #2
 800be1c:	77fb      	strb	r3, [r7, #31]
 800be1e:	e0c8      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be20:	2304      	movs	r3, #4
 800be22:	77fb      	strb	r3, [r7, #31]
 800be24:	e0c5      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be26:	2308      	movs	r3, #8
 800be28:	77fb      	strb	r3, [r7, #31]
 800be2a:	e0c2      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be2c:	2310      	movs	r3, #16
 800be2e:	77fb      	strb	r3, [r7, #31]
 800be30:	bf00      	nop
 800be32:	e0be      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a4d      	ldr	r2, [pc, #308]	; (800bf70 <UART_SetConfig+0x30c>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d124      	bne.n	800be88 <UART_SetConfig+0x224>
 800be3e:	4b48      	ldr	r3, [pc, #288]	; (800bf60 <UART_SetConfig+0x2fc>)
 800be40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be4c:	d012      	beq.n	800be74 <UART_SetConfig+0x210>
 800be4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be52:	d802      	bhi.n	800be5a <UART_SetConfig+0x1f6>
 800be54:	2b00      	cmp	r3, #0
 800be56:	d007      	beq.n	800be68 <UART_SetConfig+0x204>
 800be58:	e012      	b.n	800be80 <UART_SetConfig+0x21c>
 800be5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be5e:	d006      	beq.n	800be6e <UART_SetConfig+0x20a>
 800be60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be64:	d009      	beq.n	800be7a <UART_SetConfig+0x216>
 800be66:	e00b      	b.n	800be80 <UART_SetConfig+0x21c>
 800be68:	2300      	movs	r3, #0
 800be6a:	77fb      	strb	r3, [r7, #31]
 800be6c:	e0a1      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be6e:	2302      	movs	r3, #2
 800be70:	77fb      	strb	r3, [r7, #31]
 800be72:	e09e      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be74:	2304      	movs	r3, #4
 800be76:	77fb      	strb	r3, [r7, #31]
 800be78:	e09b      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be7a:	2308      	movs	r3, #8
 800be7c:	77fb      	strb	r3, [r7, #31]
 800be7e:	e098      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be80:	2310      	movs	r3, #16
 800be82:	77fb      	strb	r3, [r7, #31]
 800be84:	bf00      	nop
 800be86:	e094      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a39      	ldr	r2, [pc, #228]	; (800bf74 <UART_SetConfig+0x310>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d124      	bne.n	800bedc <UART_SetConfig+0x278>
 800be92:	4b33      	ldr	r3, [pc, #204]	; (800bf60 <UART_SetConfig+0x2fc>)
 800be94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bea0:	d012      	beq.n	800bec8 <UART_SetConfig+0x264>
 800bea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bea6:	d802      	bhi.n	800beae <UART_SetConfig+0x24a>
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d007      	beq.n	800bebc <UART_SetConfig+0x258>
 800beac:	e012      	b.n	800bed4 <UART_SetConfig+0x270>
 800beae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beb2:	d006      	beq.n	800bec2 <UART_SetConfig+0x25e>
 800beb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beb8:	d009      	beq.n	800bece <UART_SetConfig+0x26a>
 800beba:	e00b      	b.n	800bed4 <UART_SetConfig+0x270>
 800bebc:	2301      	movs	r3, #1
 800bebe:	77fb      	strb	r3, [r7, #31]
 800bec0:	e077      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bec2:	2302      	movs	r3, #2
 800bec4:	77fb      	strb	r3, [r7, #31]
 800bec6:	e074      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bec8:	2304      	movs	r3, #4
 800beca:	77fb      	strb	r3, [r7, #31]
 800becc:	e071      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bece:	2308      	movs	r3, #8
 800bed0:	77fb      	strb	r3, [r7, #31]
 800bed2:	e06e      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bed4:	2310      	movs	r3, #16
 800bed6:	77fb      	strb	r3, [r7, #31]
 800bed8:	bf00      	nop
 800beda:	e06a      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a25      	ldr	r2, [pc, #148]	; (800bf78 <UART_SetConfig+0x314>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d124      	bne.n	800bf30 <UART_SetConfig+0x2cc>
 800bee6:	4b1e      	ldr	r3, [pc, #120]	; (800bf60 <UART_SetConfig+0x2fc>)
 800bee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef4:	d012      	beq.n	800bf1c <UART_SetConfig+0x2b8>
 800bef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befa:	d802      	bhi.n	800bf02 <UART_SetConfig+0x29e>
 800befc:	2b00      	cmp	r3, #0
 800befe:	d007      	beq.n	800bf10 <UART_SetConfig+0x2ac>
 800bf00:	e012      	b.n	800bf28 <UART_SetConfig+0x2c4>
 800bf02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf06:	d006      	beq.n	800bf16 <UART_SetConfig+0x2b2>
 800bf08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf0c:	d009      	beq.n	800bf22 <UART_SetConfig+0x2be>
 800bf0e:	e00b      	b.n	800bf28 <UART_SetConfig+0x2c4>
 800bf10:	2300      	movs	r3, #0
 800bf12:	77fb      	strb	r3, [r7, #31]
 800bf14:	e04d      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf16:	2302      	movs	r3, #2
 800bf18:	77fb      	strb	r3, [r7, #31]
 800bf1a:	e04a      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	77fb      	strb	r3, [r7, #31]
 800bf20:	e047      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf22:	2308      	movs	r3, #8
 800bf24:	77fb      	strb	r3, [r7, #31]
 800bf26:	e044      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf28:	2310      	movs	r3, #16
 800bf2a:	77fb      	strb	r3, [r7, #31]
 800bf2c:	bf00      	nop
 800bf2e:	e040      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a11      	ldr	r2, [pc, #68]	; (800bf7c <UART_SetConfig+0x318>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d139      	bne.n	800bfae <UART_SetConfig+0x34a>
 800bf3a:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <UART_SetConfig+0x2fc>)
 800bf3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bf44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf48:	d027      	beq.n	800bf9a <UART_SetConfig+0x336>
 800bf4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf4e:	d817      	bhi.n	800bf80 <UART_SetConfig+0x31c>
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d01c      	beq.n	800bf8e <UART_SetConfig+0x32a>
 800bf54:	e027      	b.n	800bfa6 <UART_SetConfig+0x342>
 800bf56:	bf00      	nop
 800bf58:	efff69f3 	.word	0xefff69f3
 800bf5c:	40011000 	.word	0x40011000
 800bf60:	40023800 	.word	0x40023800
 800bf64:	40004400 	.word	0x40004400
 800bf68:	40004800 	.word	0x40004800
 800bf6c:	40004c00 	.word	0x40004c00
 800bf70:	40005000 	.word	0x40005000
 800bf74:	40011400 	.word	0x40011400
 800bf78:	40007800 	.word	0x40007800
 800bf7c:	40007c00 	.word	0x40007c00
 800bf80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf84:	d006      	beq.n	800bf94 <UART_SetConfig+0x330>
 800bf86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf8a:	d009      	beq.n	800bfa0 <UART_SetConfig+0x33c>
 800bf8c:	e00b      	b.n	800bfa6 <UART_SetConfig+0x342>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	77fb      	strb	r3, [r7, #31]
 800bf92:	e00e      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf94:	2302      	movs	r3, #2
 800bf96:	77fb      	strb	r3, [r7, #31]
 800bf98:	e00b      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bf9a:	2304      	movs	r3, #4
 800bf9c:	77fb      	strb	r3, [r7, #31]
 800bf9e:	e008      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	77fb      	strb	r3, [r7, #31]
 800bfa4:	e005      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bfa6:	2310      	movs	r3, #16
 800bfa8:	77fb      	strb	r3, [r7, #31]
 800bfaa:	bf00      	nop
 800bfac:	e001      	b.n	800bfb2 <UART_SetConfig+0x34e>
 800bfae:	2310      	movs	r3, #16
 800bfb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfba:	d17c      	bne.n	800c0b6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800bfbc:	7ffb      	ldrb	r3, [r7, #31]
 800bfbe:	2b08      	cmp	r3, #8
 800bfc0:	d859      	bhi.n	800c076 <UART_SetConfig+0x412>
 800bfc2:	a201      	add	r2, pc, #4	; (adr r2, 800bfc8 <UART_SetConfig+0x364>)
 800bfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc8:	0800bfed 	.word	0x0800bfed
 800bfcc:	0800c00b 	.word	0x0800c00b
 800bfd0:	0800c029 	.word	0x0800c029
 800bfd4:	0800c077 	.word	0x0800c077
 800bfd8:	0800c041 	.word	0x0800c041
 800bfdc:	0800c077 	.word	0x0800c077
 800bfe0:	0800c077 	.word	0x0800c077
 800bfe4:	0800c077 	.word	0x0800c077
 800bfe8:	0800c05f 	.word	0x0800c05f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800bfec:	f7fc f8a4 	bl	8008138 <HAL_RCC_GetPCLK1Freq>
 800bff0:	4603      	mov	r3, r0
 800bff2:	005a      	lsls	r2, r3, #1
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	085b      	lsrs	r3, r3, #1
 800bffa:	441a      	add	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	fbb2 f3f3 	udiv	r3, r2, r3
 800c004:	b29b      	uxth	r3, r3
 800c006:	61bb      	str	r3, [r7, #24]
        break;
 800c008:	e038      	b.n	800c07c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c00a:	f7fc f8a9 	bl	8008160 <HAL_RCC_GetPCLK2Freq>
 800c00e:	4603      	mov	r3, r0
 800c010:	005a      	lsls	r2, r3, #1
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	085b      	lsrs	r3, r3, #1
 800c018:	441a      	add	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c022:	b29b      	uxth	r3, r3
 800c024:	61bb      	str	r3, [r7, #24]
        break;
 800c026:	e029      	b.n	800c07c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	085a      	lsrs	r2, r3, #1
 800c02e:	4b5d      	ldr	r3, [pc, #372]	; (800c1a4 <UART_SetConfig+0x540>)
 800c030:	4413      	add	r3, r2
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6852      	ldr	r2, [r2, #4]
 800c036:	fbb3 f3f2 	udiv	r3, r3, r2
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	61bb      	str	r3, [r7, #24]
        break;
 800c03e:	e01d      	b.n	800c07c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c040:	f7fb ffbc 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800c044:	4603      	mov	r3, r0
 800c046:	005a      	lsls	r2, r3, #1
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	085b      	lsrs	r3, r3, #1
 800c04e:	441a      	add	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	fbb2 f3f3 	udiv	r3, r2, r3
 800c058:	b29b      	uxth	r3, r3
 800c05a:	61bb      	str	r3, [r7, #24]
        break;
 800c05c:	e00e      	b.n	800c07c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	085b      	lsrs	r3, r3, #1
 800c064:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c070:	b29b      	uxth	r3, r3
 800c072:	61bb      	str	r3, [r7, #24]
        break;
 800c074:	e002      	b.n	800c07c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	75fb      	strb	r3, [r7, #23]
        break;
 800c07a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	2b0f      	cmp	r3, #15
 800c080:	d916      	bls.n	800c0b0 <UART_SetConfig+0x44c>
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c088:	d212      	bcs.n	800c0b0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	f023 030f 	bic.w	r3, r3, #15
 800c092:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	085b      	lsrs	r3, r3, #1
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f003 0307 	and.w	r3, r3, #7
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	89fa      	ldrh	r2, [r7, #14]
 800c0ac:	60da      	str	r2, [r3, #12]
 800c0ae:	e06e      	b.n	800c18e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	75fb      	strb	r3, [r7, #23]
 800c0b4:	e06b      	b.n	800c18e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800c0b6:	7ffb      	ldrb	r3, [r7, #31]
 800c0b8:	2b08      	cmp	r3, #8
 800c0ba:	d857      	bhi.n	800c16c <UART_SetConfig+0x508>
 800c0bc:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <UART_SetConfig+0x460>)
 800c0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c2:	bf00      	nop
 800c0c4:	0800c0e9 	.word	0x0800c0e9
 800c0c8:	0800c105 	.word	0x0800c105
 800c0cc:	0800c121 	.word	0x0800c121
 800c0d0:	0800c16d 	.word	0x0800c16d
 800c0d4:	0800c139 	.word	0x0800c139
 800c0d8:	0800c16d 	.word	0x0800c16d
 800c0dc:	0800c16d 	.word	0x0800c16d
 800c0e0:	0800c16d 	.word	0x0800c16d
 800c0e4:	0800c155 	.word	0x0800c155
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c0e8:	f7fc f826 	bl	8008138 <HAL_RCC_GetPCLK1Freq>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	085b      	lsrs	r3, r3, #1
 800c0f4:	441a      	add	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	61bb      	str	r3, [r7, #24]
        break;
 800c102:	e036      	b.n	800c172 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c104:	f7fc f82c 	bl	8008160 <HAL_RCC_GetPCLK2Freq>
 800c108:	4602      	mov	r2, r0
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	085b      	lsrs	r3, r3, #1
 800c110:	441a      	add	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	61bb      	str	r3, [r7, #24]
        break;
 800c11e:	e028      	b.n	800c172 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	085a      	lsrs	r2, r3, #1
 800c126:	4b20      	ldr	r3, [pc, #128]	; (800c1a8 <UART_SetConfig+0x544>)
 800c128:	4413      	add	r3, r2
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6852      	ldr	r2, [r2, #4]
 800c12e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c132:	b29b      	uxth	r3, r3
 800c134:	61bb      	str	r3, [r7, #24]
        break;
 800c136:	e01c      	b.n	800c172 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c138:	f7fb ff40 	bl	8007fbc <HAL_RCC_GetSysClockFreq>
 800c13c:	4602      	mov	r2, r0
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	085b      	lsrs	r3, r3, #1
 800c144:	441a      	add	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c14e:	b29b      	uxth	r3, r3
 800c150:	61bb      	str	r3, [r7, #24]
        break;
 800c152:	e00e      	b.n	800c172 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	085b      	lsrs	r3, r3, #1
 800c15a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	fbb2 f3f3 	udiv	r3, r2, r3
 800c166:	b29b      	uxth	r3, r3
 800c168:	61bb      	str	r3, [r7, #24]
        break;
 800c16a:	e002      	b.n	800c172 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800c16c:	2301      	movs	r3, #1
 800c16e:	75fb      	strb	r3, [r7, #23]
        break;
 800c170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	2b0f      	cmp	r3, #15
 800c176:	d908      	bls.n	800c18a <UART_SetConfig+0x526>
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c17e:	d204      	bcs.n	800c18a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	60da      	str	r2, [r3, #12]
 800c188:	e001      	b.n	800c18e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3720      	adds	r7, #32
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	01e84800 	.word	0x01e84800
 800c1a8:	00f42400 	.word	0x00f42400

0800c1ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00a      	beq.n	800c1d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	430a      	orrs	r2, r1
 800c1d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00a      	beq.n	800c1f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	430a      	orrs	r2, r1
 800c1f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	f003 0304 	and.w	r3, r3, #4
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00a      	beq.n	800c21a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	430a      	orrs	r2, r1
 800c218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21e:	f003 0308 	and.w	r3, r3, #8
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	430a      	orrs	r2, r1
 800c23a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	f003 0310 	and.w	r3, r3, #16
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00a      	beq.n	800c25e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	430a      	orrs	r2, r1
 800c27e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01a      	beq.n	800c2c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2aa:	d10a      	bne.n	800c2c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00a      	beq.n	800c2e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	430a      	orrs	r2, r1
 800c2e2:	605a      	str	r2, [r3, #4]
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af02      	add	r7, sp, #8
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c2fe:	f7f6 ffad 	bl	800325c <HAL_GetTick>
 800c302:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0308 	and.w	r3, r3, #8
 800c30e:	2b08      	cmp	r3, #8
 800c310:	d10e      	bne.n	800c330 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c312:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f814 	bl	800c34e <UART_WaitOnFlagUntilTimeout>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e00a      	b.n	800c346 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2220      	movs	r2, #32
 800c33a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	603b      	str	r3, [r7, #0]
 800c35a:	4613      	mov	r3, r2
 800c35c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c35e:	e02a      	b.n	800c3b6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c366:	d026      	beq.n	800c3b6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c368:	f7f6 ff78 	bl	800325c <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	69ba      	ldr	r2, [r7, #24]
 800c374:	429a      	cmp	r2, r3
 800c376:	d302      	bcc.n	800c37e <UART_WaitOnFlagUntilTimeout+0x30>
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d11b      	bne.n	800c3b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c38c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f022 0201 	bic.w	r2, r2, #1
 800c39c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2220      	movs	r2, #32
 800c3a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2220      	movs	r2, #32
 800c3a8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c3b2:	2303      	movs	r3, #3
 800c3b4:	e00f      	b.n	800c3d6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	69da      	ldr	r2, [r3, #28]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	4013      	ands	r3, r2
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	bf0c      	ite	eq
 800c3c6:	2301      	moveq	r3, #1
 800c3c8:	2300      	movne	r3, #0
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	79fb      	ldrb	r3, [r7, #7]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d0c5      	beq.n	800c360 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d027      	beq.n	800c44a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4b2f      	ldr	r3, [pc, #188]	; (800c4c0 <FMC_SDRAM_Init+0xe0>)
 800c404:	4013      	ands	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c410:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c416:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c41c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c422:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c428:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c42e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c434:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c43a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	4313      	orrs	r3, r2
 800c440:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	e032      	b.n	800c4b0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c456:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c460:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c466:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <FMC_SDRAM_Init+0xe0>)
 800c478:	4013      	ands	r3, r2
 800c47a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c484:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c48a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c490:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c496:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c49c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3714      	adds	r7, #20
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	ffff8000 	.word	0xffff8000

0800c4c4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d02e      	beq.n	800c53c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4ea:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c4fa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	3b01      	subs	r3, #1
 800c502:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c504:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c50e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	3b01      	subs	r3, #1
 800c516:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c518:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	3b01      	subs	r3, #1
 800c520:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c522:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	3b01      	subs	r3, #1
 800c52a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c52c:	4313      	orrs	r3, r2
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	4313      	orrs	r3, r2
 800c532:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	609a      	str	r2, [r3, #8]
 800c53a:	e039      	b.n	800c5b0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4b1e      	ldr	r3, [pc, #120]	; (800c5c0 <FMC_SDRAM_Timing_Init+0xfc>)
 800c546:	4013      	ands	r3, r2
 800c548:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	3b01      	subs	r3, #1
 800c550:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	3b01      	subs	r3, #1
 800c558:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c55a:	4313      	orrs	r3, r2
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c56e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c57e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	3b01      	subs	r3, #1
 800c586:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c588:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	3b01      	subs	r3, #1
 800c590:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c592:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	699b      	ldr	r3, [r3, #24]
 800c598:	3b01      	subs	r3, #1
 800c59a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c59c:	4313      	orrs	r3, r2
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	693a      	ldr	r2, [r7, #16]
 800c5ae:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	ff0f0fff 	.word	0xff0f0fff

0800c5c4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c5dc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c5e6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	371c      	adds	r7, #28
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	431a      	orrs	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c62c:	b084      	sub	sp, #16
 800c62e:	b480      	push	{r7}
 800c630:	b085      	sub	sp, #20
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	f107 001c 	add.w	r0, r7, #28
 800c63a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c642:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c644:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c646:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c64a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c64e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c652:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c656:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685a      	ldr	r2, [r3, #4]
 800c662:	4b07      	ldr	r3, [pc, #28]	; (800c680 <SDMMC_Init+0x54>)
 800c664:	4013      	ands	r3, r2
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	431a      	orrs	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	b004      	add	sp, #16
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	ffff8100 	.word	0xffff8100

0800c684 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2203      	movs	r2, #3
 800c6aa:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	370c      	adds	r7, #12
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b083      	sub	sp, #12
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 0303 	and.w	r3, r3, #3
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
	...

0800c6d8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c6fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c702:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	4313      	orrs	r3, r2
 800c708:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	68da      	ldr	r2, [r3, #12]
 800c70e:	4b06      	ldr	r3, [pc, #24]	; (800c728 <SDMMC_SendCommand+0x50>)
 800c710:	4013      	ands	r3, r2
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	431a      	orrs	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	fffff000 	.word	0xfffff000

0800c72c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	691b      	ldr	r3, [r3, #16]
 800c738:	b2db      	uxtb	r3, r3
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c746:	b480      	push	{r7}
 800c748:	b085      	sub	sp, #20
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	3314      	adds	r3, #20
 800c758:	461a      	mov	r2, r3
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	4413      	add	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
}  
 800c764:	4618      	mov	r0, r3
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c796:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c79c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c7a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c7ba:	2300      	movs	r3, #0

}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3714      	adds	r7, #20
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c7da:	2310      	movs	r3, #16
 800c7dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7ec:	f107 0308 	add.w	r3, r7, #8
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7ff ff70 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c7f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7fc:	2110      	movs	r1, #16
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fa64 	bl	800cccc <SDMMC_GetCmdResp1>
 800c804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c806:	69fb      	ldr	r3, [r7, #28]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3720      	adds	r7, #32
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b088      	sub	sp, #32
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c81a:	2300      	movs	r3, #0
 800c81c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c822:	2311      	movs	r3, #17
 800c824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c826:	2340      	movs	r3, #64	; 0x40
 800c828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c82a:	2300      	movs	r3, #0
 800c82c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c82e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c832:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c834:	f107 0308 	add.w	r3, r7, #8
 800c838:	4619      	mov	r1, r3
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff ff4c 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c840:	f241 3288 	movw	r2, #5000	; 0x1388
 800c844:	2111      	movs	r1, #17
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fa40 	bl	800cccc <SDMMC_GetCmdResp1>
 800c84c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c84e:	69fb      	ldr	r3, [r7, #28]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c862:	2300      	movs	r3, #0
 800c864:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c86a:	2312      	movs	r3, #18
 800c86c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c86e:	2340      	movs	r3, #64	; 0x40
 800c870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c872:	2300      	movs	r3, #0
 800c874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c87a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c87c:	f107 0308 	add.w	r3, r7, #8
 800c880:	4619      	mov	r1, r3
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff ff28 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c888:	f241 3288 	movw	r2, #5000	; 0x1388
 800c88c:	2112      	movs	r1, #18
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fa1c 	bl	800cccc <SDMMC_GetCmdResp1>
 800c894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c896:	69fb      	ldr	r3, [r7, #28]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3720      	adds	r7, #32
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c8b2:	2318      	movs	r3, #24
 800c8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8c2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8c4:	f107 0308 	add.w	r3, r7, #8
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff ff04 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d4:	2118      	movs	r1, #24
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 f9f8 	bl	800cccc <SDMMC_GetCmdResp1>
 800c8dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8de:	69fb      	ldr	r3, [r7, #28]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3720      	adds	r7, #32
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b088      	sub	sp, #32
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c8fa:	2319      	movs	r3, #25
 800c8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8fe:	2340      	movs	r3, #64	; 0x40
 800c900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c902:	2300      	movs	r3, #0
 800c904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c90a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c90c:	f107 0308 	add.w	r3, r7, #8
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f7ff fee0 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c918:	f241 3288 	movw	r2, #5000	; 0x1388
 800c91c:	2119      	movs	r1, #25
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 f9d4 	bl	800cccc <SDMMC_GetCmdResp1>
 800c924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c926:	69fb      	ldr	r3, [r7, #28]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3720      	adds	r7, #32
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c938:	2300      	movs	r3, #0
 800c93a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c940:	230c      	movs	r3, #12
 800c942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c944:	2340      	movs	r3, #64	; 0x40
 800c946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c948:	2300      	movs	r3, #0
 800c94a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c950:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c952:	f107 0308 	add.w	r3, r7, #8
 800c956:	4619      	mov	r1, r3
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff febd 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800c95e:	4a05      	ldr	r2, [pc, #20]	; (800c974 <SDMMC_CmdStopTransfer+0x44>)
 800c960:	210c      	movs	r1, #12
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f9b2 	bl	800cccc <SDMMC_GetCmdResp1>
 800c968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c96a:	69fb      	ldr	r3, [r7, #28]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3720      	adds	r7, #32
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	05f5e100 	.word	0x05f5e100

0800c978 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08a      	sub	sp, #40	; 0x28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c984:	2300      	movs	r3, #0
 800c986:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c98c:	2307      	movs	r3, #7
 800c98e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c990:	2340      	movs	r3, #64	; 0x40
 800c992:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c99c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c99e:	f107 0310 	add.w	r3, r7, #16
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7ff fe97 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ae:	2107      	movs	r1, #7
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f000 f98b 	bl	800cccc <SDMMC_GetCmdResp1>
 800c9b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3728      	adds	r7, #40	; 0x28
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b088      	sub	sp, #32
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9e4:	f107 0308 	add.w	r3, r7, #8
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff fe74 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f941 	bl	800cc78 <SDMMC_GetCmdError>
 800c9f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9f8:	69fb      	ldr	r3, [r7, #28]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3720      	adds	r7, #32
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b088      	sub	sp, #32
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ca0e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ca12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ca14:	2308      	movs	r3, #8
 800ca16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca24:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca26:	f107 0308 	add.w	r3, r7, #8
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff fe53 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fb12 	bl	800d05c <SDMMC_GetCmdResp7>
 800ca38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b088      	sub	sp, #32
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ca56:	2337      	movs	r3, #55	; 0x37
 800ca58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca66:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca68:	f107 0308 	add.w	r3, r7, #8
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fe32 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ca74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca78:	2137      	movs	r1, #55	; 0x37
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f926 	bl	800cccc <SDMMC_GetCmdResp1>
 800ca80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca82:	69fb      	ldr	r3, [r7, #28]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3720      	adds	r7, #32
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b088      	sub	sp, #32
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ca96:	2300      	movs	r3, #0
 800ca98:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800ca9a:	683a      	ldr	r2, [r7, #0]
 800ca9c:	4b0d      	ldr	r3, [pc, #52]	; (800cad4 <SDMMC_CmdAppOperCommand+0x48>)
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800caa2:	2329      	movs	r3, #41	; 0x29
 800caa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caa6:	2340      	movs	r3, #64	; 0x40
 800caa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cab4:	f107 0308 	add.w	r3, r7, #8
 800cab8:	4619      	mov	r1, r3
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff fe0c 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 fa29 	bl	800cf18 <SDMMC_GetCmdResp3>
 800cac6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cac8:	69fb      	ldr	r3, [r7, #28]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	80100000 	.word	0x80100000

0800cad8 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cae2:	2300      	movs	r3, #0
 800cae4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800caea:	2306      	movs	r3, #6
 800caec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caee:	2340      	movs	r3, #64	; 0x40
 800caf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800caf2:	2300      	movs	r3, #0
 800caf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800caf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cafa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cafc:	f107 0308 	add.w	r3, r7, #8
 800cb00:	4619      	mov	r1, r3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff fde8 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cb08:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb0c:	2106      	movs	r1, #6
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 f8dc 	bl	800cccc <SDMMC_GetCmdResp1>
 800cb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb16:	69fb      	ldr	r3, [r7, #28]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3720      	adds	r7, #32
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cb30:	2333      	movs	r3, #51	; 0x33
 800cb32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb34:	2340      	movs	r3, #64	; 0x40
 800cb36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb40:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	4619      	mov	r1, r3
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff fdc5 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cb4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb52:	2133      	movs	r1, #51	; 0x33
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f8b9 	bl	800cccc <SDMMC_GetCmdResp1>
 800cb5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb5c:	69fb      	ldr	r3, [r7, #28]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3720      	adds	r7, #32
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b088      	sub	sp, #32
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cb76:	2302      	movs	r3, #2
 800cb78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cb7a:	23c0      	movs	r3, #192	; 0xc0
 800cb7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb86:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7ff fda2 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f97f 	bl	800ce98 <SDMMC_GetCmdResp2>
 800cb9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb9c:	69fb      	ldr	r3, [r7, #28]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3720      	adds	r7, #32
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b088      	sub	sp, #32
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cbb8:	2309      	movs	r3, #9
 800cbba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cbbc:	23c0      	movs	r3, #192	; 0xc0
 800cbbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbca:	f107 0308 	add.w	r3, r7, #8
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fd81 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f95e 	bl	800ce98 <SDMMC_GetCmdResp2>
 800cbdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbde:	69fb      	ldr	r3, [r7, #28]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3720      	adds	r7, #32
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b088      	sub	sp, #32
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cbfa:	2303      	movs	r3, #3
 800cbfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbfe:	2340      	movs	r3, #64	; 0x40
 800cc00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc0a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc0c:	f107 0308 	add.w	r3, r7, #8
 800cc10:	4619      	mov	r1, r3
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff fd60 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	2103      	movs	r1, #3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f9af 	bl	800cf80 <SDMMC_GetCmdResp6>
 800cc22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc24:	69fb      	ldr	r3, [r7, #28]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3720      	adds	r7, #32
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b088      	sub	sp, #32
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cc40:	230d      	movs	r3, #13
 800cc42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc44:	2340      	movs	r3, #64	; 0x40
 800cc46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc50:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc52:	f107 0308 	add.w	r3, r7, #8
 800cc56:	4619      	mov	r1, r3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff fd3d 	bl	800c6d8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cc5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc62:	210d      	movs	r1, #13
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f831 	bl	800cccc <SDMMC_GetCmdResp1>
 800cc6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc6c:	69fb      	ldr	r3, [r7, #28]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cc78:	b490      	push	{r4, r7}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cc80:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <SDMMC_GetCmdError+0x4c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a10      	ldr	r2, [pc, #64]	; (800ccc8 <SDMMC_GetCmdError+0x50>)
 800cc86:	fba2 2303 	umull	r2, r3, r2, r3
 800cc8a:	0a5b      	lsrs	r3, r3, #9
 800cc8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800cc94:	4623      	mov	r3, r4
 800cc96:	1e5c      	subs	r4, r3, #1
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d102      	bne.n	800cca2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cca0:	e00a      	b.n	800ccb8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0f2      	beq.n	800cc94 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800ccb4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ccb6:	2300      	movs	r3, #0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bc90      	pop	{r4, r7}
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	2000002c 	.word	0x2000002c
 800ccc8:	10624dd3 	.word	0x10624dd3

0800cccc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cccc:	b590      	push	{r4, r7, lr}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800ccda:	4b6c      	ldr	r3, [pc, #432]	; (800ce8c <SDMMC_GetCmdResp1+0x1c0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a6c      	ldr	r2, [pc, #432]	; (800ce90 <SDMMC_GetCmdResp1+0x1c4>)
 800cce0:	fba2 2303 	umull	r2, r3, r2, r3
 800cce4:	0a5b      	lsrs	r3, r3, #9
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ccec:	4623      	mov	r3, r4
 800ccee:	1e5c      	subs	r4, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccf8:	e0c3      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0f2      	beq.n	800ccec <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd0a:	f003 0304 	and.w	r3, r3, #4
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d004      	beq.n	800cd1c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2204      	movs	r2, #4
 800cd16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd18:	2304      	movs	r3, #4
 800cd1a:	e0b2      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d004      	beq.n	800cd32 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e0a7      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f7ff fcfa 	bl	800c72c <SDMMC_GetCommandResponse>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	7afb      	ldrb	r3, [r7, #11]
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d001      	beq.n	800cd46 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e09d      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cd4c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cd4e:	2100      	movs	r1, #0
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff fcf8 	bl	800c746 <SDMMC_GetResponse>
 800cd56:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	4b4e      	ldr	r3, [pc, #312]	; (800ce94 <SDMMC_GetCmdResp1+0x1c8>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e08d      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	da02      	bge.n	800cd72 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cd6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd70:	e087      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cd7c:	2340      	movs	r3, #64	; 0x40
 800cd7e:	e080      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cd8a:	2380      	movs	r3, #128	; 0x80
 800cd8c:	e079      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d002      	beq.n	800cd9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd9c:	e071      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdac:	e069      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cdb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdbc:	e061      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d002      	beq.n	800cdce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cdc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdcc:	e059      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cdd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cddc:	e051      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cde8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdec:	e049      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cdf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cdfc:	e041      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800ce08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce0c:	e039      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ce18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce1c:	e031      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ce28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ce2c:	e029      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ce38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce3c:	e021      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ce48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce4c:	e019      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ce58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ce5c:	e011      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ce68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce6c:	e009      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ce78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ce7c:	e001      	b.n	800ce82 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	371c      	adds	r7, #28
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd90      	pop	{r4, r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	2000002c 	.word	0x2000002c
 800ce90:	10624dd3 	.word	0x10624dd3
 800ce94:	fdffe008 	.word	0xfdffe008

0800ce98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ce98:	b490      	push	{r4, r7}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cea0:	4b1b      	ldr	r3, [pc, #108]	; (800cf10 <SDMMC_GetCmdResp2+0x78>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a1b      	ldr	r2, [pc, #108]	; (800cf14 <SDMMC_GetCmdResp2+0x7c>)
 800cea6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceaa:	0a5b      	lsrs	r3, r3, #9
 800ceac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800ceb4:	4623      	mov	r3, r4
 800ceb6:	1e5c      	subs	r4, r3, #1
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d102      	bne.n	800cec2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cec0:	e020      	b.n	800cf04 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d0f2      	beq.n	800ceb4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced2:	f003 0304 	and.w	r3, r3, #4
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d004      	beq.n	800cee4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2204      	movs	r2, #4
 800cede:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cee0:	2304      	movs	r3, #4
 800cee2:	e00f      	b.n	800cf04 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee8:	f003 0301 	and.w	r3, r3, #1
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d004      	beq.n	800cefa <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cef6:	2301      	movs	r3, #1
 800cef8:	e004      	b.n	800cf04 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bc90      	pop	{r4, r7}
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	2000002c 	.word	0x2000002c
 800cf14:	10624dd3 	.word	0x10624dd3

0800cf18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cf18:	b490      	push	{r4, r7}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cf20:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <SDMMC_GetCmdResp3+0x60>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a15      	ldr	r2, [pc, #84]	; (800cf7c <SDMMC_GetCmdResp3+0x64>)
 800cf26:	fba2 2303 	umull	r2, r3, r2, r3
 800cf2a:	0a5b      	lsrs	r3, r3, #9
 800cf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800cf34:	4623      	mov	r3, r4
 800cf36:	1e5c      	subs	r4, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf40:	e015      	b.n	800cf6e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf46:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d0f2      	beq.n	800cf34 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf52:	f003 0304 	and.w	r3, r3, #4
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d004      	beq.n	800cf64 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2204      	movs	r2, #4
 800cf5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf60:	2304      	movs	r3, #4
 800cf62:	e004      	b.n	800cf6e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800cf6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc90      	pop	{r4, r7}
 800cf76:	4770      	bx	lr
 800cf78:	2000002c 	.word	0x2000002c
 800cf7c:	10624dd3 	.word	0x10624dd3

0800cf80 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b087      	sub	sp, #28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800cf8e:	4b31      	ldr	r3, [pc, #196]	; (800d054 <SDMMC_GetCmdResp6+0xd4>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a31      	ldr	r2, [pc, #196]	; (800d058 <SDMMC_GetCmdResp6+0xd8>)
 800cf94:	fba2 2303 	umull	r2, r3, r2, r3
 800cf98:	0a5b      	lsrs	r3, r3, #9
 800cf9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf9e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800cfa2:	4623      	mov	r3, r4
 800cfa4:	1e5c      	subs	r4, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfae:	e04c      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0f2      	beq.n	800cfa2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc0:	f003 0304 	and.w	r3, r3, #4
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2204      	movs	r2, #4
 800cfcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfce:	2304      	movs	r3, #4
 800cfd0:	e03b      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d004      	beq.n	800cfe8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e030      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff fb9f 	bl	800c72c <SDMMC_GetCommandResponse>
 800cfee:	4603      	mov	r3, r0
 800cff0:	461a      	mov	r2, r3
 800cff2:	7afb      	ldrb	r3, [r7, #11]
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d001      	beq.n	800cffc <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e026      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800d002:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d004:	2100      	movs	r1, #0
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f7ff fb9d 	bl	800c746 <SDMMC_GetResponse>
 800d00c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d106      	bne.n	800d026 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	0c1b      	lsrs	r3, r3, #16
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d022:	2300      	movs	r3, #0
 800d024:	e011      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d034:	e009      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d044:	e001      	b.n	800d04a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd90      	pop	{r4, r7, pc}
 800d052:	bf00      	nop
 800d054:	2000002c 	.word	0x2000002c
 800d058:	10624dd3 	.word	0x10624dd3

0800d05c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d05c:	b490      	push	{r4, r7}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800d064:	4b18      	ldr	r3, [pc, #96]	; (800d0c8 <SDMMC_GetCmdResp7+0x6c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a18      	ldr	r2, [pc, #96]	; (800d0cc <SDMMC_GetCmdResp7+0x70>)
 800d06a:	fba2 2303 	umull	r2, r3, r2, r3
 800d06e:	0a5b      	lsrs	r3, r3, #9
 800d070:	f241 3288 	movw	r2, #5000	; 0x1388
 800d074:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800d078:	4623      	mov	r3, r4
 800d07a:	1e5c      	subs	r4, r3, #1
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d102      	bne.n	800d086 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d080:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d084:	e01a      	b.n	800d0bc <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d0f2      	beq.n	800d078 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d096:	f003 0304 	and.w	r3, r3, #4
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d004      	beq.n	800d0a8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2240      	movs	r2, #64	; 0x40
 800d0a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0a4:	2304      	movs	r3, #4
 800d0a6:	e009      	b.n	800d0bc <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2240      	movs	r2, #64	; 0x40
 800d0b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d0ba:	2300      	movs	r3, #0
  
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bc90      	pop	{r4, r7}
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	2000002c 	.word	0x2000002c
 800d0cc:	10624dd3 	.word	0x10624dd3

0800d0d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	f107 001c 	add.w	r0, r7, #28
 800d0de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d120      	bne.n	800d12a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68da      	ldr	r2, [r3, #12]
 800d0f8:	4b20      	ldr	r3, [pc, #128]	; (800d17c <USB_CoreInit+0xac>)
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d105      	bne.n	800d11e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f942 	bl	800d3a8 <USB_CoreReset>
 800d124:	4603      	mov	r3, r0
 800d126:	73fb      	strb	r3, [r7, #15]
 800d128:	e010      	b.n	800d14c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f936 	bl	800d3a8 <USB_CoreReset>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d144:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d10b      	bne.n	800d16a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	f043 0206 	orr.w	r2, r3, #6
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	f043 0220 	orr.w	r2, r3, #32
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d176:	b004      	add	sp, #16
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	ffbdffbf 	.word	0xffbdffbf

0800d180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	f043 0201 	orr.w	r2, r3, #1
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b083      	sub	sp, #12
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	f023 0201 	bic.w	r2, r3, #1
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d1dc:	78fb      	ldrb	r3, [r7, #3]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d106      	bne.n	800d1f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60da      	str	r2, [r3, #12]
 800d1ee:	e00b      	b.n	800d208 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d106      	bne.n	800d204 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	60da      	str	r2, [r3, #12]
 800d202:	e001      	b.n	800d208 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e003      	b.n	800d210 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d208:	2032      	movs	r0, #50	; 0x32
 800d20a:	f7f6 f833 	bl	8003274 <HAL_Delay>

  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d222:	2300      	movs	r3, #0
 800d224:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	019b      	lsls	r3, r3, #6
 800d22a:	f043 0220 	orr.w	r2, r3, #32
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	3301      	adds	r3, #1
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	4a09      	ldr	r2, [pc, #36]	; (800d260 <USB_FlushTxFifo+0x48>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d901      	bls.n	800d244 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d240:	2303      	movs	r3, #3
 800d242:	e006      	b.n	800d252 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	f003 0320 	and.w	r3, r3, #32
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d0f0      	beq.n	800d232 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d250:	2300      	movs	r3, #0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	00030d40 	.word	0x00030d40

0800d264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d26c:	2300      	movs	r3, #0
 800d26e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2210      	movs	r2, #16
 800d274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3301      	adds	r3, #1
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4a09      	ldr	r2, [pc, #36]	; (800d2a4 <USB_FlushRxFifo+0x40>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d901      	bls.n	800d288 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d284:	2303      	movs	r3, #3
 800d286:	e006      	b.n	800d296 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	f003 0310 	and.w	r3, r3, #16
 800d290:	2b10      	cmp	r3, #16
 800d292:	d0f0      	beq.n	800d276 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	00030d40 	.word	0x00030d40

0800d2a8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b089      	sub	sp, #36	; 0x24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	71fb      	strb	r3, [r7, #7]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d2c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d11a      	bne.n	800d304 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d2ce:	88bb      	ldrh	r3, [r7, #4]
 800d2d0:	3303      	adds	r3, #3
 800d2d2:	089b      	lsrs	r3, r3, #2
 800d2d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	61bb      	str	r3, [r7, #24]
 800d2da:	e00f      	b.n	800d2fc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800d2dc:	79fb      	ldrb	r3, [r7, #7]
 800d2de:	031a      	lsls	r2, r3, #12
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	61bb      	str	r3, [r7, #24]
 800d2fc:	69ba      	ldr	r2, [r7, #24]
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	429a      	cmp	r2, r3
 800d302:	d3eb      	bcc.n	800d2dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3724      	adds	r7, #36	; 0x24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr

0800d312 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d312:	b480      	push	{r7}
 800d314:	b089      	sub	sp, #36	; 0x24
 800d316:	af00      	add	r7, sp, #0
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	60b9      	str	r1, [r7, #8]
 800d31c:	4613      	mov	r3, r2
 800d31e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d328:	88fb      	ldrh	r3, [r7, #6]
 800d32a:	3303      	adds	r3, #3
 800d32c:	089b      	lsrs	r3, r3, #2
 800d32e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d330:	2300      	movs	r3, #0
 800d332:	61bb      	str	r3, [r7, #24]
 800d334:	e00b      	b.n	800d34e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	601a      	str	r2, [r3, #0]
    pDest++;
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	3304      	adds	r3, #4
 800d346:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	3301      	adds	r3, #1
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	69ba      	ldr	r2, [r7, #24]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	429a      	cmp	r2, r3
 800d354:	d3ef      	bcc.n	800d336 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d356:	69fb      	ldr	r3, [r7, #28]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3724      	adds	r7, #36	; 0x24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	4013      	ands	r3, r2
 800d37a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d37c:	68fb      	ldr	r3, [r7, #12]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b083      	sub	sp, #12
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	695b      	ldr	r3, [r3, #20]
 800d396:	f003 0301 	and.w	r3, r3, #1
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
	...

0800d3a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4a13      	ldr	r2, [pc, #76]	; (800d40c <USB_CoreReset+0x64>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d901      	bls.n	800d3c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	e01b      	b.n	800d3fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	daf2      	bge.n	800d3b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	f043 0201 	orr.w	r2, r3, #1
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	4a09      	ldr	r2, [pc, #36]	; (800d40c <USB_CoreReset+0x64>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d901      	bls.n	800d3f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e006      	b.n	800d3fe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d0f0      	beq.n	800d3de <USB_CoreReset+0x36>

  return HAL_OK;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	00030d40 	.word	0x00030d40

0800d410 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d410:	b084      	sub	sp, #16
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	f107 001c 	add.w	r0, r7, #28
 800d41e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d42c:	461a      	mov	r2, r3
 800d42e:	2300      	movs	r3, #0
 800d430:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d446:	2b00      	cmp	r3, #0
 800d448:	d018      	beq.n	800d47c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d10a      	bne.n	800d466 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d45e:	f043 0304 	orr.w	r3, r3, #4
 800d462:	6013      	str	r3, [r2, #0]
 800d464:	e014      	b.n	800d490 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68ba      	ldr	r2, [r7, #8]
 800d470:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d474:	f023 0304 	bic.w	r3, r3, #4
 800d478:	6013      	str	r3, [r2, #0]
 800d47a:	e009      	b.n	800d490 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d48a:	f023 0304 	bic.w	r3, r3, #4
 800d48e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d490:	2110      	movs	r1, #16
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff fec0 	bl	800d218 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fee3 	bl	800d264 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e015      	b.n	800d4d0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	015a      	lsls	r2, r3, #5
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
 800d4d0:	6a3b      	ldr	r3, [r7, #32]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d3e5      	bcc.n	800d4a4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d4d8:	2101      	movs	r1, #1
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f8ac 	bl	800d638 <USB_DriveVbus>

  HAL_Delay(200U);
 800d4e0:	20c8      	movs	r0, #200	; 0xc8
 800d4e2:	f7f5 fec7 	bl	8003274 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d00b      	beq.n	800d518 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d506:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a14      	ldr	r2, [pc, #80]	; (800d55c <USB_HostInit+0x14c>)
 800d50c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a13      	ldr	r2, [pc, #76]	; (800d560 <USB_HostInit+0x150>)
 800d512:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d516:	e009      	b.n	800d52c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2280      	movs	r2, #128	; 0x80
 800d51c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4a10      	ldr	r2, [pc, #64]	; (800d564 <USB_HostInit+0x154>)
 800d522:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	4a10      	ldr	r2, [pc, #64]	; (800d568 <USB_HostInit+0x158>)
 800d528:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d105      	bne.n	800d53e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	f043 0210 	orr.w	r2, r3, #16
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	699a      	ldr	r2, [r3, #24]
 800d542:	4b0a      	ldr	r3, [pc, #40]	; (800d56c <USB_HostInit+0x15c>)
 800d544:	4313      	orrs	r3, r2
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d556:	b004      	add	sp, #16
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	01000200 	.word	0x01000200
 800d560:	00e00300 	.word	0x00e00300
 800d564:	00600080 	.word	0x00600080
 800d568:	004000e0 	.word	0x004000e0
 800d56c:	a3200008 	.word	0xa3200008

0800d570 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d58e:	f023 0303 	bic.w	r3, r3, #3
 800d592:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	78fb      	ldrb	r3, [r7, #3]
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	68f9      	ldr	r1, [r7, #12]
 800d5a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d5ac:	78fb      	ldrb	r3, [r7, #3]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d107      	bne.n	800d5c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d5be:	6053      	str	r3, [r2, #4]
 800d5c0:	e009      	b.n	800d5d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d5c2:	78fb      	ldrb	r3, [r7, #3]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d106      	bne.n	800d5d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f241 7370 	movw	r3, #6000	; 0x1770
 800d5d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3714      	adds	r7, #20
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d604:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	68fa      	ldr	r2, [r7, #12]
 800d60a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d60e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d612:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d614:	2064      	movs	r0, #100	; 0x64
 800d616:	f7f5 fe2d 	bl	8003274 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d626:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d628:	200a      	movs	r0, #10
 800d62a:	f7f5 fe23 	bl	8003274 <HAL_Delay>

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d648:	2300      	movs	r3, #0
 800d64a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d65c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d109      	bne.n	800d67c <USB_DriveVbus+0x44>
 800d668:	78fb      	ldrb	r3, [r7, #3]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d106      	bne.n	800d67c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d67a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d686:	d109      	bne.n	800d69c <USB_DriveVbus+0x64>
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d106      	bne.n	800d69c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	68fa      	ldr	r2, [r7, #12]
 800d692:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d69a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b085      	sub	sp, #20
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	0c5b      	lsrs	r3, r3, #17
 800d6c8:	f003 0303 	and.w	r3, r3, #3
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	b29b      	uxth	r3, r3
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
	...

0800d6fc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b087      	sub	sp, #28
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	461a      	mov	r2, r3
 800d70a:	4603      	mov	r3, r0
 800d70c:	70fb      	strb	r3, [r7, #3]
 800d70e:	460b      	mov	r3, r1
 800d710:	70bb      	strb	r3, [r7, #2]
 800d712:	4613      	mov	r3, r2
 800d714:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d71e:	78fb      	ldrb	r3, [r7, #3]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	4413      	add	r3, r2
 800d726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d72a:	461a      	mov	r2, r3
 800d72c:	f04f 33ff 	mov.w	r3, #4294967295
 800d730:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d732:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d736:	2b03      	cmp	r3, #3
 800d738:	d87e      	bhi.n	800d838 <USB_HC_Init+0x13c>
 800d73a:	a201      	add	r2, pc, #4	; (adr r2, 800d740 <USB_HC_Init+0x44>)
 800d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d7fb 	.word	0x0800d7fb
 800d748:	0800d751 	.word	0x0800d751
 800d74c:	0800d7bd 	.word	0x0800d7bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	4413      	add	r3, r2
 800d758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d75c:	461a      	mov	r2, r3
 800d75e:	f240 439d 	movw	r3, #1181	; 0x49d
 800d762:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d764:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da10      	bge.n	800d78e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d76c:	78fb      	ldrb	r3, [r7, #3]
 800d76e:	015a      	lsls	r2, r3, #5
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	4413      	add	r3, r2
 800d774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	78fa      	ldrb	r2, [r7, #3]
 800d77c:	0151      	lsls	r1, r2, #5
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	440a      	add	r2, r1
 800d782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d78a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d78c:	e057      	b.n	800d83e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d796:	2b00      	cmp	r3, #0
 800d798:	d051      	beq.n	800d83e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d79a:	78fb      	ldrb	r3, [r7, #3]
 800d79c:	015a      	lsls	r2, r3, #5
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	78fa      	ldrb	r2, [r7, #3]
 800d7aa:	0151      	lsls	r1, r2, #5
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	440a      	add	r2, r1
 800d7b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d7b8:	60d3      	str	r3, [r2, #12]
      break;
 800d7ba:	e040      	b.n	800d83e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d7bc:	78fb      	ldrb	r3, [r7, #3]
 800d7be:	015a      	lsls	r2, r3, #5
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	f240 639d 	movw	r3, #1693	; 0x69d
 800d7ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d7d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	da34      	bge.n	800d842 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	78fa      	ldrb	r2, [r7, #3]
 800d7e8:	0151      	lsls	r1, r2, #5
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	440a      	add	r2, r1
 800d7ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d7f8:	e023      	b.n	800d842 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d7fa:	78fb      	ldrb	r3, [r7, #3]
 800d7fc:	015a      	lsls	r2, r3, #5
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	4413      	add	r3, r2
 800d802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d806:	461a      	mov	r2, r3
 800d808:	f240 2325 	movw	r3, #549	; 0x225
 800d80c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d80e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d812:	2b00      	cmp	r3, #0
 800d814:	da17      	bge.n	800d846 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	015a      	lsls	r2, r3, #5
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	4413      	add	r3, r2
 800d81e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	0151      	lsls	r1, r2, #5
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	440a      	add	r2, r1
 800d82c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d830:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d834:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d836:	e006      	b.n	800d846 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	75fb      	strb	r3, [r7, #23]
      break;
 800d83c:	e004      	b.n	800d848 <USB_HC_Init+0x14c>
      break;
 800d83e:	bf00      	nop
 800d840:	e002      	b.n	800d848 <USB_HC_Init+0x14c>
      break;
 800d842:	bf00      	nop
 800d844:	e000      	b.n	800d848 <USB_HC_Init+0x14c>
      break;
 800d846:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d84e:	699a      	ldr	r2, [r3, #24]
 800d850:	78fb      	ldrb	r3, [r7, #3]
 800d852:	f003 030f 	and.w	r3, r3, #15
 800d856:	2101      	movs	r1, #1
 800d858:	fa01 f303 	lsl.w	r3, r1, r3
 800d85c:	68b9      	ldr	r1, [r7, #8]
 800d85e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d862:	4313      	orrs	r3, r2
 800d864:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	699b      	ldr	r3, [r3, #24]
 800d86a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d876:	2b00      	cmp	r3, #0
 800d878:	da03      	bge.n	800d882 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d87a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d87e:	613b      	str	r3, [r7, #16]
 800d880:	e001      	b.n	800d886 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d882:	2300      	movs	r3, #0
 800d884:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800d886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d103      	bne.n	800d896 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d88e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	e001      	b.n	800d89a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d89a:	787b      	ldrb	r3, [r7, #1]
 800d89c:	059b      	lsls	r3, r3, #22
 800d89e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d8a2:	78bb      	ldrb	r3, [r7, #2]
 800d8a4:	02db      	lsls	r3, r3, #11
 800d8a6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d8ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8b0:	049b      	lsls	r3, r3, #18
 800d8b2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d8b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d8b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d8be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	0159      	lsls	r1, r3, #5
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	440b      	add	r3, r1
 800d8cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8d0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d8d6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d8d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d10f      	bne.n	800d900 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	78fa      	ldrb	r2, [r7, #3]
 800d8f0:	0151      	lsls	r1, r2, #5
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	440a      	add	r2, r1
 800d8f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8fe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d900:	7dfb      	ldrb	r3, [r7, #23]
}
 800d902:	4618      	mov	r0, r3
 800d904:	371c      	adds	r7, #28
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop

0800d910 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b08c      	sub	sp, #48	; 0x30
 800d914:	af02      	add	r7, sp, #8
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	4613      	mov	r3, r2
 800d91c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	785b      	ldrb	r3, [r3, #1]
 800d926:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d92c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d936:	2b00      	cmp	r3, #0
 800d938:	d028      	beq.n	800d98c <USB_HC_StartXfer+0x7c>
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	791b      	ldrb	r3, [r3, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d124      	bne.n	800d98c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800d942:	79fb      	ldrb	r3, [r7, #7]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10b      	bne.n	800d960 <USB_HC_StartXfer+0x50>
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	795b      	ldrb	r3, [r3, #5]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d107      	bne.n	800d960 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	4619      	mov	r1, r3
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f000 fa2e 	bl	800ddb8 <USB_DoPing>
      return HAL_OK;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e112      	b.n	800db86 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	2b01      	cmp	r3, #1
 800d964:	d112      	bne.n	800d98c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	015a      	lsls	r2, r3, #5
 800d96a:	6a3b      	ldr	r3, [r7, #32]
 800d96c:	4413      	add	r3, r2
 800d96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	69fa      	ldr	r2, [r7, #28]
 800d976:	0151      	lsls	r1, r2, #5
 800d978:	6a3a      	ldr	r2, [r7, #32]
 800d97a:	440a      	add	r2, r1
 800d97c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d980:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800d984:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	2200      	movs	r2, #0
 800d98a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d018      	beq.n	800d9c6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	8912      	ldrh	r2, [r2, #8]
 800d99c:	4413      	add	r3, r2
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	68ba      	ldr	r2, [r7, #8]
 800d9a2:	8912      	ldrh	r2, [r2, #8]
 800d9a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9a8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d9aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d9ac:	8b7b      	ldrh	r3, [r7, #26]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d90b      	bls.n	800d9ca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800d9b2:	8b7b      	ldrh	r3, [r7, #26]
 800d9b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d9b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9b8:	68ba      	ldr	r2, [r7, #8]
 800d9ba:	8912      	ldrh	r2, [r2, #8]
 800d9bc:	fb02 f203 	mul.w	r2, r2, r3
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	611a      	str	r2, [r3, #16]
 800d9c4:	e001      	b.n	800d9ca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	78db      	ldrb	r3, [r3, #3]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d006      	beq.n	800d9e0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800d9d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	8912      	ldrh	r2, [r2, #8]
 800d9d8:	fb02 f203 	mul.w	r2, r2, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d9e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d9ea:	04d9      	lsls	r1, r3, #19
 800d9ec:	4b68      	ldr	r3, [pc, #416]	; (800db90 <USB_HC_StartXfer+0x280>)
 800d9ee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d9f0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	7a9b      	ldrb	r3, [r3, #10]
 800d9f6:	075b      	lsls	r3, r3, #29
 800d9f8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800d9fc:	69f9      	ldr	r1, [r7, #28]
 800d9fe:	0148      	lsls	r0, r1, #5
 800da00:	6a39      	ldr	r1, [r7, #32]
 800da02:	4401      	add	r1, r0
 800da04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800da08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800da0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800da0c:	79fb      	ldrb	r3, [r7, #7]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d009      	beq.n	800da26 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	68d9      	ldr	r1, [r3, #12]
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	015a      	lsls	r2, r3, #5
 800da1a:	6a3b      	ldr	r3, [r7, #32]
 800da1c:	4413      	add	r3, r2
 800da1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da22:	460a      	mov	r2, r1
 800da24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf0c      	ite	eq
 800da36:	2301      	moveq	r3, #1
 800da38:	2300      	movne	r3, #0
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	4413      	add	r3, r2
 800da46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	69fa      	ldr	r2, [r7, #28]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	6a3a      	ldr	r2, [r7, #32]
 800da52:	440a      	add	r2, r1
 800da54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800da5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	4413      	add	r3, r2
 800da66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	7e7b      	ldrb	r3, [r7, #25]
 800da6e:	075b      	lsls	r3, r3, #29
 800da70:	69f9      	ldr	r1, [r7, #28]
 800da72:	0148      	lsls	r0, r1, #5
 800da74:	6a39      	ldr	r1, [r7, #32]
 800da76:	4401      	add	r1, r0
 800da78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800da7c:	4313      	orrs	r3, r2
 800da7e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	015a      	lsls	r2, r3, #5
 800da84:	6a3b      	ldr	r3, [r7, #32]
 800da86:	4413      	add	r3, r2
 800da88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a41      	ldr	r2, [pc, #260]	; (800db94 <USB_HC_StartXfer+0x284>)
 800da90:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800da92:	4b40      	ldr	r3, [pc, #256]	; (800db94 <USB_HC_StartXfer+0x284>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800da9a:	4a3e      	ldr	r2, [pc, #248]	; (800db94 <USB_HC_StartXfer+0x284>)
 800da9c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	78db      	ldrb	r3, [r3, #3]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d006      	beq.n	800dab4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800daa6:	4b3b      	ldr	r3, [pc, #236]	; (800db94 <USB_HC_StartXfer+0x284>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800daae:	4a39      	ldr	r2, [pc, #228]	; (800db94 <USB_HC_StartXfer+0x284>)
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	e005      	b.n	800dac0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dab4:	4b37      	ldr	r3, [pc, #220]	; (800db94 <USB_HC_StartXfer+0x284>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dabc:	4a35      	ldr	r2, [pc, #212]	; (800db94 <USB_HC_StartXfer+0x284>)
 800dabe:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dac0:	4b34      	ldr	r3, [pc, #208]	; (800db94 <USB_HC_StartXfer+0x284>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dac8:	4a32      	ldr	r2, [pc, #200]	; (800db94 <USB_HC_StartXfer+0x284>)
 800daca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	015a      	lsls	r2, r3, #5
 800dad0:	6a3b      	ldr	r3, [r7, #32]
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dad8:	461a      	mov	r2, r3
 800dada:	4b2e      	ldr	r3, [pc, #184]	; (800db94 <USB_HC_StartXfer+0x284>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d14e      	bne.n	800db84 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	78db      	ldrb	r3, [r3, #3]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d14a      	bne.n	800db84 <USB_HC_StartXfer+0x274>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	691b      	ldr	r3, [r3, #16]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d046      	beq.n	800db84 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	79db      	ldrb	r3, [r3, #7]
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d830      	bhi.n	800db60 <USB_HC_StartXfer+0x250>
 800dafe:	a201      	add	r2, pc, #4	; (adr r2, 800db04 <USB_HC_StartXfer+0x1f4>)
 800db00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db04:	0800db15 	.word	0x0800db15
 800db08:	0800db39 	.word	0x0800db39
 800db0c:	0800db15 	.word	0x0800db15
 800db10:	0800db39 	.word	0x0800db39
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	3303      	adds	r3, #3
 800db1a:	089b      	lsrs	r3, r3, #2
 800db1c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800db1e:	8afa      	ldrh	r2, [r7, #22]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db24:	b29b      	uxth	r3, r3
 800db26:	429a      	cmp	r2, r3
 800db28:	d91c      	bls.n	800db64 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	699b      	ldr	r3, [r3, #24]
 800db2e:	f043 0220 	orr.w	r2, r3, #32
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	619a      	str	r2, [r3, #24]
          }
          break;
 800db36:	e015      	b.n	800db64 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	3303      	adds	r3, #3
 800db3e:	089b      	lsrs	r3, r3, #2
 800db40:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800db42:	8afa      	ldrh	r2, [r7, #22]
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	429a      	cmp	r2, r3
 800db50:	d90a      	bls.n	800db68 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	619a      	str	r2, [r3, #24]
          }
          break;
 800db5e:	e003      	b.n	800db68 <USB_HC_StartXfer+0x258>

        default:
          break;
 800db60:	bf00      	nop
 800db62:	e002      	b.n	800db6a <USB_HC_StartXfer+0x25a>
          break;
 800db64:	bf00      	nop
 800db66:	e000      	b.n	800db6a <USB_HC_StartXfer+0x25a>
          break;
 800db68:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	68d9      	ldr	r1, [r3, #12]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	785a      	ldrb	r2, [r3, #1]
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	b298      	uxth	r0, r3
 800db78:	2300      	movs	r3, #0
 800db7a:	9300      	str	r3, [sp, #0]
 800db7c:	4603      	mov	r3, r0
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f7ff fb92 	bl	800d2a8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3728      	adds	r7, #40	; 0x28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	1ff80000 	.word	0x1ff80000
 800db94:	200003c4 	.word	0x200003c4

0800db98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbaa:	695b      	ldr	r3, [r3, #20]
 800dbac:	b29b      	uxth	r3, r3
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3714      	adds	r7, #20
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b087      	sub	sp, #28
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800dbca:	78fb      	ldrb	r3, [r7, #3]
 800dbcc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	015a      	lsls	r2, r3, #5
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	4413      	add	r3, r2
 800dbda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	0c9b      	lsrs	r3, r3, #18
 800dbe2:	f003 0303 	and.w	r3, r3, #3
 800dbe6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <USB_HC_Halt+0x3a>
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d16c      	bne.n	800dcce <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	015a      	lsls	r2, r3, #5
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	0151      	lsls	r1, r2, #5
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	440a      	add	r2, r1
 800dc0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dc12:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d143      	bne.n	800dca8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	0151      	lsls	r1, r2, #5
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	440a      	add	r2, r1
 800dc36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	0151      	lsls	r1, r2, #5
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	440a      	add	r2, r1
 800dc56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	015a      	lsls	r2, r3, #5
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	4413      	add	r3, r2
 800dc68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	0151      	lsls	r1, r2, #5
 800dc72:	693a      	ldr	r2, [r7, #16]
 800dc74:	440a      	add	r2, r1
 800dc76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc7e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	3301      	adds	r3, #1
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dc8c:	d81d      	bhi.n	800dcca <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	015a      	lsls	r2, r3, #5
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	4413      	add	r3, r2
 800dc96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dca4:	d0ec      	beq.n	800dc80 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dca6:	e080      	b.n	800ddaa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	0151      	lsls	r1, r2, #5
 800dcba:	693a      	ldr	r2, [r7, #16]
 800dcbc:	440a      	add	r2, r1
 800dcbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dcc6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dcc8:	e06f      	b.n	800ddaa <USB_HC_Halt+0x1f0>
          break;
 800dcca:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800dccc:	e06d      	b.n	800ddaa <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	015a      	lsls	r2, r3, #5
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	0151      	lsls	r1, r2, #5
 800dce0:	693a      	ldr	r2, [r7, #16]
 800dce2:	440a      	add	r2, r1
 800dce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dcec:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcf4:	691b      	ldr	r3, [r3, #16]
 800dcf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d143      	bne.n	800dd86 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	0151      	lsls	r1, r2, #5
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	440a      	add	r2, r1
 800dd14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd1c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	015a      	lsls	r2, r3, #5
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	4413      	add	r3, r2
 800dd26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	0151      	lsls	r1, r2, #5
 800dd30:	693a      	ldr	r2, [r7, #16]
 800dd32:	440a      	add	r2, r1
 800dd34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd3c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68fa      	ldr	r2, [r7, #12]
 800dd4e:	0151      	lsls	r1, r2, #5
 800dd50:	693a      	ldr	r2, [r7, #16]
 800dd52:	440a      	add	r2, r1
 800dd54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dd58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd5c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	3301      	adds	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd6a:	d81d      	bhi.n	800dda8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	015a      	lsls	r2, r3, #5
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	4413      	add	r3, r2
 800dd74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd82:	d0ec      	beq.n	800dd5e <USB_HC_Halt+0x1a4>
 800dd84:	e011      	b.n	800ddaa <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	015a      	lsls	r2, r3, #5
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	0151      	lsls	r1, r2, #5
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	440a      	add	r2, r1
 800dd9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dda0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	e000      	b.n	800ddaa <USB_HC_Halt+0x1f0>
          break;
 800dda8:	bf00      	nop
    }
  }

  return HAL_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	371c      	adds	r7, #28
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ddc8:	78fb      	ldrb	r3, [r7, #3]
 800ddca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	04da      	lsls	r2, r3, #19
 800ddd4:	4b15      	ldr	r3, [pc, #84]	; (800de2c <USB_DoPing+0x74>)
 800ddd6:	4013      	ands	r3, r2
 800ddd8:	693a      	ldr	r2, [r7, #16]
 800ddda:	0151      	lsls	r1, r2, #5
 800dddc:	697a      	ldr	r2, [r7, #20]
 800ddde:	440a      	add	r2, r1
 800dde0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dde4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dde8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	015a      	lsls	r2, r3, #5
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de00:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de08:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	015a      	lsls	r2, r3, #5
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	4413      	add	r3, r2
 800de12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de16:	461a      	mov	r2, r3
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	371c      	adds	r7, #28
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	1ff80000 	.word	0x1ff80000

0800de30 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800de3c:	2300      	movs	r3, #0
 800de3e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff f9ae 	bl	800d1a2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800de46:	2110      	movs	r1, #16
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff f9e5 	bl	800d218 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff fa08 	bl	800d264 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800de54:	2300      	movs	r3, #0
 800de56:	613b      	str	r3, [r7, #16]
 800de58:	e01f      	b.n	800de9a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	015a      	lsls	r2, r3, #5
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	4413      	add	r3, r2
 800de62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de70:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de80:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de8e:	461a      	mov	r2, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	3301      	adds	r3, #1
 800de98:	613b      	str	r3, [r7, #16]
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	2b0f      	cmp	r3, #15
 800de9e:	d9dc      	bls.n	800de5a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800dea0:	2300      	movs	r3, #0
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	e034      	b.n	800df10 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	015a      	lsls	r2, r3, #5
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	4413      	add	r3, r2
 800deae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800debc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dec4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800decc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	015a      	lsls	r2, r3, #5
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	4413      	add	r3, r2
 800ded6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800deda:	461a      	mov	r2, r3
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	3301      	adds	r3, #1
 800dee4:	617b      	str	r3, [r7, #20]
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800deec:	d80c      	bhi.n	800df08 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	015a      	lsls	r2, r3, #5
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	4413      	add	r3, r2
 800def6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df04:	d0ec      	beq.n	800dee0 <USB_StopHost+0xb0>
 800df06:	e000      	b.n	800df0a <USB_StopHost+0xda>
        break;
 800df08:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	3301      	adds	r3, #1
 800df0e:	613b      	str	r3, [r7, #16]
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	2b0f      	cmp	r3, #15
 800df14:	d9c7      	bls.n	800dea6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df1c:	461a      	mov	r2, r3
 800df1e:	f04f 33ff 	mov.w	r3, #4294967295
 800df22:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f04f 32ff 	mov.w	r2, #4294967295
 800df2a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff f927 	bl	800d180 <USB_EnableGlobalInt>

  return HAL_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800df40:	4904      	ldr	r1, [pc, #16]	; (800df54 <MX_FATFS_Init+0x18>)
 800df42:	4805      	ldr	r0, [pc, #20]	; (800df58 <MX_FATFS_Init+0x1c>)
 800df44:	f002 fad6 	bl	80104f4 <FATFS_LinkDriver>
 800df48:	4603      	mov	r3, r0
 800df4a:	461a      	mov	r2, r3
 800df4c:	4b03      	ldr	r3, [pc, #12]	; (800df5c <MX_FATFS_Init+0x20>)
 800df4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800df50:	bf00      	nop
 800df52:	bd80      	pop	{r7, pc}
 800df54:	2000a36c 	.word	0x2000a36c
 800df58:	08026a00 	.word	0x08026a00
 800df5c:	2000a368 	.word	0x2000a368

0800df60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800df6a:	f000 f871 	bl	800e050 <BSP_SD_IsDetected>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b01      	cmp	r3, #1
 800df72:	d001      	beq.n	800df78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800df74:	2302      	movs	r3, #2
 800df76:	e012      	b.n	800df9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800df78:	480b      	ldr	r0, [pc, #44]	; (800dfa8 <BSP_SD_Init+0x48>)
 800df7a:	f7fb fbc3 	bl	8009704 <HAL_SD_Init>
 800df7e:	4603      	mov	r3, r0
 800df80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d109      	bne.n	800df9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800df88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800df8c:	4806      	ldr	r0, [pc, #24]	; (800dfa8 <BSP_SD_Init+0x48>)
 800df8e:	f7fc f84d 	bl	800a02c <HAL_SD_ConfigWideBusOperation>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800df9c:	79fb      	ldrb	r3, [r7, #7]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20009e40 	.word	0x20009e40

0800dfac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	68f9      	ldr	r1, [r7, #12]
 800dfc2:	4806      	ldr	r0, [pc, #24]	; (800dfdc <BSP_SD_ReadBlocks_DMA+0x30>)
 800dfc4:	f7fb fc2e 	bl	8009824 <HAL_SD_ReadBlocks_DMA>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20009e40 	.word	0x20009e40

0800dfe0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	68f9      	ldr	r1, [r7, #12]
 800dff6:	4806      	ldr	r0, [pc, #24]	; (800e010 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dff8:	f7fb fce2 	bl	80099c0 <HAL_SD_WriteBlocks_DMA>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e006:	7dfb      	ldrb	r3, [r7, #23]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20009e40 	.word	0x20009e40

0800e014 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e018:	4805      	ldr	r0, [pc, #20]	; (800e030 <BSP_SD_GetCardState+0x1c>)
 800e01a:	f7fc f883 	bl	800a124 <HAL_SD_GetCardState>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b04      	cmp	r3, #4
 800e022:	bf14      	ite	ne
 800e024:	2301      	movne	r3, #1
 800e026:	2300      	moveq	r3, #0
 800e028:	b2db      	uxtb	r3, r3
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20009e40 	.word	0x20009e40

0800e034 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e03c:	6879      	ldr	r1, [r7, #4]
 800e03e:	4803      	ldr	r0, [pc, #12]	; (800e04c <BSP_SD_GetCardInfo+0x18>)
 800e040:	f7fb ffc8 	bl	8009fd4 <HAL_SD_GetCardInfo>
}
 800e044:	bf00      	nop
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	20009e40 	.word	0x20009e40

0800e050 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e056:	2301      	movs	r3, #1
 800e058:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800e05a:	f000 f80b 	bl	800e074 <BSP_PlatformIsDetected>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e064:	2300      	movs	r3, #0
 800e066:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e068:	79fb      	ldrb	r3, [r7, #7]
 800e06a:	b2db      	uxtb	r3, r3
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e07a:	2301      	movs	r3, #1
 800e07c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e07e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e082:	4806      	ldr	r0, [pc, #24]	; (800e09c <BSP_PlatformIsDetected+0x28>)
 800e084:	f7f6 fd3e 	bl	8004b04 <HAL_GPIO_ReadPin>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e08e:	2300      	movs	r3, #0
 800e090:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800e092:	79fb      	ldrb	r3, [r7, #7]
}  
 800e094:	4618      	mov	r0, r3
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	40020800 	.word	0x40020800

0800e0a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 800e0a8:	f002 fa70 	bl	801058c <osKernelSysTick>
 800e0ac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 800e0ae:	e006      	b.n	800e0be <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0b0:	f7ff ffb0 	bl	800e014 <BSP_SD_GetCardState>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d101      	bne.n	800e0be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e009      	b.n	800e0d2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e0be:	f002 fa65 	bl	801058c <osKernelSysTick>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d8f0      	bhi.n	800e0b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e0ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e0e6:	4b0b      	ldr	r3, [pc, #44]	; (800e114 <SD_CheckStatus+0x38>)
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e0ec:	f7ff ff92 	bl	800e014 <BSP_SD_GetCardState>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d107      	bne.n	800e106 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e0f6:	4b07      	ldr	r3, [pc, #28]	; (800e114 <SD_CheckStatus+0x38>)
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	f023 0301 	bic.w	r3, r3, #1
 800e100:	b2da      	uxtb	r2, r3
 800e102:	4b04      	ldr	r3, [pc, #16]	; (800e114 <SD_CheckStatus+0x38>)
 800e104:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e106:	4b03      	ldr	r3, [pc, #12]	; (800e114 <SD_CheckStatus+0x38>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	b2db      	uxtb	r3, r3
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	20000031 	.word	0x20000031

0800e118 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e118:	b590      	push	{r4, r7, lr}
 800e11a:	b087      	sub	sp, #28
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e122:	4b1a      	ldr	r3, [pc, #104]	; (800e18c <SD_initialize+0x74>)
 800e124:	2201      	movs	r2, #1
 800e126:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800e128:	f002 fa24 	bl	8010574 <osKernelRunning>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d024      	beq.n	800e17c <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e132:	f7ff ff15 	bl	800df60 <BSP_SD_Init>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d107      	bne.n	800e14c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e13c:	79fb      	ldrb	r3, [r7, #7]
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff ffcc 	bl	800e0dc <SD_CheckStatus>
 800e144:	4603      	mov	r3, r0
 800e146:	461a      	mov	r2, r3
 800e148:	4b10      	ldr	r3, [pc, #64]	; (800e18c <SD_initialize+0x74>)
 800e14a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 800e14c:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <SD_initialize+0x74>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	b2db      	uxtb	r3, r3
 800e152:	2b01      	cmp	r3, #1
 800e154:	d012      	beq.n	800e17c <SD_initialize+0x64>
 800e156:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <SD_initialize+0x78>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d10e      	bne.n	800e17c <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <SD_initialize+0x7c>)
 800e160:	f107 0408 	add.w	r4, r7, #8
 800e164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800e16a:	f107 0308 	add.w	r3, r7, #8
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f002 fa7b 	bl	801066c <osMessageCreate>
 800e176:	4602      	mov	r2, r0
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <SD_initialize+0x78>)
 800e17a:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 800e17c:	4b03      	ldr	r3, [pc, #12]	; (800e18c <SD_initialize+0x74>)
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	b2db      	uxtb	r3, r3
}
 800e182:	4618      	mov	r0, r3
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	bd90      	pop	{r4, r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20000031 	.word	0x20000031
 800e190:	200005c8 	.word	0x200005c8
 800e194:	08026384 	.word	0x08026384

0800e198 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7ff ff99 	bl	800e0dc <SD_CheckStatus>
 800e1aa:	4603      	mov	r3, r0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3708      	adds	r7, #8
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08e      	sub	sp, #56	; 0x38
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	61b9      	str	r1, [r7, #24]
 800e1bc:	617a      	str	r2, [r7, #20]
 800e1be:	613b      	str	r3, [r7, #16]
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e1ca:	f247 5030 	movw	r0, #30000	; 0x7530
 800e1ce:	f7ff ff67 	bl	800e0a0 <SD_CheckStatusWithTimeout>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	da02      	bge.n	800e1de <SD_read+0x2a>
  {
    return res;
 800e1d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e1dc:	e06c      	b.n	800e2b8 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	f003 0303 	and.w	r3, r3, #3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d11e      	bne.n	800e226 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	6979      	ldr	r1, [r7, #20]
 800e1ec:	69b8      	ldr	r0, [r7, #24]
 800e1ee:	f7ff fedd 	bl	800dfac <BSP_SD_ReadBlocks_DMA>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 800e1f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d159      	bne.n	800e2b4 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e200:	4b2f      	ldr	r3, [pc, #188]	; (800e2c0 <SD_read+0x10c>)
 800e202:	6819      	ldr	r1, [r3, #0]
 800e204:	f107 0320 	add.w	r3, r7, #32
 800e208:	f247 5230 	movw	r2, #30000	; 0x7530
 800e20c:	4618      	mov	r0, r3
 800e20e:	f002 fa97 	bl	8010740 <osMessageGet>
      if (event.status == osEventMessage) {
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	2b10      	cmp	r3, #16
 800e216:	d14d      	bne.n	800e2b4 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d14a      	bne.n	800e2b4 <SD_read+0x100>
          res = RES_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e224:	e046      	b.n	800e2b4 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 800e226:	2300      	movs	r3, #0
 800e228:	633b      	str	r3, [r7, #48]	; 0x30
 800e22a:	e032      	b.n	800e292 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	1c5a      	adds	r2, r3, #1
 800e230:	617a      	str	r2, [r7, #20]
 800e232:	2201      	movs	r2, #1
 800e234:	4619      	mov	r1, r3
 800e236:	4823      	ldr	r0, [pc, #140]	; (800e2c4 <SD_read+0x110>)
 800e238:	f7ff feb8 	bl	800dfac <BSP_SD_ReadBlocks_DMA>
 800e23c:	4603      	mov	r3, r0
 800e23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 800e242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e246:	2b00      	cmp	r3, #0
 800e248:	d128      	bne.n	800e29c <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e24a:	4b1d      	ldr	r3, [pc, #116]	; (800e2c0 <SD_read+0x10c>)
 800e24c:	6819      	ldr	r1, [r3, #0]
 800e24e:	463b      	mov	r3, r7
 800e250:	f247 5230 	movw	r2, #30000	; 0x7530
 800e254:	4618      	mov	r0, r3
 800e256:	f002 fa73 	bl	8010740 <osMessageGet>
 800e25a:	f107 0320 	add.w	r3, r7, #32
 800e25e:	463a      	mov	r2, r7
 800e260:	ca07      	ldmia	r2, {r0, r1, r2}
 800e262:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800e266:	6a3b      	ldr	r3, [r7, #32]
 800e268:	2b10      	cmp	r3, #16
 800e26a:	d10f      	bne.n	800e28c <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d10c      	bne.n	800e28c <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	4a13      	ldr	r2, [pc, #76]	; (800e2c4 <SD_read+0x110>)
 800e276:	4618      	mov	r0, r3
 800e278:	4611      	mov	r1, r2
 800e27a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e27e:	461a      	mov	r2, r3
 800e280:	f017 f8d8 	bl	8025434 <memcpy>
            buff += BLOCKSIZE;
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e28a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	3301      	adds	r3, #1
 800e290:	633b      	str	r3, [r7, #48]	; 0x30
 800e292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e294:	693a      	ldr	r2, [r7, #16]
 800e296:	429a      	cmp	r2, r3
 800e298:	d8c8      	bhi.n	800e22c <SD_read+0x78>
 800e29a:	e000      	b.n	800e29e <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 800e29c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	693a      	ldr	r2, [r7, #16]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d106      	bne.n	800e2b4 <SD_read+0x100>
 800e2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d102      	bne.n	800e2b4 <SD_read+0x100>
      res = RES_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 800e2b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3738      	adds	r7, #56	; 0x38
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	200005c8 	.word	0x200005c8
 800e2c4:	200003c8 	.word	0x200003c8

0800e2c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b090      	sub	sp, #64	; 0x40
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	61b9      	str	r1, [r7, #24]
 800e2d0:	617a      	str	r2, [r7, #20]
 800e2d2:	613b      	str	r3, [r7, #16]
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e2de:	f247 5030 	movw	r0, #30000	; 0x7530
 800e2e2:	f7ff fedd 	bl	800e0a0 <SD_CheckStatusWithTimeout>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da02      	bge.n	800e2f2 <SD_write+0x2a>
  {
    return res;
 800e2ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2f0:	e07c      	b.n	800e3ec <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	f003 0303 	and.w	r3, r3, #3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d12e      	bne.n	800e35a <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e2fc:	693a      	ldr	r2, [r7, #16]
 800e2fe:	6979      	ldr	r1, [r7, #20]
 800e300:	69b8      	ldr	r0, [r7, #24]
 800e302:	f7ff fe6d 	bl	800dfe0 <BSP_SD_WriteBlocks_DMA>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d16d      	bne.n	800e3e8 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e30c:	4b39      	ldr	r3, [pc, #228]	; (800e3f4 <SD_write+0x12c>)
 800e30e:	6819      	ldr	r1, [r3, #0]
 800e310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e314:	f247 5230 	movw	r2, #30000	; 0x7530
 800e318:	4618      	mov	r0, r3
 800e31a:	f002 fa11 	bl	8010740 <osMessageGet>

      if (event.status == osEventMessage)
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	2b10      	cmp	r3, #16
 800e322:	d161      	bne.n	800e3e8 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	2b02      	cmp	r3, #2
 800e328:	d15e      	bne.n	800e3e8 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 800e32a:	f002 f92f 	bl	801058c <osKernelSysTick>
 800e32e:	4602      	mov	r2, r0
 800e330:	f247 5330 	movw	r3, #30000	; 0x7530
 800e334:	4413      	add	r3, r2
 800e336:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 800e338:	e008      	b.n	800e34c <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e33a:	f7ff fe6b 	bl	800e014 <BSP_SD_GetCardState>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d103      	bne.n	800e34c <SD_write+0x84>
            {
              res = RES_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 800e34a:	e04d      	b.n	800e3e8 <SD_write+0x120>
          while(timer > osKernelSysTick())
 800e34c:	f002 f91e 	bl	801058c <osKernelSysTick>
 800e350:	4602      	mov	r2, r0
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	4293      	cmp	r3, r2
 800e356:	d8f0      	bhi.n	800e33a <SD_write+0x72>
 800e358:	e046      	b.n	800e3e8 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 800e35a:	2300      	movs	r3, #0
 800e35c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e35e:	e032      	b.n	800e3c6 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	1c5a      	adds	r2, r3, #1
 800e364:	617a      	str	r2, [r7, #20]
 800e366:	2201      	movs	r2, #1
 800e368:	4619      	mov	r1, r3
 800e36a:	4823      	ldr	r0, [pc, #140]	; (800e3f8 <SD_write+0x130>)
 800e36c:	f7ff fe38 	bl	800dfe0 <BSP_SD_WriteBlocks_DMA>
 800e370:	4603      	mov	r3, r0
 800e372:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 800e376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d128      	bne.n	800e3d0 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e37e:	4b1d      	ldr	r3, [pc, #116]	; (800e3f4 <SD_write+0x12c>)
 800e380:	6819      	ldr	r1, [r3, #0]
 800e382:	463b      	mov	r3, r7
 800e384:	f247 5230 	movw	r2, #30000	; 0x7530
 800e388:	4618      	mov	r0, r3
 800e38a:	f002 f9d9 	bl	8010740 <osMessageGet>
 800e38e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e392:	463a      	mov	r2, r7
 800e394:	ca07      	ldmia	r2, {r0, r1, r2}
 800e396:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 800e39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39c:	2b10      	cmp	r3, #16
 800e39e:	d10f      	bne.n	800e3c0 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 800e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a2:	2b02      	cmp	r3, #2
 800e3a4:	d10c      	bne.n	800e3c0 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	4a13      	ldr	r2, [pc, #76]	; (800e3f8 <SD_write+0x130>)
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f017 f83e 	bl	8025434 <memcpy>
            buff += BLOCKSIZE;
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e3be:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 800e3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d8c8      	bhi.n	800e360 <SD_write+0x98>
 800e3ce:	e000      	b.n	800e3d2 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 800e3d0:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	693a      	ldr	r2, [r7, #16]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d106      	bne.n	800e3e8 <SD_write+0x120>
 800e3da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <SD_write+0x120>
      res = RES_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 800e3e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3740      	adds	r7, #64	; 0x40
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	200005c8 	.word	0x200005c8
 800e3f8:	200003c8 	.word	0x200003c8

0800e3fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08c      	sub	sp, #48	; 0x30
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	603a      	str	r2, [r7, #0]
 800e406:	71fb      	strb	r3, [r7, #7]
 800e408:	460b      	mov	r3, r1
 800e40a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e40c:	2301      	movs	r3, #1
 800e40e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e412:	4b25      	ldr	r3, [pc, #148]	; (800e4a8 <SD_ioctl+0xac>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	b2db      	uxtb	r3, r3
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d001      	beq.n	800e424 <SD_ioctl+0x28>
 800e420:	2303      	movs	r3, #3
 800e422:	e03c      	b.n	800e49e <SD_ioctl+0xa2>

  switch (cmd)
 800e424:	79bb      	ldrb	r3, [r7, #6]
 800e426:	2b03      	cmp	r3, #3
 800e428:	d834      	bhi.n	800e494 <SD_ioctl+0x98>
 800e42a:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <SD_ioctl+0x34>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e449 	.word	0x0800e449
 800e438:	0800e461 	.word	0x0800e461
 800e43c:	0800e47b 	.word	0x0800e47b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e440:	2300      	movs	r3, #0
 800e442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e446:	e028      	b.n	800e49a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e448:	f107 030c 	add.w	r3, r7, #12
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff fdf1 	bl	800e034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e45e:	e01c      	b.n	800e49a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e460:	f107 030c 	add.w	r3, r7, #12
 800e464:	4618      	mov	r0, r3
 800e466:	f7ff fde5 	bl	800e034 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e478:	e00f      	b.n	800e49a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e47a:	f107 030c 	add.w	r3, r7, #12
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff fdd8 	bl	800e034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	0a5a      	lsrs	r2, r3, #9
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e492:	e002      	b.n	800e49a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e494:	2304      	movs	r3, #4
 800e496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e49a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3730      	adds	r7, #48	; 0x30
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20000031 	.word	0x20000031

0800e4ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800e4ac:	b590      	push	{r4, r7, lr}
 800e4ae:	b089      	sub	sp, #36	; 0x24
 800e4b0:	af04      	add	r7, sp, #16
 800e4b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800e4b4:	2302      	movs	r3, #2
 800e4b6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	2102      	movs	r1, #2
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fc8c 	bl	800eddc <USBH_FindInterface>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
 800e4ca:	2bff      	cmp	r3, #255	; 0xff
 800e4cc:	f000 812a 	beq.w	800e724 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f000 fc65 	bl	800eda4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800e4e0:	2050      	movs	r0, #80	; 0x50
 800e4e2:	f016 ff97 	bl	8025414 <malloc>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e4f0:	69db      	ldr	r3, [r3, #28]
 800e4f2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e4f4:	7bbb      	ldrb	r3, [r7, #14]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	211a      	movs	r1, #26
 800e4fa:	fb01 f303 	mul.w	r3, r1, r3
 800e4fe:	4413      	add	r3, r2
 800e500:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	b25b      	sxtb	r3, r3
 800e508:	2b00      	cmp	r3, #0
 800e50a:	da15      	bge.n	800e538 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	211a      	movs	r1, #26
 800e512:	fb01 f303 	mul.w	r3, r1, r3
 800e516:	4413      	add	r3, r2
 800e518:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e51c:	781a      	ldrb	r2, [r3, #0]
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e522:	7bbb      	ldrb	r3, [r7, #14]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	211a      	movs	r1, #26
 800e528:	fb01 f303 	mul.w	r3, r1, r3
 800e52c:	4413      	add	r3, r2
 800e52e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800e532:	881a      	ldrh	r2, [r3, #0]
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	785b      	ldrb	r3, [r3, #1]
 800e53c:	4619      	mov	r1, r3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f001 ff2f 	bl	80103a2 <USBH_AllocPipe>
 800e544:	4603      	mov	r3, r0
 800e546:	461a      	mov	r2, r3
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	7819      	ldrb	r1, [r3, #0]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	7858      	ldrb	r0, [r3, #1]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e560:	68ba      	ldr	r2, [r7, #8]
 800e562:	8952      	ldrh	r2, [r2, #10]
 800e564:	9202      	str	r2, [sp, #8]
 800e566:	2203      	movs	r2, #3
 800e568:	9201      	str	r2, [sp, #4]
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	4623      	mov	r3, r4
 800e56e:	4602      	mov	r2, r0
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 fee7 	bl	8010344 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	2200      	movs	r2, #0
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f009 ff94 	bl	80184ac <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800e584:	2300      	movs	r3, #0
 800e586:	2200      	movs	r2, #0
 800e588:	210a      	movs	r1, #10
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 fc26 	bl	800eddc <USBH_FindInterface>
 800e590:	4603      	mov	r3, r0
 800e592:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800e594:	7bbb      	ldrb	r3, [r7, #14]
 800e596:	2bff      	cmp	r3, #255	; 0xff
 800e598:	f000 80c4 	beq.w	800e724 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e59c:	7bbb      	ldrb	r3, [r7, #14]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	211a      	movs	r1, #26
 800e5a2:	fb01 f303 	mul.w	r3, r1, r3
 800e5a6:	4413      	add	r3, r2
 800e5a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	b25b      	sxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	da16      	bge.n	800e5e2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	211a      	movs	r1, #26
 800e5ba:	fb01 f303 	mul.w	r3, r1, r3
 800e5be:	4413      	add	r3, r2
 800e5c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e5ca:	7bbb      	ldrb	r3, [r7, #14]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	211a      	movs	r1, #26
 800e5d0:	fb01 f303 	mul.w	r3, r1, r3
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800e5da:	881a      	ldrh	r2, [r3, #0]
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	835a      	strh	r2, [r3, #26]
 800e5e0:	e015      	b.n	800e60e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	211a      	movs	r1, #26
 800e5e8:	fb01 f303 	mul.w	r3, r1, r3
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800e5f2:	781a      	ldrb	r2, [r3, #0]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e5f8:	7bbb      	ldrb	r3, [r7, #14]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	211a      	movs	r1, #26
 800e5fe:	fb01 f303 	mul.w	r3, r1, r3
 800e602:	4413      	add	r3, r2
 800e604:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800e608:	881a      	ldrh	r2, [r3, #0]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e60e:	7bbb      	ldrb	r3, [r7, #14]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	211a      	movs	r1, #26
 800e614:	fb01 f303 	mul.w	r3, r1, r3
 800e618:	4413      	add	r3, r2
 800e61a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	b25b      	sxtb	r3, r3
 800e622:	2b00      	cmp	r3, #0
 800e624:	da16      	bge.n	800e654 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e626:	7bbb      	ldrb	r3, [r7, #14]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	211a      	movs	r1, #26
 800e62c:	fb01 f303 	mul.w	r3, r1, r3
 800e630:	4413      	add	r3, r2
 800e632:	f203 3352 	addw	r3, r3, #850	; 0x352
 800e636:	781a      	ldrb	r2, [r3, #0]
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e63c:	7bbb      	ldrb	r3, [r7, #14]
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	211a      	movs	r1, #26
 800e642:	fb01 f303 	mul.w	r3, r1, r3
 800e646:	4413      	add	r3, r2
 800e648:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800e64c:	881a      	ldrh	r2, [r3, #0]
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	835a      	strh	r2, [r3, #26]
 800e652:	e015      	b.n	800e680 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e654:	7bbb      	ldrb	r3, [r7, #14]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	211a      	movs	r1, #26
 800e65a:	fb01 f303 	mul.w	r3, r1, r3
 800e65e:	4413      	add	r3, r2
 800e660:	f203 3352 	addw	r3, r3, #850	; 0x352
 800e664:	781a      	ldrb	r2, [r3, #0]
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e66a:	7bbb      	ldrb	r3, [r7, #14]
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	211a      	movs	r1, #26
 800e670:	fb01 f303 	mul.w	r3, r1, r3
 800e674:	4413      	add	r3, r2
 800e676:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800e67a:	881a      	ldrh	r2, [r3, #0]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	7b9b      	ldrb	r3, [r3, #14]
 800e684:	4619      	mov	r1, r3
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f001 fe8b 	bl	80103a2 <USBH_AllocPipe>
 800e68c:	4603      	mov	r3, r0
 800e68e:	461a      	mov	r2, r3
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	7bdb      	ldrb	r3, [r3, #15]
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 fe81 	bl	80103a2 <USBH_AllocPipe>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	7b59      	ldrb	r1, [r3, #13]
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	7b98      	ldrb	r0, [r3, #14]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	8b12      	ldrh	r2, [r2, #24]
 800e6c0:	9202      	str	r2, [sp, #8]
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	9201      	str	r2, [sp, #4]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f001 fe39 	bl	8010344 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	7b19      	ldrb	r1, [r3, #12]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	7bd8      	ldrb	r0, [r3, #15]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	8b52      	ldrh	r2, [r2, #26]
 800e6ea:	9202      	str	r2, [sp, #8]
 800e6ec:	2202      	movs	r2, #2
 800e6ee:	9201      	str	r2, [sp, #4]
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	4623      	mov	r3, r4
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f001 fe24 	bl	8010344 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	2200      	movs	r2, #0
 800e700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	7b5b      	ldrb	r3, [r3, #13]
 800e708:	2200      	movs	r2, #0
 800e70a:	4619      	mov	r1, r3
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f009 fecd 	bl	80184ac <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	7b1b      	ldrb	r3, [r3, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	4619      	mov	r1, r3
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f009 fec6 	bl	80184ac <USBH_LL_SetToggle>
      status = USBH_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800e724:	7bfb      	ldrb	r3, [r7, #15]
}
 800e726:	4618      	mov	r0, r3
 800e728:	3714      	adds	r7, #20
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd90      	pop	{r4, r7, pc}

0800e72e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b084      	sub	sp, #16
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e73c:	69db      	ldr	r3, [r3, #28]
 800e73e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d00e      	beq.n	800e766 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	4619      	mov	r1, r3
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f001 fe17 	bl	8010382 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	4619      	mov	r1, r3
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f001 fe3f 	bl	80103de <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	7b1b      	ldrb	r3, [r3, #12]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00e      	beq.n	800e78c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	7b1b      	ldrb	r3, [r3, #12]
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f001 fe04 	bl	8010382 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	7b1b      	ldrb	r3, [r3, #12]
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f001 fe2c 	bl	80103de <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	7b5b      	ldrb	r3, [r3, #13]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d00e      	beq.n	800e7b2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	7b5b      	ldrb	r3, [r3, #13]
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f001 fdf1 	bl	8010382 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	7b5b      	ldrb	r3, [r3, #13]
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f001 fe19 	bl	80103de <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e7b8:	69db      	ldr	r3, [r3, #28]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00b      	beq.n	800e7d6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e7c4:	69db      	ldr	r3, [r3, #28]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f016 fe2c 	bl	8025424 <free>
    phost->pActiveClass->pData = 0U;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800e7e8:	2302      	movs	r3, #2
 800e7ea:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	3340      	adds	r3, #64	; 0x40
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 f8b2 	bl	800e966 <GetLineCoding>
 800e802:	4603      	mov	r3, r0
 800e804:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800e806:	7bfb      	ldrb	r3, [r7, #15]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d105      	bne.n	800e818 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e812:	2102      	movs	r1, #2
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	4798      	blx	r3
  }
  return status;
 800e818:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
	...

0800e824 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e82c:	2301      	movs	r3, #1
 800e82e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e830:	2300      	movs	r3, #0
 800e832:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e83a:	69db      	ldr	r3, [r3, #28]
 800e83c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e844:	2b04      	cmp	r3, #4
 800e846:	d877      	bhi.n	800e938 <USBH_CDC_Process+0x114>
 800e848:	a201      	add	r2, pc, #4	; (adr r2, 800e850 <USBH_CDC_Process+0x2c>)
 800e84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84e:	bf00      	nop
 800e850:	0800e865 	.word	0x0800e865
 800e854:	0800e86b 	.word	0x0800e86b
 800e858:	0800e89b 	.word	0x0800e89b
 800e85c:	0800e90f 	.word	0x0800e90f
 800e860:	0800e91d 	.word	0x0800e91d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800e864:	2300      	movs	r3, #0
 800e866:	73fb      	strb	r3, [r7, #15]
    break;
 800e868:	e06d      	b.n	800e946 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f897 	bl	800e9a4 <SetLineCoding>
 800e876:	4603      	mov	r3, r0
 800e878:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800e87a:	7bbb      	ldrb	r3, [r7, #14]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d104      	bne.n	800e88a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2202      	movs	r2, #2
 800e884:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800e888:	e058      	b.n	800e93c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800e88a:	7bbb      	ldrb	r3, [r7, #14]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d055      	beq.n	800e93c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	2204      	movs	r2, #4
 800e894:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800e898:	e050      	b.n	800e93c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	3340      	adds	r3, #64	; 0x40
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f860 	bl	800e966 <GetLineCoding>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800e8aa:	7bbb      	ldrb	r3, [r7, #14]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d126      	bne.n	800e8fe <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8c2:	791b      	ldrb	r3, [r3, #4]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d13b      	bne.n	800e940 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8d2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d133      	bne.n	800e940 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8e2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d12b      	bne.n	800e940 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8f0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d124      	bne.n	800e940 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f984 	bl	800ec04 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800e8fc:	e020      	b.n	800e940 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800e8fe:	7bbb      	ldrb	r3, [r7, #14]
 800e900:	2b01      	cmp	r3, #1
 800e902:	d01d      	beq.n	800e940 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2204      	movs	r2, #4
 800e908:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800e90c:	e018      	b.n	800e940 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f867 	bl	800e9e2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f8f8 	bl	800eb0a <CDC_ProcessReception>
    break;
 800e91a:	e014      	b.n	800e946 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800e91c:	2100      	movs	r1, #0
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fffa 	bl	800f918 <USBH_ClrFeature>
 800e924:	4603      	mov	r3, r0
 800e926:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800e928:	7bbb      	ldrb	r3, [r7, #14]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d10a      	bne.n	800e944 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800e936:	e005      	b.n	800e944 <USBH_CDC_Process+0x120>

  default:
    break;
 800e938:	bf00      	nop
 800e93a:	e004      	b.n	800e946 <USBH_CDC_Process+0x122>
    break;
 800e93c:	bf00      	nop
 800e93e:	e002      	b.n	800e946 <USBH_CDC_Process+0x122>
    break;
 800e940:	bf00      	nop
 800e942:	e000      	b.n	800e946 <USBH_CDC_Process+0x122>
    break;
 800e944:	bf00      	nop

  }

  return status;
 800e946:	7bfb      	ldrb	r3, [r7, #15]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e966:	b580      	push	{r7, lr}
 800e968:	b082      	sub	sp, #8
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	22a1      	movs	r2, #161	; 0xa1
 800e974:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2221      	movs	r2, #33	; 0x21
 800e97a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2207      	movs	r2, #7
 800e98c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2207      	movs	r2, #7
 800e992:	4619      	mov	r1, r3
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f001 f99f 	bl	800fcd8 <USBH_CtlReq>
 800e99a:	4603      	mov	r3, r0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2221      	movs	r2, #33	; 0x21
 800e9b2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2220      	movs	r2, #32
 800e9b8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2207      	movs	r2, #7
 800e9ca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	2207      	movs	r2, #7
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f001 f980 	bl	800fcd8 <USBH_CtlReq>
 800e9d8:	4603      	mov	r3, r0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b086      	sub	sp, #24
 800e9e6:	af02      	add	r7, sp, #8
 800e9e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800e9f0:	69db      	ldr	r3, [r3, #28]
 800e9f2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e9fe:	2b01      	cmp	r3, #1
 800ea00:	d002      	beq.n	800ea08 <CDC_ProcessTransmission+0x26>
 800ea02:	2b02      	cmp	r3, #2
 800ea04:	d025      	beq.n	800ea52 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800ea06:	e07c      	b.n	800eb02 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	8b12      	ldrh	r2, [r2, #24]
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d90c      	bls.n	800ea2e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	69d9      	ldr	r1, [r3, #28]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	8b1a      	ldrh	r2, [r3, #24]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	7b58      	ldrb	r0, [r3, #13]
 800ea20:	2301      	movs	r3, #1
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	4603      	mov	r3, r0
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f001 fc49 	bl	80102be <USBH_BulkSendData>
 800ea2c:	e00c      	b.n	800ea48 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	7b58      	ldrb	r0, [r3, #13]
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	4603      	mov	r3, r0
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f001 fc3b 	bl	80102be <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2202      	movs	r2, #2
 800ea4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800ea50:	e057      	b.n	800eb02 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	7b5b      	ldrb	r3, [r3, #13]
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f009 fcfd 	bl	8018458 <USBH_LL_GetURBState>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800ea62:	7afb      	ldrb	r3, [r7, #11]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d136      	bne.n	800ead6 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	8b12      	ldrh	r2, [r2, #24]
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d90e      	bls.n	800ea92 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	8b12      	ldrh	r2, [r2, #24]
 800ea7c:	1a9a      	subs	r2, r3, r2
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	69db      	ldr	r3, [r3, #28]
 800ea86:	68fa      	ldr	r2, [r7, #12]
 800ea88:	8b12      	ldrh	r2, [r2, #24]
 800ea8a:	441a      	add	r2, r3
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	61da      	str	r2, [r3, #28]
 800ea90:	e002      	b.n	800ea98 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d004      	beq.n	800eaaa <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800eaa8:	e006      	b.n	800eab8 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f892 	bl	800ebdc <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2204      	movs	r2, #4
 800eabc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eacc:	2200      	movs	r2, #0
 800eace:	4619      	mov	r1, r3
 800ead0:	f001 fdf6 	bl	80106c0 <osMessagePut>
    break;
 800ead4:	e014      	b.n	800eb00 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800ead6:	7afb      	ldrb	r3, [r7, #11]
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d111      	bne.n	800eb00 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2204      	movs	r2, #4
 800eae8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eaf8:	2200      	movs	r2, #0
 800eafa:	4619      	mov	r1, r3
 800eafc:	f001 fde0 	bl	80106c0 <osMessagePut>
    break;
 800eb00:	bf00      	nop
  }
}
 800eb02:	bf00      	nop
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b086      	sub	sp, #24
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800eb26:	2b03      	cmp	r3, #3
 800eb28:	d002      	beq.n	800eb30 <CDC_ProcessReception+0x26>
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d00e      	beq.n	800eb4c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800eb2e:	e051      	b.n	800ebd4 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	6a19      	ldr	r1, [r3, #32]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	8b5a      	ldrh	r2, [r3, #26]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	7b1b      	ldrb	r3, [r3, #12]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f001 fbe3 	bl	8010308 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2204      	movs	r2, #4
 800eb46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800eb4a:	e043      	b.n	800ebd4 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	7b1b      	ldrb	r3, [r3, #12]
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f009 fc80 	bl	8018458 <USBH_LL_GetURBState>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800eb5c:	7cfb      	ldrb	r3, [r7, #19]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d137      	bne.n	800ebd2 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	7b1b      	ldrb	r3, [r3, #12]
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f009 fbe3 	bl	8018334 <USBH_LL_GetLastXferSize>
 800eb6e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d016      	beq.n	800eba8 <CDC_ProcessReception+0x9e>
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	8b5b      	ldrh	r3, [r3, #26]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d910      	bls.n	800eba8 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	1ad2      	subs	r2, r2, r3
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	6a1a      	ldr	r2, [r3, #32]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	441a      	add	r2, r3
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2203      	movs	r2, #3
 800eba2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800eba6:	e006      	b.n	800ebb6 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f81d 	bl	800ebf0 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2204      	movs	r2, #4
 800ebba:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ebca:	2200      	movs	r2, #0
 800ebcc:	4619      	mov	r1, r3
 800ebce:	f001 fd77 	bl	80106c0 <osMessagePut>
    break;
 800ebd2:	bf00      	nop
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	3718      	adds	r7, #24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]

}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]

}
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]

}
 800ec0c:	bf00      	nop
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800ec18:	b5b0      	push	{r4, r5, r7, lr}
 800ec1a:	b090      	sub	sp, #64	; 0x40
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	4613      	mov	r3, r2
 800ec24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	e03d      	b.n	800ecac <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	79fa      	ldrb	r2, [r7, #7]
 800ec34:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f000 f837 	bl	800ecbc <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d003      	beq.n	800ec5c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ec5c:	4b15      	ldr	r3, [pc, #84]	; (800ecb4 <USBH_Init+0x9c>)
 800ec5e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800ec62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800ec68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f001 fcfc 	bl	801066c <osMessageCreate>
 800ec74:	4602      	mov	r2, r0
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ec7c:	4b0e      	ldr	r3, [pc, #56]	; (800ecb8 <USBH_Init+0xa0>)
 800ec7e:	f107 0414 	add.w	r4, r7, #20
 800ec82:	461d      	mov	r5, r3
 800ec84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ec8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800ec90:	f107 0314 	add.w	r3, r7, #20
 800ec94:	68f9      	ldr	r1, [r7, #12]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f001 fc88 	bl	80105ac <osThreadCreate>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f009 fa93 	bl	80181d0 <USBH_LL_Init>

  return USBH_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3740      	adds	r7, #64	; 0x40
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bdb0      	pop	{r4, r5, r7, pc}
 800ecb4:	08026398 	.word	0x08026398
 800ecb8:	080263b4 	.word	0x080263b4

0800ecbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ecc8:	e008      	b.n	800ecdc <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	32e0      	adds	r2, #224	; 0xe0
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	60fb      	str	r3, [r7, #12]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2b0e      	cmp	r3, #14
 800ece0:	d9f3      	bls.n	800ecca <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ece2:	2300      	movs	r3, #0
 800ece4:	60fb      	str	r3, [r7, #12]
 800ece6:	e009      	b.n	800ecfc <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	4413      	add	r3, r2
 800ecee:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed02:	d3f1      	bcc.n	800ece8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2201      	movs	r2, #1
 800ed22:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2240      	movs	r2, #64	; 0x40
 800ed28:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3714      	adds	r7, #20
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr

0800ed4e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ed4e:	b480      	push	{r7}
 800ed50:	b085      	sub	sp, #20
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d017      	beq.n	800ed92 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d10f      	bne.n	800ed8c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed72:	1c59      	adds	r1, r3, #1
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	33dc      	adds	r3, #220	; 0xdc
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	4413      	add	r3, r2
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800ed86:	2300      	movs	r3, #0
 800ed88:	73fb      	strb	r3, [r7, #15]
 800ed8a:	e004      	b.n	800ed96 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ed8c:	2302      	movs	r3, #2
 800ed8e:	73fb      	strb	r3, [r7, #15]
 800ed90:	e001      	b.n	800ed96 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ed92:	2302      	movs	r3, #2
 800ed94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ed96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3714      	adds	r7, #20
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr

0800eda4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b085      	sub	sp, #20
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	460b      	mov	r3, r1
 800edae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800edb0:	2300      	movs	r3, #0
 800edb2:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800edba:	78fa      	ldrb	r2, [r7, #3]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d204      	bcs.n	800edca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	78fa      	ldrb	r2, [r7, #3]
 800edc4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800edc8:	e001      	b.n	800edce <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800edca:	2302      	movs	r3, #2
 800edcc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800edce:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3714      	adds	r7, #20
 800edd4:	46bd      	mov	sp, r7
 800edd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edda:	4770      	bx	lr

0800eddc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800eddc:	b480      	push	{r7}
 800edde:	b087      	sub	sp, #28
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	4608      	mov	r0, r1
 800ede6:	4611      	mov	r1, r2
 800ede8:	461a      	mov	r2, r3
 800edea:	4603      	mov	r3, r0
 800edec:	70fb      	strb	r3, [r7, #3]
 800edee:	460b      	mov	r3, r1
 800edf0:	70bb      	strb	r3, [r7, #2]
 800edf2:	4613      	mov	r3, r2
 800edf4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800edf6:	2300      	movs	r3, #0
 800edf8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800ee04:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ee06:	e025      	b.n	800ee54 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ee08:	7dfb      	ldrb	r3, [r7, #23]
 800ee0a:	221a      	movs	r2, #26
 800ee0c:	fb02 f303 	mul.w	r3, r2, r3
 800ee10:	3308      	adds	r3, #8
 800ee12:	68fa      	ldr	r2, [r7, #12]
 800ee14:	4413      	add	r3, r2
 800ee16:	3302      	adds	r3, #2
 800ee18:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	795b      	ldrb	r3, [r3, #5]
 800ee1e:	78fa      	ldrb	r2, [r7, #3]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d002      	beq.n	800ee2a <USBH_FindInterface+0x4e>
 800ee24:	78fb      	ldrb	r3, [r7, #3]
 800ee26:	2bff      	cmp	r3, #255	; 0xff
 800ee28:	d111      	bne.n	800ee4e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800ee2e:	78ba      	ldrb	r2, [r7, #2]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d002      	beq.n	800ee3a <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ee34:	78bb      	ldrb	r3, [r7, #2]
 800ee36:	2bff      	cmp	r3, #255	; 0xff
 800ee38:	d109      	bne.n	800ee4e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800ee3e:	787a      	ldrb	r2, [r7, #1]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d002      	beq.n	800ee4a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ee44:	787b      	ldrb	r3, [r7, #1]
 800ee46:	2bff      	cmp	r3, #255	; 0xff
 800ee48:	d101      	bne.n	800ee4e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
 800ee4c:	e006      	b.n	800ee5c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ee4e:	7dfb      	ldrb	r3, [r7, #23]
 800ee50:	3301      	adds	r3, #1
 800ee52:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ee54:	7dfb      	ldrb	r3, [r7, #23]
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d9d6      	bls.n	800ee08 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ee5a:	23ff      	movs	r3, #255	; 0xff
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	371c      	adds	r7, #28
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f009 f9e9 	bl	8018248 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800ee76:	2101      	movs	r1, #1
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f009 fb00 	bl	801847e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b088      	sub	sp, #32
 800ee8c:	af04      	add	r7, sp, #16
 800ee8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ee90:	2302      	movs	r3, #2
 800ee92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ee94:	2300      	movs	r3, #0
 800ee96:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f000 fb7e 	bl	800f59a <USBH_IsPortEnabled>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10c      	bne.n	800eebe <USBH_Process+0x36>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d002      	beq.n	800eebe <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2203      	movs	r2, #3
 800eebc:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b0b      	cmp	r3, #11
 800eec6:	f200 81ab 	bhi.w	800f220 <USBH_Process+0x398>
 800eeca:	a201      	add	r2, pc, #4	; (adr r2, 800eed0 <USBH_Process+0x48>)
 800eecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed0:	0800ef01 	.word	0x0800ef01
 800eed4:	0800ef3f 	.word	0x0800ef3f
 800eed8:	0800ef53 	.word	0x0800ef53
 800eedc:	0800f1fb 	.word	0x0800f1fb
 800eee0:	0800f221 	.word	0x0800f221
 800eee4:	0800effd 	.word	0x0800effd
 800eee8:	0800f195 	.word	0x0800f195
 800eeec:	0800f02d 	.word	0x0800f02d
 800eef0:	0800f069 	.word	0x0800f069
 800eef4:	0800f0a3 	.word	0x0800f0a3
 800eef8:	0800f0eb 	.word	0x0800f0eb
 800eefc:	0800f1e3 	.word	0x0800f1e3
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 818b 	beq.w	800f224 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2201      	movs	r2, #1
 800ef12:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800ef14:	20c8      	movs	r0, #200	; 0xc8
 800ef16:	f009 fafc 	bl	8018512 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f009 f9ef 	bl	80182fe <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef34:	2200      	movs	r2, #0
 800ef36:	4619      	mov	r1, r3
 800ef38:	f001 fbc2 	bl	80106c0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ef3c:	e172      	b.n	800f224 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	f040 816f 	bne.w	800f228 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ef50:	e16a      	b.n	800f228 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800ef52:	2064      	movs	r0, #100	; 0x64
 800ef54:	f009 fadd 	bl	8018512 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f009 f9ab 	bl	80182b4 <USBH_LL_GetSpeed>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	461a      	mov	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2205      	movs	r2, #5
 800ef6c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800ef6e:	2100      	movs	r1, #0
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f001 fa16 	bl	80103a2 <USBH_AllocPipe>
 800ef76:	4603      	mov	r3, r0
 800ef78:	461a      	mov	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800ef7e:	2180      	movs	r1, #128	; 0x80
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f001 fa0e 	bl	80103a2 <USBH_AllocPipe>
 800ef86:	4603      	mov	r3, r0
 800ef88:	461a      	mov	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	7919      	ldrb	r1, [r3, #4]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800efa2:	b292      	uxth	r2, r2
 800efa4:	9202      	str	r2, [sp, #8]
 800efa6:	2200      	movs	r2, #0
 800efa8:	9201      	str	r2, [sp, #4]
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	4603      	mov	r3, r0
 800efae:	2280      	movs	r2, #128	; 0x80
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f001 f9c7 	bl	8010344 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	7959      	ldrb	r1, [r3, #5]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800efca:	b292      	uxth	r2, r2
 800efcc:	9202      	str	r2, [sp, #8]
 800efce:	2200      	movs	r2, #0
 800efd0:	9201      	str	r2, [sp, #4]
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	4603      	mov	r3, r0
 800efd6:	2200      	movs	r2, #0
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f001 f9b3 	bl	8010344 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eff2:	2200      	movs	r2, #0
 800eff4:	4619      	mov	r1, r3
 800eff6:	f001 fb63 	bl	80106c0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800effa:	e120      	b.n	800f23e <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 f923 	bl	800f248 <USBH_HandleEnum>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	f040 8111 	bne.w	800f22c <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d103      	bne.n	800f024 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2208      	movs	r2, #8
 800f020:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800f022:	e103      	b.n	800f22c <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2207      	movs	r2, #7
 800f028:	701a      	strb	r2, [r3, #0]
    break;
 800f02a:	e0ff      	b.n	800f22c <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f032:	2b00      	cmp	r3, #0
 800f034:	f000 80fc 	beq.w	800f230 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f03e:	2101      	movs	r1, #1
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2208      	movs	r2, #8
 800f048:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2205      	movs	r2, #5
 800f04e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f05e:	2200      	movs	r2, #0
 800f060:	4619      	mov	r1, r3
 800f062:	f001 fb2d 	bl	80106c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f066:	e0e3      	b.n	800f230 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800f06e:	b29b      	uxth	r3, r3
 800f070:	4619      	mov	r1, r3
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fc09 	bl	800f88a <USBH_SetCfg>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d102      	bne.n	800f084 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2209      	movs	r2, #9
 800f082:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f098:	2200      	movs	r2, #0
 800f09a:	4619      	mov	r1, r3
 800f09c:	f001 fb10 	bl	80106c0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f0a0:	e0cd      	b.n	800f23e <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800f0a8:	f003 0320 	and.w	r3, r3, #32
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00a      	beq.n	800f0c6 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f0b0:	2101      	movs	r1, #1
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fc0c 	bl	800f8d0 <USBH_SetFeature>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d106      	bne.n	800f0cc <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	220a      	movs	r2, #10
 800f0c2:	701a      	strb	r2, [r3, #0]
 800f0c4:	e002      	b.n	800f0cc <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	f001 faec 	bl	80106c0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f0e8:	e0a9      	b.n	800f23e <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d040      	beq.n	800f176 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73fb      	strb	r3, [r7, #15]
 800f100:	e017      	b.n	800f132 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f102:	7bfb      	ldrb	r3, [r7, #15]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	33dc      	adds	r3, #220	; 0xdc
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	791a      	ldrb	r2, [r3, #4]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800f116:	429a      	cmp	r2, r3
 800f118:	d108      	bne.n	800f12c <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
 800f11c:	687a      	ldr	r2, [r7, #4]
 800f11e:	33dc      	adds	r3, #220	; 0xdc
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
 800f12e:	3301      	adds	r3, #1
 800f130:	73fb      	strb	r3, [r7, #15]
 800f132:	7bfb      	ldrb	r3, [r7, #15]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0e4      	beq.n	800f102 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d016      	beq.n	800f170 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	4798      	blx	r3
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d109      	bne.n	800f168 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2206      	movs	r2, #6
 800f158:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f160:	2103      	movs	r1, #3
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	4798      	blx	r3
 800f166:	e006      	b.n	800f176 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	220d      	movs	r2, #13
 800f16c:	701a      	strb	r2, [r3, #0]
 800f16e:	e002      	b.n	800f176 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	220d      	movs	r2, #13
 800f174:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2205      	movs	r2, #5
 800f17a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f18a:	2200      	movs	r2, #0
 800f18c:	4619      	mov	r1, r3
 800f18e:	f001 fa97 	bl	80106c0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800f192:	e054      	b.n	800f23e <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d00f      	beq.n	800f1be <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	6878      	ldr	r0, [r7, #4]
 800f1a8:	4798      	blx	r3
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800f1ae:	7bbb      	ldrb	r3, [r7, #14]
 800f1b0:	b2db      	uxtb	r3, r3
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d13e      	bne.n	800f234 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	220b      	movs	r2, #11
 800f1ba:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800f1bc:	e03a      	b.n	800f234 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	220d      	movs	r2, #13
 800f1c2:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2205      	movs	r2, #5
 800f1c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f1d8:	2200      	movs	r2, #0
 800f1da:	4619      	mov	r1, r3
 800f1dc:	f001 fa70 	bl	80106c0 <osMessagePut>
    break;
 800f1e0:	e028      	b.n	800f234 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d025      	beq.n	800f238 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f1f2:	695b      	ldr	r3, [r3, #20]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	4798      	blx	r3
    }
    break;
 800f1f8:	e01e      	b.n	800f238 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f7ff fd5e 	bl	800ecbc <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f206:	2b00      	cmp	r3, #0
 800f208:	d018      	beq.n	800f23c <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800f21e:	e00d      	b.n	800f23c <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800f220:	bf00      	nop
 800f222:	e00c      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f224:	bf00      	nop
 800f226:	e00a      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f228:	bf00      	nop
 800f22a:	e008      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f22c:	bf00      	nop
 800f22e:	e006      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f230:	bf00      	nop
 800f232:	e004      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f234:	bf00      	nop
 800f236:	e002      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f238:	bf00      	nop
 800f23a:	e000      	b.n	800f23e <USBH_Process+0x3b6>
    break;
 800f23c:	bf00      	nop
  }
 return USBH_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af04      	add	r7, sp, #16
 800f24e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f250:	2301      	movs	r3, #1
 800f252:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	785b      	ldrb	r3, [r3, #1]
 800f258:	2b07      	cmp	r3, #7
 800f25a:	f200 8132 	bhi.w	800f4c2 <USBH_HandleEnum+0x27a>
 800f25e:	a201      	add	r2, pc, #4	; (adr r2, 800f264 <USBH_HandleEnum+0x1c>)
 800f260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f264:	0800f285 	.word	0x0800f285
 800f268:	0800f2f7 	.word	0x0800f2f7
 800f26c:	0800f30f 	.word	0x0800f30f
 800f270:	0800f385 	.word	0x0800f385
 800f274:	0800f39d 	.word	0x0800f39d
 800f278:	0800f3bb 	.word	0x0800f3bb
 800f27c:	0800f427 	.word	0x0800f427
 800f280:	0800f477 	.word	0x0800f477
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800f284:	2108      	movs	r1, #8
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fa2f 	bl	800f6ea <USBH_Get_DevDesc>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f040 8119 	bne.w	800f4c6 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	7919      	ldrb	r1, [r3, #4]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f2b8:	b292      	uxth	r2, r2
 800f2ba:	9202      	str	r2, [sp, #8]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	9201      	str	r2, [sp, #4]
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2280      	movs	r2, #128	; 0x80
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f001 f83c 	bl	8010344 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7959      	ldrb	r1, [r3, #5]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f2e0:	b292      	uxth	r2, r2
 800f2e2:	9202      	str	r2, [sp, #8]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	9201      	str	r2, [sp, #4]
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f001 f828 	bl	8010344 <USBH_OpenPipe>

    }
    break;
 800f2f4:	e0e7      	b.n	800f4c6 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800f2f6:	2112      	movs	r1, #18
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 f9f6 	bl	800f6ea <USBH_Get_DevDesc>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	f040 80e2 	bne.w	800f4ca <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2202      	movs	r2, #2
 800f30a:	705a      	strb	r2, [r3, #1]

    }
    break;
 800f30c:	e0dd      	b.n	800f4ca <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800f30e:	2101      	movs	r1, #1
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fa96 	bl	800f842 <USBH_SetAddress>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f040 80d8 	bne.w	800f4ce <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800f31e:	2002      	movs	r0, #2
 800f320:	f009 f8f7 	bl	8018512 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2201      	movs	r2, #1
 800f328:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2203      	movs	r2, #3
 800f330:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	7919      	ldrb	r1, [r3, #4]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f346:	b292      	uxth	r2, r2
 800f348:	9202      	str	r2, [sp, #8]
 800f34a:	2200      	movs	r2, #0
 800f34c:	9201      	str	r2, [sp, #4]
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	4603      	mov	r3, r0
 800f352:	2280      	movs	r2, #128	; 0x80
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fff5 	bl	8010344 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	7959      	ldrb	r1, [r3, #5]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800f36e:	b292      	uxth	r2, r2
 800f370:	9202      	str	r2, [sp, #8]
 800f372:	2200      	movs	r2, #0
 800f374:	9201      	str	r2, [sp, #4]
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	4603      	mov	r3, r0
 800f37a:	2200      	movs	r2, #0
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 ffe1 	bl	8010344 <USBH_OpenPipe>
    }
    break;
 800f382:	e0a4      	b.n	800f4ce <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800f384:	2109      	movs	r1, #9
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 f9d7 	bl	800f73a <USBH_Get_CfgDesc>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f040 809f 	bne.w	800f4d2 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2204      	movs	r2, #4
 800f398:	705a      	strb	r2, [r3, #1]
    }
    break;
 800f39a:	e09a      	b.n	800f4d2 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f9c8 	bl	800f73a <USBH_Get_CfgDesc>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f040 8092 	bne.w	800f4d6 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2205      	movs	r2, #5
 800f3b6:	705a      	strb	r2, [r3, #1]
    }
    break;
 800f3b8:	e08d      	b.n	800f4d6 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d01e      	beq.n	800f402 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800f3d0:	23ff      	movs	r3, #255	; 0xff
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 f9d5 	bl	800f782 <USBH_Get_StringDesc>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d17d      	bne.n	800f4da <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2206      	movs	r2, #6
 800f3e2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2205      	movs	r2, #5
 800f3e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	f001 f960 	bl	80106c0 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f400:	e06b      	b.n	800f4da <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2206      	movs	r2, #6
 800f406:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2205      	movs	r2, #5
 800f40c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f41c:	2200      	movs	r2, #0
 800f41e:	4619      	mov	r1, r3
 800f420:	f001 f94e 	bl	80106c0 <osMessagePut>
    break;
 800f424:	e059      	b.n	800f4da <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d010      	beq.n	800f452 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800f43c:	23ff      	movs	r3, #255	; 0xff
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f99f 	bl	800f782 <USBH_Get_StringDesc>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d149      	bne.n	800f4de <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2207      	movs	r2, #7
 800f44e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f450:	e045      	b.n	800f4de <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2207      	movs	r2, #7
 800f456:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2205      	movs	r2, #5
 800f45c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f46c:	2200      	movs	r2, #0
 800f46e:	4619      	mov	r1, r3
 800f470:	f001 f926 	bl	80106c0 <osMessagePut>
    break;
 800f474:	e033      	b.n	800f4de <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00f      	beq.n	800f4a0 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800f48c:	23ff      	movs	r3, #255	; 0xff
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 f977 	bl	800f782 <USBH_Get_StringDesc>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d123      	bne.n	800f4e2 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800f49a:	2300      	movs	r3, #0
 800f49c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800f49e:	e020      	b.n	800f4e2 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2205      	movs	r2, #5
 800f4a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	f001 f900 	bl	80106c0 <osMessagePut>
    break;
 800f4c0:	e00f      	b.n	800f4e2 <USBH_HandleEnum+0x29a>

  default:
    break;
 800f4c2:	bf00      	nop
 800f4c4:	e00e      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4c6:	bf00      	nop
 800f4c8:	e00c      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4ca:	bf00      	nop
 800f4cc:	e00a      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4ce:	bf00      	nop
 800f4d0:	e008      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4d2:	bf00      	nop
 800f4d4:	e006      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4d6:	bf00      	nop
 800f4d8:	e004      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4da:	bf00      	nop
 800f4dc:	e002      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4de:	bf00      	nop
 800f4e0:	e000      	b.n	800f4e4 <USBH_HandleEnum+0x29c>
    break;
 800f4e2:	bf00      	nop
  }
  return Status;
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop

0800f4f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	683a      	ldr	r2, [r7, #0]
 800f4fe:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800f502:	bf00      	nop
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800f50e:	b580      	push	{r7, lr}
 800f510:	b082      	sub	sp, #8
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800f51c:	1c5a      	adds	r2, r3, #1
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f804 	bl	800f532 <USBH_HandleSof>
}
 800f52a:	bf00      	nop
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800f532:	b580      	push	{r7, lr}
 800f534:	b082      	sub	sp, #8
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	2b0b      	cmp	r3, #11
 800f542:	d10a      	bne.n	800f55a <USBH_HandleSof+0x28>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d005      	beq.n	800f55a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	4798      	blx	r3
  }
}
 800f55a:	bf00      	nop
 800f55c:	3708      	adds	r7, #8
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}

0800f562 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800f562:	b480      	push	{r7}
 800f564:	b083      	sub	sp, #12
 800f566:	af00      	add	r7, sp, #0
 800f568:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2201      	movs	r2, #1
 800f56e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800f572:	bf00      	nop
}
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800f58e:	bf00      	nop
}
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10f      	bne.n	800f5e6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00e      	beq.n	800f5f6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f5de:	2104      	movs	r1, #4
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	4798      	blx	r3
 800f5e4:	e007      	b.n	800f5f6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d102      	bne.n	800f5f6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f60a:	2200      	movs	r2, #0
 800f60c:	4619      	mov	r1, r3
 800f60e:	f001 f857 	bl	80106c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f008 fe2a 	bl	801827e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	791b      	ldrb	r3, [r3, #4]
 800f62e:	4619      	mov	r1, r3
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fed4 	bl	80103de <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	795b      	ldrb	r3, [r3, #5]
 800f63a:	4619      	mov	r1, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 fece 	bl	80103de <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f650:	2b00      	cmp	r3, #0
 800f652:	d005      	beq.n	800f660 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f65a:	2105      	movs	r1, #5
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f008 fdf1 	bl	8018248 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2203      	movs	r2, #3
 800f66a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f680:	2200      	movs	r2, #0
 800f682:	4619      	mov	r1, r3
 800f684:	f001 f81c 	bl	80106c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b086      	sub	sp, #24
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800f6a0:	f107 030c 	add.w	r3, r7, #12
 800f6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f001 f849 	bl	8010740 <osMessageGet>
    if(event.status == osEventMessage)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b10      	cmp	r3, #16
 800f6b2:	d1f2      	bne.n	800f69a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff fbe7 	bl	800ee88 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800f6ba:	e7ee      	b.n	800f69a <USBH_Process_OS+0x8>

0800f6bc <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f6d8:	2200      	movs	r2, #0
 800f6da:	4619      	mov	r1, r3
 800f6dc:	f000 fff0 	bl	80106c0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b086      	sub	sp, #24
 800f6ee:	af02      	add	r7, sp, #8
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f6fc:	78fb      	ldrb	r3, [r7, #3]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	4613      	mov	r3, r2
 800f704:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f708:	2100      	movs	r1, #0
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 f864 	bl	800f7d8 <USBH_GetDescriptor>
 800f710:	4603      	mov	r3, r0
 800f712:	73fb      	strb	r3, [r7, #15]
 800f714:	7bfb      	ldrb	r3, [r7, #15]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10a      	bne.n	800f730 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f203 3022 	addw	r0, r3, #802	; 0x322
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f726:	78fa      	ldrb	r2, [r7, #3]
 800f728:	b292      	uxth	r2, r2
 800f72a:	4619      	mov	r1, r3
 800f72c:	f000 f918 	bl	800f960 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800f730:	7bfb      	ldrb	r3, [r7, #15]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b086      	sub	sp, #24
 800f73e:	af02      	add	r7, sp, #8
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	460b      	mov	r3, r1
 800f744:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	331c      	adds	r3, #28
 800f74a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800f74c:	887b      	ldrh	r3, [r7, #2]
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f756:	2100      	movs	r1, #0
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f000 f83d 	bl	800f7d8 <USBH_GetDescriptor>
 800f75e:	4603      	mov	r3, r0
 800f760:	72fb      	strb	r3, [r7, #11]
 800f762:	7afb      	ldrb	r3, [r7, #11]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d107      	bne.n	800f778 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800f76e:	887a      	ldrh	r2, [r7, #2]
 800f770:	68f9      	ldr	r1, [r7, #12]
 800f772:	4618      	mov	r0, r3
 800f774:	f000 f964 	bl	800fa40 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800f778:	7afb      	ldrb	r3, [r7, #11]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3710      	adds	r7, #16
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800f782:	b580      	push	{r7, lr}
 800f784:	b088      	sub	sp, #32
 800f786:	af02      	add	r7, sp, #8
 800f788:	60f8      	str	r0, [r7, #12]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	461a      	mov	r2, r3
 800f78e:	460b      	mov	r3, r1
 800f790:	72fb      	strb	r3, [r7, #11]
 800f792:	4613      	mov	r3, r2
 800f794:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800f796:	7afb      	ldrb	r3, [r7, #11]
 800f798:	b29b      	uxth	r3, r3
 800f79a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f79e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800f7a6:	893b      	ldrh	r3, [r7, #8]
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f000 f812 	bl	800f7d8 <USBH_GetDescriptor>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	75fb      	strb	r3, [r7, #23]
 800f7b8:	7dfb      	ldrb	r3, [r7, #23]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d107      	bne.n	800f7ce <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f7c4:	893a      	ldrh	r2, [r7, #8]
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 fa37 	bl	800fc3c <USBH_ParseStringDesc>
  }
  return status;
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	607b      	str	r3, [r7, #4]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	72fb      	strb	r3, [r7, #11]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	789b      	ldrb	r3, [r3, #2]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d11c      	bne.n	800f82c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f7f2:	7afb      	ldrb	r3, [r7, #11]
 800f7f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2206      	movs	r2, #6
 800f802:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	893a      	ldrh	r2, [r7, #8]
 800f808:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f80a:	893b      	ldrh	r3, [r7, #8]
 800f80c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f814:	d104      	bne.n	800f820 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f240 4209 	movw	r2, #1033	; 0x409
 800f81c:	829a      	strh	r2, [r3, #20]
 800f81e:	e002      	b.n	800f826 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2200      	movs	r2, #0
 800f824:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	8b3a      	ldrh	r2, [r7, #24]
 800f82a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800f82c:	8b3b      	ldrh	r3, [r7, #24]
 800f82e:	461a      	mov	r2, r3
 800f830:	6879      	ldr	r1, [r7, #4]
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f000 fa50 	bl	800fcd8 <USBH_CtlReq>
 800f838:	4603      	mov	r3, r0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b082      	sub	sp, #8
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	460b      	mov	r3, r1
 800f84c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	789b      	ldrb	r3, [r3, #2]
 800f852:	2b01      	cmp	r3, #1
 800f854:	d10f      	bne.n	800f876 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2205      	movs	r2, #5
 800f860:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f862:	78fb      	ldrb	r3, [r7, #3]
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f876:	2200      	movs	r2, #0
 800f878:	2100      	movs	r1, #0
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 fa2c 	bl	800fcd8 <USBH_CtlReq>
 800f880:	4603      	mov	r3, r0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b082      	sub	sp, #8
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	460b      	mov	r3, r1
 800f894:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	789b      	ldrb	r3, [r3, #2]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d10e      	bne.n	800f8bc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2209      	movs	r2, #9
 800f8a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	887a      	ldrh	r2, [r7, #2]
 800f8ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800f8bc:	2200      	movs	r2, #0
 800f8be:	2100      	movs	r1, #0
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fa09 	bl	800fcd8 <USBH_CtlReq>
 800f8c6:	4603      	mov	r3, r0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	460b      	mov	r3, r1
 800f8da:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	789b      	ldrb	r3, [r3, #2]
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d10f      	bne.n	800f904 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2203      	movs	r2, #3
 800f8ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f904:	2200      	movs	r2, #0
 800f906:	2100      	movs	r1, #0
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f9e5 	bl	800fcd8 <USBH_CtlReq>
 800f90e:	4603      	mov	r3, r0
}
 800f910:	4618      	mov	r0, r3
 800f912:	3708      	adds	r7, #8
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b082      	sub	sp, #8
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	789b      	ldrb	r3, [r3, #2]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d10f      	bne.n	800f94c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2202      	movs	r2, #2
 800f930:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2201      	movs	r2, #1
 800f936:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2200      	movs	r2, #0
 800f93c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f93e:	78fb      	ldrb	r3, [r7, #3]
 800f940:	b29a      	uxth	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800f94c:	2200      	movs	r2, #0
 800f94e:	2100      	movs	r1, #0
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 f9c1 	bl	800fcd8 <USBH_CtlReq>
 800f956:	4603      	mov	r3, r0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}

0800f960 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	4613      	mov	r3, r2
 800f96c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	781a      	ldrb	r2, [r3, #0]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	785a      	ldrb	r2, [r3, #1]
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	3302      	adds	r3, #2
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	b29a      	uxth	r2, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	3303      	adds	r3, #3
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	021b      	lsls	r3, r3, #8
 800f990:	b29b      	uxth	r3, r3
 800f992:	4313      	orrs	r3, r2
 800f994:	b29a      	uxth	r2, r3
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	791a      	ldrb	r2, [r3, #4]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	795a      	ldrb	r2, [r3, #5]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	799a      	ldrb	r2, [r3, #6]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	79da      	ldrb	r2, [r3, #7]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f9ba:	88fb      	ldrh	r3, [r7, #6]
 800f9bc:	2b08      	cmp	r3, #8
 800f9be:	d939      	bls.n	800fa34 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	b29a      	uxth	r2, r3
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	3309      	adds	r3, #9
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	021b      	lsls	r3, r3, #8
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	330a      	adds	r3, #10
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	330b      	adds	r3, #11
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	021b      	lsls	r3, r3, #8
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	330c      	adds	r3, #12
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	330d      	adds	r3, #13
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	021b      	lsls	r3, r3, #8
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	7b9a      	ldrb	r2, [r3, #14]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	7bda      	ldrb	r2, [r3, #15]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	7c1a      	ldrb	r2, [r3, #16]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	7c5a      	ldrb	r2, [r3, #17]
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	745a      	strb	r2, [r3, #17]
  }
}
 800fa34:	bf00      	nop
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	60b9      	str	r1, [r7, #8]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fa52:	2300      	movs	r3, #0
 800fa54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	781a      	ldrb	r2, [r3, #0]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	785a      	ldrb	r2, [r3, #1]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	3302      	adds	r3, #2
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	3303      	adds	r3, #3
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	021b      	lsls	r3, r3, #8
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	4313      	orrs	r3, r2
 800fa88:	b29a      	uxth	r2, r3
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	791a      	ldrb	r2, [r3, #4]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	795a      	ldrb	r2, [r3, #5]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	799a      	ldrb	r2, [r3, #6]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	79da      	ldrb	r2, [r3, #7]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	7a1a      	ldrb	r2, [r3, #8]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fab6:	88fb      	ldrh	r3, [r7, #6]
 800fab8:	2b09      	cmp	r3, #9
 800faba:	d95f      	bls.n	800fb7c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fabc:	2309      	movs	r3, #9
 800fabe:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fac0:	2300      	movs	r3, #0
 800fac2:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fac4:	e051      	b.n	800fb6a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fac6:	f107 0316 	add.w	r3, r7, #22
 800faca:	4619      	mov	r1, r3
 800facc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800face:	f000 f8e8 	bl	800fca2 <USBH_GetNextDesc>
 800fad2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	2b04      	cmp	r3, #4
 800fada:	d146      	bne.n	800fb6a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fadc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fae0:	221a      	movs	r2, #26
 800fae2:	fb02 f303 	mul.w	r3, r2, r3
 800fae6:	3308      	adds	r3, #8
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	4413      	add	r3, r2
 800faec:	3302      	adds	r3, #2
 800faee:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800faf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faf2:	69f8      	ldr	r0, [r7, #28]
 800faf4:	f000 f846 	bl	800fb84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800faf8:	2300      	movs	r3, #0
 800fafa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fb02:	e022      	b.n	800fb4a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800fb04:	f107 0316 	add.w	r3, r7, #22
 800fb08:	4619      	mov	r1, r3
 800fb0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb0c:	f000 f8c9 	bl	800fca2 <USBH_GetNextDesc>
 800fb10:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb14:	785b      	ldrb	r3, [r3, #1]
 800fb16:	2b05      	cmp	r3, #5
 800fb18:	d117      	bne.n	800fb4a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fb1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb1e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fb22:	3201      	adds	r2, #1
 800fb24:	00d2      	lsls	r2, r2, #3
 800fb26:	211a      	movs	r1, #26
 800fb28:	fb01 f303 	mul.w	r3, r1, r3
 800fb2c:	4413      	add	r3, r2
 800fb2e:	3308      	adds	r3, #8
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	4413      	add	r3, r2
 800fb34:	3304      	adds	r3, #4
 800fb36:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800fb38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb3a:	69b8      	ldr	r0, [r7, #24]
 800fb3c:	f000 f851 	bl	800fbe2 <USBH_ParseEPDesc>
            ep_ix++;
 800fb40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb44:	3301      	adds	r3, #1
 800fb46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	791b      	ldrb	r3, [r3, #4]
 800fb4e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d204      	bcs.n	800fb60 <USBH_ParseCfgDesc+0x120>
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	885a      	ldrh	r2, [r3, #2]
 800fb5a:	8afb      	ldrh	r3, [r7, #22]
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d8d1      	bhi.n	800fb04 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fb60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb64:	3301      	adds	r3, #1
 800fb66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fb6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d804      	bhi.n	800fb7c <USBH_ParseCfgDesc+0x13c>
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	885a      	ldrh	r2, [r3, #2]
 800fb76:	8afb      	ldrh	r3, [r7, #22]
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d8a4      	bhi.n	800fac6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fb7c:	bf00      	nop
 800fb7e:	3728      	adds	r7, #40	; 0x28
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	781a      	ldrb	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	785a      	ldrb	r2, [r3, #1]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	789a      	ldrb	r2, [r3, #2]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	78da      	ldrb	r2, [r3, #3]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	791a      	ldrb	r2, [r3, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	795a      	ldrb	r2, [r3, #5]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	799a      	ldrb	r2, [r3, #6]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	79da      	ldrb	r2, [r3, #7]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	7a1a      	ldrb	r2, [r3, #8]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	721a      	strb	r2, [r3, #8]
}
 800fbd6:	bf00      	nop
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr

0800fbe2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b083      	sub	sp, #12
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	781a      	ldrb	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	785a      	ldrb	r2, [r3, #1]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	789a      	ldrb	r2, [r3, #2]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	78da      	ldrb	r2, [r3, #3]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	b29a      	uxth	r2, r3
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	3305      	adds	r3, #5
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	021b      	lsls	r3, r3, #8
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	4313      	orrs	r3, r2
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	799a      	ldrb	r2, [r3, #6]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	719a      	strb	r2, [r3, #6]
}
 800fc30:	bf00      	nop
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b087      	sub	sp, #28
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	4613      	mov	r3, r2
 800fc48:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b03      	cmp	r3, #3
 800fc52:	d120      	bne.n	800fc96 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	1e9a      	subs	r2, r3, #2
 800fc5a:	88fb      	ldrh	r3, [r7, #6]
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	bf28      	it	cs
 800fc60:	4613      	movcs	r3, r2
 800fc62:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	3302      	adds	r3, #2
 800fc68:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	82fb      	strh	r3, [r7, #22]
 800fc6e:	e00b      	b.n	800fc88 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fc70:	8afb      	ldrh	r3, [r7, #22]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	4413      	add	r3, r2
 800fc76:	781a      	ldrb	r2, [r3, #0]
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fc82:	8afb      	ldrh	r3, [r7, #22]
 800fc84:	3302      	adds	r3, #2
 800fc86:	82fb      	strh	r3, [r7, #22]
 800fc88:	8afa      	ldrh	r2, [r7, #22]
 800fc8a:	8abb      	ldrh	r3, [r7, #20]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d3ef      	bcc.n	800fc70 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	2200      	movs	r2, #0
 800fc94:	701a      	strb	r2, [r3, #0]
  }
}
 800fc96:	bf00      	nop
 800fc98:	371c      	adds	r7, #28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800fca2:	b480      	push	{r7}
 800fca4:	b085      	sub	sp, #20
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	881a      	ldrh	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	4413      	add	r3, r2
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800fcca:	68fb      	ldr	r3, [r7, #12]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3714      	adds	r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	4613      	mov	r3, r2
 800fce4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fce6:	2301      	movs	r3, #1
 800fce8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	789b      	ldrb	r3, [r3, #2]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d002      	beq.n	800fcf8 <USBH_CtlReq+0x20>
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	d01d      	beq.n	800fd32 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800fcf6:	e042      	b.n	800fd7e <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	88fa      	ldrh	r2, [r7, #6]
 800fd02:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2201      	movs	r2, #1
 800fd08:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2202      	movs	r2, #2
 800fd0e:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800fd10:	2301      	movs	r3, #1
 800fd12:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2203      	movs	r2, #3
 800fd18:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fd28:	2200      	movs	r2, #0
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	f000 fcc8 	bl	80106c0 <osMessagePut>
    break;
 800fd30:	e025      	b.n	800fd7e <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f000 f828 	bl	800fd88 <USBH_HandleControl>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800fd3c:	7dfb      	ldrb	r3, [r7, #23]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d108      	bne.n	800fd54 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2201      	movs	r2, #1
 800fd46:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	75fb      	strb	r3, [r7, #23]
    break;
 800fd52:	e013      	b.n	800fd7c <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800fd54:	7dfb      	ldrb	r3, [r7, #23]
 800fd56:	2b03      	cmp	r3, #3
 800fd58:	d108      	bne.n	800fd6c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800fd66:	2303      	movs	r3, #3
 800fd68:	75fb      	strb	r3, [r7, #23]
    break;
 800fd6a:	e007      	b.n	800fd7c <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800fd6c:	7dfb      	ldrb	r3, [r7, #23]
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d104      	bne.n	800fd7c <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2201      	movs	r2, #1
 800fd76:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800fd78:	2302      	movs	r3, #2
 800fd7a:	75fb      	strb	r3, [r7, #23]
    break;
 800fd7c:	bf00      	nop
  }
  return status;
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3718      	adds	r7, #24
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af02      	add	r7, sp, #8
 800fd8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fd90:	2301      	movs	r3, #1
 800fd92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fd94:	2300      	movs	r3, #0
 800fd96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	7e1b      	ldrb	r3, [r3, #24]
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	2b0a      	cmp	r3, #10
 800fda0:	f200 821f 	bhi.w	80101e2 <USBH_HandleControl+0x45a>
 800fda4:	a201      	add	r2, pc, #4	; (adr r2, 800fdac <USBH_HandleControl+0x24>)
 800fda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdaa:	bf00      	nop
 800fdac:	0800fdd9 	.word	0x0800fdd9
 800fdb0:	0800fdf3 	.word	0x0800fdf3
 800fdb4:	0800fe95 	.word	0x0800fe95
 800fdb8:	0800febb 	.word	0x0800febb
 800fdbc:	0800ff47 	.word	0x0800ff47
 800fdc0:	0800ff73 	.word	0x0800ff73
 800fdc4:	08010035 	.word	0x08010035
 800fdc8:	08010057 	.word	0x08010057
 800fdcc:	080100e9 	.word	0x080100e9
 800fdd0:	08010111 	.word	0x08010111
 800fdd4:	080101a3 	.word	0x080101a3
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f103 0110 	add.w	r1, r3, #16
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	795b      	ldrb	r3, [r3, #5]
 800fde2:	461a      	mov	r2, r3
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fa0d 	bl	8010204 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2202      	movs	r2, #2
 800fdee:	761a      	strb	r2, [r3, #24]
    break;
 800fdf0:	e202      	b.n	80101f8 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	795b      	ldrb	r3, [r3, #5]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f008 fb2d 	bl	8018458 <USBH_LL_GetURBState>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800fe02:	7bbb      	ldrb	r3, [r7, #14]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d12c      	bne.n	800fe62 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	7c1b      	ldrb	r3, [r3, #16]
 800fe0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fe10:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8adb      	ldrh	r3, [r3, #22]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d00a      	beq.n	800fe30 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800fe1a:	7b7b      	ldrb	r3, [r7, #13]
 800fe1c:	2b80      	cmp	r3, #128	; 0x80
 800fe1e:	d103      	bne.n	800fe28 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2203      	movs	r2, #3
 800fe24:	761a      	strb	r2, [r3, #24]
 800fe26:	e00d      	b.n	800fe44 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2205      	movs	r2, #5
 800fe2c:	761a      	strb	r2, [r3, #24]
 800fe2e:	e009      	b.n	800fe44 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800fe30:	7b7b      	ldrb	r3, [r7, #13]
 800fe32:	2b80      	cmp	r3, #128	; 0x80
 800fe34:	d103      	bne.n	800fe3e <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2209      	movs	r2, #9
 800fe3a:	761a      	strb	r2, [r3, #24]
 800fe3c:	e002      	b.n	800fe44 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2207      	movs	r2, #7
 800fe42:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2203      	movs	r2, #3
 800fe48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe58:	2200      	movs	r2, #0
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	f000 fc30 	bl	80106c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800fe60:	e1c1      	b.n	80101e6 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fe62:	7bbb      	ldrb	r3, [r7, #14]
 800fe64:	2b04      	cmp	r3, #4
 800fe66:	d003      	beq.n	800fe70 <USBH_HandleControl+0xe8>
 800fe68:	7bbb      	ldrb	r3, [r7, #14]
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	f040 81bb 	bne.w	80101e6 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	220b      	movs	r2, #11
 800fe74:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2203      	movs	r2, #3
 800fe7a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	f000 fc17 	bl	80106c0 <osMessagePut>
    break;
 800fe92:	e1a8      	b.n	80101e6 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6899      	ldr	r1, [r3, #8]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	899a      	ldrh	r2, [r3, #12]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	791b      	ldrb	r3, [r3, #4]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f9e8 	bl	8010282 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2204      	movs	r2, #4
 800feb6:	761a      	strb	r2, [r3, #24]
    break;
 800feb8:	e19e      	b.n	80101f8 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	791b      	ldrb	r3, [r3, #4]
 800febe:	4619      	mov	r1, r3
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f008 fac9 	bl	8018458 <USBH_LL_GetURBState>
 800fec6:	4603      	mov	r3, r0
 800fec8:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800feca:	7bbb      	ldrb	r3, [r7, #14]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d110      	bne.n	800fef2 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2209      	movs	r2, #9
 800fed4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2203      	movs	r2, #3
 800feda:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800feea:	2200      	movs	r2, #0
 800feec:	4619      	mov	r1, r3
 800feee:	f000 fbe7 	bl	80106c0 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800fef2:	7bbb      	ldrb	r3, [r7, #14]
 800fef4:	2b05      	cmp	r3, #5
 800fef6:	d110      	bne.n	800ff1a <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800fef8:	2303      	movs	r3, #3
 800fefa:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2203      	movs	r2, #3
 800ff00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff10:	2200      	movs	r2, #0
 800ff12:	4619      	mov	r1, r3
 800ff14:	f000 fbd4 	bl	80106c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ff18:	e167      	b.n	80101ea <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800ff1a:	7bbb      	ldrb	r3, [r7, #14]
 800ff1c:	2b04      	cmp	r3, #4
 800ff1e:	f040 8164 	bne.w	80101ea <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	220b      	movs	r2, #11
 800ff26:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2203      	movs	r2, #3
 800ff2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	4619      	mov	r1, r3
 800ff40:	f000 fbbe 	bl	80106c0 <osMessagePut>
    break;
 800ff44:	e151      	b.n	80101ea <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6899      	ldr	r1, [r3, #8]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	899a      	ldrh	r2, [r3, #12]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	7958      	ldrb	r0, [r3, #5]
 800ff52:	2301      	movs	r3, #1
 800ff54:	9300      	str	r3, [sp, #0]
 800ff56:	4603      	mov	r3, r0
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f96d 	bl	8010238 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2206      	movs	r2, #6
 800ff6e:	761a      	strb	r2, [r3, #24]
    break;
 800ff70:	e142      	b.n	80101f8 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	795b      	ldrb	r3, [r3, #5]
 800ff76:	4619      	mov	r1, r3
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f008 fa6d 	bl	8018458 <USBH_LL_GetURBState>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800ff82:	7bbb      	ldrb	r3, [r7, #14]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d111      	bne.n	800ffac <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2207      	movs	r2, #7
 800ff8c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2203      	movs	r2, #3
 800ff92:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	f000 fb8b 	bl	80106c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ffaa:	e120      	b.n	80101ee <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800ffac:	7bbb      	ldrb	r3, [r7, #14]
 800ffae:	2b05      	cmp	r3, #5
 800ffb0:	d113      	bne.n	800ffda <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	220c      	movs	r2, #12
 800ffb6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800ffb8:	2303      	movs	r3, #3
 800ffba:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2203      	movs	r2, #3
 800ffc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	f000 fb74 	bl	80106c0 <osMessagePut>
    break;
 800ffd8:	e109      	b.n	80101ee <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800ffda:	7bbb      	ldrb	r3, [r7, #14]
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	d111      	bne.n	8010004 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2205      	movs	r2, #5
 800ffe4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2203      	movs	r2, #3
 800ffea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fffa:	2200      	movs	r2, #0
 800fffc:	4619      	mov	r1, r3
 800fffe:	f000 fb5f 	bl	80106c0 <osMessagePut>
    break;
 8010002:	e0f4      	b.n	80101ee <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8010004:	7bbb      	ldrb	r3, [r7, #14]
 8010006:	2b04      	cmp	r3, #4
 8010008:	f040 80f1 	bne.w	80101ee <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	220b      	movs	r2, #11
 8010010:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8010012:	2302      	movs	r3, #2
 8010014:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2203      	movs	r2, #3
 801001a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801002a:	2200      	movs	r2, #0
 801002c:	4619      	mov	r1, r3
 801002e:	f000 fb47 	bl	80106c0 <osMessagePut>
    break;
 8010032:	e0dc      	b.n	80101ee <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	791b      	ldrb	r3, [r3, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	2100      	movs	r1, #0
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f920 	bl	8010282 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8010048:	b29a      	uxth	r2, r3
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2208      	movs	r2, #8
 8010052:	761a      	strb	r2, [r3, #24]

    break;
 8010054:	e0d0      	b.n	80101f8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	791b      	ldrb	r3, [r3, #4]
 801005a:	4619      	mov	r1, r3
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f008 f9fb 	bl	8018458 <USBH_LL_GetURBState>
 8010062:	4603      	mov	r3, r0
 8010064:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8010066:	7bbb      	ldrb	r3, [r7, #14]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d113      	bne.n	8010094 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	220d      	movs	r2, #13
 8010070:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2203      	movs	r2, #3
 801007a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801008a:	2200      	movs	r2, #0
 801008c:	4619      	mov	r1, r3
 801008e:	f000 fb17 	bl	80106c0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8010092:	e0ae      	b.n	80101f2 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8010094:	7bbb      	ldrb	r3, [r7, #14]
 8010096:	2b04      	cmp	r3, #4
 8010098:	d111      	bne.n	80100be <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	220b      	movs	r2, #11
 801009e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2203      	movs	r2, #3
 80100a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80100b4:	2200      	movs	r2, #0
 80100b6:	4619      	mov	r1, r3
 80100b8:	f000 fb02 	bl	80106c0 <osMessagePut>
    break;
 80100bc:	e099      	b.n	80101f2 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 80100be:	7bbb      	ldrb	r3, [r7, #14]
 80100c0:	2b05      	cmp	r3, #5
 80100c2:	f040 8096 	bne.w	80101f2 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 80100c6:	2303      	movs	r3, #3
 80100c8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2203      	movs	r2, #3
 80100ce:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80100de:	2200      	movs	r2, #0
 80100e0:	4619      	mov	r1, r3
 80100e2:	f000 faed 	bl	80106c0 <osMessagePut>
    break;
 80100e6:	e084      	b.n	80101f2 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	795a      	ldrb	r2, [r3, #5]
 80100ec:	2301      	movs	r3, #1
 80100ee:	9300      	str	r3, [sp, #0]
 80100f0:	4613      	mov	r3, r2
 80100f2:	2200      	movs	r2, #0
 80100f4:	2100      	movs	r1, #0
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f89e 	bl	8010238 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	220a      	movs	r2, #10
 801010c:	761a      	strb	r2, [r3, #24]
    break;
 801010e:	e073      	b.n	80101f8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	795b      	ldrb	r3, [r3, #5]
 8010114:	4619      	mov	r1, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f008 f99e 	bl	8018458 <USBH_LL_GetURBState>
 801011c:	4603      	mov	r3, r0
 801011e:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8010120:	7bbb      	ldrb	r3, [r7, #14]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d113      	bne.n	801014e <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 8010126:	2300      	movs	r3, #0
 8010128:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	220d      	movs	r2, #13
 801012e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2203      	movs	r2, #3
 8010134:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010144:	2200      	movs	r2, #0
 8010146:	4619      	mov	r1, r3
 8010148:	f000 faba 	bl	80106c0 <osMessagePut>
#endif
#endif
      }

    }
    break;
 801014c:	e053      	b.n	80101f6 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 801014e:	7bbb      	ldrb	r3, [r7, #14]
 8010150:	2b02      	cmp	r3, #2
 8010152:	d111      	bne.n	8010178 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2209      	movs	r2, #9
 8010158:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	2203      	movs	r2, #3
 801015e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801016e:	2200      	movs	r2, #0
 8010170:	4619      	mov	r1, r3
 8010172:	f000 faa5 	bl	80106c0 <osMessagePut>
    break;
 8010176:	e03e      	b.n	80101f6 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 8010178:	7bbb      	ldrb	r3, [r7, #14]
 801017a:	2b04      	cmp	r3, #4
 801017c:	d13b      	bne.n	80101f6 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	220b      	movs	r2, #11
 8010182:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2203      	movs	r2, #3
 8010188:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010198:	2200      	movs	r2, #0
 801019a:	4619      	mov	r1, r3
 801019c:	f000 fa90 	bl	80106c0 <osMessagePut>
    break;
 80101a0:	e029      	b.n	80101f6 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	7e5b      	ldrb	r3, [r3, #25]
 80101a6:	3301      	adds	r3, #1
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	765a      	strb	r2, [r3, #25]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	7e5b      	ldrb	r3, [r3, #25]
 80101b2:	2b02      	cmp	r3, #2
 80101b4:	d809      	bhi.n	80101ca <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f008 f861 	bl	801827e <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2201      	movs	r2, #1
 80101c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2201      	movs	r2, #1
 80101c6:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80101c8:	e016      	b.n	80101f8 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80101d0:	2106      	movs	r1, #6
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80101dc:	2302      	movs	r3, #2
 80101de:	73fb      	strb	r3, [r7, #15]
    break;
 80101e0:	e00a      	b.n	80101f8 <USBH_HandleControl+0x470>

  default:
    break;
 80101e2:	bf00      	nop
 80101e4:	e008      	b.n	80101f8 <USBH_HandleControl+0x470>
    break;
 80101e6:	bf00      	nop
 80101e8:	e006      	b.n	80101f8 <USBH_HandleControl+0x470>
    break;
 80101ea:	bf00      	nop
 80101ec:	e004      	b.n	80101f8 <USBH_HandleControl+0x470>
    break;
 80101ee:	bf00      	nop
 80101f0:	e002      	b.n	80101f8 <USBH_HandleControl+0x470>
    break;
 80101f2:	bf00      	nop
 80101f4:	e000      	b.n	80101f8 <USBH_HandleControl+0x470>
    break;
 80101f6:	bf00      	nop
  }
  return status;
 80101f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3710      	adds	r7, #16
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
 8010202:	bf00      	nop

08010204 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b088      	sub	sp, #32
 8010208:	af04      	add	r7, sp, #16
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	4613      	mov	r3, r2
 8010210:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010212:	79f9      	ldrb	r1, [r7, #7]
 8010214:	2300      	movs	r3, #0
 8010216:	9303      	str	r3, [sp, #12]
 8010218:	2308      	movs	r3, #8
 801021a:	9302      	str	r3, [sp, #8]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	9301      	str	r3, [sp, #4]
 8010220:	2300      	movs	r3, #0
 8010222:	9300      	str	r3, [sp, #0]
 8010224:	2300      	movs	r3, #0
 8010226:	2200      	movs	r2, #0
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f008 f8e4 	bl	80183f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801022e:	2300      	movs	r3, #0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b088      	sub	sp, #32
 801023c:	af04      	add	r7, sp, #16
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4611      	mov	r1, r2
 8010244:	461a      	mov	r2, r3
 8010246:	460b      	mov	r3, r1
 8010248:	80fb      	strh	r3, [r7, #6]
 801024a:	4613      	mov	r3, r2
 801024c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010254:	2b00      	cmp	r3, #0
 8010256:	d001      	beq.n	801025c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010258:	2300      	movs	r3, #0
 801025a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801025c:	7979      	ldrb	r1, [r7, #5]
 801025e:	7e3b      	ldrb	r3, [r7, #24]
 8010260:	9303      	str	r3, [sp, #12]
 8010262:	88fb      	ldrh	r3, [r7, #6]
 8010264:	9302      	str	r3, [sp, #8]
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	9301      	str	r3, [sp, #4]
 801026a:	2301      	movs	r3, #1
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	2300      	movs	r3, #0
 8010270:	2200      	movs	r2, #0
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f008 f8bf 	bl	80183f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b088      	sub	sp, #32
 8010286:	af04      	add	r7, sp, #16
 8010288:	60f8      	str	r0, [r7, #12]
 801028a:	60b9      	str	r1, [r7, #8]
 801028c:	4611      	mov	r1, r2
 801028e:	461a      	mov	r2, r3
 8010290:	460b      	mov	r3, r1
 8010292:	80fb      	strh	r3, [r7, #6]
 8010294:	4613      	mov	r3, r2
 8010296:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8010298:	7979      	ldrb	r1, [r7, #5]
 801029a:	2300      	movs	r3, #0
 801029c:	9303      	str	r3, [sp, #12]
 801029e:	88fb      	ldrh	r3, [r7, #6]
 80102a0:	9302      	str	r3, [sp, #8]
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	9301      	str	r3, [sp, #4]
 80102a6:	2301      	movs	r3, #1
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	2300      	movs	r3, #0
 80102ac:	2201      	movs	r2, #1
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	f008 f8a1 	bl	80183f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80102b4:	2300      	movs	r3, #0

}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b088      	sub	sp, #32
 80102c2:	af04      	add	r7, sp, #16
 80102c4:	60f8      	str	r0, [r7, #12]
 80102c6:	60b9      	str	r1, [r7, #8]
 80102c8:	4611      	mov	r1, r2
 80102ca:	461a      	mov	r2, r3
 80102cc:	460b      	mov	r3, r1
 80102ce:	80fb      	strh	r3, [r7, #6]
 80102d0:	4613      	mov	r3, r2
 80102d2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d001      	beq.n	80102e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80102de:	2300      	movs	r3, #0
 80102e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80102e2:	7979      	ldrb	r1, [r7, #5]
 80102e4:	7e3b      	ldrb	r3, [r7, #24]
 80102e6:	9303      	str	r3, [sp, #12]
 80102e8:	88fb      	ldrh	r3, [r7, #6]
 80102ea:	9302      	str	r3, [sp, #8]
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	9301      	str	r3, [sp, #4]
 80102f0:	2301      	movs	r3, #1
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	2302      	movs	r3, #2
 80102f6:	2200      	movs	r2, #0
 80102f8:	68f8      	ldr	r0, [r7, #12]
 80102fa:	f008 f87c 	bl	80183f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b088      	sub	sp, #32
 801030c:	af04      	add	r7, sp, #16
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	4611      	mov	r1, r2
 8010314:	461a      	mov	r2, r3
 8010316:	460b      	mov	r3, r1
 8010318:	80fb      	strh	r3, [r7, #6]
 801031a:	4613      	mov	r3, r2
 801031c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 801031e:	7979      	ldrb	r1, [r7, #5]
 8010320:	2300      	movs	r3, #0
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	88fb      	ldrh	r3, [r7, #6]
 8010326:	9302      	str	r3, [sp, #8]
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	9301      	str	r3, [sp, #4]
 801032c:	2301      	movs	r3, #1
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	2302      	movs	r3, #2
 8010332:	2201      	movs	r2, #1
 8010334:	68f8      	ldr	r0, [r7, #12]
 8010336:	f008 f85e 	bl	80183f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801033a:	2300      	movs	r3, #0
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af04      	add	r7, sp, #16
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	4608      	mov	r0, r1
 801034e:	4611      	mov	r1, r2
 8010350:	461a      	mov	r2, r3
 8010352:	4603      	mov	r3, r0
 8010354:	70fb      	strb	r3, [r7, #3]
 8010356:	460b      	mov	r3, r1
 8010358:	70bb      	strb	r3, [r7, #2]
 801035a:	4613      	mov	r3, r2
 801035c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 801035e:	7878      	ldrb	r0, [r7, #1]
 8010360:	78ba      	ldrb	r2, [r7, #2]
 8010362:	78f9      	ldrb	r1, [r7, #3]
 8010364:	8b3b      	ldrh	r3, [r7, #24]
 8010366:	9302      	str	r3, [sp, #8]
 8010368:	7d3b      	ldrb	r3, [r7, #20]
 801036a:	9301      	str	r3, [sp, #4]
 801036c:	7c3b      	ldrb	r3, [r7, #16]
 801036e:	9300      	str	r3, [sp, #0]
 8010370:	4603      	mov	r3, r0
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f007 fff1 	bl	801835a <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8010378:	2300      	movs	r3, #0

}
 801037a:	4618      	mov	r0, r3
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8010382:	b580      	push	{r7, lr}
 8010384:	b082      	sub	sp, #8
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	460b      	mov	r3, r1
 801038c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 801038e:	78fb      	ldrb	r3, [r7, #3]
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f008 f810 	bl	80183b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010398:	2300      	movs	r3, #0

}
 801039a:	4618      	mov	r0, r3
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b084      	sub	sp, #16
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
 80103aa:	460b      	mov	r3, r1
 80103ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 f831 	bl	8010416 <USBH_GetFreePipe>
 80103b4:	4603      	mov	r3, r0
 80103b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80103b8:	89fb      	ldrh	r3, [r7, #14]
 80103ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103be:	4293      	cmp	r3, r2
 80103c0:	d007      	beq.n	80103d2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80103c2:	78fb      	ldrb	r3, [r7, #3]
 80103c4:	89fa      	ldrh	r2, [r7, #14]
 80103c6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	32e0      	adds	r2, #224	; 0xe0
 80103ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80103d2:	89fb      	ldrh	r3, [r7, #14]
 80103d4:	b2db      	uxtb	r3, r3
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80103de:	b480      	push	{r7}
 80103e0:	b083      	sub	sp, #12
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	460b      	mov	r3, r1
 80103e8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80103ea:	78fb      	ldrb	r3, [r7, #3]
 80103ec:	2b0a      	cmp	r3, #10
 80103ee:	d80b      	bhi.n	8010408 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80103f0:	78fa      	ldrb	r2, [r7, #3]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	32e0      	adds	r2, #224	; 0xe0
 80103f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103fa:	78fa      	ldrb	r2, [r7, #3]
 80103fc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	32e0      	adds	r2, #224	; 0xe0
 8010404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	370c      	adds	r7, #12
 801040e:	46bd      	mov	sp, r7
 8010410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010414:	4770      	bx	lr

08010416 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8010416:	b480      	push	{r7}
 8010418:	b085      	sub	sp, #20
 801041a:	af00      	add	r7, sp, #0
 801041c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801041e:	2300      	movs	r3, #0
 8010420:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010422:	2300      	movs	r3, #0
 8010424:	73fb      	strb	r3, [r7, #15]
 8010426:	e00e      	b.n	8010446 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010428:	7bfa      	ldrb	r2, [r7, #15]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	32e0      	adds	r2, #224	; 0xe0
 801042e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010436:	2b00      	cmp	r3, #0
 8010438:	d102      	bne.n	8010440 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 801043a:	7bfb      	ldrb	r3, [r7, #15]
 801043c:	b29b      	uxth	r3, r3
 801043e:	e007      	b.n	8010450 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8010440:	7bfb      	ldrb	r3, [r7, #15]
 8010442:	3301      	adds	r3, #1
 8010444:	73fb      	strb	r3, [r7, #15]
 8010446:	7bfb      	ldrb	r3, [r7, #15]
 8010448:	2b0a      	cmp	r3, #10
 801044a:	d9ed      	bls.n	8010428 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 801044c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010450:	4618      	mov	r0, r3
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801045c:	b480      	push	{r7}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	4613      	mov	r3, r2
 8010468:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801046a:	2301      	movs	r3, #1
 801046c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801046e:	2300      	movs	r3, #0
 8010470:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010472:	4b1f      	ldr	r3, [pc, #124]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 8010474:	7a5b      	ldrb	r3, [r3, #9]
 8010476:	b2db      	uxtb	r3, r3
 8010478:	2b00      	cmp	r3, #0
 801047a:	d131      	bne.n	80104e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801047c:	4b1c      	ldr	r3, [pc, #112]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 801047e:	7a5b      	ldrb	r3, [r3, #9]
 8010480:	b2db      	uxtb	r3, r3
 8010482:	461a      	mov	r2, r3
 8010484:	4b1a      	ldr	r3, [pc, #104]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 8010486:	2100      	movs	r1, #0
 8010488:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801048a:	4b19      	ldr	r3, [pc, #100]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 801048c:	7a5b      	ldrb	r3, [r3, #9]
 801048e:	b2db      	uxtb	r3, r3
 8010490:	4a17      	ldr	r2, [pc, #92]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4413      	add	r3, r2
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801049a:	4b15      	ldr	r3, [pc, #84]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 801049c:	7a5b      	ldrb	r3, [r3, #9]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	461a      	mov	r2, r3
 80104a2:	4b13      	ldr	r3, [pc, #76]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 80104a4:	4413      	add	r3, r2
 80104a6:	79fa      	ldrb	r2, [r7, #7]
 80104a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104aa:	4b11      	ldr	r3, [pc, #68]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 80104ac:	7a5b      	ldrb	r3, [r3, #9]
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	1c5a      	adds	r2, r3, #1
 80104b2:	b2d1      	uxtb	r1, r2
 80104b4:	4a0e      	ldr	r2, [pc, #56]	; (80104f0 <FATFS_LinkDriverEx+0x94>)
 80104b6:	7251      	strb	r1, [r2, #9]
 80104b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80104ba:	7dbb      	ldrb	r3, [r7, #22]
 80104bc:	3330      	adds	r3, #48	; 0x30
 80104be:	b2da      	uxtb	r2, r3
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3301      	adds	r3, #1
 80104c8:	223a      	movs	r2, #58	; 0x3a
 80104ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	3302      	adds	r3, #2
 80104d0:	222f      	movs	r2, #47	; 0x2f
 80104d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	3303      	adds	r3, #3
 80104d8:	2200      	movs	r2, #0
 80104da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80104dc:	2300      	movs	r3, #0
 80104de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80104e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	371c      	adds	r7, #28
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop
 80104f0:	200005cc 	.word	0x200005cc

080104f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80104fe:	2200      	movs	r2, #0
 8010500:	6839      	ldr	r1, [r7, #0]
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7ff ffaa 	bl	801045c <FATFS_LinkDriverEx>
 8010508:	4603      	mov	r3, r0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3708      	adds	r7, #8
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010512:	b480      	push	{r7}
 8010514:	b085      	sub	sp, #20
 8010516:	af00      	add	r7, sp, #0
 8010518:	4603      	mov	r3, r0
 801051a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801051c:	2300      	movs	r3, #0
 801051e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010524:	2b84      	cmp	r3, #132	; 0x84
 8010526:	d005      	beq.n	8010534 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010528:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	4413      	add	r3, r2
 8010530:	3303      	adds	r3, #3
 8010532:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010534:	68fb      	ldr	r3, [r7, #12]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3714      	adds	r7, #20
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr

08010542 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010542:	b480      	push	{r7}
 8010544:	b083      	sub	sp, #12
 8010546:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010548:	f3ef 8305 	mrs	r3, IPSR
 801054c:	607b      	str	r3, [r7, #4]
  return(result);
 801054e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010550:	2b00      	cmp	r3, #0
 8010552:	bf14      	ite	ne
 8010554:	2301      	movne	r3, #1
 8010556:	2300      	moveq	r3, #0
 8010558:	b2db      	uxtb	r3, r3
}
 801055a:	4618      	mov	r0, r3
 801055c:	370c      	adds	r7, #12
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr

08010566 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010566:	b580      	push	{r7, lr}
 8010568:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801056a:	f001 faf1 	bl	8011b50 <vTaskStartScheduler>
  
  return osOK;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	bd80      	pop	{r7, pc}

08010574 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010578:	f001 ff46 	bl	8012408 <xTaskGetSchedulerState>
 801057c:	4603      	mov	r3, r0
 801057e:	2b01      	cmp	r3, #1
 8010580:	d101      	bne.n	8010586 <osKernelRunning+0x12>
    return 0;
 8010582:	2300      	movs	r3, #0
 8010584:	e000      	b.n	8010588 <osKernelRunning+0x14>
  else
    return 1;
 8010586:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010588:	4618      	mov	r0, r3
 801058a:	bd80      	pop	{r7, pc}

0801058c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010590:	f7ff ffd7 	bl	8010542 <inHandlerMode>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d003      	beq.n	80105a2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801059a:	f001 fbf7 	bl	8011d8c <xTaskGetTickCountFromISR>
 801059e:	4603      	mov	r3, r0
 80105a0:	e002      	b.n	80105a8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80105a2:	f001 fbe3 	bl	8011d6c <xTaskGetTickCount>
 80105a6:	4603      	mov	r3, r0
  }
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	bd80      	pop	{r7, pc}

080105ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80105ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ae:	b089      	sub	sp, #36	; 0x24
 80105b0:	af04      	add	r7, sp, #16
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d020      	beq.n	8010600 <osThreadCreate+0x54>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d01c      	beq.n	8010600 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	685c      	ldr	r4, [r3, #4]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681d      	ldr	r5, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	691e      	ldr	r6, [r3, #16]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff ff9a 	bl	8010512 <makeFreeRtosPriority>
 80105de:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105e8:	9202      	str	r2, [sp, #8]
 80105ea:	9301      	str	r3, [sp, #4]
 80105ec:	9100      	str	r1, [sp, #0]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	4632      	mov	r2, r6
 80105f2:	4629      	mov	r1, r5
 80105f4:	4620      	mov	r0, r4
 80105f6:	f001 f8dc 	bl	80117b2 <xTaskCreateStatic>
 80105fa:	4603      	mov	r3, r0
 80105fc:	60fb      	str	r3, [r7, #12]
 80105fe:	e01c      	b.n	801063a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	685c      	ldr	r4, [r3, #4]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801060c:	b29e      	uxth	r6, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010614:	4618      	mov	r0, r3
 8010616:	f7ff ff7c 	bl	8010512 <makeFreeRtosPriority>
 801061a:	4602      	mov	r2, r0
 801061c:	f107 030c 	add.w	r3, r7, #12
 8010620:	9301      	str	r3, [sp, #4]
 8010622:	9200      	str	r2, [sp, #0]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	4632      	mov	r2, r6
 8010628:	4629      	mov	r1, r5
 801062a:	4620      	mov	r0, r4
 801062c:	f001 f920 	bl	8011870 <xTaskCreate>
 8010630:	4603      	mov	r3, r0
 8010632:	2b01      	cmp	r3, #1
 8010634:	d001      	beq.n	801063a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010636:	2300      	movs	r3, #0
 8010638:	e000      	b.n	801063c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801063a:	68fb      	ldr	r3, [r7, #12]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010644 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <osDelay+0x16>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	e000      	b.n	801065c <osDelay+0x18>
 801065a:	2301      	movs	r3, #1
 801065c:	4618      	mov	r0, r3
 801065e:	f001 fa41 	bl	8011ae4 <vTaskDelay>
  
  return osOK;
 8010662:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801066c:	b590      	push	{r4, r7, lr}
 801066e:	b085      	sub	sp, #20
 8010670:	af02      	add	r7, sp, #8
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d012      	beq.n	80106a4 <osMessageCreate+0x38>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	68db      	ldr	r3, [r3, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00e      	beq.n	80106a4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6818      	ldr	r0, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6859      	ldr	r1, [r3, #4]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	689a      	ldr	r2, [r3, #8]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	68dc      	ldr	r4, [r3, #12]
 8010696:	2300      	movs	r3, #0
 8010698:	9300      	str	r3, [sp, #0]
 801069a:	4623      	mov	r3, r4
 801069c:	f000 f9e2 	bl	8010a64 <xQueueGenericCreateStatic>
 80106a0:	4603      	mov	r3, r0
 80106a2:	e008      	b.n	80106b6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6818      	ldr	r0, [r3, #0]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	4619      	mov	r1, r3
 80106b0:	f000 fa54 	bl	8010b5c <xQueueGenericCreate>
 80106b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd90      	pop	{r4, r7, pc}
	...

080106c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80106cc:	2300      	movs	r3, #0
 80106ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d101      	bne.n	80106de <osMessagePut+0x1e>
    ticks = 1;
 80106da:	2301      	movs	r3, #1
 80106dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80106de:	f7ff ff30 	bl	8010542 <inHandlerMode>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d018      	beq.n	801071a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80106e8:	f107 0210 	add.w	r2, r7, #16
 80106ec:	f107 0108 	add.w	r1, r7, #8
 80106f0:	2300      	movs	r3, #0
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f000 fb92 	bl	8010e1c <xQueueGenericSendFromISR>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d001      	beq.n	8010702 <osMessagePut+0x42>
      return osErrorOS;
 80106fe:	23ff      	movs	r3, #255	; 0xff
 8010700:	e018      	b.n	8010734 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d014      	beq.n	8010732 <osMessagePut+0x72>
 8010708:	4b0c      	ldr	r3, [pc, #48]	; (801073c <osMessagePut+0x7c>)
 801070a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801070e:	601a      	str	r2, [r3, #0]
 8010710:	f3bf 8f4f 	dsb	sy
 8010714:	f3bf 8f6f 	isb	sy
 8010718:	e00b      	b.n	8010732 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801071a:	f107 0108 	add.w	r1, r7, #8
 801071e:	2300      	movs	r3, #0
 8010720:	697a      	ldr	r2, [r7, #20]
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 fa78 	bl	8010c18 <xQueueGenericSend>
 8010728:	4603      	mov	r3, r0
 801072a:	2b01      	cmp	r3, #1
 801072c:	d001      	beq.n	8010732 <osMessagePut+0x72>
      return osErrorOS;
 801072e:	23ff      	movs	r3, #255	; 0xff
 8010730:	e000      	b.n	8010734 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010732:	2300      	movs	r3, #0
}
 8010734:	4618      	mov	r0, r3
 8010736:	3718      	adds	r7, #24
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	e000ed04 	.word	0xe000ed04

08010740 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010740:	b590      	push	{r4, r7, lr}
 8010742:	b08b      	sub	sp, #44	; 0x2c
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010750:	2300      	movs	r3, #0
 8010752:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d10a      	bne.n	8010770 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801075a:	2380      	movs	r3, #128	; 0x80
 801075c:	617b      	str	r3, [r7, #20]
    return event;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	461c      	mov	r4, r3
 8010762:	f107 0314 	add.w	r3, r7, #20
 8010766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801076a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801076e:	e054      	b.n	801081a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010770:	2300      	movs	r3, #0
 8010772:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010774:	2300      	movs	r3, #0
 8010776:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077e:	d103      	bne.n	8010788 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010780:	f04f 33ff 	mov.w	r3, #4294967295
 8010784:	627b      	str	r3, [r7, #36]	; 0x24
 8010786:	e009      	b.n	801079c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d006      	beq.n	801079c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <osMessageGet+0x5c>
      ticks = 1;
 8010798:	2301      	movs	r3, #1
 801079a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 801079c:	f7ff fed1 	bl	8010542 <inHandlerMode>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d01c      	beq.n	80107e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80107a6:	f107 0220 	add.w	r2, r7, #32
 80107aa:	f107 0314 	add.w	r3, r7, #20
 80107ae:	3304      	adds	r3, #4
 80107b0:	4619      	mov	r1, r3
 80107b2:	68b8      	ldr	r0, [r7, #8]
 80107b4:	f000 fe52 	bl	801145c <xQueueReceiveFromISR>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d102      	bne.n	80107c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80107be:	2310      	movs	r3, #16
 80107c0:	617b      	str	r3, [r7, #20]
 80107c2:	e001      	b.n	80107c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80107c4:	2300      	movs	r3, #0
 80107c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d01d      	beq.n	801080a <osMessageGet+0xca>
 80107ce:	4b15      	ldr	r3, [pc, #84]	; (8010824 <osMessageGet+0xe4>)
 80107d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107d4:	601a      	str	r2, [r3, #0]
 80107d6:	f3bf 8f4f 	dsb	sy
 80107da:	f3bf 8f6f 	isb	sy
 80107de:	e014      	b.n	801080a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80107e0:	f107 0314 	add.w	r3, r7, #20
 80107e4:	3304      	adds	r3, #4
 80107e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107e8:	4619      	mov	r1, r3
 80107ea:	68b8      	ldr	r0, [r7, #8]
 80107ec:	f000 fc44 	bl	8011078 <xQueueReceive>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d102      	bne.n	80107fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80107f6:	2310      	movs	r3, #16
 80107f8:	617b      	str	r3, [r7, #20]
 80107fa:	e006      	b.n	801080a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80107fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d101      	bne.n	8010806 <osMessageGet+0xc6>
 8010802:	2300      	movs	r3, #0
 8010804:	e000      	b.n	8010808 <osMessageGet+0xc8>
 8010806:	2340      	movs	r3, #64	; 0x40
 8010808:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	461c      	mov	r4, r3
 801080e:	f107 0314 	add.w	r3, r7, #20
 8010812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	372c      	adds	r7, #44	; 0x2c
 801081e:	46bd      	mov	sp, r7
 8010820:	bd90      	pop	{r4, r7, pc}
 8010822:	bf00      	nop
 8010824:	e000ed04 	.word	0xe000ed04

08010828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f103 0208 	add.w	r2, r3, #8
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f04f 32ff 	mov.w	r2, #4294967295
 8010840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f103 0208 	add.w	r2, r3, #8
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f103 0208 	add.w	r2, r3, #8
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2200      	movs	r2, #0
 801085a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801085c:	bf00      	nop
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010866:	4770      	bx	lr

08010868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010876:	bf00      	nop
 8010878:	370c      	adds	r7, #12
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr

08010882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010882:	b480      	push	{r7}
 8010884:	b085      	sub	sp, #20
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
 801088a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	689a      	ldr	r2, [r3, #8]
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	683a      	ldr	r2, [r7, #0]
 80108a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	1c5a      	adds	r2, r3, #1
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	601a      	str	r2, [r3, #0]
}
 80108be:	bf00      	nop
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr

080108ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108ca:	b480      	push	{r7}
 80108cc:	b085      	sub	sp, #20
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
 80108d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e0:	d103      	bne.n	80108ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	60fb      	str	r3, [r7, #12]
 80108e8:	e00c      	b.n	8010904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	3308      	adds	r3, #8
 80108ee:	60fb      	str	r3, [r7, #12]
 80108f0:	e002      	b.n	80108f8 <vListInsert+0x2e>
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	60fb      	str	r3, [r7, #12]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	429a      	cmp	r2, r3
 8010902:	d2f6      	bcs.n	80108f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	685a      	ldr	r2, [r3, #4]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	683a      	ldr	r2, [r7, #0]
 801091e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	1c5a      	adds	r2, r3, #1
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	601a      	str	r2, [r3, #0]
}
 8010930:	bf00      	nop
 8010932:	3714      	adds	r7, #20
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr

0801093c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801093c:	b480      	push	{r7}
 801093e:	b085      	sub	sp, #20
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	691b      	ldr	r3, [r3, #16]
 8010948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	6892      	ldr	r2, [r2, #8]
 8010952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	689b      	ldr	r3, [r3, #8]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	6852      	ldr	r2, [r2, #4]
 801095c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	429a      	cmp	r2, r3
 8010966:	d103      	bne.n	8010970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	689a      	ldr	r2, [r3, #8]
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	1e5a      	subs	r2, r3, #1
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3714      	adds	r7, #20
 8010988:	46bd      	mov	sp, r7
 801098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098e:	4770      	bx	lr

08010990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d10b      	bne.n	80109bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80109a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a8:	b672      	cpsid	i
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	b662      	cpsie	i
 80109b8:	60bb      	str	r3, [r7, #8]
 80109ba:	e7fe      	b.n	80109ba <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80109bc:	f002 f874 	bl	8012aa8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109c8:	68f9      	ldr	r1, [r7, #12]
 80109ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109cc:	fb01 f303 	mul.w	r3, r1, r3
 80109d0:	441a      	add	r2, r3
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2200      	movs	r2, #0
 80109da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681a      	ldr	r2, [r3, #0]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ec:	3b01      	subs	r3, #1
 80109ee:	68f9      	ldr	r1, [r7, #12]
 80109f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109f2:	fb01 f303 	mul.w	r3, r1, r3
 80109f6:	441a      	add	r2, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	22ff      	movs	r2, #255	; 0xff
 8010a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	22ff      	movs	r2, #255	; 0xff
 8010a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d114      	bne.n	8010a3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d01a      	beq.n	8010a50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	3310      	adds	r3, #16
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f001 fb2c 	bl	801207c <xTaskRemoveFromEventList>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d012      	beq.n	8010a50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a2a:	4b0d      	ldr	r3, [pc, #52]	; (8010a60 <xQueueGenericReset+0xd0>)
 8010a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	e009      	b.n	8010a50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	3310      	adds	r3, #16
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff fef1 	bl	8010828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3324      	adds	r3, #36	; 0x24
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff feec 	bl	8010828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a50:	f002 f85c 	bl	8012b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a54:	2301      	movs	r3, #1
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	e000ed04 	.word	0xe000ed04

08010a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08e      	sub	sp, #56	; 0x38
 8010a68:	af02      	add	r7, sp, #8
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d10b      	bne.n	8010a90 <xQueueGenericCreateStatic+0x2c>
 8010a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7c:	b672      	cpsid	i
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	b662      	cpsie	i
 8010a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a8e:	e7fe      	b.n	8010a8e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10b      	bne.n	8010aae <xQueueGenericCreateStatic+0x4a>
 8010a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9a:	b672      	cpsid	i
 8010a9c:	f383 8811 	msr	BASEPRI, r3
 8010aa0:	f3bf 8f6f 	isb	sy
 8010aa4:	f3bf 8f4f 	dsb	sy
 8010aa8:	b662      	cpsie	i
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8010aac:	e7fe      	b.n	8010aac <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d002      	beq.n	8010aba <xQueueGenericCreateStatic+0x56>
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <xQueueGenericCreateStatic+0x5a>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e000      	b.n	8010ac0 <xQueueGenericCreateStatic+0x5c>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10b      	bne.n	8010adc <xQueueGenericCreateStatic+0x78>
 8010ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac8:	b672      	cpsid	i
 8010aca:	f383 8811 	msr	BASEPRI, r3
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	b662      	cpsie	i
 8010ad8:	623b      	str	r3, [r7, #32]
 8010ada:	e7fe      	b.n	8010ada <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d102      	bne.n	8010ae8 <xQueueGenericCreateStatic+0x84>
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d101      	bne.n	8010aec <xQueueGenericCreateStatic+0x88>
 8010ae8:	2301      	movs	r3, #1
 8010aea:	e000      	b.n	8010aee <xQueueGenericCreateStatic+0x8a>
 8010aec:	2300      	movs	r3, #0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10b      	bne.n	8010b0a <xQueueGenericCreateStatic+0xa6>
 8010af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af6:	b672      	cpsid	i
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	b662      	cpsie	i
 8010b06:	61fb      	str	r3, [r7, #28]
 8010b08:	e7fe      	b.n	8010b08 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010b0a:	2348      	movs	r3, #72	; 0x48
 8010b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2b48      	cmp	r3, #72	; 0x48
 8010b12:	d00b      	beq.n	8010b2c <xQueueGenericCreateStatic+0xc8>
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	b672      	cpsid	i
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	b662      	cpsie	i
 8010b28:	61bb      	str	r3, [r7, #24]
 8010b2a:	e7fe      	b.n	8010b2a <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00d      	beq.n	8010b52 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b38:	2201      	movs	r2, #1
 8010b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	4613      	mov	r3, r2
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	68b9      	ldr	r1, [r7, #8]
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f000 f844 	bl	8010bda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3730      	adds	r7, #48	; 0x30
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b08a      	sub	sp, #40	; 0x28
 8010b60:	af02      	add	r7, sp, #8
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	4613      	mov	r3, r2
 8010b68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d10b      	bne.n	8010b88 <xQueueGenericCreate+0x2c>
 8010b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b74:	b672      	cpsid	i
 8010b76:	f383 8811 	msr	BASEPRI, r3
 8010b7a:	f3bf 8f6f 	isb	sy
 8010b7e:	f3bf 8f4f 	dsb	sy
 8010b82:	b662      	cpsie	i
 8010b84:	613b      	str	r3, [r7, #16]
 8010b86:	e7fe      	b.n	8010b86 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d102      	bne.n	8010b94 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	61fb      	str	r3, [r7, #28]
 8010b92:	e004      	b.n	8010b9e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	68ba      	ldr	r2, [r7, #8]
 8010b98:	fb02 f303 	mul.w	r3, r2, r3
 8010b9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	3348      	adds	r3, #72	; 0x48
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f002 f8a2 	bl	8012cec <pvPortMalloc>
 8010ba8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00f      	beq.n	8010bd0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010bb0:	69bb      	ldr	r3, [r7, #24]
 8010bb2:	3348      	adds	r3, #72	; 0x48
 8010bb4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010bb6:	69bb      	ldr	r3, [r7, #24]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010bbe:	79fa      	ldrb	r2, [r7, #7]
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	9300      	str	r3, [sp, #0]
 8010bc4:	4613      	mov	r3, r2
 8010bc6:	697a      	ldr	r2, [r7, #20]
 8010bc8:	68b9      	ldr	r1, [r7, #8]
 8010bca:	68f8      	ldr	r0, [r7, #12]
 8010bcc:	f000 f805 	bl	8010bda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010bd0:	69bb      	ldr	r3, [r7, #24]
	}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3720      	adds	r7, #32
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	60f8      	str	r0, [r7, #12]
 8010be2:	60b9      	str	r1, [r7, #8]
 8010be4:	607a      	str	r2, [r7, #4]
 8010be6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d103      	bne.n	8010bf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	69ba      	ldr	r2, [r7, #24]
 8010bf2:	601a      	str	r2, [r3, #0]
 8010bf4:	e002      	b.n	8010bfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	68fa      	ldr	r2, [r7, #12]
 8010c00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010c08:	2101      	movs	r1, #1
 8010c0a:	69b8      	ldr	r0, [r7, #24]
 8010c0c:	f7ff fec0 	bl	8010990 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c10:	bf00      	nop
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b08e      	sub	sp, #56	; 0x38
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010c26:	2300      	movs	r3, #0
 8010c28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10b      	bne.n	8010c4c <xQueueGenericSend+0x34>
 8010c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c38:	b672      	cpsid	i
 8010c3a:	f383 8811 	msr	BASEPRI, r3
 8010c3e:	f3bf 8f6f 	isb	sy
 8010c42:	f3bf 8f4f 	dsb	sy
 8010c46:	b662      	cpsie	i
 8010c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c4a:	e7fe      	b.n	8010c4a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d103      	bne.n	8010c5a <xQueueGenericSend+0x42>
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <xQueueGenericSend+0x46>
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e000      	b.n	8010c60 <xQueueGenericSend+0x48>
 8010c5e:	2300      	movs	r3, #0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10b      	bne.n	8010c7c <xQueueGenericSend+0x64>
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	b672      	cpsid	i
 8010c6a:	f383 8811 	msr	BASEPRI, r3
 8010c6e:	f3bf 8f6f 	isb	sy
 8010c72:	f3bf 8f4f 	dsb	sy
 8010c76:	b662      	cpsie	i
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
 8010c7a:	e7fe      	b.n	8010c7a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d103      	bne.n	8010c8a <xQueueGenericSend+0x72>
 8010c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d101      	bne.n	8010c8e <xQueueGenericSend+0x76>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e000      	b.n	8010c90 <xQueueGenericSend+0x78>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10b      	bne.n	8010cac <xQueueGenericSend+0x94>
 8010c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c98:	b672      	cpsid	i
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	b662      	cpsie	i
 8010ca8:	623b      	str	r3, [r7, #32]
 8010caa:	e7fe      	b.n	8010caa <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cac:	f001 fbac 	bl	8012408 <xTaskGetSchedulerState>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d102      	bne.n	8010cbc <xQueueGenericSend+0xa4>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d101      	bne.n	8010cc0 <xQueueGenericSend+0xa8>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e000      	b.n	8010cc2 <xQueueGenericSend+0xaa>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d10b      	bne.n	8010cde <xQueueGenericSend+0xc6>
 8010cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cca:	b672      	cpsid	i
 8010ccc:	f383 8811 	msr	BASEPRI, r3
 8010cd0:	f3bf 8f6f 	isb	sy
 8010cd4:	f3bf 8f4f 	dsb	sy
 8010cd8:	b662      	cpsie	i
 8010cda:	61fb      	str	r3, [r7, #28]
 8010cdc:	e7fe      	b.n	8010cdc <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cde:	f001 fee3 	bl	8012aa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d302      	bcc.n	8010cf4 <xQueueGenericSend+0xdc>
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2b02      	cmp	r3, #2
 8010cf2:	d129      	bne.n	8010d48 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	68b9      	ldr	r1, [r7, #8]
 8010cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cfa:	f000 fc4a 	bl	8011592 <prvCopyDataToQueue>
 8010cfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d010      	beq.n	8010d2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0a:	3324      	adds	r3, #36	; 0x24
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f001 f9b5 	bl	801207c <xTaskRemoveFromEventList>
 8010d12:	4603      	mov	r3, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d013      	beq.n	8010d40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010d18:	4b3f      	ldr	r3, [pc, #252]	; (8010e18 <xQueueGenericSend+0x200>)
 8010d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d1e:	601a      	str	r2, [r3, #0]
 8010d20:	f3bf 8f4f 	dsb	sy
 8010d24:	f3bf 8f6f 	isb	sy
 8010d28:	e00a      	b.n	8010d40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d007      	beq.n	8010d40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010d30:	4b39      	ldr	r3, [pc, #228]	; (8010e18 <xQueueGenericSend+0x200>)
 8010d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d36:	601a      	str	r2, [r3, #0]
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010d40:	f001 fee4 	bl	8012b0c <vPortExitCritical>
				return pdPASS;
 8010d44:	2301      	movs	r3, #1
 8010d46:	e063      	b.n	8010e10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d103      	bne.n	8010d56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d4e:	f001 fedd 	bl	8012b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010d52:	2300      	movs	r3, #0
 8010d54:	e05c      	b.n	8010e10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d106      	bne.n	8010d6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d5c:	f107 0314 	add.w	r3, r7, #20
 8010d60:	4618      	mov	r0, r3
 8010d62:	f001 f9ef 	bl	8012144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d66:	2301      	movs	r3, #1
 8010d68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d6a:	f001 fecf 	bl	8012b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d6e:	f000 ff51 	bl	8011c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d72:	f001 fe99 	bl	8012aa8 <vPortEnterCritical>
 8010d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d7c:	b25b      	sxtb	r3, r3
 8010d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d82:	d103      	bne.n	8010d8c <xQueueGenericSend+0x174>
 8010d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d92:	b25b      	sxtb	r3, r3
 8010d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d98:	d103      	bne.n	8010da2 <xQueueGenericSend+0x18a>
 8010d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010da2:	f001 feb3 	bl	8012b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010da6:	1d3a      	adds	r2, r7, #4
 8010da8:	f107 0314 	add.w	r3, r7, #20
 8010dac:	4611      	mov	r1, r2
 8010dae:	4618      	mov	r0, r3
 8010db0:	f001 f9de 	bl	8012170 <xTaskCheckForTimeOut>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d124      	bne.n	8010e04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dbc:	f000 fce1 	bl	8011782 <prvIsQueueFull>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d018      	beq.n	8010df8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc8:	3310      	adds	r3, #16
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	4611      	mov	r1, r2
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f001 f92e 	bl	8012030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd6:	f000 fc6c 	bl	80116b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010dda:	f000 ff29 	bl	8011c30 <xTaskResumeAll>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f47f af7c 	bne.w	8010cde <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010de6:	4b0c      	ldr	r3, [pc, #48]	; (8010e18 <xQueueGenericSend+0x200>)
 8010de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dec:	601a      	str	r2, [r3, #0]
 8010dee:	f3bf 8f4f 	dsb	sy
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	e772      	b.n	8010cde <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dfa:	f000 fc5a 	bl	80116b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010dfe:	f000 ff17 	bl	8011c30 <xTaskResumeAll>
 8010e02:	e76c      	b.n	8010cde <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e06:	f000 fc54 	bl	80116b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e0a:	f000 ff11 	bl	8011c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010e0e:	2300      	movs	r3, #0
		}
	}
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3738      	adds	r7, #56	; 0x38
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	e000ed04 	.word	0xe000ed04

08010e1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08e      	sub	sp, #56	; 0x38
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
 8010e28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10b      	bne.n	8010e4c <xQueueGenericSendFromISR+0x30>
 8010e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e38:	b672      	cpsid	i
 8010e3a:	f383 8811 	msr	BASEPRI, r3
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	b662      	cpsie	i
 8010e48:	627b      	str	r3, [r7, #36]	; 0x24
 8010e4a:	e7fe      	b.n	8010e4a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d103      	bne.n	8010e5a <xQueueGenericSendFromISR+0x3e>
 8010e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d101      	bne.n	8010e5e <xQueueGenericSendFromISR+0x42>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e000      	b.n	8010e60 <xQueueGenericSendFromISR+0x44>
 8010e5e:	2300      	movs	r3, #0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d10b      	bne.n	8010e7c <xQueueGenericSendFromISR+0x60>
 8010e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e68:	b672      	cpsid	i
 8010e6a:	f383 8811 	msr	BASEPRI, r3
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	f3bf 8f4f 	dsb	sy
 8010e76:	b662      	cpsie	i
 8010e78:	623b      	str	r3, [r7, #32]
 8010e7a:	e7fe      	b.n	8010e7a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d103      	bne.n	8010e8a <xQueueGenericSendFromISR+0x6e>
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d101      	bne.n	8010e8e <xQueueGenericSendFromISR+0x72>
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e000      	b.n	8010e90 <xQueueGenericSendFromISR+0x74>
 8010e8e:	2300      	movs	r3, #0
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d10b      	bne.n	8010eac <xQueueGenericSendFromISR+0x90>
 8010e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e98:	b672      	cpsid	i
 8010e9a:	f383 8811 	msr	BASEPRI, r3
 8010e9e:	f3bf 8f6f 	isb	sy
 8010ea2:	f3bf 8f4f 	dsb	sy
 8010ea6:	b662      	cpsie	i
 8010ea8:	61fb      	str	r3, [r7, #28]
 8010eaa:	e7fe      	b.n	8010eaa <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010eac:	f001 fedc 	bl	8012c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010eb0:	f3ef 8211 	mrs	r2, BASEPRI
 8010eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb8:	b672      	cpsid	i
 8010eba:	f383 8811 	msr	BASEPRI, r3
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	b662      	cpsie	i
 8010ec8:	61ba      	str	r2, [r7, #24]
 8010eca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ecc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d302      	bcc.n	8010ee2 <xQueueGenericSendFromISR+0xc6>
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d12c      	bne.n	8010f3c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010eec:	683a      	ldr	r2, [r7, #0]
 8010eee:	68b9      	ldr	r1, [r7, #8]
 8010ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ef2:	f000 fb4e 	bl	8011592 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ef6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efe:	d112      	bne.n	8010f26 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d016      	beq.n	8010f36 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0a:	3324      	adds	r3, #36	; 0x24
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f001 f8b5 	bl	801207c <xTaskRemoveFromEventList>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00e      	beq.n	8010f36 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00b      	beq.n	8010f36 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2201      	movs	r2, #1
 8010f22:	601a      	str	r2, [r3, #0]
 8010f24:	e007      	b.n	8010f36 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	b25a      	sxtb	r2, r3
 8010f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010f36:	2301      	movs	r3, #1
 8010f38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010f3a:	e001      	b.n	8010f40 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3738      	adds	r7, #56	; 0x38
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b08e      	sub	sp, #56	; 0x38
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d10b      	bne.n	8010f80 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6c:	b672      	cpsid	i
 8010f6e:	f383 8811 	msr	BASEPRI, r3
 8010f72:	f3bf 8f6f 	isb	sy
 8010f76:	f3bf 8f4f 	dsb	sy
 8010f7a:	b662      	cpsie	i
 8010f7c:	623b      	str	r3, [r7, #32]
 8010f7e:	e7fe      	b.n	8010f7e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d00b      	beq.n	8010fa0 <xQueueGiveFromISR+0x4c>
 8010f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8c:	b672      	cpsid	i
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	b662      	cpsie	i
 8010f9c:	61fb      	str	r3, [r7, #28]
 8010f9e:	e7fe      	b.n	8010f9e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d103      	bne.n	8010fb0 <xQueueGiveFromISR+0x5c>
 8010fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d101      	bne.n	8010fb4 <xQueueGiveFromISR+0x60>
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e000      	b.n	8010fb6 <xQueueGiveFromISR+0x62>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10b      	bne.n	8010fd2 <xQueueGiveFromISR+0x7e>
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	b672      	cpsid	i
 8010fc0:	f383 8811 	msr	BASEPRI, r3
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	f3bf 8f4f 	dsb	sy
 8010fcc:	b662      	cpsie	i
 8010fce:	61bb      	str	r3, [r7, #24]
 8010fd0:	e7fe      	b.n	8010fd0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010fd2:	f001 fe49 	bl	8012c68 <vPortValidateInterruptPriority>
	__asm volatile
 8010fd6:	f3ef 8211 	mrs	r2, BASEPRI
 8010fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fde:	b672      	cpsid	i
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	b662      	cpsie	i
 8010fee:	617a      	str	r2, [r7, #20]
 8010ff0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010ff2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ffa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011002:	429a      	cmp	r2, r3
 8011004:	d22b      	bcs.n	801105e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801100c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	1c5a      	adds	r2, r3, #1
 8011014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011016:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011018:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011020:	d112      	bne.n	8011048 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011026:	2b00      	cmp	r3, #0
 8011028:	d016      	beq.n	8011058 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801102a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102c:	3324      	adds	r3, #36	; 0x24
 801102e:	4618      	mov	r0, r3
 8011030:	f001 f824 	bl	801207c <xTaskRemoveFromEventList>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00e      	beq.n	8011058 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00b      	beq.n	8011058 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	2201      	movs	r2, #1
 8011044:	601a      	str	r2, [r3, #0]
 8011046:	e007      	b.n	8011058 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801104c:	3301      	adds	r3, #1
 801104e:	b2db      	uxtb	r3, r3
 8011050:	b25a      	sxtb	r2, r3
 8011052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011058:	2301      	movs	r3, #1
 801105a:	637b      	str	r3, [r7, #52]	; 0x34
 801105c:	e001      	b.n	8011062 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801105e:	2300      	movs	r3, #0
 8011060:	637b      	str	r3, [r7, #52]	; 0x34
 8011062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011064:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801106e:	4618      	mov	r0, r3
 8011070:	3738      	adds	r7, #56	; 0x38
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
	...

08011078 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b08c      	sub	sp, #48	; 0x30
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	60b9      	str	r1, [r7, #8]
 8011082:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011084:	2300      	movs	r3, #0
 8011086:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10b      	bne.n	80110aa <xQueueReceive+0x32>
	__asm volatile
 8011092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011096:	b672      	cpsid	i
 8011098:	f383 8811 	msr	BASEPRI, r3
 801109c:	f3bf 8f6f 	isb	sy
 80110a0:	f3bf 8f4f 	dsb	sy
 80110a4:	b662      	cpsie	i
 80110a6:	623b      	str	r3, [r7, #32]
 80110a8:	e7fe      	b.n	80110a8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d103      	bne.n	80110b8 <xQueueReceive+0x40>
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d101      	bne.n	80110bc <xQueueReceive+0x44>
 80110b8:	2301      	movs	r3, #1
 80110ba:	e000      	b.n	80110be <xQueueReceive+0x46>
 80110bc:	2300      	movs	r3, #0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10b      	bne.n	80110da <xQueueReceive+0x62>
 80110c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c6:	b672      	cpsid	i
 80110c8:	f383 8811 	msr	BASEPRI, r3
 80110cc:	f3bf 8f6f 	isb	sy
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	b662      	cpsie	i
 80110d6:	61fb      	str	r3, [r7, #28]
 80110d8:	e7fe      	b.n	80110d8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110da:	f001 f995 	bl	8012408 <xTaskGetSchedulerState>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d102      	bne.n	80110ea <xQueueReceive+0x72>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d101      	bne.n	80110ee <xQueueReceive+0x76>
 80110ea:	2301      	movs	r3, #1
 80110ec:	e000      	b.n	80110f0 <xQueueReceive+0x78>
 80110ee:	2300      	movs	r3, #0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10b      	bne.n	801110c <xQueueReceive+0x94>
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	b672      	cpsid	i
 80110fa:	f383 8811 	msr	BASEPRI, r3
 80110fe:	f3bf 8f6f 	isb	sy
 8011102:	f3bf 8f4f 	dsb	sy
 8011106:	b662      	cpsie	i
 8011108:	61bb      	str	r3, [r7, #24]
 801110a:	e7fe      	b.n	801110a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801110c:	f001 fccc 	bl	8012aa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011114:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011118:	2b00      	cmp	r3, #0
 801111a:	d01f      	beq.n	801115c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801111c:	68b9      	ldr	r1, [r7, #8]
 801111e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011120:	f000 faa1 	bl	8011666 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011126:	1e5a      	subs	r2, r3, #1
 8011128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d00f      	beq.n	8011154 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011136:	3310      	adds	r3, #16
 8011138:	4618      	mov	r0, r3
 801113a:	f000 ff9f 	bl	801207c <xTaskRemoveFromEventList>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d007      	beq.n	8011154 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011144:	4b3c      	ldr	r3, [pc, #240]	; (8011238 <xQueueReceive+0x1c0>)
 8011146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801114a:	601a      	str	r2, [r3, #0]
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011154:	f001 fcda 	bl	8012b0c <vPortExitCritical>
				return pdPASS;
 8011158:	2301      	movs	r3, #1
 801115a:	e069      	b.n	8011230 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d103      	bne.n	801116a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011162:	f001 fcd3 	bl	8012b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011166:	2300      	movs	r3, #0
 8011168:	e062      	b.n	8011230 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	2b00      	cmp	r3, #0
 801116e:	d106      	bne.n	801117e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011170:	f107 0310 	add.w	r3, r7, #16
 8011174:	4618      	mov	r0, r3
 8011176:	f000 ffe5 	bl	8012144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801117a:	2301      	movs	r3, #1
 801117c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801117e:	f001 fcc5 	bl	8012b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011182:	f000 fd47 	bl	8011c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011186:	f001 fc8f 	bl	8012aa8 <vPortEnterCritical>
 801118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011190:	b25b      	sxtb	r3, r3
 8011192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011196:	d103      	bne.n	80111a0 <xQueueReceive+0x128>
 8011198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119a:	2200      	movs	r2, #0
 801119c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80111a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111a6:	b25b      	sxtb	r3, r3
 80111a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ac:	d103      	bne.n	80111b6 <xQueueReceive+0x13e>
 80111ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80111b6:	f001 fca9 	bl	8012b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111ba:	1d3a      	adds	r2, r7, #4
 80111bc:	f107 0310 	add.w	r3, r7, #16
 80111c0:	4611      	mov	r1, r2
 80111c2:	4618      	mov	r0, r3
 80111c4:	f000 ffd4 	bl	8012170 <xTaskCheckForTimeOut>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d123      	bne.n	8011216 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111d0:	f000 fac1 	bl	8011756 <prvIsQueueEmpty>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d017      	beq.n	801120a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111dc:	3324      	adds	r3, #36	; 0x24
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	4611      	mov	r1, r2
 80111e2:	4618      	mov	r0, r3
 80111e4:	f000 ff24 	bl	8012030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111ea:	f000 fa62 	bl	80116b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111ee:	f000 fd1f 	bl	8011c30 <xTaskResumeAll>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d189      	bne.n	801110c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80111f8:	4b0f      	ldr	r3, [pc, #60]	; (8011238 <xQueueReceive+0x1c0>)
 80111fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	f3bf 8f4f 	dsb	sy
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	e780      	b.n	801110c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801120a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801120c:	f000 fa51 	bl	80116b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011210:	f000 fd0e 	bl	8011c30 <xTaskResumeAll>
 8011214:	e77a      	b.n	801110c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011218:	f000 fa4b 	bl	80116b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801121c:	f000 fd08 	bl	8011c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011222:	f000 fa98 	bl	8011756 <prvIsQueueEmpty>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	f43f af6f 	beq.w	801110c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801122e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011230:	4618      	mov	r0, r3
 8011232:	3730      	adds	r7, #48	; 0x30
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	e000ed04 	.word	0xe000ed04

0801123c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b08e      	sub	sp, #56	; 0x38
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011246:	2300      	movs	r3, #0
 8011248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801124e:	2300      	movs	r3, #0
 8011250:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011254:	2b00      	cmp	r3, #0
 8011256:	d10b      	bne.n	8011270 <xQueueSemaphoreTake+0x34>
 8011258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125c:	b672      	cpsid	i
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	b662      	cpsie	i
 801126c:	623b      	str	r3, [r7, #32]
 801126e:	e7fe      	b.n	801126e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00b      	beq.n	8011290 <xQueueSemaphoreTake+0x54>
 8011278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127c:	b672      	cpsid	i
 801127e:	f383 8811 	msr	BASEPRI, r3
 8011282:	f3bf 8f6f 	isb	sy
 8011286:	f3bf 8f4f 	dsb	sy
 801128a:	b662      	cpsie	i
 801128c:	61fb      	str	r3, [r7, #28]
 801128e:	e7fe      	b.n	801128e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011290:	f001 f8ba 	bl	8012408 <xTaskGetSchedulerState>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <xQueueSemaphoreTake+0x64>
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d101      	bne.n	80112a4 <xQueueSemaphoreTake+0x68>
 80112a0:	2301      	movs	r3, #1
 80112a2:	e000      	b.n	80112a6 <xQueueSemaphoreTake+0x6a>
 80112a4:	2300      	movs	r3, #0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d10b      	bne.n	80112c2 <xQueueSemaphoreTake+0x86>
 80112aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ae:	b672      	cpsid	i
 80112b0:	f383 8811 	msr	BASEPRI, r3
 80112b4:	f3bf 8f6f 	isb	sy
 80112b8:	f3bf 8f4f 	dsb	sy
 80112bc:	b662      	cpsie	i
 80112be:	61bb      	str	r3, [r7, #24]
 80112c0:	e7fe      	b.n	80112c0 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80112c2:	f001 fbf1 	bl	8012aa8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d024      	beq.n	801131c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	1e5a      	subs	r2, r3, #1
 80112d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d104      	bne.n	80112ec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80112e2:	f001 fa5f 	bl	80127a4 <pvTaskIncrementMutexHeldCount>
 80112e6:	4602      	mov	r2, r0
 80112e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ea:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ee:	691b      	ldr	r3, [r3, #16]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00f      	beq.n	8011314 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	3310      	adds	r3, #16
 80112f8:	4618      	mov	r0, r3
 80112fa:	f000 febf 	bl	801207c <xTaskRemoveFromEventList>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d007      	beq.n	8011314 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011304:	4b54      	ldr	r3, [pc, #336]	; (8011458 <xQueueSemaphoreTake+0x21c>)
 8011306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801130a:	601a      	str	r2, [r3, #0]
 801130c:	f3bf 8f4f 	dsb	sy
 8011310:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011314:	f001 fbfa 	bl	8012b0c <vPortExitCritical>
				return pdPASS;
 8011318:	2301      	movs	r3, #1
 801131a:	e098      	b.n	801144e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d112      	bne.n	8011348 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011324:	2b00      	cmp	r3, #0
 8011326:	d00b      	beq.n	8011340 <xQueueSemaphoreTake+0x104>
 8011328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132c:	b672      	cpsid	i
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	b662      	cpsie	i
 801133c:	617b      	str	r3, [r7, #20]
 801133e:	e7fe      	b.n	801133e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011340:	f001 fbe4 	bl	8012b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011344:	2300      	movs	r3, #0
 8011346:	e082      	b.n	801144e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801134e:	f107 030c 	add.w	r3, r7, #12
 8011352:	4618      	mov	r0, r3
 8011354:	f000 fef6 	bl	8012144 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011358:	2301      	movs	r3, #1
 801135a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801135c:	f001 fbd6 	bl	8012b0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011360:	f000 fc58 	bl	8011c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011364:	f001 fba0 	bl	8012aa8 <vPortEnterCritical>
 8011368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801136e:	b25b      	sxtb	r3, r3
 8011370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011374:	d103      	bne.n	801137e <xQueueSemaphoreTake+0x142>
 8011376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011378:	2200      	movs	r2, #0
 801137a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011384:	b25b      	sxtb	r3, r3
 8011386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801138a:	d103      	bne.n	8011394 <xQueueSemaphoreTake+0x158>
 801138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801138e:	2200      	movs	r2, #0
 8011390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011394:	f001 fbba 	bl	8012b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011398:	463a      	mov	r2, r7
 801139a:	f107 030c 	add.w	r3, r7, #12
 801139e:	4611      	mov	r1, r2
 80113a0:	4618      	mov	r0, r3
 80113a2:	f000 fee5 	bl	8012170 <xTaskCheckForTimeOut>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d132      	bne.n	8011412 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80113ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113ae:	f000 f9d2 	bl	8011756 <prvIsQueueEmpty>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d026      	beq.n	8011406 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d109      	bne.n	80113d4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80113c0:	f001 fb72 	bl	8012aa8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80113c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f001 f83b 	bl	8012444 <xTaskPriorityInherit>
 80113ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80113d0:	f001 fb9c 	bl	8012b0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80113d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d6:	3324      	adds	r3, #36	; 0x24
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	4611      	mov	r1, r2
 80113dc:	4618      	mov	r0, r3
 80113de:	f000 fe27 	bl	8012030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80113e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113e4:	f000 f965 	bl	80116b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80113e8:	f000 fc22 	bl	8011c30 <xTaskResumeAll>
 80113ec:	4603      	mov	r3, r0
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f47f af67 	bne.w	80112c2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80113f4:	4b18      	ldr	r3, [pc, #96]	; (8011458 <xQueueSemaphoreTake+0x21c>)
 80113f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	f3bf 8f4f 	dsb	sy
 8011400:	f3bf 8f6f 	isb	sy
 8011404:	e75d      	b.n	80112c2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011408:	f000 f953 	bl	80116b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801140c:	f000 fc10 	bl	8011c30 <xTaskResumeAll>
 8011410:	e757      	b.n	80112c2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011414:	f000 f94d 	bl	80116b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011418:	f000 fc0a 	bl	8011c30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801141c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801141e:	f000 f99a 	bl	8011756 <prvIsQueueEmpty>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	f43f af4c 	beq.w	80112c2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142c:	2b00      	cmp	r3, #0
 801142e:	d00d      	beq.n	801144c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011430:	f001 fb3a 	bl	8012aa8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011436:	f000 f894 	bl	8011562 <prvGetDisinheritPriorityAfterTimeout>
 801143a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011442:	4618      	mov	r0, r3
 8011444:	f001 f90c 	bl	8012660 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011448:	f001 fb60 	bl	8012b0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801144c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801144e:	4618      	mov	r0, r3
 8011450:	3738      	adds	r7, #56	; 0x38
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	e000ed04 	.word	0xe000ed04

0801145c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b08e      	sub	sp, #56	; 0x38
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146e:	2b00      	cmp	r3, #0
 8011470:	d10b      	bne.n	801148a <xQueueReceiveFromISR+0x2e>
 8011472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011476:	b672      	cpsid	i
 8011478:	f383 8811 	msr	BASEPRI, r3
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	b662      	cpsie	i
 8011486:	623b      	str	r3, [r7, #32]
 8011488:	e7fe      	b.n	8011488 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d103      	bne.n	8011498 <xQueueReceiveFromISR+0x3c>
 8011490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011494:	2b00      	cmp	r3, #0
 8011496:	d101      	bne.n	801149c <xQueueReceiveFromISR+0x40>
 8011498:	2301      	movs	r3, #1
 801149a:	e000      	b.n	801149e <xQueueReceiveFromISR+0x42>
 801149c:	2300      	movs	r3, #0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d10b      	bne.n	80114ba <xQueueReceiveFromISR+0x5e>
 80114a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a6:	b672      	cpsid	i
 80114a8:	f383 8811 	msr	BASEPRI, r3
 80114ac:	f3bf 8f6f 	isb	sy
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	b662      	cpsie	i
 80114b6:	61fb      	str	r3, [r7, #28]
 80114b8:	e7fe      	b.n	80114b8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114ba:	f001 fbd5 	bl	8012c68 <vPortValidateInterruptPriority>
	__asm volatile
 80114be:	f3ef 8211 	mrs	r2, BASEPRI
 80114c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c6:	b672      	cpsid	i
 80114c8:	f383 8811 	msr	BASEPRI, r3
 80114cc:	f3bf 8f6f 	isb	sy
 80114d0:	f3bf 8f4f 	dsb	sy
 80114d4:	b662      	cpsie	i
 80114d6:	61ba      	str	r2, [r7, #24]
 80114d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80114da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80114dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80114e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d02f      	beq.n	801154a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80114ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80114f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80114f4:	68b9      	ldr	r1, [r7, #8]
 80114f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114f8:	f000 f8b5 	bl	8011666 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	1e5a      	subs	r2, r3, #1
 8011500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011502:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150c:	d112      	bne.n	8011534 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011510:	691b      	ldr	r3, [r3, #16]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d016      	beq.n	8011544 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	3310      	adds	r3, #16
 801151a:	4618      	mov	r0, r3
 801151c:	f000 fdae 	bl	801207c <xTaskRemoveFromEventList>
 8011520:	4603      	mov	r3, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d00e      	beq.n	8011544 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00b      	beq.n	8011544 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2201      	movs	r2, #1
 8011530:	601a      	str	r2, [r3, #0]
 8011532:	e007      	b.n	8011544 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011538:	3301      	adds	r3, #1
 801153a:	b2db      	uxtb	r3, r3
 801153c:	b25a      	sxtb	r2, r3
 801153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011544:	2301      	movs	r3, #1
 8011546:	637b      	str	r3, [r7, #52]	; 0x34
 8011548:	e001      	b.n	801154e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801154a:	2300      	movs	r3, #0
 801154c:	637b      	str	r3, [r7, #52]	; 0x34
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801155a:	4618      	mov	r0, r3
 801155c:	3738      	adds	r7, #56	; 0x38
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}

08011562 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011562:	b480      	push	{r7}
 8011564:	b085      	sub	sp, #20
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801156e:	2b00      	cmp	r3, #0
 8011570:	d006      	beq.n	8011580 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f1c3 0307 	rsb	r3, r3, #7
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	e001      	b.n	8011584 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011580:	2300      	movs	r3, #0
 8011582:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011584:	68fb      	ldr	r3, [r7, #12]
	}
 8011586:	4618      	mov	r0, r3
 8011588:	3714      	adds	r7, #20
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr

08011592 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b086      	sub	sp, #24
 8011596:	af00      	add	r7, sp, #0
 8011598:	60f8      	str	r0, [r7, #12]
 801159a:	60b9      	str	r1, [r7, #8]
 801159c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801159e:	2300      	movs	r3, #0
 80115a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10d      	bne.n	80115cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d14d      	bne.n	8011654 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	f000 ffc7 	bl	8012550 <xTaskPriorityDisinherit>
 80115c2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2200      	movs	r2, #0
 80115c8:	605a      	str	r2, [r3, #4]
 80115ca:	e043      	b.n	8011654 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d119      	bne.n	8011606 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6898      	ldr	r0, [r3, #8]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115da:	461a      	mov	r2, r3
 80115dc:	68b9      	ldr	r1, [r7, #8]
 80115de:	f013 ff29 	bl	8025434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	689a      	ldr	r2, [r3, #8]
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ea:	441a      	add	r2, r3
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	689a      	ldr	r2, [r3, #8]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d32b      	bcc.n	8011654 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	609a      	str	r2, [r3, #8]
 8011604:	e026      	b.n	8011654 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	68d8      	ldr	r0, [r3, #12]
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801160e:	461a      	mov	r2, r3
 8011610:	68b9      	ldr	r1, [r7, #8]
 8011612:	f013 ff0f 	bl	8025434 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	68da      	ldr	r2, [r3, #12]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801161e:	425b      	negs	r3, r3
 8011620:	441a      	add	r2, r3
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	68da      	ldr	r2, [r3, #12]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	429a      	cmp	r2, r3
 8011630:	d207      	bcs.n	8011642 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	685a      	ldr	r2, [r3, #4]
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801163a:	425b      	negs	r3, r3
 801163c:	441a      	add	r2, r3
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2b02      	cmp	r3, #2
 8011646:	d105      	bne.n	8011654 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d002      	beq.n	8011654 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	3b01      	subs	r3, #1
 8011652:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	1c5a      	adds	r2, r3, #1
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801165c:	697b      	ldr	r3, [r7, #20]
}
 801165e:	4618      	mov	r0, r3
 8011660:	3718      	adds	r7, #24
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011666:	b580      	push	{r7, lr}
 8011668:	b082      	sub	sp, #8
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
 801166e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011674:	2b00      	cmp	r3, #0
 8011676:	d018      	beq.n	80116aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68da      	ldr	r2, [r3, #12]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011680:	441a      	add	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	68da      	ldr	r2, [r3, #12]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	429a      	cmp	r2, r3
 8011690:	d303      	bcc.n	801169a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	68d9      	ldr	r1, [r3, #12]
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116a2:	461a      	mov	r2, r3
 80116a4:	6838      	ldr	r0, [r7, #0]
 80116a6:	f013 fec5 	bl	8025434 <memcpy>
	}
}
 80116aa:	bf00      	nop
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b084      	sub	sp, #16
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80116ba:	f001 f9f5 	bl	8012aa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80116c6:	e011      	b.n	80116ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d012      	beq.n	80116f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	3324      	adds	r3, #36	; 0x24
 80116d4:	4618      	mov	r0, r3
 80116d6:	f000 fcd1 	bl	801207c <xTaskRemoveFromEventList>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d001      	beq.n	80116e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80116e0:	f000 fdaa 	bl	8012238 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80116ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	dce9      	bgt.n	80116c8 <prvUnlockQueue+0x16>
 80116f4:	e000      	b.n	80116f8 <prvUnlockQueue+0x46>
					break;
 80116f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	22ff      	movs	r2, #255	; 0xff
 80116fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011700:	f001 fa04 	bl	8012b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011704:	f001 f9d0 	bl	8012aa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801170e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011710:	e011      	b.n	8011736 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d012      	beq.n	8011740 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	3310      	adds	r3, #16
 801171e:	4618      	mov	r0, r3
 8011720:	f000 fcac 	bl	801207c <xTaskRemoveFromEventList>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d001      	beq.n	801172e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801172a:	f000 fd85 	bl	8012238 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801172e:	7bbb      	ldrb	r3, [r7, #14]
 8011730:	3b01      	subs	r3, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801173a:	2b00      	cmp	r3, #0
 801173c:	dce9      	bgt.n	8011712 <prvUnlockQueue+0x60>
 801173e:	e000      	b.n	8011742 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011740:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	22ff      	movs	r2, #255	; 0xff
 8011746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801174a:	f001 f9df 	bl	8012b0c <vPortExitCritical>
}
 801174e:	bf00      	nop
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}

08011756 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011756:	b580      	push	{r7, lr}
 8011758:	b084      	sub	sp, #16
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801175e:	f001 f9a3 	bl	8012aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011766:	2b00      	cmp	r3, #0
 8011768:	d102      	bne.n	8011770 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801176a:	2301      	movs	r3, #1
 801176c:	60fb      	str	r3, [r7, #12]
 801176e:	e001      	b.n	8011774 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011770:	2300      	movs	r3, #0
 8011772:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011774:	f001 f9ca 	bl	8012b0c <vPortExitCritical>

	return xReturn;
 8011778:	68fb      	ldr	r3, [r7, #12]
}
 801177a:	4618      	mov	r0, r3
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b084      	sub	sp, #16
 8011786:	af00      	add	r7, sp, #0
 8011788:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801178a:	f001 f98d 	bl	8012aa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011796:	429a      	cmp	r2, r3
 8011798:	d102      	bne.n	80117a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801179a:	2301      	movs	r3, #1
 801179c:	60fb      	str	r3, [r7, #12]
 801179e:	e001      	b.n	80117a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80117a0:	2300      	movs	r3, #0
 80117a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80117a4:	f001 f9b2 	bl	8012b0c <vPortExitCritical>

	return xReturn;
 80117a8:	68fb      	ldr	r3, [r7, #12]
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}

080117b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80117b2:	b580      	push	{r7, lr}
 80117b4:	b08e      	sub	sp, #56	; 0x38
 80117b6:	af04      	add	r7, sp, #16
 80117b8:	60f8      	str	r0, [r7, #12]
 80117ba:	60b9      	str	r1, [r7, #8]
 80117bc:	607a      	str	r2, [r7, #4]
 80117be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80117c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10b      	bne.n	80117de <xTaskCreateStatic+0x2c>
	__asm volatile
 80117c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ca:	b672      	cpsid	i
 80117cc:	f383 8811 	msr	BASEPRI, r3
 80117d0:	f3bf 8f6f 	isb	sy
 80117d4:	f3bf 8f4f 	dsb	sy
 80117d8:	b662      	cpsie	i
 80117da:	623b      	str	r3, [r7, #32]
 80117dc:	e7fe      	b.n	80117dc <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80117de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d10b      	bne.n	80117fc <xTaskCreateStatic+0x4a>
 80117e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e8:	b672      	cpsid	i
 80117ea:	f383 8811 	msr	BASEPRI, r3
 80117ee:	f3bf 8f6f 	isb	sy
 80117f2:	f3bf 8f4f 	dsb	sy
 80117f6:	b662      	cpsie	i
 80117f8:	61fb      	str	r3, [r7, #28]
 80117fa:	e7fe      	b.n	80117fa <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80117fc:	2358      	movs	r3, #88	; 0x58
 80117fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	2b58      	cmp	r3, #88	; 0x58
 8011804:	d00b      	beq.n	801181e <xTaskCreateStatic+0x6c>
 8011806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801180a:	b672      	cpsid	i
 801180c:	f383 8811 	msr	BASEPRI, r3
 8011810:	f3bf 8f6f 	isb	sy
 8011814:	f3bf 8f4f 	dsb	sy
 8011818:	b662      	cpsie	i
 801181a:	61bb      	str	r3, [r7, #24]
 801181c:	e7fe      	b.n	801181c <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011820:	2b00      	cmp	r3, #0
 8011822:	d01e      	beq.n	8011862 <xTaskCreateStatic+0xb0>
 8011824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011826:	2b00      	cmp	r3, #0
 8011828:	d01b      	beq.n	8011862 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011832:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011836:	2202      	movs	r2, #2
 8011838:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801183c:	2300      	movs	r3, #0
 801183e:	9303      	str	r3, [sp, #12]
 8011840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011842:	9302      	str	r3, [sp, #8]
 8011844:	f107 0314 	add.w	r3, r7, #20
 8011848:	9301      	str	r3, [sp, #4]
 801184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	687a      	ldr	r2, [r7, #4]
 8011852:	68b9      	ldr	r1, [r7, #8]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f000 f850 	bl	80118fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801185a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801185c:	f000 f8d8 	bl	8011a10 <prvAddNewTaskToReadyList>
 8011860:	e001      	b.n	8011866 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8011862:	2300      	movs	r3, #0
 8011864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011866:	697b      	ldr	r3, [r7, #20]
	}
 8011868:	4618      	mov	r0, r3
 801186a:	3728      	adds	r7, #40	; 0x28
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011870:	b580      	push	{r7, lr}
 8011872:	b08c      	sub	sp, #48	; 0x30
 8011874:	af04      	add	r7, sp, #16
 8011876:	60f8      	str	r0, [r7, #12]
 8011878:	60b9      	str	r1, [r7, #8]
 801187a:	603b      	str	r3, [r7, #0]
 801187c:	4613      	mov	r3, r2
 801187e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011880:	88fb      	ldrh	r3, [r7, #6]
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	4618      	mov	r0, r3
 8011886:	f001 fa31 	bl	8012cec <pvPortMalloc>
 801188a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00e      	beq.n	80118b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011892:	2058      	movs	r0, #88	; 0x58
 8011894:	f001 fa2a 	bl	8012cec <pvPortMalloc>
 8011898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801189a:	69fb      	ldr	r3, [r7, #28]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d003      	beq.n	80118a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	697a      	ldr	r2, [r7, #20]
 80118a4:	631a      	str	r2, [r3, #48]	; 0x30
 80118a6:	e005      	b.n	80118b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80118a8:	6978      	ldr	r0, [r7, #20]
 80118aa:	f001 faeb 	bl	8012e84 <vPortFree>
 80118ae:	e001      	b.n	80118b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80118b0:	2300      	movs	r3, #0
 80118b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d017      	beq.n	80118ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	2200      	movs	r2, #0
 80118be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80118c2:	88fa      	ldrh	r2, [r7, #6]
 80118c4:	2300      	movs	r3, #0
 80118c6:	9303      	str	r3, [sp, #12]
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	9302      	str	r3, [sp, #8]
 80118cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ce:	9301      	str	r3, [sp, #4]
 80118d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	68b9      	ldr	r1, [r7, #8]
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f000 f80e 	bl	80118fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80118de:	69f8      	ldr	r0, [r7, #28]
 80118e0:	f000 f896 	bl	8011a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80118e4:	2301      	movs	r3, #1
 80118e6:	61bb      	str	r3, [r7, #24]
 80118e8:	e002      	b.n	80118f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80118ea:	f04f 33ff 	mov.w	r3, #4294967295
 80118ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80118f0:	69bb      	ldr	r3, [r7, #24]
	}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3720      	adds	r7, #32
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b088      	sub	sp, #32
 80118fe:	af00      	add	r7, sp, #0
 8011900:	60f8      	str	r0, [r7, #12]
 8011902:	60b9      	str	r1, [r7, #8]
 8011904:	607a      	str	r2, [r7, #4]
 8011906:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	461a      	mov	r2, r3
 8011912:	21a5      	movs	r1, #165	; 0xa5
 8011914:	f013 fd99 	bl	802544a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801191c:	6879      	ldr	r1, [r7, #4]
 801191e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011922:	440b      	add	r3, r1
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4413      	add	r3, r2
 8011928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	f023 0307 	bic.w	r3, r3, #7
 8011930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011932:	69bb      	ldr	r3, [r7, #24]
 8011934:	f003 0307 	and.w	r3, r3, #7
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00b      	beq.n	8011954 <prvInitialiseNewTask+0x5a>
 801193c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011940:	b672      	cpsid	i
 8011942:	f383 8811 	msr	BASEPRI, r3
 8011946:	f3bf 8f6f 	isb	sy
 801194a:	f3bf 8f4f 	dsb	sy
 801194e:	b662      	cpsie	i
 8011950:	617b      	str	r3, [r7, #20]
 8011952:	e7fe      	b.n	8011952 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011954:	2300      	movs	r3, #0
 8011956:	61fb      	str	r3, [r7, #28]
 8011958:	e012      	b.n	8011980 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	4413      	add	r3, r2
 8011960:	7819      	ldrb	r1, [r3, #0]
 8011962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	4413      	add	r3, r2
 8011968:	3334      	adds	r3, #52	; 0x34
 801196a:	460a      	mov	r2, r1
 801196c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	4413      	add	r3, r2
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d006      	beq.n	8011988 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	3301      	adds	r3, #1
 801197e:	61fb      	str	r3, [r7, #28]
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	2b0f      	cmp	r3, #15
 8011984:	d9e9      	bls.n	801195a <prvInitialiseNewTask+0x60>
 8011986:	e000      	b.n	801198a <prvInitialiseNewTask+0x90>
		{
			break;
 8011988:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198c:	2200      	movs	r2, #0
 801198e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011994:	2b06      	cmp	r3, #6
 8011996:	d901      	bls.n	801199c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011998:	2306      	movs	r3, #6
 801199a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80119a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80119a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119aa:	2200      	movs	r2, #0
 80119ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b0:	3304      	adds	r3, #4
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe ff58 	bl	8010868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ba:	3318      	adds	r3, #24
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fe ff53 	bl	8010868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ca:	f1c3 0207 	rsb	r2, r3, #7
 80119ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80119d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	2200      	movs	r2, #0
 80119dc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	2200      	movs	r2, #0
 80119e2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80119e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e6:	2200      	movs	r2, #0
 80119e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	68f9      	ldr	r1, [r7, #12]
 80119f0:	69b8      	ldr	r0, [r7, #24]
 80119f2:	f000 ff51 	bl	8012898 <pxPortInitialiseStack>
 80119f6:	4602      	mov	r2, r0
 80119f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80119fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d002      	beq.n	8011a08 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a08:	bf00      	nop
 8011a0a:	3720      	adds	r7, #32
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}

08011a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a18:	f001 f846 	bl	8012aa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011a1c:	4b2a      	ldr	r3, [pc, #168]	; (8011ac8 <prvAddNewTaskToReadyList+0xb8>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	3301      	adds	r3, #1
 8011a22:	4a29      	ldr	r2, [pc, #164]	; (8011ac8 <prvAddNewTaskToReadyList+0xb8>)
 8011a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011a26:	4b29      	ldr	r3, [pc, #164]	; (8011acc <prvAddNewTaskToReadyList+0xbc>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d109      	bne.n	8011a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011a2e:	4a27      	ldr	r2, [pc, #156]	; (8011acc <prvAddNewTaskToReadyList+0xbc>)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a34:	4b24      	ldr	r3, [pc, #144]	; (8011ac8 <prvAddNewTaskToReadyList+0xb8>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d110      	bne.n	8011a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a3c:	f000 fc22 	bl	8012284 <prvInitialiseTaskLists>
 8011a40:	e00d      	b.n	8011a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011a42:	4b23      	ldr	r3, [pc, #140]	; (8011ad0 <prvAddNewTaskToReadyList+0xc0>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d109      	bne.n	8011a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a4a:	4b20      	ldr	r3, [pc, #128]	; (8011acc <prvAddNewTaskToReadyList+0xbc>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d802      	bhi.n	8011a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011a58:	4a1c      	ldr	r2, [pc, #112]	; (8011acc <prvAddNewTaskToReadyList+0xbc>)
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011a5e:	4b1d      	ldr	r3, [pc, #116]	; (8011ad4 <prvAddNewTaskToReadyList+0xc4>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	3301      	adds	r3, #1
 8011a64:	4a1b      	ldr	r2, [pc, #108]	; (8011ad4 <prvAddNewTaskToReadyList+0xc4>)
 8011a66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6c:	2201      	movs	r2, #1
 8011a6e:	409a      	lsls	r2, r3
 8011a70:	4b19      	ldr	r3, [pc, #100]	; (8011ad8 <prvAddNewTaskToReadyList+0xc8>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4313      	orrs	r3, r2
 8011a76:	4a18      	ldr	r2, [pc, #96]	; (8011ad8 <prvAddNewTaskToReadyList+0xc8>)
 8011a78:	6013      	str	r3, [r2, #0]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7e:	4613      	mov	r3, r2
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	4413      	add	r3, r2
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	4a15      	ldr	r2, [pc, #84]	; (8011adc <prvAddNewTaskToReadyList+0xcc>)
 8011a88:	441a      	add	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	3304      	adds	r3, #4
 8011a8e:	4619      	mov	r1, r3
 8011a90:	4610      	mov	r0, r2
 8011a92:	f7fe fef6 	bl	8010882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011a96:	f001 f839 	bl	8012b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011a9a:	4b0d      	ldr	r3, [pc, #52]	; (8011ad0 <prvAddNewTaskToReadyList+0xc0>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00e      	beq.n	8011ac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011aa2:	4b0a      	ldr	r3, [pc, #40]	; (8011acc <prvAddNewTaskToReadyList+0xbc>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d207      	bcs.n	8011ac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <prvAddNewTaskToReadyList+0xd0>)
 8011ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ab6:	601a      	str	r2, [r3, #0]
 8011ab8:	f3bf 8f4f 	dsb	sy
 8011abc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	200006d8 	.word	0x200006d8
 8011acc:	200005d8 	.word	0x200005d8
 8011ad0:	200006e4 	.word	0x200006e4
 8011ad4:	200006f4 	.word	0x200006f4
 8011ad8:	200006e0 	.word	0x200006e0
 8011adc:	200005dc 	.word	0x200005dc
 8011ae0:	e000ed04 	.word	0xe000ed04

08011ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011aec:	2300      	movs	r3, #0
 8011aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d018      	beq.n	8011b28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011af6:	4b14      	ldr	r3, [pc, #80]	; (8011b48 <vTaskDelay+0x64>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00b      	beq.n	8011b16 <vTaskDelay+0x32>
 8011afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b02:	b672      	cpsid	i
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	b662      	cpsie	i
 8011b12:	60bb      	str	r3, [r7, #8]
 8011b14:	e7fe      	b.n	8011b14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011b16:	f000 f87d 	bl	8011c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f000 fe55 	bl	80127cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011b22:	f000 f885 	bl	8011c30 <xTaskResumeAll>
 8011b26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d107      	bne.n	8011b3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011b2e:	4b07      	ldr	r3, [pc, #28]	; (8011b4c <vTaskDelay+0x68>)
 8011b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b3e:	bf00      	nop
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	20000700 	.word	0x20000700
 8011b4c:	e000ed04 	.word	0xe000ed04

08011b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b08a      	sub	sp, #40	; 0x28
 8011b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011b56:	2300      	movs	r3, #0
 8011b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011b5e:	463a      	mov	r2, r7
 8011b60:	1d39      	adds	r1, r7, #4
 8011b62:	f107 0308 	add.w	r3, r7, #8
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7ee ff18 	bl	800099c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011b6c:	6839      	ldr	r1, [r7, #0]
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	9202      	str	r2, [sp, #8]
 8011b74:	9301      	str	r3, [sp, #4]
 8011b76:	2300      	movs	r3, #0
 8011b78:	9300      	str	r3, [sp, #0]
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	460a      	mov	r2, r1
 8011b7e:	491f      	ldr	r1, [pc, #124]	; (8011bfc <vTaskStartScheduler+0xac>)
 8011b80:	481f      	ldr	r0, [pc, #124]	; (8011c00 <vTaskStartScheduler+0xb0>)
 8011b82:	f7ff fe16 	bl	80117b2 <xTaskCreateStatic>
 8011b86:	4602      	mov	r2, r0
 8011b88:	4b1e      	ldr	r3, [pc, #120]	; (8011c04 <vTaskStartScheduler+0xb4>)
 8011b8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011b8c:	4b1d      	ldr	r3, [pc, #116]	; (8011c04 <vTaskStartScheduler+0xb4>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d002      	beq.n	8011b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011b94:	2301      	movs	r3, #1
 8011b96:	617b      	str	r3, [r7, #20]
 8011b98:	e001      	b.n	8011b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d117      	bne.n	8011bd4 <vTaskStartScheduler+0x84>
 8011ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba8:	b672      	cpsid	i
 8011baa:	f383 8811 	msr	BASEPRI, r3
 8011bae:	f3bf 8f6f 	isb	sy
 8011bb2:	f3bf 8f4f 	dsb	sy
 8011bb6:	b662      	cpsie	i
 8011bb8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011bba:	4b13      	ldr	r3, [pc, #76]	; (8011c08 <vTaskStartScheduler+0xb8>)
 8011bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8011bc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011bc2:	4b12      	ldr	r3, [pc, #72]	; (8011c0c <vTaskStartScheduler+0xbc>)
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011bc8:	4b11      	ldr	r3, [pc, #68]	; (8011c10 <vTaskStartScheduler+0xc0>)
 8011bca:	2200      	movs	r2, #0
 8011bcc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011bce:	f000 feef 	bl	80129b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011bd2:	e00f      	b.n	8011bf4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bda:	d10b      	bne.n	8011bf4 <vTaskStartScheduler+0xa4>
 8011bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be0:	b672      	cpsid	i
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	b662      	cpsie	i
 8011bf0:	60fb      	str	r3, [r7, #12]
 8011bf2:	e7fe      	b.n	8011bf2 <vTaskStartScheduler+0xa2>
}
 8011bf4:	bf00      	nop
 8011bf6:	3718      	adds	r7, #24
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	080263d0 	.word	0x080263d0
 8011c00:	08012251 	.word	0x08012251
 8011c04:	200006fc 	.word	0x200006fc
 8011c08:	200006f8 	.word	0x200006f8
 8011c0c:	200006e4 	.word	0x200006e4
 8011c10:	200006dc 	.word	0x200006dc

08011c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011c14:	b480      	push	{r7}
 8011c16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011c18:	4b04      	ldr	r3, [pc, #16]	; (8011c2c <vTaskSuspendAll+0x18>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	4a03      	ldr	r2, [pc, #12]	; (8011c2c <vTaskSuspendAll+0x18>)
 8011c20:	6013      	str	r3, [r2, #0]
}
 8011c22:	bf00      	nop
 8011c24:	46bd      	mov	sp, r7
 8011c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2a:	4770      	bx	lr
 8011c2c:	20000700 	.word	0x20000700

08011c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011c36:	2300      	movs	r3, #0
 8011c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011c3e:	4b42      	ldr	r3, [pc, #264]	; (8011d48 <xTaskResumeAll+0x118>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d10b      	bne.n	8011c5e <xTaskResumeAll+0x2e>
 8011c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4a:	b672      	cpsid	i
 8011c4c:	f383 8811 	msr	BASEPRI, r3
 8011c50:	f3bf 8f6f 	isb	sy
 8011c54:	f3bf 8f4f 	dsb	sy
 8011c58:	b662      	cpsie	i
 8011c5a:	603b      	str	r3, [r7, #0]
 8011c5c:	e7fe      	b.n	8011c5c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011c5e:	f000 ff23 	bl	8012aa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011c62:	4b39      	ldr	r3, [pc, #228]	; (8011d48 <xTaskResumeAll+0x118>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	3b01      	subs	r3, #1
 8011c68:	4a37      	ldr	r2, [pc, #220]	; (8011d48 <xTaskResumeAll+0x118>)
 8011c6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c6c:	4b36      	ldr	r3, [pc, #216]	; (8011d48 <xTaskResumeAll+0x118>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d161      	bne.n	8011d38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011c74:	4b35      	ldr	r3, [pc, #212]	; (8011d4c <xTaskResumeAll+0x11c>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d05d      	beq.n	8011d38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c7c:	e02e      	b.n	8011cdc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011c7e:	4b34      	ldr	r3, [pc, #208]	; (8011d50 <xTaskResumeAll+0x120>)
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	3318      	adds	r3, #24
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7fe fe56 	bl	801093c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	3304      	adds	r3, #4
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7fe fe51 	bl	801093c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	409a      	lsls	r2, r3
 8011ca2:	4b2c      	ldr	r3, [pc, #176]	; (8011d54 <xTaskResumeAll+0x124>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	4a2a      	ldr	r2, [pc, #168]	; (8011d54 <xTaskResumeAll+0x124>)
 8011caa:	6013      	str	r3, [r2, #0]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	4413      	add	r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	4a27      	ldr	r2, [pc, #156]	; (8011d58 <xTaskResumeAll+0x128>)
 8011cba:	441a      	add	r2, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	3304      	adds	r3, #4
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4610      	mov	r0, r2
 8011cc4:	f7fe fddd 	bl	8010882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ccc:	4b23      	ldr	r3, [pc, #140]	; (8011d5c <xTaskResumeAll+0x12c>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d302      	bcc.n	8011cdc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011cd6:	4b22      	ldr	r3, [pc, #136]	; (8011d60 <xTaskResumeAll+0x130>)
 8011cd8:	2201      	movs	r2, #1
 8011cda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011cdc:	4b1c      	ldr	r3, [pc, #112]	; (8011d50 <xTaskResumeAll+0x120>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1cc      	bne.n	8011c7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d001      	beq.n	8011cee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011cea:	f000 fb67 	bl	80123bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011cee:	4b1d      	ldr	r3, [pc, #116]	; (8011d64 <xTaskResumeAll+0x134>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d010      	beq.n	8011d1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011cfa:	f000 f859 	bl	8011db0 <xTaskIncrementTick>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d002      	beq.n	8011d0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011d04:	4b16      	ldr	r3, [pc, #88]	; (8011d60 <xTaskResumeAll+0x130>)
 8011d06:	2201      	movs	r2, #1
 8011d08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d1f1      	bne.n	8011cfa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011d16:	4b13      	ldr	r3, [pc, #76]	; (8011d64 <xTaskResumeAll+0x134>)
 8011d18:	2200      	movs	r2, #0
 8011d1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011d1c:	4b10      	ldr	r3, [pc, #64]	; (8011d60 <xTaskResumeAll+0x130>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d009      	beq.n	8011d38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011d24:	2301      	movs	r3, #1
 8011d26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011d28:	4b0f      	ldr	r3, [pc, #60]	; (8011d68 <xTaskResumeAll+0x138>)
 8011d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d2e:	601a      	str	r2, [r3, #0]
 8011d30:	f3bf 8f4f 	dsb	sy
 8011d34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011d38:	f000 fee8 	bl	8012b0c <vPortExitCritical>

	return xAlreadyYielded;
 8011d3c:	68bb      	ldr	r3, [r7, #8]
}
 8011d3e:	4618      	mov	r0, r3
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	20000700 	.word	0x20000700
 8011d4c:	200006d8 	.word	0x200006d8
 8011d50:	20000698 	.word	0x20000698
 8011d54:	200006e0 	.word	0x200006e0
 8011d58:	200005dc 	.word	0x200005dc
 8011d5c:	200005d8 	.word	0x200005d8
 8011d60:	200006ec 	.word	0x200006ec
 8011d64:	200006e8 	.word	0x200006e8
 8011d68:	e000ed04 	.word	0xe000ed04

08011d6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011d72:	4b05      	ldr	r3, [pc, #20]	; (8011d88 <xTaskGetTickCount+0x1c>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011d78:	687b      	ldr	r3, [r7, #4]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	370c      	adds	r7, #12
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr
 8011d86:	bf00      	nop
 8011d88:	200006dc 	.word	0x200006dc

08011d8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d92:	f000 ff69 	bl	8012c68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011d96:	2300      	movs	r3, #0
 8011d98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011d9a:	4b04      	ldr	r3, [pc, #16]	; (8011dac <xTaskGetTickCountFromISR+0x20>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011da0:	683b      	ldr	r3, [r7, #0]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3708      	adds	r7, #8
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	200006dc 	.word	0x200006dc

08011db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011db6:	2300      	movs	r3, #0
 8011db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dba:	4b51      	ldr	r3, [pc, #324]	; (8011f00 <xTaskIncrementTick+0x150>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	f040 808e 	bne.w	8011ee0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011dc4:	4b4f      	ldr	r3, [pc, #316]	; (8011f04 <xTaskIncrementTick+0x154>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011dcc:	4a4d      	ldr	r2, [pc, #308]	; (8011f04 <xTaskIncrementTick+0x154>)
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d121      	bne.n	8011e1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011dd8:	4b4b      	ldr	r3, [pc, #300]	; (8011f08 <xTaskIncrementTick+0x158>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00b      	beq.n	8011dfa <xTaskIncrementTick+0x4a>
 8011de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de6:	b672      	cpsid	i
 8011de8:	f383 8811 	msr	BASEPRI, r3
 8011dec:	f3bf 8f6f 	isb	sy
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	b662      	cpsie	i
 8011df6:	603b      	str	r3, [r7, #0]
 8011df8:	e7fe      	b.n	8011df8 <xTaskIncrementTick+0x48>
 8011dfa:	4b43      	ldr	r3, [pc, #268]	; (8011f08 <xTaskIncrementTick+0x158>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	60fb      	str	r3, [r7, #12]
 8011e00:	4b42      	ldr	r3, [pc, #264]	; (8011f0c <xTaskIncrementTick+0x15c>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	4a40      	ldr	r2, [pc, #256]	; (8011f08 <xTaskIncrementTick+0x158>)
 8011e06:	6013      	str	r3, [r2, #0]
 8011e08:	4a40      	ldr	r2, [pc, #256]	; (8011f0c <xTaskIncrementTick+0x15c>)
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	6013      	str	r3, [r2, #0]
 8011e0e:	4b40      	ldr	r3, [pc, #256]	; (8011f10 <xTaskIncrementTick+0x160>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	3301      	adds	r3, #1
 8011e14:	4a3e      	ldr	r2, [pc, #248]	; (8011f10 <xTaskIncrementTick+0x160>)
 8011e16:	6013      	str	r3, [r2, #0]
 8011e18:	f000 fad0 	bl	80123bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011e1c:	4b3d      	ldr	r3, [pc, #244]	; (8011f14 <xTaskIncrementTick+0x164>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	693a      	ldr	r2, [r7, #16]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d34d      	bcc.n	8011ec2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e26:	4b38      	ldr	r3, [pc, #224]	; (8011f08 <xTaskIncrementTick+0x158>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d101      	bne.n	8011e34 <xTaskIncrementTick+0x84>
 8011e30:	2301      	movs	r3, #1
 8011e32:	e000      	b.n	8011e36 <xTaskIncrementTick+0x86>
 8011e34:	2300      	movs	r3, #0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d004      	beq.n	8011e44 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e3a:	4b36      	ldr	r3, [pc, #216]	; (8011f14 <xTaskIncrementTick+0x164>)
 8011e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e40:	601a      	str	r2, [r3, #0]
					break;
 8011e42:	e03e      	b.n	8011ec2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011e44:	4b30      	ldr	r3, [pc, #192]	; (8011f08 <xTaskIncrementTick+0x158>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011e54:	693a      	ldr	r2, [r7, #16]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d203      	bcs.n	8011e64 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011e5c:	4a2d      	ldr	r2, [pc, #180]	; (8011f14 <xTaskIncrementTick+0x164>)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6013      	str	r3, [r2, #0]
						break;
 8011e62:	e02e      	b.n	8011ec2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	3304      	adds	r3, #4
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7fe fd67 	bl	801093c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d004      	beq.n	8011e80 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	3318      	adds	r3, #24
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fe fd5e 	bl	801093c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e84:	2201      	movs	r2, #1
 8011e86:	409a      	lsls	r2, r3
 8011e88:	4b23      	ldr	r3, [pc, #140]	; (8011f18 <xTaskIncrementTick+0x168>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	4313      	orrs	r3, r2
 8011e8e:	4a22      	ldr	r2, [pc, #136]	; (8011f18 <xTaskIncrementTick+0x168>)
 8011e90:	6013      	str	r3, [r2, #0]
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e96:	4613      	mov	r3, r2
 8011e98:	009b      	lsls	r3, r3, #2
 8011e9a:	4413      	add	r3, r2
 8011e9c:	009b      	lsls	r3, r3, #2
 8011e9e:	4a1f      	ldr	r2, [pc, #124]	; (8011f1c <xTaskIncrementTick+0x16c>)
 8011ea0:	441a      	add	r2, r3
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	4610      	mov	r0, r2
 8011eaa:	f7fe fcea 	bl	8010882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eb2:	4b1b      	ldr	r3, [pc, #108]	; (8011f20 <xTaskIncrementTick+0x170>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d3b4      	bcc.n	8011e26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ec0:	e7b1      	b.n	8011e26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011ec2:	4b17      	ldr	r3, [pc, #92]	; (8011f20 <xTaskIncrementTick+0x170>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ec8:	4914      	ldr	r1, [pc, #80]	; (8011f1c <xTaskIncrementTick+0x16c>)
 8011eca:	4613      	mov	r3, r2
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	4413      	add	r3, r2
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	440b      	add	r3, r1
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d907      	bls.n	8011eea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8011eda:	2301      	movs	r3, #1
 8011edc:	617b      	str	r3, [r7, #20]
 8011ede:	e004      	b.n	8011eea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011ee0:	4b10      	ldr	r3, [pc, #64]	; (8011f24 <xTaskIncrementTick+0x174>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	4a0f      	ldr	r2, [pc, #60]	; (8011f24 <xTaskIncrementTick+0x174>)
 8011ee8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011eea:	4b0f      	ldr	r3, [pc, #60]	; (8011f28 <xTaskIncrementTick+0x178>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011ef6:	697b      	ldr	r3, [r7, #20]
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3718      	adds	r7, #24
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	20000700 	.word	0x20000700
 8011f04:	200006dc 	.word	0x200006dc
 8011f08:	20000690 	.word	0x20000690
 8011f0c:	20000694 	.word	0x20000694
 8011f10:	200006f0 	.word	0x200006f0
 8011f14:	200006f8 	.word	0x200006f8
 8011f18:	200006e0 	.word	0x200006e0
 8011f1c:	200005dc 	.word	0x200005dc
 8011f20:	200005d8 	.word	0x200005d8
 8011f24:	200006e8 	.word	0x200006e8
 8011f28:	200006ec 	.word	0x200006ec

08011f2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b088      	sub	sp, #32
 8011f30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011f32:	4b3a      	ldr	r3, [pc, #232]	; (801201c <vTaskSwitchContext+0xf0>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d003      	beq.n	8011f42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011f3a:	4b39      	ldr	r3, [pc, #228]	; (8012020 <vTaskSwitchContext+0xf4>)
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011f40:	e067      	b.n	8012012 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8011f42:	4b37      	ldr	r3, [pc, #220]	; (8012020 <vTaskSwitchContext+0xf4>)
 8011f44:	2200      	movs	r2, #0
 8011f46:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011f48:	4b36      	ldr	r3, [pc, #216]	; (8012024 <vTaskSwitchContext+0xf8>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f4e:	61fb      	str	r3, [r7, #28]
 8011f50:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011f54:	61bb      	str	r3, [r7, #24]
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	69ba      	ldr	r2, [r7, #24]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d111      	bne.n	8011f84 <vTaskSwitchContext+0x58>
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	3304      	adds	r3, #4
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	69ba      	ldr	r2, [r7, #24]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d10b      	bne.n	8011f84 <vTaskSwitchContext+0x58>
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	3308      	adds	r3, #8
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	69ba      	ldr	r2, [r7, #24]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d105      	bne.n	8011f84 <vTaskSwitchContext+0x58>
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	330c      	adds	r3, #12
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	69ba      	ldr	r2, [r7, #24]
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d008      	beq.n	8011f96 <vTaskSwitchContext+0x6a>
 8011f84:	4b27      	ldr	r3, [pc, #156]	; (8012024 <vTaskSwitchContext+0xf8>)
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	4b26      	ldr	r3, [pc, #152]	; (8012024 <vTaskSwitchContext+0xf8>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	3334      	adds	r3, #52	; 0x34
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4610      	mov	r0, r2
 8011f92:	f7ee fcf0 	bl	8000976 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011f96:	4b24      	ldr	r3, [pc, #144]	; (8012028 <vTaskSwitchContext+0xfc>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	fab3 f383 	clz	r3, r3
 8011fa2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011fa4:	7afb      	ldrb	r3, [r7, #11]
 8011fa6:	f1c3 031f 	rsb	r3, r3, #31
 8011faa:	617b      	str	r3, [r7, #20]
 8011fac:	491f      	ldr	r1, [pc, #124]	; (801202c <vTaskSwitchContext+0x100>)
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	4413      	add	r3, r2
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	440b      	add	r3, r1
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d10b      	bne.n	8011fd8 <vTaskSwitchContext+0xac>
	__asm volatile
 8011fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc4:	b672      	cpsid	i
 8011fc6:	f383 8811 	msr	BASEPRI, r3
 8011fca:	f3bf 8f6f 	isb	sy
 8011fce:	f3bf 8f4f 	dsb	sy
 8011fd2:	b662      	cpsie	i
 8011fd4:	607b      	str	r3, [r7, #4]
 8011fd6:	e7fe      	b.n	8011fd6 <vTaskSwitchContext+0xaa>
 8011fd8:	697a      	ldr	r2, [r7, #20]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	4413      	add	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4a12      	ldr	r2, [pc, #72]	; (801202c <vTaskSwitchContext+0x100>)
 8011fe4:	4413      	add	r3, r2
 8011fe6:	613b      	str	r3, [r7, #16]
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	685a      	ldr	r2, [r3, #4]
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	605a      	str	r2, [r3, #4]
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	685a      	ldr	r2, [r3, #4]
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	3308      	adds	r3, #8
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d104      	bne.n	8012008 <vTaskSwitchContext+0xdc>
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	685a      	ldr	r2, [r3, #4]
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	605a      	str	r2, [r3, #4]
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	4a05      	ldr	r2, [pc, #20]	; (8012024 <vTaskSwitchContext+0xf8>)
 8012010:	6013      	str	r3, [r2, #0]
}
 8012012:	bf00      	nop
 8012014:	3720      	adds	r7, #32
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	20000700 	.word	0x20000700
 8012020:	200006ec 	.word	0x200006ec
 8012024:	200005d8 	.word	0x200005d8
 8012028:	200006e0 	.word	0x200006e0
 801202c:	200005dc 	.word	0x200005dc

08012030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b084      	sub	sp, #16
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d10b      	bne.n	8012058 <vTaskPlaceOnEventList+0x28>
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	b672      	cpsid	i
 8012046:	f383 8811 	msr	BASEPRI, r3
 801204a:	f3bf 8f6f 	isb	sy
 801204e:	f3bf 8f4f 	dsb	sy
 8012052:	b662      	cpsie	i
 8012054:	60fb      	str	r3, [r7, #12]
 8012056:	e7fe      	b.n	8012056 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012058:	4b07      	ldr	r3, [pc, #28]	; (8012078 <vTaskPlaceOnEventList+0x48>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3318      	adds	r3, #24
 801205e:	4619      	mov	r1, r3
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f7fe fc32 	bl	80108ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012066:	2101      	movs	r1, #1
 8012068:	6838      	ldr	r0, [r7, #0]
 801206a:	f000 fbaf 	bl	80127cc <prvAddCurrentTaskToDelayedList>
}
 801206e:	bf00      	nop
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	200005d8 	.word	0x200005d8

0801207c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b086      	sub	sp, #24
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d10b      	bne.n	80120aa <xTaskRemoveFromEventList+0x2e>
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	b672      	cpsid	i
 8012098:	f383 8811 	msr	BASEPRI, r3
 801209c:	f3bf 8f6f 	isb	sy
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	b662      	cpsie	i
 80120a6:	60fb      	str	r3, [r7, #12]
 80120a8:	e7fe      	b.n	80120a8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	3318      	adds	r3, #24
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fe fc44 	bl	801093c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120b4:	4b1d      	ldr	r3, [pc, #116]	; (801212c <xTaskRemoveFromEventList+0xb0>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d11c      	bne.n	80120f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	3304      	adds	r3, #4
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fe fc3b 	bl	801093c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ca:	2201      	movs	r2, #1
 80120cc:	409a      	lsls	r2, r3
 80120ce:	4b18      	ldr	r3, [pc, #96]	; (8012130 <xTaskRemoveFromEventList+0xb4>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4313      	orrs	r3, r2
 80120d4:	4a16      	ldr	r2, [pc, #88]	; (8012130 <xTaskRemoveFromEventList+0xb4>)
 80120d6:	6013      	str	r3, [r2, #0]
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120dc:	4613      	mov	r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	4413      	add	r3, r2
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	4a13      	ldr	r2, [pc, #76]	; (8012134 <xTaskRemoveFromEventList+0xb8>)
 80120e6:	441a      	add	r2, r3
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	3304      	adds	r3, #4
 80120ec:	4619      	mov	r1, r3
 80120ee:	4610      	mov	r0, r2
 80120f0:	f7fe fbc7 	bl	8010882 <vListInsertEnd>
 80120f4:	e005      	b.n	8012102 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	3318      	adds	r3, #24
 80120fa:	4619      	mov	r1, r3
 80120fc:	480e      	ldr	r0, [pc, #56]	; (8012138 <xTaskRemoveFromEventList+0xbc>)
 80120fe:	f7fe fbc0 	bl	8010882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012106:	4b0d      	ldr	r3, [pc, #52]	; (801213c <xTaskRemoveFromEventList+0xc0>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801210c:	429a      	cmp	r2, r3
 801210e:	d905      	bls.n	801211c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012110:	2301      	movs	r3, #1
 8012112:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012114:	4b0a      	ldr	r3, [pc, #40]	; (8012140 <xTaskRemoveFromEventList+0xc4>)
 8012116:	2201      	movs	r2, #1
 8012118:	601a      	str	r2, [r3, #0]
 801211a:	e001      	b.n	8012120 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801211c:	2300      	movs	r3, #0
 801211e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012120:	697b      	ldr	r3, [r7, #20]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	20000700 	.word	0x20000700
 8012130:	200006e0 	.word	0x200006e0
 8012134:	200005dc 	.word	0x200005dc
 8012138:	20000698 	.word	0x20000698
 801213c:	200005d8 	.word	0x200005d8
 8012140:	200006ec 	.word	0x200006ec

08012144 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801214c:	4b06      	ldr	r3, [pc, #24]	; (8012168 <vTaskInternalSetTimeOutState+0x24>)
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012154:	4b05      	ldr	r3, [pc, #20]	; (801216c <vTaskInternalSetTimeOutState+0x28>)
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	605a      	str	r2, [r3, #4]
}
 801215c:	bf00      	nop
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr
 8012168:	200006f0 	.word	0x200006f0
 801216c:	200006dc 	.word	0x200006dc

08012170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b088      	sub	sp, #32
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10b      	bne.n	8012198 <xTaskCheckForTimeOut+0x28>
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	b672      	cpsid	i
 8012186:	f383 8811 	msr	BASEPRI, r3
 801218a:	f3bf 8f6f 	isb	sy
 801218e:	f3bf 8f4f 	dsb	sy
 8012192:	b662      	cpsie	i
 8012194:	613b      	str	r3, [r7, #16]
 8012196:	e7fe      	b.n	8012196 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d10b      	bne.n	80121b6 <xTaskCheckForTimeOut+0x46>
 801219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a2:	b672      	cpsid	i
 80121a4:	f383 8811 	msr	BASEPRI, r3
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	b662      	cpsie	i
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	e7fe      	b.n	80121b4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80121b6:	f000 fc77 	bl	8012aa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80121ba:	4b1d      	ldr	r3, [pc, #116]	; (8012230 <xTaskCheckForTimeOut+0xc0>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	69ba      	ldr	r2, [r7, #24]
 80121c6:	1ad3      	subs	r3, r2, r3
 80121c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121d2:	d102      	bne.n	80121da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80121d4:	2300      	movs	r3, #0
 80121d6:	61fb      	str	r3, [r7, #28]
 80121d8:	e023      	b.n	8012222 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	4b15      	ldr	r3, [pc, #84]	; (8012234 <xTaskCheckForTimeOut+0xc4>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d007      	beq.n	80121f6 <xTaskCheckForTimeOut+0x86>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	69ba      	ldr	r2, [r7, #24]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d302      	bcc.n	80121f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80121f0:	2301      	movs	r3, #1
 80121f2:	61fb      	str	r3, [r7, #28]
 80121f4:	e015      	b.n	8012222 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	697a      	ldr	r2, [r7, #20]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d20b      	bcs.n	8012218 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	681a      	ldr	r2, [r3, #0]
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	1ad2      	subs	r2, r2, r3
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7ff ff99 	bl	8012144 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012212:	2300      	movs	r3, #0
 8012214:	61fb      	str	r3, [r7, #28]
 8012216:	e004      	b.n	8012222 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	2200      	movs	r2, #0
 801221c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801221e:	2301      	movs	r3, #1
 8012220:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012222:	f000 fc73 	bl	8012b0c <vPortExitCritical>

	return xReturn;
 8012226:	69fb      	ldr	r3, [r7, #28]
}
 8012228:	4618      	mov	r0, r3
 801222a:	3720      	adds	r7, #32
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	200006dc 	.word	0x200006dc
 8012234:	200006f0 	.word	0x200006f0

08012238 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012238:	b480      	push	{r7}
 801223a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801223c:	4b03      	ldr	r3, [pc, #12]	; (801224c <vTaskMissedYield+0x14>)
 801223e:	2201      	movs	r2, #1
 8012240:	601a      	str	r2, [r3, #0]
}
 8012242:	bf00      	nop
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr
 801224c:	200006ec 	.word	0x200006ec

08012250 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012258:	f000 f854 	bl	8012304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801225c:	4b07      	ldr	r3, [pc, #28]	; (801227c <prvIdleTask+0x2c>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b01      	cmp	r3, #1
 8012262:	d907      	bls.n	8012274 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012264:	4b06      	ldr	r3, [pc, #24]	; (8012280 <prvIdleTask+0x30>)
 8012266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801226a:	601a      	str	r2, [r3, #0]
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012274:	f7ee fb78 	bl	8000968 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012278:	e7ee      	b.n	8012258 <prvIdleTask+0x8>
 801227a:	bf00      	nop
 801227c:	200005dc 	.word	0x200005dc
 8012280:	e000ed04 	.word	0xe000ed04

08012284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801228a:	2300      	movs	r3, #0
 801228c:	607b      	str	r3, [r7, #4]
 801228e:	e00c      	b.n	80122aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	4613      	mov	r3, r2
 8012294:	009b      	lsls	r3, r3, #2
 8012296:	4413      	add	r3, r2
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	4a12      	ldr	r2, [pc, #72]	; (80122e4 <prvInitialiseTaskLists+0x60>)
 801229c:	4413      	add	r3, r2
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fe fac2 	bl	8010828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	3301      	adds	r3, #1
 80122a8:	607b      	str	r3, [r7, #4]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2b06      	cmp	r3, #6
 80122ae:	d9ef      	bls.n	8012290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80122b0:	480d      	ldr	r0, [pc, #52]	; (80122e8 <prvInitialiseTaskLists+0x64>)
 80122b2:	f7fe fab9 	bl	8010828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80122b6:	480d      	ldr	r0, [pc, #52]	; (80122ec <prvInitialiseTaskLists+0x68>)
 80122b8:	f7fe fab6 	bl	8010828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80122bc:	480c      	ldr	r0, [pc, #48]	; (80122f0 <prvInitialiseTaskLists+0x6c>)
 80122be:	f7fe fab3 	bl	8010828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80122c2:	480c      	ldr	r0, [pc, #48]	; (80122f4 <prvInitialiseTaskLists+0x70>)
 80122c4:	f7fe fab0 	bl	8010828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80122c8:	480b      	ldr	r0, [pc, #44]	; (80122f8 <prvInitialiseTaskLists+0x74>)
 80122ca:	f7fe faad 	bl	8010828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80122ce:	4b0b      	ldr	r3, [pc, #44]	; (80122fc <prvInitialiseTaskLists+0x78>)
 80122d0:	4a05      	ldr	r2, [pc, #20]	; (80122e8 <prvInitialiseTaskLists+0x64>)
 80122d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80122d4:	4b0a      	ldr	r3, [pc, #40]	; (8012300 <prvInitialiseTaskLists+0x7c>)
 80122d6:	4a05      	ldr	r2, [pc, #20]	; (80122ec <prvInitialiseTaskLists+0x68>)
 80122d8:	601a      	str	r2, [r3, #0]
}
 80122da:	bf00      	nop
 80122dc:	3708      	adds	r7, #8
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	200005dc 	.word	0x200005dc
 80122e8:	20000668 	.word	0x20000668
 80122ec:	2000067c 	.word	0x2000067c
 80122f0:	20000698 	.word	0x20000698
 80122f4:	200006ac 	.word	0x200006ac
 80122f8:	200006c4 	.word	0x200006c4
 80122fc:	20000690 	.word	0x20000690
 8012300:	20000694 	.word	0x20000694

08012304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801230a:	e019      	b.n	8012340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801230c:	f000 fbcc 	bl	8012aa8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012310:	4b0f      	ldr	r3, [pc, #60]	; (8012350 <prvCheckTasksWaitingTermination+0x4c>)
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	3304      	adds	r3, #4
 801231c:	4618      	mov	r0, r3
 801231e:	f7fe fb0d 	bl	801093c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012322:	4b0c      	ldr	r3, [pc, #48]	; (8012354 <prvCheckTasksWaitingTermination+0x50>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	3b01      	subs	r3, #1
 8012328:	4a0a      	ldr	r2, [pc, #40]	; (8012354 <prvCheckTasksWaitingTermination+0x50>)
 801232a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801232c:	4b0a      	ldr	r3, [pc, #40]	; (8012358 <prvCheckTasksWaitingTermination+0x54>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	3b01      	subs	r3, #1
 8012332:	4a09      	ldr	r2, [pc, #36]	; (8012358 <prvCheckTasksWaitingTermination+0x54>)
 8012334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012336:	f000 fbe9 	bl	8012b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f000 f80e 	bl	801235c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012340:	4b05      	ldr	r3, [pc, #20]	; (8012358 <prvCheckTasksWaitingTermination+0x54>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1e1      	bne.n	801230c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012348:	bf00      	nop
 801234a:	3708      	adds	r7, #8
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}
 8012350:	200006ac 	.word	0x200006ac
 8012354:	200006d8 	.word	0x200006d8
 8012358:	200006c0 	.word	0x200006c0

0801235c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801236a:	2b00      	cmp	r3, #0
 801236c:	d108      	bne.n	8012380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012372:	4618      	mov	r0, r3
 8012374:	f000 fd86 	bl	8012e84 <vPortFree>
				vPortFree( pxTCB );
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 fd83 	bl	8012e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801237e:	e019      	b.n	80123b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012386:	2b01      	cmp	r3, #1
 8012388:	d103      	bne.n	8012392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 fd7a 	bl	8012e84 <vPortFree>
	}
 8012390:	e010      	b.n	80123b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8012398:	2b02      	cmp	r3, #2
 801239a:	d00b      	beq.n	80123b4 <prvDeleteTCB+0x58>
 801239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a0:	b672      	cpsid	i
 80123a2:	f383 8811 	msr	BASEPRI, r3
 80123a6:	f3bf 8f6f 	isb	sy
 80123aa:	f3bf 8f4f 	dsb	sy
 80123ae:	b662      	cpsie	i
 80123b0:	60fb      	str	r3, [r7, #12]
 80123b2:	e7fe      	b.n	80123b2 <prvDeleteTCB+0x56>
	}
 80123b4:	bf00      	nop
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80123bc:	b480      	push	{r7}
 80123be:	b083      	sub	sp, #12
 80123c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123c2:	4b0f      	ldr	r3, [pc, #60]	; (8012400 <prvResetNextTaskUnblockTime+0x44>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d101      	bne.n	80123d0 <prvResetNextTaskUnblockTime+0x14>
 80123cc:	2301      	movs	r3, #1
 80123ce:	e000      	b.n	80123d2 <prvResetNextTaskUnblockTime+0x16>
 80123d0:	2300      	movs	r3, #0
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d004      	beq.n	80123e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80123d6:	4b0b      	ldr	r3, [pc, #44]	; (8012404 <prvResetNextTaskUnblockTime+0x48>)
 80123d8:	f04f 32ff 	mov.w	r2, #4294967295
 80123dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80123de:	e008      	b.n	80123f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80123e0:	4b07      	ldr	r3, [pc, #28]	; (8012400 <prvResetNextTaskUnblockTime+0x44>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	4a05      	ldr	r2, [pc, #20]	; (8012404 <prvResetNextTaskUnblockTime+0x48>)
 80123f0:	6013      	str	r3, [r2, #0]
}
 80123f2:	bf00      	nop
 80123f4:	370c      	adds	r7, #12
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	20000690 	.word	0x20000690
 8012404:	200006f8 	.word	0x200006f8

08012408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012408:	b480      	push	{r7}
 801240a:	b083      	sub	sp, #12
 801240c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801240e:	4b0b      	ldr	r3, [pc, #44]	; (801243c <xTaskGetSchedulerState+0x34>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d102      	bne.n	801241c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012416:	2301      	movs	r3, #1
 8012418:	607b      	str	r3, [r7, #4]
 801241a:	e008      	b.n	801242e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801241c:	4b08      	ldr	r3, [pc, #32]	; (8012440 <xTaskGetSchedulerState+0x38>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d102      	bne.n	801242a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012424:	2302      	movs	r3, #2
 8012426:	607b      	str	r3, [r7, #4]
 8012428:	e001      	b.n	801242e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801242a:	2300      	movs	r3, #0
 801242c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801242e:	687b      	ldr	r3, [r7, #4]
	}
 8012430:	4618      	mov	r0, r3
 8012432:	370c      	adds	r7, #12
 8012434:	46bd      	mov	sp, r7
 8012436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243a:	4770      	bx	lr
 801243c:	200006e4 	.word	0x200006e4
 8012440:	20000700 	.word	0x20000700

08012444 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012444:	b580      	push	{r7, lr}
 8012446:	b084      	sub	sp, #16
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012450:	2300      	movs	r3, #0
 8012452:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d06e      	beq.n	8012538 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801245e:	4b39      	ldr	r3, [pc, #228]	; (8012544 <xTaskPriorityInherit+0x100>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012464:	429a      	cmp	r2, r3
 8012466:	d25e      	bcs.n	8012526 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	699b      	ldr	r3, [r3, #24]
 801246c:	2b00      	cmp	r3, #0
 801246e:	db06      	blt.n	801247e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012470:	4b34      	ldr	r3, [pc, #208]	; (8012544 <xTaskPriorityInherit+0x100>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012476:	f1c3 0207 	rsb	r2, r3, #7
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	6959      	ldr	r1, [r3, #20]
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012486:	4613      	mov	r3, r2
 8012488:	009b      	lsls	r3, r3, #2
 801248a:	4413      	add	r3, r2
 801248c:	009b      	lsls	r3, r3, #2
 801248e:	4a2e      	ldr	r2, [pc, #184]	; (8012548 <xTaskPriorityInherit+0x104>)
 8012490:	4413      	add	r3, r2
 8012492:	4299      	cmp	r1, r3
 8012494:	d101      	bne.n	801249a <xTaskPriorityInherit+0x56>
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <xTaskPriorityInherit+0x58>
 801249a:	2300      	movs	r3, #0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d03a      	beq.n	8012516 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	3304      	adds	r3, #4
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe fa49 	bl	801093c <uxListRemove>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d115      	bne.n	80124dc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124b4:	4924      	ldr	r1, [pc, #144]	; (8012548 <xTaskPriorityInherit+0x104>)
 80124b6:	4613      	mov	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4413      	add	r3, r2
 80124bc:	009b      	lsls	r3, r3, #2
 80124be:	440b      	add	r3, r1
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d10a      	bne.n	80124dc <xTaskPriorityInherit+0x98>
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ca:	2201      	movs	r2, #1
 80124cc:	fa02 f303 	lsl.w	r3, r2, r3
 80124d0:	43da      	mvns	r2, r3
 80124d2:	4b1e      	ldr	r3, [pc, #120]	; (801254c <xTaskPriorityInherit+0x108>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4013      	ands	r3, r2
 80124d8:	4a1c      	ldr	r2, [pc, #112]	; (801254c <xTaskPriorityInherit+0x108>)
 80124da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80124dc:	4b19      	ldr	r3, [pc, #100]	; (8012544 <xTaskPriorityInherit+0x100>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ea:	2201      	movs	r2, #1
 80124ec:	409a      	lsls	r2, r3
 80124ee:	4b17      	ldr	r3, [pc, #92]	; (801254c <xTaskPriorityInherit+0x108>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	4313      	orrs	r3, r2
 80124f4:	4a15      	ldr	r2, [pc, #84]	; (801254c <xTaskPriorityInherit+0x108>)
 80124f6:	6013      	str	r3, [r2, #0]
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124fc:	4613      	mov	r3, r2
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	4413      	add	r3, r2
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	4a10      	ldr	r2, [pc, #64]	; (8012548 <xTaskPriorityInherit+0x104>)
 8012506:	441a      	add	r2, r3
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	3304      	adds	r3, #4
 801250c:	4619      	mov	r1, r3
 801250e:	4610      	mov	r0, r2
 8012510:	f7fe f9b7 	bl	8010882 <vListInsertEnd>
 8012514:	e004      	b.n	8012520 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012516:	4b0b      	ldr	r3, [pc, #44]	; (8012544 <xTaskPriorityInherit+0x100>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012520:	2301      	movs	r3, #1
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	e008      	b.n	8012538 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801252a:	4b06      	ldr	r3, [pc, #24]	; (8012544 <xTaskPriorityInherit+0x100>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012530:	429a      	cmp	r2, r3
 8012532:	d201      	bcs.n	8012538 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012534:	2301      	movs	r3, #1
 8012536:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012538:	68fb      	ldr	r3, [r7, #12]
	}
 801253a:	4618      	mov	r0, r3
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	200005d8 	.word	0x200005d8
 8012548:	200005dc 	.word	0x200005dc
 801254c:	200006e0 	.word	0x200006e0

08012550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012550:	b580      	push	{r7, lr}
 8012552:	b086      	sub	sp, #24
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801255c:	2300      	movs	r3, #0
 801255e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d070      	beq.n	8012648 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012566:	4b3b      	ldr	r3, [pc, #236]	; (8012654 <xTaskPriorityDisinherit+0x104>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	693a      	ldr	r2, [r7, #16]
 801256c:	429a      	cmp	r2, r3
 801256e:	d00b      	beq.n	8012588 <xTaskPriorityDisinherit+0x38>
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	b672      	cpsid	i
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	b662      	cpsie	i
 8012584:	60fb      	str	r3, [r7, #12]
 8012586:	e7fe      	b.n	8012586 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10b      	bne.n	80125a8 <xTaskPriorityDisinherit+0x58>
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	b672      	cpsid	i
 8012596:	f383 8811 	msr	BASEPRI, r3
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	b662      	cpsie	i
 80125a4:	60bb      	str	r3, [r7, #8]
 80125a6:	e7fe      	b.n	80125a6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125ac:	1e5a      	subs	r2, r3, #1
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d044      	beq.n	8012648 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d140      	bne.n	8012648 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	3304      	adds	r3, #4
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fe f9b6 	bl	801093c <uxListRemove>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d115      	bne.n	8012602 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125da:	491f      	ldr	r1, [pc, #124]	; (8012658 <xTaskPriorityDisinherit+0x108>)
 80125dc:	4613      	mov	r3, r2
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	4413      	add	r3, r2
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	440b      	add	r3, r1
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d10a      	bne.n	8012602 <xTaskPriorityDisinherit+0xb2>
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f0:	2201      	movs	r2, #1
 80125f2:	fa02 f303 	lsl.w	r3, r2, r3
 80125f6:	43da      	mvns	r2, r3
 80125f8:	4b18      	ldr	r3, [pc, #96]	; (801265c <xTaskPriorityDisinherit+0x10c>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4013      	ands	r3, r2
 80125fe:	4a17      	ldr	r2, [pc, #92]	; (801265c <xTaskPriorityDisinherit+0x10c>)
 8012600:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801260e:	f1c3 0207 	rsb	r2, r3, #7
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801261a:	2201      	movs	r2, #1
 801261c:	409a      	lsls	r2, r3
 801261e:	4b0f      	ldr	r3, [pc, #60]	; (801265c <xTaskPriorityDisinherit+0x10c>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4313      	orrs	r3, r2
 8012624:	4a0d      	ldr	r2, [pc, #52]	; (801265c <xTaskPriorityDisinherit+0x10c>)
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801262c:	4613      	mov	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	4413      	add	r3, r2
 8012632:	009b      	lsls	r3, r3, #2
 8012634:	4a08      	ldr	r2, [pc, #32]	; (8012658 <xTaskPriorityDisinherit+0x108>)
 8012636:	441a      	add	r2, r3
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	3304      	adds	r3, #4
 801263c:	4619      	mov	r1, r3
 801263e:	4610      	mov	r0, r2
 8012640:	f7fe f91f 	bl	8010882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012644:	2301      	movs	r3, #1
 8012646:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012648:	697b      	ldr	r3, [r7, #20]
	}
 801264a:	4618      	mov	r0, r3
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	200005d8 	.word	0x200005d8
 8012658:	200005dc 	.word	0x200005dc
 801265c:	200006e0 	.word	0x200006e0

08012660 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012660:	b580      	push	{r7, lr}
 8012662:	b088      	sub	sp, #32
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801266e:	2301      	movs	r3, #1
 8012670:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 808a 	beq.w	801278e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801267e:	2b00      	cmp	r3, #0
 8012680:	d10b      	bne.n	801269a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8012682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012686:	b672      	cpsid	i
 8012688:	f383 8811 	msr	BASEPRI, r3
 801268c:	f3bf 8f6f 	isb	sy
 8012690:	f3bf 8f4f 	dsb	sy
 8012694:	b662      	cpsie	i
 8012696:	60fb      	str	r3, [r7, #12]
 8012698:	e7fe      	b.n	8012698 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801269e:	683a      	ldr	r2, [r7, #0]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d902      	bls.n	80126aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	61fb      	str	r3, [r7, #28]
 80126a8:	e002      	b.n	80126b0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80126aa:	69bb      	ldr	r3, [r7, #24]
 80126ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80126b0:	69bb      	ldr	r3, [r7, #24]
 80126b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126b4:	69fa      	ldr	r2, [r7, #28]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d069      	beq.n	801278e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126be:	697a      	ldr	r2, [r7, #20]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d164      	bne.n	801278e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80126c4:	4b34      	ldr	r3, [pc, #208]	; (8012798 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	69ba      	ldr	r2, [r7, #24]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d10b      	bne.n	80126e6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 80126ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d2:	b672      	cpsid	i
 80126d4:	f383 8811 	msr	BASEPRI, r3
 80126d8:	f3bf 8f6f 	isb	sy
 80126dc:	f3bf 8f4f 	dsb	sy
 80126e0:	b662      	cpsie	i
 80126e2:	60bb      	str	r3, [r7, #8]
 80126e4:	e7fe      	b.n	80126e4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80126e6:	69bb      	ldr	r3, [r7, #24]
 80126e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	69fa      	ldr	r2, [r7, #28]
 80126f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	699b      	ldr	r3, [r3, #24]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	db04      	blt.n	8012704 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	f1c3 0207 	rsb	r2, r3, #7
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012704:	69bb      	ldr	r3, [r7, #24]
 8012706:	6959      	ldr	r1, [r3, #20]
 8012708:	693a      	ldr	r2, [r7, #16]
 801270a:	4613      	mov	r3, r2
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	4413      	add	r3, r2
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	4a22      	ldr	r2, [pc, #136]	; (801279c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012714:	4413      	add	r3, r2
 8012716:	4299      	cmp	r1, r3
 8012718:	d101      	bne.n	801271e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 801271a:	2301      	movs	r3, #1
 801271c:	e000      	b.n	8012720 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801271e:	2300      	movs	r3, #0
 8012720:	2b00      	cmp	r3, #0
 8012722:	d034      	beq.n	801278e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	3304      	adds	r3, #4
 8012728:	4618      	mov	r0, r3
 801272a:	f7fe f907 	bl	801093c <uxListRemove>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d115      	bne.n	8012760 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012734:	69bb      	ldr	r3, [r7, #24]
 8012736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012738:	4918      	ldr	r1, [pc, #96]	; (801279c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801273a:	4613      	mov	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4413      	add	r3, r2
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	440b      	add	r3, r1
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d10a      	bne.n	8012760 <vTaskPriorityDisinheritAfterTimeout+0x100>
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801274e:	2201      	movs	r2, #1
 8012750:	fa02 f303 	lsl.w	r3, r2, r3
 8012754:	43da      	mvns	r2, r3
 8012756:	4b12      	ldr	r3, [pc, #72]	; (80127a0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4013      	ands	r3, r2
 801275c:	4a10      	ldr	r2, [pc, #64]	; (80127a0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801275e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012764:	2201      	movs	r2, #1
 8012766:	409a      	lsls	r2, r3
 8012768:	4b0d      	ldr	r3, [pc, #52]	; (80127a0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4313      	orrs	r3, r2
 801276e:	4a0c      	ldr	r2, [pc, #48]	; (80127a0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012770:	6013      	str	r3, [r2, #0]
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012776:	4613      	mov	r3, r2
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	4413      	add	r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	4a07      	ldr	r2, [pc, #28]	; (801279c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012780:	441a      	add	r2, r3
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	3304      	adds	r3, #4
 8012786:	4619      	mov	r1, r3
 8012788:	4610      	mov	r0, r2
 801278a:	f7fe f87a 	bl	8010882 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801278e:	bf00      	nop
 8012790:	3720      	adds	r7, #32
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	200005d8 	.word	0x200005d8
 801279c:	200005dc 	.word	0x200005dc
 80127a0:	200006e0 	.word	0x200006e0

080127a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80127a4:	b480      	push	{r7}
 80127a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80127a8:	4b07      	ldr	r3, [pc, #28]	; (80127c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d004      	beq.n	80127ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80127b0:	4b05      	ldr	r3, [pc, #20]	; (80127c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80127b6:	3201      	adds	r2, #1
 80127b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80127ba:	4b03      	ldr	r3, [pc, #12]	; (80127c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80127bc:	681b      	ldr	r3, [r3, #0]
	}
 80127be:	4618      	mov	r0, r3
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr
 80127c8:	200005d8 	.word	0x200005d8

080127cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80127d6:	4b29      	ldr	r3, [pc, #164]	; (801287c <prvAddCurrentTaskToDelayedList+0xb0>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127dc:	4b28      	ldr	r3, [pc, #160]	; (8012880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	3304      	adds	r3, #4
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe f8aa 	bl	801093c <uxListRemove>
 80127e8:	4603      	mov	r3, r0
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d10b      	bne.n	8012806 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80127ee:	4b24      	ldr	r3, [pc, #144]	; (8012880 <prvAddCurrentTaskToDelayedList+0xb4>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f4:	2201      	movs	r2, #1
 80127f6:	fa02 f303 	lsl.w	r3, r2, r3
 80127fa:	43da      	mvns	r2, r3
 80127fc:	4b21      	ldr	r3, [pc, #132]	; (8012884 <prvAddCurrentTaskToDelayedList+0xb8>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4013      	ands	r3, r2
 8012802:	4a20      	ldr	r2, [pc, #128]	; (8012884 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012804:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801280c:	d10a      	bne.n	8012824 <prvAddCurrentTaskToDelayedList+0x58>
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d007      	beq.n	8012824 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012814:	4b1a      	ldr	r3, [pc, #104]	; (8012880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	3304      	adds	r3, #4
 801281a:	4619      	mov	r1, r3
 801281c:	481a      	ldr	r0, [pc, #104]	; (8012888 <prvAddCurrentTaskToDelayedList+0xbc>)
 801281e:	f7fe f830 	bl	8010882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012822:	e026      	b.n	8012872 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	4413      	add	r3, r2
 801282a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801282c:	4b14      	ldr	r3, [pc, #80]	; (8012880 <prvAddCurrentTaskToDelayedList+0xb4>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012834:	68ba      	ldr	r2, [r7, #8]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	429a      	cmp	r2, r3
 801283a:	d209      	bcs.n	8012850 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801283c:	4b13      	ldr	r3, [pc, #76]	; (801288c <prvAddCurrentTaskToDelayedList+0xc0>)
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	4b0f      	ldr	r3, [pc, #60]	; (8012880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	3304      	adds	r3, #4
 8012846:	4619      	mov	r1, r3
 8012848:	4610      	mov	r0, r2
 801284a:	f7fe f83e 	bl	80108ca <vListInsert>
}
 801284e:	e010      	b.n	8012872 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012850:	4b0f      	ldr	r3, [pc, #60]	; (8012890 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	4b0a      	ldr	r3, [pc, #40]	; (8012880 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	3304      	adds	r3, #4
 801285a:	4619      	mov	r1, r3
 801285c:	4610      	mov	r0, r2
 801285e:	f7fe f834 	bl	80108ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012862:	4b0c      	ldr	r3, [pc, #48]	; (8012894 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	429a      	cmp	r2, r3
 801286a:	d202      	bcs.n	8012872 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801286c:	4a09      	ldr	r2, [pc, #36]	; (8012894 <prvAddCurrentTaskToDelayedList+0xc8>)
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	6013      	str	r3, [r2, #0]
}
 8012872:	bf00      	nop
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	200006dc 	.word	0x200006dc
 8012880:	200005d8 	.word	0x200005d8
 8012884:	200006e0 	.word	0x200006e0
 8012888:	200006c4 	.word	0x200006c4
 801288c:	20000694 	.word	0x20000694
 8012890:	20000690 	.word	0x20000690
 8012894:	200006f8 	.word	0x200006f8

08012898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012898:	b480      	push	{r7}
 801289a:	b085      	sub	sp, #20
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	3b04      	subs	r3, #4
 80128a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80128b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	3b04      	subs	r3, #4
 80128b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	f023 0201 	bic.w	r2, r3, #1
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	3b04      	subs	r3, #4
 80128c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80128c8:	4a0c      	ldr	r2, [pc, #48]	; (80128fc <pxPortInitialiseStack+0x64>)
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	3b14      	subs	r3, #20
 80128d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	3b04      	subs	r3, #4
 80128de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	f06f 0202 	mvn.w	r2, #2
 80128e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	3b20      	subs	r3, #32
 80128ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80128ee:	68fb      	ldr	r3, [r7, #12]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3714      	adds	r7, #20
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	08012901 	.word	0x08012901

08012900 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012900:	b480      	push	{r7}
 8012902:	b085      	sub	sp, #20
 8012904:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801290a:	4b13      	ldr	r3, [pc, #76]	; (8012958 <prvTaskExitError+0x58>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012912:	d00b      	beq.n	801292c <prvTaskExitError+0x2c>
 8012914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012918:	b672      	cpsid	i
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	b662      	cpsie	i
 8012928:	60fb      	str	r3, [r7, #12]
 801292a:	e7fe      	b.n	801292a <prvTaskExitError+0x2a>
 801292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012930:	b672      	cpsid	i
 8012932:	f383 8811 	msr	BASEPRI, r3
 8012936:	f3bf 8f6f 	isb	sy
 801293a:	f3bf 8f4f 	dsb	sy
 801293e:	b662      	cpsie	i
 8012940:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012942:	bf00      	nop
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d0fc      	beq.n	8012944 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801294a:	bf00      	nop
 801294c:	3714      	adds	r7, #20
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	20000054 	.word	0x20000054
 801295c:	00000000 	.word	0x00000000

08012960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012960:	4b07      	ldr	r3, [pc, #28]	; (8012980 <pxCurrentTCBConst2>)
 8012962:	6819      	ldr	r1, [r3, #0]
 8012964:	6808      	ldr	r0, [r1, #0]
 8012966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296a:	f380 8809 	msr	PSP, r0
 801296e:	f3bf 8f6f 	isb	sy
 8012972:	f04f 0000 	mov.w	r0, #0
 8012976:	f380 8811 	msr	BASEPRI, r0
 801297a:	4770      	bx	lr
 801297c:	f3af 8000 	nop.w

08012980 <pxCurrentTCBConst2>:
 8012980:	200005d8 	.word	0x200005d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012984:	bf00      	nop
 8012986:	bf00      	nop

08012988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012988:	4808      	ldr	r0, [pc, #32]	; (80129ac <prvPortStartFirstTask+0x24>)
 801298a:	6800      	ldr	r0, [r0, #0]
 801298c:	6800      	ldr	r0, [r0, #0]
 801298e:	f380 8808 	msr	MSP, r0
 8012992:	f04f 0000 	mov.w	r0, #0
 8012996:	f380 8814 	msr	CONTROL, r0
 801299a:	b662      	cpsie	i
 801299c:	b661      	cpsie	f
 801299e:	f3bf 8f4f 	dsb	sy
 80129a2:	f3bf 8f6f 	isb	sy
 80129a6:	df00      	svc	0
 80129a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80129aa:	bf00      	nop
 80129ac:	e000ed08 	.word	0xe000ed08

080129b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80129b6:	4b36      	ldr	r3, [pc, #216]	; (8012a90 <xPortStartScheduler+0xe0>)
 80129b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	22ff      	movs	r2, #255	; 0xff
 80129c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80129d0:	78fb      	ldrb	r3, [r7, #3]
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80129d8:	b2da      	uxtb	r2, r3
 80129da:	4b2e      	ldr	r3, [pc, #184]	; (8012a94 <xPortStartScheduler+0xe4>)
 80129dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80129de:	4b2e      	ldr	r3, [pc, #184]	; (8012a98 <xPortStartScheduler+0xe8>)
 80129e0:	2207      	movs	r2, #7
 80129e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129e4:	e009      	b.n	80129fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80129e6:	4b2c      	ldr	r3, [pc, #176]	; (8012a98 <xPortStartScheduler+0xe8>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	4a2a      	ldr	r2, [pc, #168]	; (8012a98 <xPortStartScheduler+0xe8>)
 80129ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80129f0:	78fb      	ldrb	r3, [r7, #3]
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	005b      	lsls	r3, r3, #1
 80129f6:	b2db      	uxtb	r3, r3
 80129f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80129fa:	78fb      	ldrb	r3, [r7, #3]
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a02:	2b80      	cmp	r3, #128	; 0x80
 8012a04:	d0ef      	beq.n	80129e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012a06:	4b24      	ldr	r3, [pc, #144]	; (8012a98 <xPortStartScheduler+0xe8>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f1c3 0307 	rsb	r3, r3, #7
 8012a0e:	2b04      	cmp	r3, #4
 8012a10:	d00b      	beq.n	8012a2a <xPortStartScheduler+0x7a>
 8012a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a16:	b672      	cpsid	i
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	b662      	cpsie	i
 8012a26:	60bb      	str	r3, [r7, #8]
 8012a28:	e7fe      	b.n	8012a28 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012a2a:	4b1b      	ldr	r3, [pc, #108]	; (8012a98 <xPortStartScheduler+0xe8>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	021b      	lsls	r3, r3, #8
 8012a30:	4a19      	ldr	r2, [pc, #100]	; (8012a98 <xPortStartScheduler+0xe8>)
 8012a32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012a34:	4b18      	ldr	r3, [pc, #96]	; (8012a98 <xPortStartScheduler+0xe8>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012a3c:	4a16      	ldr	r2, [pc, #88]	; (8012a98 <xPortStartScheduler+0xe8>)
 8012a3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	b2da      	uxtb	r2, r3
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012a48:	4b14      	ldr	r3, [pc, #80]	; (8012a9c <xPortStartScheduler+0xec>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	4a13      	ldr	r2, [pc, #76]	; (8012a9c <xPortStartScheduler+0xec>)
 8012a4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012a54:	4b11      	ldr	r3, [pc, #68]	; (8012a9c <xPortStartScheduler+0xec>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4a10      	ldr	r2, [pc, #64]	; (8012a9c <xPortStartScheduler+0xec>)
 8012a5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012a5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012a60:	f000 f8d4 	bl	8012c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012a64:	4b0e      	ldr	r3, [pc, #56]	; (8012aa0 <xPortStartScheduler+0xf0>)
 8012a66:	2200      	movs	r2, #0
 8012a68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012a6a:	f000 f8f3 	bl	8012c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012a6e:	4b0d      	ldr	r3, [pc, #52]	; (8012aa4 <xPortStartScheduler+0xf4>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4a0c      	ldr	r2, [pc, #48]	; (8012aa4 <xPortStartScheduler+0xf4>)
 8012a74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012a78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012a7a:	f7ff ff85 	bl	8012988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012a7e:	f7ff fa55 	bl	8011f2c <vTaskSwitchContext>
	prvTaskExitError();
 8012a82:	f7ff ff3d 	bl	8012900 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012a86:	2300      	movs	r3, #0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	e000e400 	.word	0xe000e400
 8012a94:	20000704 	.word	0x20000704
 8012a98:	20000708 	.word	0x20000708
 8012a9c:	e000ed20 	.word	0xe000ed20
 8012aa0:	20000054 	.word	0x20000054
 8012aa4:	e000ef34 	.word	0xe000ef34

08012aa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	b672      	cpsid	i
 8012ab4:	f383 8811 	msr	BASEPRI, r3
 8012ab8:	f3bf 8f6f 	isb	sy
 8012abc:	f3bf 8f4f 	dsb	sy
 8012ac0:	b662      	cpsie	i
 8012ac2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ac4:	4b0f      	ldr	r3, [pc, #60]	; (8012b04 <vPortEnterCritical+0x5c>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	3301      	adds	r3, #1
 8012aca:	4a0e      	ldr	r2, [pc, #56]	; (8012b04 <vPortEnterCritical+0x5c>)
 8012acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ace:	4b0d      	ldr	r3, [pc, #52]	; (8012b04 <vPortEnterCritical+0x5c>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d110      	bne.n	8012af8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012ad6:	4b0c      	ldr	r3, [pc, #48]	; (8012b08 <vPortEnterCritical+0x60>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00b      	beq.n	8012af8 <vPortEnterCritical+0x50>
 8012ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae4:	b672      	cpsid	i
 8012ae6:	f383 8811 	msr	BASEPRI, r3
 8012aea:	f3bf 8f6f 	isb	sy
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	b662      	cpsie	i
 8012af4:	603b      	str	r3, [r7, #0]
 8012af6:	e7fe      	b.n	8012af6 <vPortEnterCritical+0x4e>
	}
}
 8012af8:	bf00      	nop
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr
 8012b04:	20000054 	.word	0x20000054
 8012b08:	e000ed04 	.word	0xe000ed04

08012b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012b12:	4b12      	ldr	r3, [pc, #72]	; (8012b5c <vPortExitCritical+0x50>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d10b      	bne.n	8012b32 <vPortExitCritical+0x26>
 8012b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b1e:	b672      	cpsid	i
 8012b20:	f383 8811 	msr	BASEPRI, r3
 8012b24:	f3bf 8f6f 	isb	sy
 8012b28:	f3bf 8f4f 	dsb	sy
 8012b2c:	b662      	cpsie	i
 8012b2e:	607b      	str	r3, [r7, #4]
 8012b30:	e7fe      	b.n	8012b30 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012b32:	4b0a      	ldr	r3, [pc, #40]	; (8012b5c <vPortExitCritical+0x50>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	3b01      	subs	r3, #1
 8012b38:	4a08      	ldr	r2, [pc, #32]	; (8012b5c <vPortExitCritical+0x50>)
 8012b3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012b3c:	4b07      	ldr	r3, [pc, #28]	; (8012b5c <vPortExitCritical+0x50>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d104      	bne.n	8012b4e <vPortExitCritical+0x42>
 8012b44:	2300      	movs	r3, #0
 8012b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012b4e:	bf00      	nop
 8012b50:	370c      	adds	r7, #12
 8012b52:	46bd      	mov	sp, r7
 8012b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b58:	4770      	bx	lr
 8012b5a:	bf00      	nop
 8012b5c:	20000054 	.word	0x20000054

08012b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012b60:	f3ef 8009 	mrs	r0, PSP
 8012b64:	f3bf 8f6f 	isb	sy
 8012b68:	4b15      	ldr	r3, [pc, #84]	; (8012bc0 <pxCurrentTCBConst>)
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	f01e 0f10 	tst.w	lr, #16
 8012b70:	bf08      	it	eq
 8012b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7a:	6010      	str	r0, [r2, #0]
 8012b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012b84:	b672      	cpsid	i
 8012b86:	f380 8811 	msr	BASEPRI, r0
 8012b8a:	f3bf 8f4f 	dsb	sy
 8012b8e:	f3bf 8f6f 	isb	sy
 8012b92:	b662      	cpsie	i
 8012b94:	f7ff f9ca 	bl	8011f2c <vTaskSwitchContext>
 8012b98:	f04f 0000 	mov.w	r0, #0
 8012b9c:	f380 8811 	msr	BASEPRI, r0
 8012ba0:	bc09      	pop	{r0, r3}
 8012ba2:	6819      	ldr	r1, [r3, #0]
 8012ba4:	6808      	ldr	r0, [r1, #0]
 8012ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012baa:	f01e 0f10 	tst.w	lr, #16
 8012bae:	bf08      	it	eq
 8012bb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012bb4:	f380 8809 	msr	PSP, r0
 8012bb8:	f3bf 8f6f 	isb	sy
 8012bbc:	4770      	bx	lr
 8012bbe:	bf00      	nop

08012bc0 <pxCurrentTCBConst>:
 8012bc0:	200005d8 	.word	0x200005d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012bc4:	bf00      	nop
 8012bc6:	bf00      	nop

08012bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8012bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd2:	b672      	cpsid	i
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	b662      	cpsie	i
 8012be2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012be4:	f7ff f8e4 	bl	8011db0 <xTaskIncrementTick>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d003      	beq.n	8012bf6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012bee:	4b06      	ldr	r3, [pc, #24]	; (8012c08 <SysTick_Handler+0x40>)
 8012bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bf4:	601a      	str	r2, [r3, #0]
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012c00:	bf00      	nop
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	e000ed04 	.word	0xe000ed04

08012c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012c10:	4b0b      	ldr	r3, [pc, #44]	; (8012c40 <vPortSetupTimerInterrupt+0x34>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012c16:	4b0b      	ldr	r3, [pc, #44]	; (8012c44 <vPortSetupTimerInterrupt+0x38>)
 8012c18:	2200      	movs	r2, #0
 8012c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012c1c:	4b0a      	ldr	r3, [pc, #40]	; (8012c48 <vPortSetupTimerInterrupt+0x3c>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	4a0a      	ldr	r2, [pc, #40]	; (8012c4c <vPortSetupTimerInterrupt+0x40>)
 8012c22:	fba2 2303 	umull	r2, r3, r2, r3
 8012c26:	099b      	lsrs	r3, r3, #6
 8012c28:	4a09      	ldr	r2, [pc, #36]	; (8012c50 <vPortSetupTimerInterrupt+0x44>)
 8012c2a:	3b01      	subs	r3, #1
 8012c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012c2e:	4b04      	ldr	r3, [pc, #16]	; (8012c40 <vPortSetupTimerInterrupt+0x34>)
 8012c30:	2207      	movs	r2, #7
 8012c32:	601a      	str	r2, [r3, #0]
}
 8012c34:	bf00      	nop
 8012c36:	46bd      	mov	sp, r7
 8012c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop
 8012c40:	e000e010 	.word	0xe000e010
 8012c44:	e000e018 	.word	0xe000e018
 8012c48:	2000002c 	.word	0x2000002c
 8012c4c:	10624dd3 	.word	0x10624dd3
 8012c50:	e000e014 	.word	0xe000e014

08012c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012c64 <vPortEnableVFP+0x10>
 8012c58:	6801      	ldr	r1, [r0, #0]
 8012c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012c5e:	6001      	str	r1, [r0, #0]
 8012c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012c62:	bf00      	nop
 8012c64:	e000ed88 	.word	0xe000ed88

08012c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012c68:	b480      	push	{r7}
 8012c6a:	b085      	sub	sp, #20
 8012c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012c6e:	f3ef 8305 	mrs	r3, IPSR
 8012c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2b0f      	cmp	r3, #15
 8012c78:	d915      	bls.n	8012ca6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c7a:	4a18      	ldr	r2, [pc, #96]	; (8012cdc <vPortValidateInterruptPriority+0x74>)
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	4413      	add	r3, r2
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012c84:	4b16      	ldr	r3, [pc, #88]	; (8012ce0 <vPortValidateInterruptPriority+0x78>)
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	7afa      	ldrb	r2, [r7, #11]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d20b      	bcs.n	8012ca6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c92:	b672      	cpsid	i
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	b662      	cpsie	i
 8012ca2:	607b      	str	r3, [r7, #4]
 8012ca4:	e7fe      	b.n	8012ca4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ca6:	4b0f      	ldr	r3, [pc, #60]	; (8012ce4 <vPortValidateInterruptPriority+0x7c>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012cae:	4b0e      	ldr	r3, [pc, #56]	; (8012ce8 <vPortValidateInterruptPriority+0x80>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d90b      	bls.n	8012cce <vPortValidateInterruptPriority+0x66>
 8012cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cba:	b672      	cpsid	i
 8012cbc:	f383 8811 	msr	BASEPRI, r3
 8012cc0:	f3bf 8f6f 	isb	sy
 8012cc4:	f3bf 8f4f 	dsb	sy
 8012cc8:	b662      	cpsie	i
 8012cca:	603b      	str	r3, [r7, #0]
 8012ccc:	e7fe      	b.n	8012ccc <vPortValidateInterruptPriority+0x64>
	}
 8012cce:	bf00      	nop
 8012cd0:	3714      	adds	r7, #20
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd8:	4770      	bx	lr
 8012cda:	bf00      	nop
 8012cdc:	e000e3f0 	.word	0xe000e3f0
 8012ce0:	20000704 	.word	0x20000704
 8012ce4:	e000ed0c 	.word	0xe000ed0c
 8012ce8:	20000708 	.word	0x20000708

08012cec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b08a      	sub	sp, #40	; 0x28
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012cf8:	f7fe ff8c 	bl	8011c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012cfc:	4b5c      	ldr	r3, [pc, #368]	; (8012e70 <pvPortMalloc+0x184>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d101      	bne.n	8012d08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012d04:	f000 f91a 	bl	8012f3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d08:	4b5a      	ldr	r3, [pc, #360]	; (8012e74 <pvPortMalloc+0x188>)
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	4013      	ands	r3, r2
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f040 8090 	bne.w	8012e36 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d01e      	beq.n	8012d5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012d1c:	2208      	movs	r2, #8
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4413      	add	r3, r2
 8012d22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f003 0307 	and.w	r3, r3, #7
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d015      	beq.n	8012d5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f023 0307 	bic.w	r3, r3, #7
 8012d34:	3308      	adds	r3, #8
 8012d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f003 0307 	and.w	r3, r3, #7
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d00b      	beq.n	8012d5a <pvPortMalloc+0x6e>
 8012d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d46:	b672      	cpsid	i
 8012d48:	f383 8811 	msr	BASEPRI, r3
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	f3bf 8f4f 	dsb	sy
 8012d54:	b662      	cpsie	i
 8012d56:	617b      	str	r3, [r7, #20]
 8012d58:	e7fe      	b.n	8012d58 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d06a      	beq.n	8012e36 <pvPortMalloc+0x14a>
 8012d60:	4b45      	ldr	r3, [pc, #276]	; (8012e78 <pvPortMalloc+0x18c>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d865      	bhi.n	8012e36 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012d6a:	4b44      	ldr	r3, [pc, #272]	; (8012e7c <pvPortMalloc+0x190>)
 8012d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012d6e:	4b43      	ldr	r3, [pc, #268]	; (8012e7c <pvPortMalloc+0x190>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d74:	e004      	b.n	8012d80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d903      	bls.n	8012d92 <pvPortMalloc+0xa6>
 8012d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d1f1      	bne.n	8012d76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d92:	4b37      	ldr	r3, [pc, #220]	; (8012e70 <pvPortMalloc+0x184>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d04c      	beq.n	8012e36 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d9c:	6a3b      	ldr	r3, [r7, #32]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2208      	movs	r2, #8
 8012da2:	4413      	add	r3, r2
 8012da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	6a3b      	ldr	r3, [r7, #32]
 8012dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db0:	685a      	ldr	r2, [r3, #4]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	1ad2      	subs	r2, r2, r3
 8012db6:	2308      	movs	r3, #8
 8012db8:	005b      	lsls	r3, r3, #1
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d920      	bls.n	8012e00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	f003 0307 	and.w	r3, r3, #7
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d00b      	beq.n	8012de8 <pvPortMalloc+0xfc>
 8012dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd4:	b672      	cpsid	i
 8012dd6:	f383 8811 	msr	BASEPRI, r3
 8012dda:	f3bf 8f6f 	isb	sy
 8012dde:	f3bf 8f4f 	dsb	sy
 8012de2:	b662      	cpsie	i
 8012de4:	613b      	str	r3, [r7, #16]
 8012de6:	e7fe      	b.n	8012de6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	685a      	ldr	r2, [r3, #4]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	1ad2      	subs	r2, r2, r3
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012dfa:	69b8      	ldr	r0, [r7, #24]
 8012dfc:	f000 f900 	bl	8013000 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012e00:	4b1d      	ldr	r3, [pc, #116]	; (8012e78 <pvPortMalloc+0x18c>)
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	4a1b      	ldr	r2, [pc, #108]	; (8012e78 <pvPortMalloc+0x18c>)
 8012e0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012e0e:	4b1a      	ldr	r3, [pc, #104]	; (8012e78 <pvPortMalloc+0x18c>)
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	4b1b      	ldr	r3, [pc, #108]	; (8012e80 <pvPortMalloc+0x194>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d203      	bcs.n	8012e22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012e1a:	4b17      	ldr	r3, [pc, #92]	; (8012e78 <pvPortMalloc+0x18c>)
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a18      	ldr	r2, [pc, #96]	; (8012e80 <pvPortMalloc+0x194>)
 8012e20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	685a      	ldr	r2, [r3, #4]
 8012e26:	4b13      	ldr	r3, [pc, #76]	; (8012e74 <pvPortMalloc+0x188>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	431a      	orrs	r2, r3
 8012e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e32:	2200      	movs	r2, #0
 8012e34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012e36:	f7fe fefb 	bl	8011c30 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012e3a:	69fb      	ldr	r3, [r7, #28]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012e40:	f7ed fda4 	bl	800098c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	f003 0307 	and.w	r3, r3, #7
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00b      	beq.n	8012e66 <pvPortMalloc+0x17a>
 8012e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e52:	b672      	cpsid	i
 8012e54:	f383 8811 	msr	BASEPRI, r3
 8012e58:	f3bf 8f6f 	isb	sy
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	b662      	cpsie	i
 8012e62:	60fb      	str	r3, [r7, #12]
 8012e64:	e7fe      	b.n	8012e64 <pvPortMalloc+0x178>
	return pvReturn;
 8012e66:	69fb      	ldr	r3, [r7, #28]
}
 8012e68:	4618      	mov	r0, r3
 8012e6a:	3728      	adds	r7, #40	; 0x28
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	20008714 	.word	0x20008714
 8012e74:	20008720 	.word	0x20008720
 8012e78:	20008718 	.word	0x20008718
 8012e7c:	2000870c 	.word	0x2000870c
 8012e80:	2000871c 	.word	0x2000871c

08012e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b086      	sub	sp, #24
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d04a      	beq.n	8012f2c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e96:	2308      	movs	r3, #8
 8012e98:	425b      	negs	r3, r3
 8012e9a:	697a      	ldr	r2, [r7, #20]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	685a      	ldr	r2, [r3, #4]
 8012ea8:	4b22      	ldr	r3, [pc, #136]	; (8012f34 <vPortFree+0xb0>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4013      	ands	r3, r2
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d10b      	bne.n	8012eca <vPortFree+0x46>
 8012eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb6:	b672      	cpsid	i
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	b662      	cpsie	i
 8012ec6:	60fb      	str	r3, [r7, #12]
 8012ec8:	e7fe      	b.n	8012ec8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d00b      	beq.n	8012eea <vPortFree+0x66>
 8012ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed6:	b672      	cpsid	i
 8012ed8:	f383 8811 	msr	BASEPRI, r3
 8012edc:	f3bf 8f6f 	isb	sy
 8012ee0:	f3bf 8f4f 	dsb	sy
 8012ee4:	b662      	cpsie	i
 8012ee6:	60bb      	str	r3, [r7, #8]
 8012ee8:	e7fe      	b.n	8012ee8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	685a      	ldr	r2, [r3, #4]
 8012eee:	4b11      	ldr	r3, [pc, #68]	; (8012f34 <vPortFree+0xb0>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	4013      	ands	r3, r2
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d019      	beq.n	8012f2c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d115      	bne.n	8012f2c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	685a      	ldr	r2, [r3, #4]
 8012f04:	4b0b      	ldr	r3, [pc, #44]	; (8012f34 <vPortFree+0xb0>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	43db      	mvns	r3, r3
 8012f0a:	401a      	ands	r2, r3
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012f10:	f7fe fe80 	bl	8011c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	685a      	ldr	r2, [r3, #4]
 8012f18:	4b07      	ldr	r3, [pc, #28]	; (8012f38 <vPortFree+0xb4>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4413      	add	r3, r2
 8012f1e:	4a06      	ldr	r2, [pc, #24]	; (8012f38 <vPortFree+0xb4>)
 8012f20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012f22:	6938      	ldr	r0, [r7, #16]
 8012f24:	f000 f86c 	bl	8013000 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012f28:	f7fe fe82 	bl	8011c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012f2c:	bf00      	nop
 8012f2e:	3718      	adds	r7, #24
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	20008720 	.word	0x20008720
 8012f38:	20008718 	.word	0x20008718

08012f3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b085      	sub	sp, #20
 8012f40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012f48:	4b27      	ldr	r3, [pc, #156]	; (8012fe8 <prvHeapInit+0xac>)
 8012f4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	f003 0307 	and.w	r3, r3, #7
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d00c      	beq.n	8012f70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	3307      	adds	r3, #7
 8012f5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f023 0307 	bic.w	r3, r3, #7
 8012f62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	4a1f      	ldr	r2, [pc, #124]	; (8012fe8 <prvHeapInit+0xac>)
 8012f6c:	4413      	add	r3, r2
 8012f6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012f74:	4a1d      	ldr	r2, [pc, #116]	; (8012fec <prvHeapInit+0xb0>)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012f7a:	4b1c      	ldr	r3, [pc, #112]	; (8012fec <prvHeapInit+0xb0>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	68ba      	ldr	r2, [r7, #8]
 8012f84:	4413      	add	r3, r2
 8012f86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012f88:	2208      	movs	r2, #8
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	1a9b      	subs	r3, r3, r2
 8012f8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f023 0307 	bic.w	r3, r3, #7
 8012f96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	4a15      	ldr	r2, [pc, #84]	; (8012ff0 <prvHeapInit+0xb4>)
 8012f9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012f9e:	4b14      	ldr	r3, [pc, #80]	; (8012ff0 <prvHeapInit+0xb4>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012fa6:	4b12      	ldr	r3, [pc, #72]	; (8012ff0 <prvHeapInit+0xb4>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	2200      	movs	r2, #0
 8012fac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	68fa      	ldr	r2, [r7, #12]
 8012fb6:	1ad2      	subs	r2, r2, r3
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012fbc:	4b0c      	ldr	r3, [pc, #48]	; (8012ff0 <prvHeapInit+0xb4>)
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	4a0a      	ldr	r2, [pc, #40]	; (8012ff4 <prvHeapInit+0xb8>)
 8012fca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	4a09      	ldr	r2, [pc, #36]	; (8012ff8 <prvHeapInit+0xbc>)
 8012fd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012fd4:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <prvHeapInit+0xc0>)
 8012fd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012fda:	601a      	str	r2, [r3, #0]
}
 8012fdc:	bf00      	nop
 8012fde:	3714      	adds	r7, #20
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr
 8012fe8:	2000070c 	.word	0x2000070c
 8012fec:	2000870c 	.word	0x2000870c
 8012ff0:	20008714 	.word	0x20008714
 8012ff4:	2000871c 	.word	0x2000871c
 8012ff8:	20008718 	.word	0x20008718
 8012ffc:	20008720 	.word	0x20008720

08013000 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013008:	4b28      	ldr	r3, [pc, #160]	; (80130ac <prvInsertBlockIntoFreeList+0xac>)
 801300a:	60fb      	str	r3, [r7, #12]
 801300c:	e002      	b.n	8013014 <prvInsertBlockIntoFreeList+0x14>
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	60fb      	str	r3, [r7, #12]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	429a      	cmp	r2, r3
 801301c:	d8f7      	bhi.n	801300e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	68ba      	ldr	r2, [r7, #8]
 8013028:	4413      	add	r3, r2
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	429a      	cmp	r2, r3
 801302e:	d108      	bne.n	8013042 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	441a      	add	r2, r3
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	68ba      	ldr	r2, [r7, #8]
 801304c:	441a      	add	r2, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	429a      	cmp	r2, r3
 8013054:	d118      	bne.n	8013088 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	4b15      	ldr	r3, [pc, #84]	; (80130b0 <prvInsertBlockIntoFreeList+0xb0>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	429a      	cmp	r2, r3
 8013060:	d00d      	beq.n	801307e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685a      	ldr	r2, [r3, #4]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	441a      	add	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	681a      	ldr	r2, [r3, #0]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	601a      	str	r2, [r3, #0]
 801307c:	e008      	b.n	8013090 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801307e:	4b0c      	ldr	r3, [pc, #48]	; (80130b0 <prvInsertBlockIntoFreeList+0xb0>)
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	601a      	str	r2, [r3, #0]
 8013086:	e003      	b.n	8013090 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013090:	68fa      	ldr	r2, [r7, #12]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	429a      	cmp	r2, r3
 8013096:	d002      	beq.n	801309e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801309e:	bf00      	nop
 80130a0:	3714      	adds	r7, #20
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr
 80130aa:	bf00      	nop
 80130ac:	2000870c 	.word	0x2000870c
 80130b0:	20008714 	.word	0x20008714

080130b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b08c      	sub	sp, #48	; 0x30
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	4a51      	ldr	r2, [pc, #324]	; (8013204 <I2Cx_MspInit+0x150>)
 80130c0:	4293      	cmp	r3, r2
 80130c2:	d14d      	bne.n	8013160 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80130c4:	4b50      	ldr	r3, [pc, #320]	; (8013208 <I2Cx_MspInit+0x154>)
 80130c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c8:	4a4f      	ldr	r2, [pc, #316]	; (8013208 <I2Cx_MspInit+0x154>)
 80130ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130ce:	6313      	str	r3, [r2, #48]	; 0x30
 80130d0:	4b4d      	ldr	r3, [pc, #308]	; (8013208 <I2Cx_MspInit+0x154>)
 80130d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130d8:	61bb      	str	r3, [r7, #24]
 80130da:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80130dc:	2380      	movs	r3, #128	; 0x80
 80130de:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80130e0:	2312      	movs	r3, #18
 80130e2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80130e8:	2302      	movs	r3, #2
 80130ea:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80130ec:	2304      	movs	r3, #4
 80130ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80130f0:	f107 031c 	add.w	r3, r7, #28
 80130f4:	4619      	mov	r1, r3
 80130f6:	4845      	ldr	r0, [pc, #276]	; (801320c <I2Cx_MspInit+0x158>)
 80130f8:	f7f1 fa50 	bl	800459c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80130fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013102:	f107 031c 	add.w	r3, r7, #28
 8013106:	4619      	mov	r1, r3
 8013108:	4840      	ldr	r0, [pc, #256]	; (801320c <I2Cx_MspInit+0x158>)
 801310a:	f7f1 fa47 	bl	800459c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 801310e:	4b3e      	ldr	r3, [pc, #248]	; (8013208 <I2Cx_MspInit+0x154>)
 8013110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013112:	4a3d      	ldr	r2, [pc, #244]	; (8013208 <I2Cx_MspInit+0x154>)
 8013114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013118:	6413      	str	r3, [r2, #64]	; 0x40
 801311a:	4b3b      	ldr	r3, [pc, #236]	; (8013208 <I2Cx_MspInit+0x154>)
 801311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801311e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013122:	617b      	str	r3, [r7, #20]
 8013124:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8013126:	4b38      	ldr	r3, [pc, #224]	; (8013208 <I2Cx_MspInit+0x154>)
 8013128:	6a1b      	ldr	r3, [r3, #32]
 801312a:	4a37      	ldr	r2, [pc, #220]	; (8013208 <I2Cx_MspInit+0x154>)
 801312c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013130:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8013132:	4b35      	ldr	r3, [pc, #212]	; (8013208 <I2Cx_MspInit+0x154>)
 8013134:	6a1b      	ldr	r3, [r3, #32]
 8013136:	4a34      	ldr	r2, [pc, #208]	; (8013208 <I2Cx_MspInit+0x154>)
 8013138:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801313c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 801313e:	2200      	movs	r2, #0
 8013140:	210f      	movs	r1, #15
 8013142:	2048      	movs	r0, #72	; 0x48
 8013144:	f7f0 fc04 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8013148:	2048      	movs	r0, #72	; 0x48
 801314a:	f7f0 fc1d 	bl	8003988 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 801314e:	2200      	movs	r2, #0
 8013150:	210f      	movs	r1, #15
 8013152:	2049      	movs	r0, #73	; 0x49
 8013154:	f7f0 fbfc 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8013158:	2049      	movs	r0, #73	; 0x49
 801315a:	f7f0 fc15 	bl	8003988 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 801315e:	e04d      	b.n	80131fc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8013160:	4b29      	ldr	r3, [pc, #164]	; (8013208 <I2Cx_MspInit+0x154>)
 8013162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013164:	4a28      	ldr	r2, [pc, #160]	; (8013208 <I2Cx_MspInit+0x154>)
 8013166:	f043 0302 	orr.w	r3, r3, #2
 801316a:	6313      	str	r3, [r2, #48]	; 0x30
 801316c:	4b26      	ldr	r3, [pc, #152]	; (8013208 <I2Cx_MspInit+0x154>)
 801316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013170:	f003 0302 	and.w	r3, r3, #2
 8013174:	613b      	str	r3, [r7, #16]
 8013176:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8013178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801317c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 801317e:	2312      	movs	r3, #18
 8013180:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8013182:	2300      	movs	r3, #0
 8013184:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013186:	2302      	movs	r3, #2
 8013188:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 801318a:	2304      	movs	r3, #4
 801318c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 801318e:	f107 031c 	add.w	r3, r7, #28
 8013192:	4619      	mov	r1, r3
 8013194:	481e      	ldr	r0, [pc, #120]	; (8013210 <I2Cx_MspInit+0x15c>)
 8013196:	f7f1 fa01 	bl	800459c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 801319a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801319e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80131a0:	f107 031c 	add.w	r3, r7, #28
 80131a4:	4619      	mov	r1, r3
 80131a6:	481a      	ldr	r0, [pc, #104]	; (8013210 <I2Cx_MspInit+0x15c>)
 80131a8:	f7f1 f9f8 	bl	800459c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80131ac:	4b16      	ldr	r3, [pc, #88]	; (8013208 <I2Cx_MspInit+0x154>)
 80131ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b0:	4a15      	ldr	r2, [pc, #84]	; (8013208 <I2Cx_MspInit+0x154>)
 80131b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80131b6:	6413      	str	r3, [r2, #64]	; 0x40
 80131b8:	4b13      	ldr	r3, [pc, #76]	; (8013208 <I2Cx_MspInit+0x154>)
 80131ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80131c0:	60fb      	str	r3, [r7, #12]
 80131c2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80131c4:	4b10      	ldr	r3, [pc, #64]	; (8013208 <I2Cx_MspInit+0x154>)
 80131c6:	6a1b      	ldr	r3, [r3, #32]
 80131c8:	4a0f      	ldr	r2, [pc, #60]	; (8013208 <I2Cx_MspInit+0x154>)
 80131ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80131ce:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80131d0:	4b0d      	ldr	r3, [pc, #52]	; (8013208 <I2Cx_MspInit+0x154>)
 80131d2:	6a1b      	ldr	r3, [r3, #32]
 80131d4:	4a0c      	ldr	r2, [pc, #48]	; (8013208 <I2Cx_MspInit+0x154>)
 80131d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80131da:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80131dc:	2200      	movs	r2, #0
 80131de:	210f      	movs	r1, #15
 80131e0:	201f      	movs	r0, #31
 80131e2:	f7f0 fbb5 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80131e6:	201f      	movs	r0, #31
 80131e8:	f7f0 fbce 	bl	8003988 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80131ec:	2200      	movs	r2, #0
 80131ee:	210f      	movs	r1, #15
 80131f0:	2020      	movs	r0, #32
 80131f2:	f7f0 fbad 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80131f6:	2020      	movs	r0, #32
 80131f8:	f7f0 fbc6 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 80131fc:	bf00      	nop
 80131fe:	3730      	adds	r7, #48	; 0x30
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	20008724 	.word	0x20008724
 8013208:	40023800 	.word	0x40023800
 801320c:	40021c00 	.word	0x40021c00
 8013210:	40020400 	.word	0x40020400

08013214 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7f3 fbeb 	bl	80069f8 <HAL_I2C_GetState>
 8013222:	4603      	mov	r3, r0
 8013224:	2b00      	cmp	r3, #0
 8013226:	d125      	bne.n	8013274 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	4a14      	ldr	r2, [pc, #80]	; (801327c <I2Cx_Init+0x68>)
 801322c:	4293      	cmp	r3, r2
 801322e:	d103      	bne.n	8013238 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4a13      	ldr	r2, [pc, #76]	; (8013280 <I2Cx_Init+0x6c>)
 8013234:	601a      	str	r2, [r3, #0]
 8013236:	e002      	b.n	801323e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	4a12      	ldr	r2, [pc, #72]	; (8013284 <I2Cx_Init+0x70>)
 801323c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	4a11      	ldr	r2, [pc, #68]	; (8013288 <I2Cx_Init+0x74>)
 8013242:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2200      	movs	r2, #0
 8013248:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2201      	movs	r2, #1
 801324e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2200      	movs	r2, #0
 8013254:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2200      	movs	r2, #0
 8013260:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2200      	movs	r2, #0
 8013266:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f7ff ff23 	bl	80130b4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f7f3 f8d4 	bl	800641c <HAL_I2C_Init>
  }
}
 8013274:	bf00      	nop
 8013276:	3708      	adds	r7, #8
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	20008724 	.word	0x20008724
 8013280:	40005c00 	.word	0x40005c00
 8013284:	40005400 	.word	0x40005400
 8013288:	40912732 	.word	0x40912732

0801328c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b08a      	sub	sp, #40	; 0x28
 8013290:	af04      	add	r7, sp, #16
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	4608      	mov	r0, r1
 8013296:	4611      	mov	r1, r2
 8013298:	461a      	mov	r2, r3
 801329a:	4603      	mov	r3, r0
 801329c:	72fb      	strb	r3, [r7, #11]
 801329e:	460b      	mov	r3, r1
 80132a0:	813b      	strh	r3, [r7, #8]
 80132a2:	4613      	mov	r3, r2
 80132a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80132aa:	7afb      	ldrb	r3, [r7, #11]
 80132ac:	b299      	uxth	r1, r3
 80132ae:	88f8      	ldrh	r0, [r7, #6]
 80132b0:	893a      	ldrh	r2, [r7, #8]
 80132b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80132b6:	9302      	str	r3, [sp, #8]
 80132b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132ba:	9301      	str	r3, [sp, #4]
 80132bc:	6a3b      	ldr	r3, [r7, #32]
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	4603      	mov	r3, r0
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f7f3 fa7e 	bl	80067c4 <HAL_I2C_Mem_Read>
 80132c8:	4603      	mov	r3, r0
 80132ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d004      	beq.n	80132dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80132d2:	7afb      	ldrb	r3, [r7, #11]
 80132d4:	4619      	mov	r1, r3
 80132d6:	68f8      	ldr	r0, [r7, #12]
 80132d8:	f000 f832 	bl	8013340 <I2Cx_Error>
  }
  return status;    
 80132dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3718      	adds	r7, #24
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b08a      	sub	sp, #40	; 0x28
 80132ea:	af04      	add	r7, sp, #16
 80132ec:	60f8      	str	r0, [r7, #12]
 80132ee:	4608      	mov	r0, r1
 80132f0:	4611      	mov	r1, r2
 80132f2:	461a      	mov	r2, r3
 80132f4:	4603      	mov	r3, r0
 80132f6:	72fb      	strb	r3, [r7, #11]
 80132f8:	460b      	mov	r3, r1
 80132fa:	813b      	strh	r3, [r7, #8]
 80132fc:	4613      	mov	r3, r2
 80132fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8013300:	2300      	movs	r3, #0
 8013302:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8013304:	7afb      	ldrb	r3, [r7, #11]
 8013306:	b299      	uxth	r1, r3
 8013308:	88f8      	ldrh	r0, [r7, #6]
 801330a:	893a      	ldrh	r2, [r7, #8]
 801330c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013310:	9302      	str	r3, [sp, #8]
 8013312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013314:	9301      	str	r3, [sp, #4]
 8013316:	6a3b      	ldr	r3, [r7, #32]
 8013318:	9300      	str	r3, [sp, #0]
 801331a:	4603      	mov	r3, r0
 801331c:	68f8      	ldr	r0, [r7, #12]
 801331e:	f7f3 f93d 	bl	800659c <HAL_I2C_Mem_Write>
 8013322:	4603      	mov	r3, r0
 8013324:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8013326:	7dfb      	ldrb	r3, [r7, #23]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d004      	beq.n	8013336 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 801332c:	7afb      	ldrb	r3, [r7, #11]
 801332e:	4619      	mov	r1, r3
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f000 f805 	bl	8013340 <I2Cx_Error>
  }
  return status;
 8013336:	7dfb      	ldrb	r3, [r7, #23]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3718      	adds	r7, #24
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
 8013348:	460b      	mov	r3, r1
 801334a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7f3 f8f5 	bl	800653c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f7ff ff5e 	bl	8013214 <I2Cx_Init>
}
 8013358:	bf00      	nop
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8013364:	4802      	ldr	r0, [pc, #8]	; (8013370 <TS_IO_Init+0x10>)
 8013366:	f7ff ff55 	bl	8013214 <I2Cx_Init>
}
 801336a:	bf00      	nop
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	20008724 	.word	0x20008724

08013374 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b084      	sub	sp, #16
 8013378:	af02      	add	r7, sp, #8
 801337a:	4603      	mov	r3, r0
 801337c:	71fb      	strb	r3, [r7, #7]
 801337e:	460b      	mov	r3, r1
 8013380:	71bb      	strb	r3, [r7, #6]
 8013382:	4613      	mov	r3, r2
 8013384:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8013386:	79bb      	ldrb	r3, [r7, #6]
 8013388:	b29a      	uxth	r2, r3
 801338a:	79f9      	ldrb	r1, [r7, #7]
 801338c:	2301      	movs	r3, #1
 801338e:	9301      	str	r3, [sp, #4]
 8013390:	1d7b      	adds	r3, r7, #5
 8013392:	9300      	str	r3, [sp, #0]
 8013394:	2301      	movs	r3, #1
 8013396:	4803      	ldr	r0, [pc, #12]	; (80133a4 <TS_IO_Write+0x30>)
 8013398:	f7ff ffa5 	bl	80132e6 <I2Cx_WriteMultiple>
}
 801339c:	bf00      	nop
 801339e:	3708      	adds	r7, #8
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	20008724 	.word	0x20008724

080133a8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b086      	sub	sp, #24
 80133ac:	af02      	add	r7, sp, #8
 80133ae:	4603      	mov	r3, r0
 80133b0:	460a      	mov	r2, r1
 80133b2:	71fb      	strb	r3, [r7, #7]
 80133b4:	4613      	mov	r3, r2
 80133b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80133b8:	2300      	movs	r3, #0
 80133ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80133bc:	79bb      	ldrb	r3, [r7, #6]
 80133be:	b29a      	uxth	r2, r3
 80133c0:	79f9      	ldrb	r1, [r7, #7]
 80133c2:	2301      	movs	r3, #1
 80133c4:	9301      	str	r3, [sp, #4]
 80133c6:	f107 030f 	add.w	r3, r7, #15
 80133ca:	9300      	str	r3, [sp, #0]
 80133cc:	2301      	movs	r3, #1
 80133ce:	4804      	ldr	r0, [pc, #16]	; (80133e0 <TS_IO_Read+0x38>)
 80133d0:	f7ff ff5c 	bl	801328c <I2Cx_ReadMultiple>

  return read_value;
 80133d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	20008724 	.word	0x20008724

080133e4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7ef ff41 	bl	8003274 <HAL_Delay>
}
 80133f2:	bf00      	nop
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}

080133fa <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80133fa:	b580      	push	{r7, lr}
 80133fc:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80133fe:	f004 f9bb 	bl	8017778 <touchgfx_init>
}
 8013402:	bf00      	nop
 8013404:	bd80      	pop	{r7, pc}

08013406 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8013406:	b580      	push	{r7, lr}
 8013408:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 801340a:	f004 f9df 	bl	80177cc <touchgfx_taskEntry>
}
 801340e:	bf00      	nop
 8013410:	bd80      	pop	{r7, pc}
	...

08013414 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8013414:	b480      	push	{r7}
 8013416:	b083      	sub	sp, #12
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
    {
 801341c:	4a04      	ldr	r2, [pc, #16]	; (8013430 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	601a      	str	r2, [r3, #0]
    }
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	4618      	mov	r0, r3
 8013426:	370c      	adds	r7, #12
 8013428:	46bd      	mov	sp, r7
 801342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342e:	4770      	bx	lr
 8013430:	08026a30 	.word	0x08026a30

08013434 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8013434:	b580      	push	{r7, lr}
 8013436:	b082      	sub	sp, #8
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
    }
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f7ff ffe9 	bl	8013414 <_ZN8touchgfx12FontProviderD1Ev>
 8013442:	2104      	movs	r1, #4
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f011 ff4b 	bl	80252e0 <_ZdlPvj>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4618      	mov	r0, r3
 801344e:	3708      	adds	r7, #8
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	460b      	mov	r3, r1
 801345e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8013460:	887b      	ldrh	r3, [r7, #2]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d104      	bne.n	8013470 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
    {
    case Typography::DEFAULT:
        // Asap_Regular_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8013466:	f002 fd03 	bl	8015e70 <_ZN17TypedTextDatabase8getFontsEv>
 801346a:	4603      	mov	r3, r0
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	e000      	b.n	8013472 <_ZN23ApplicationFontProvider7getFontEt+0x1e>
    default:
        return 0;
 8013470:	2300      	movs	r3, #0
    }
}
 8013472:	4618      	mov	r0, r3
 8013474:	3708      	adds	r7, #8
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
	...

0801347c <_ZN23ApplicationFontProviderD1Ev>:
{
    static const touchgfx::FontId DEFAULT = 0; // Asap_Regular_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 1;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	4a05      	ldr	r2, [pc, #20]	; (801349c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4618      	mov	r0, r3
 801348e:	f7ff ffc1 	bl	8013414 <_ZN8touchgfx12FontProviderD1Ev>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	08026a1c 	.word	0x08026a1c

080134a0 <_ZN23ApplicationFontProviderD0Ev>:
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7ff ffe7 	bl	801347c <_ZN23ApplicationFontProviderD1Ev>
 80134ae:	2104      	movs	r1, #4
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f011 ff15 	bl	80252e0 <_ZdlPvj>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4618      	mov	r0, r3
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}

080134c0 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 80134c0:	b480      	push	{r7}
 80134c2:	b083      	sub	sp, #12
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	4a04      	ldr	r2, [pc, #16]	; (80134dc <_ZN8touchgfx4FontD1Ev+0x1c>)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	370c      	adds	r7, #12
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	08028418 	.word	0x08028418

080134e0 <_ZN8touchgfx4FontD0Ev>:
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f7ff ffe9 	bl	80134c0 <_ZN8touchgfx4FontD1Ev>
 80134ee:	2110      	movs	r1, #16
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f011 fef5 	bl	80252e0 <_ZdlPvj>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	4618      	mov	r0, r3
 80134fa:	3708      	adds	r7, #8
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}

08013500 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8013500:	b590      	push	{r4, r7, lr}
 8013502:	b087      	sub	sp, #28
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	460b      	mov	r3, r1
 801350a:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	3308      	adds	r3, #8
 801351a:	681c      	ldr	r4, [r3, #0]
 801351c:	f107 030f 	add.w	r3, r7, #15
 8013520:	f107 0210 	add.w	r2, r7, #16
 8013524:	8879      	ldrh	r1, [r7, #2]
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	47a0      	blx	r4
 801352a:	6178      	str	r0, [r7, #20]
        return glyph;
 801352c:	697b      	ldr	r3, [r7, #20]
    }
 801352e:	4618      	mov	r0, r3
 8013530:	371c      	adds	r7, #28
 8013532:	46bd      	mov	sp, r7
 8013534:	bd90      	pop	{r4, r7, pc}

08013536 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8013536:	b480      	push	{r7}
 8013538:	b083      	sub	sp, #12
 801353a:	af00      	add	r7, sp, #0
 801353c:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	895b      	ldrh	r3, [r3, #10]
    }
 8013542:	4618      	mov	r0, r3
 8013544:	370c      	adds	r7, #12
 8013546:	46bd      	mov	sp, r7
 8013548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354c:	4770      	bx	lr

0801354e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801354e:	b480      	push	{r7}
 8013550:	b083      	sub	sp, #12
 8013552:	af00      	add	r7, sp, #0
 8013554:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	899b      	ldrh	r3, [r3, #12]
    }
 801355a:	4618      	mov	r0, r3
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr

08013566 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8013566:	b480      	push	{r7}
 8013568:	b083      	sub	sp, #12
 801356a:	af00      	add	r7, sp, #0
 801356c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	889b      	ldrh	r3, [r3, #4]
    }
 8013572:	4618      	mov	r0, r3
 8013574:	370c      	adds	r7, #12
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr

0801357e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	889a      	ldrh	r2, [r3, #4]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	799b      	ldrb	r3, [r3, #6]
 801358e:	b29b      	uxth	r3, r3
 8013590:	4413      	add	r3, r2
 8013592:	b29b      	uxth	r3, r3
    }
 8013594:	4618      	mov	r0, r3
 8013596:	370c      	adds	r7, #12
 8013598:	46bd      	mov	sp, r7
 801359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359e:	4770      	bx	lr

080135a0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 80135a0:	b480      	push	{r7}
 80135a2:	b083      	sub	sp, #12
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	79db      	ldrb	r3, [r3, #7]
 80135ac:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80135b0:	b2db      	uxtb	r3, r3
    }
 80135b2:	4618      	mov	r0, r3
 80135b4:	370c      	adds	r7, #12
 80135b6:	46bd      	mov	sp, r7
 80135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135bc:	4770      	bx	lr

080135be <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 80135be:	b480      	push	{r7}
 80135c0:	b083      	sub	sp, #12
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	6078      	str	r0, [r7, #4]
    {
        return a4;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	79db      	ldrb	r3, [r3, #7]
 80135ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80135ce:	b2db      	uxtb	r3, r3
    }
 80135d0:	4618      	mov	r0, r3
 80135d2:	370c      	adds	r7, #12
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr

080135dc <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	4a05      	ldr	r2, [pc, #20]	; (80135fc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	601a      	str	r2, [r3, #0]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff ff67 	bl	80134c0 <_ZN8touchgfx4FontD1Ev>
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4618      	mov	r0, r3
 80135f6:	3708      	adds	r7, #8
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	080284d0 	.word	0x080284d0

08013600 <_ZN8touchgfx9ConstFontD0Ev>:
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff ffe7 	bl	80135dc <_ZN8touchgfx9ConstFontD1Ev>
 801360e:	2118      	movs	r1, #24
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f011 fe65 	bl	80252e0 <_ZdlPvj>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	4a05      	ldr	r2, [pc, #20]	; (8013640 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	601a      	str	r2, [r3, #0]
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	4618      	mov	r0, r3
 8013632:	f7ff ffd3 	bl	80135dc <_ZN8touchgfx9ConstFontD1Ev>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	4618      	mov	r0, r3
 801363a:	3708      	adds	r7, #8
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	08026a74 	.word	0x08026a74

08013644 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff ffe7 	bl	8013620 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013652:	2124      	movs	r1, #36	; 0x24
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f011 fe43 	bl	80252e0 <_ZdlPvj>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4618      	mov	r0, r3
 801365e:	3708      	adds	r7, #8
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f000 f82d 	bl	80136cc <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 8013672:	4b08      	ldr	r3, [pc, #32]	; (8013694 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	4b08      	ldr	r3, [pc, #32]	; (8013698 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8013678:	6819      	ldr	r1, [r3, #0]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	881b      	ldrh	r3, [r3, #0]
 801367e:	005b      	lsls	r3, r3, #1
 8013680:	440b      	add	r3, r1
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	009b      	lsls	r3, r3, #2
 8013686:	4413      	add	r3, r2
 8013688:	681b      	ldr	r3, [r3, #0]
    }
 801368a:	4618      	mov	r0, r3
 801368c:	3708      	adds	r7, #8
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	20009964 	.word	0x20009964
 8013698:	2000995c 	.word	0x2000995c

0801369c <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	f000 f811 	bl	80136cc <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 80136aa:	4b07      	ldr	r3, [pc, #28]	; (80136c8 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	881b      	ldrh	r3, [r3, #0]
 80136b2:	005b      	lsls	r3, r3, #1
 80136b4:	4413      	add	r3, r2
 80136b6:	785b      	ldrb	r3, [r3, #1]
 80136b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80136bc:	b2db      	uxtb	r3, r3
    }
 80136be:	4618      	mov	r0, r3
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	2000995c 	.word	0x2000995c

080136cc <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b082      	sub	sp, #8
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80136d4:	4b0c      	ldr	r3, [pc, #48]	; (8013708 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d105      	bne.n	80136e8 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 80136dc:	4b0b      	ldr	r3, [pc, #44]	; (801370c <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 80136de:	4a0c      	ldr	r2, [pc, #48]	; (8013710 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80136e0:	21de      	movs	r1, #222	; 0xde
 80136e2:	480c      	ldr	r0, [pc, #48]	; (8013714 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 80136e4:	f011 fe28 	bl	8025338 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	881a      	ldrh	r2, [r3, #0]
 80136ec:	4b0a      	ldr	r3, [pc, #40]	; (8013718 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 80136ee:	881b      	ldrh	r3, [r3, #0]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	d305      	bcc.n	8013700 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 80136f4:	4b09      	ldr	r3, [pc, #36]	; (801371c <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 80136f6:	4a06      	ldr	r2, [pc, #24]	; (8013710 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80136f8:	21df      	movs	r1, #223	; 0xdf
 80136fa:	4806      	ldr	r0, [pc, #24]	; (8013714 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 80136fc:	f011 fe1c 	bl	8025338 <__assert_func>
    }
 8013700:	bf00      	nop
 8013702:	3708      	adds	r7, #8
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}
 8013708:	2000995c 	.word	0x2000995c
 801370c:	080263d8 	.word	0x080263d8
 8013710:	08026a3c 	.word	0x08026a3c
 8013714:	0802641c 	.word	0x0802641c
 8013718:	20009960 	.word	0x20009960
 801371c:	08026460 	.word	0x08026460

08013720 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	7b5b      	ldrb	r3, [r3, #13]
 801372c:	021b      	lsls	r3, r3, #8
 801372e:	b21b      	sxth	r3, r3
 8013730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013734:	b21a      	sxth	r2, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	7adb      	ldrb	r3, [r3, #11]
 801373a:	b21b      	sxth	r3, r3
 801373c:	4313      	orrs	r3, r2
 801373e:	b21b      	sxth	r3, r3
 8013740:	b29b      	uxth	r3, r3
    }
 8013742:	4618      	mov	r0, r3
 8013744:	370c      	adds	r7, #12
 8013746:	46bd      	mov	sp, r7
 8013748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374c:	4770      	bx	lr

0801374e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 801374e:	b480      	push	{r7}
 8013750:	b083      	sub	sp, #12
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	6a1b      	ldr	r3, [r3, #32]
    }
 801375a:	4618      	mov	r0, r3
 801375c:	370c      	adds	r7, #12
 801375e:	46bd      	mov	sp, r7
 8013760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013764:	4770      	bx	lr
	...

08013768 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8013768:	b580      	push	{r7, lr}
 801376a:	b08c      	sub	sp, #48	; 0x30
 801376c:	af08      	add	r7, sp, #32
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	4611      	mov	r1, r2
 8013774:	461a      	mov	r2, r3
 8013776:	460b      	mov	r3, r1
 8013778:	80fb      	strh	r3, [r7, #6]
 801377a:	4613      	mov	r3, r2
 801377c:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801377e:	68f8      	ldr	r0, [r7, #12]
 8013780:	88b9      	ldrh	r1, [r7, #4]
 8013782:	88fa      	ldrh	r2, [r7, #6]
 8013784:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013786:	9306      	str	r3, [sp, #24]
 8013788:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801378a:	9305      	str	r3, [sp, #20]
 801378c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013790:	9304      	str	r3, [sp, #16]
 8013792:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013796:	9303      	str	r3, [sp, #12]
 8013798:	f897 3020 	ldrb.w	r3, [r7, #32]
 801379c:	9302      	str	r3, [sp, #8]
 801379e:	7f3b      	ldrb	r3, [r7, #28]
 80137a0:	9301      	str	r3, [sp, #4]
 80137a2:	7e3b      	ldrb	r3, [r7, #24]
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	460b      	mov	r3, r1
 80137a8:	68b9      	ldr	r1, [r7, #8]
 80137aa:	f008 f86d 	bl	801b888 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80137ae:	4a08      	ldr	r2, [pc, #32]	; (80137d0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	601a      	str	r2, [r3, #0]
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137b8:	619a      	str	r2, [r3, #24]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137be:	61da      	str	r2, [r3, #28]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137c4:	621a      	str	r2, [r3, #32]
{
}
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	4618      	mov	r0, r3
 80137ca:	3710      	adds	r7, #16
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	08026a74 	.word	0x08026a74

080137d4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80137d4:	b480      	push	{r7}
 80137d6:	b085      	sub	sp, #20
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	699b      	ldr	r3, [r3, #24]
 80137e2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	889b      	ldrh	r3, [r3, #4]
 80137e8:	0adb      	lsrs	r3, r3, #11
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	68fa      	ldr	r2, [r7, #12]
 80137f0:	4413      	add	r3, r2
 80137f2:	681a      	ldr	r2, [r3, #0]
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	4413      	add	r3, r2
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3714      	adds	r7, #20
 80137fe:	46bd      	mov	sp, r7
 8013800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013804:	4770      	bx	lr

08013806 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8013806:	b580      	push	{r7, lr}
 8013808:	b086      	sub	sp, #24
 801380a:	af00      	add	r7, sp, #0
 801380c:	60f8      	str	r0, [r7, #12]
 801380e:	460b      	mov	r3, r1
 8013810:	607a      	str	r2, [r7, #4]
 8013812:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d003      	beq.n	8013822 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	7b1b      	ldrb	r3, [r3, #12]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d101      	bne.n	8013826 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8013822:	2300      	movs	r3, #0
 8013824:	e023      	b.n	801386e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f7ff ff7a 	bl	8013720 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 801382c:	4603      	mov	r3, r0
 801382e:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8013830:	8abb      	ldrh	r3, [r7, #20]
 8013832:	82fb      	strh	r3, [r7, #22]
 8013834:	8afa      	ldrh	r2, [r7, #22]
 8013836:	8abb      	ldrh	r3, [r7, #20]
 8013838:	6879      	ldr	r1, [r7, #4]
 801383a:	7b09      	ldrb	r1, [r1, #12]
 801383c:	440b      	add	r3, r1
 801383e:	429a      	cmp	r2, r3
 8013840:	da14      	bge.n	801386c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	69da      	ldr	r2, [r3, #28]
 8013846:	8afb      	ldrh	r3, [r7, #22]
 8013848:	009b      	lsls	r3, r3, #2
 801384a:	4413      	add	r3, r2
 801384c:	881b      	ldrh	r3, [r3, #0]
 801384e:	897a      	ldrh	r2, [r7, #10]
 8013850:	429a      	cmp	r2, r3
 8013852:	d107      	bne.n	8013864 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	69da      	ldr	r2, [r3, #28]
 8013858:	8afb      	ldrh	r3, [r7, #22]
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	4413      	add	r3, r2
 801385e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013862:	e004      	b.n	801386e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8013864:	8afb      	ldrh	r3, [r7, #22]
 8013866:	3301      	adds	r3, #1
 8013868:	82fb      	strh	r3, [r7, #22]
 801386a:	e7e3      	b.n	8013834 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 801386c:	2300      	movs	r3, #0
}
 801386e:	4618      	mov	r0, r3
 8013870:	3718      	adds	r7, #24
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
	...

08013878 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Regular_20_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Regular_20_4bpp()
{
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 22, 20, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0);
 8013878:	b580      	push	{r7, lr}
 801387a:	af00      	add	r7, sp, #0
 801387c:	4801      	ldr	r0, [pc, #4]	; (8013884 <__tcf_0+0xc>)
 801387e:	f7ff fecf 	bl	8013620 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013882:	bd80      	pop	{r7, pc}
 8013884:	20008770 	.word	0x20008770

08013888 <_Z28getFont_Asap_Regular_20_4bppv>:
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b08a      	sub	sp, #40	; 0x28
 801388c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Regular_20_4bpp(glyphs_Asap_Regular_20_4bpp, 22, 20, 0, 4, 1, 0, 0, unicodes_Asap_Regular_20_4bpp, kerning_Asap_Regular_20_4bpp, 0, 0, 0);
 801388e:	4b15      	ldr	r3, [pc, #84]	; (80138e4 <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f003 0301 	and.w	r3, r3, #1
 8013896:	2b00      	cmp	r3, #0
 8013898:	d11f      	bne.n	80138da <_Z28getFont_Asap_Regular_20_4bppv+0x52>
 801389a:	2300      	movs	r3, #0
 801389c:	9309      	str	r3, [sp, #36]	; 0x24
 801389e:	2300      	movs	r3, #0
 80138a0:	9308      	str	r3, [sp, #32]
 80138a2:	2300      	movs	r3, #0
 80138a4:	9307      	str	r3, [sp, #28]
 80138a6:	4b10      	ldr	r3, [pc, #64]	; (80138e8 <_Z28getFont_Asap_Regular_20_4bppv+0x60>)
 80138a8:	9306      	str	r3, [sp, #24]
 80138aa:	4b10      	ldr	r3, [pc, #64]	; (80138ec <_Z28getFont_Asap_Regular_20_4bppv+0x64>)
 80138ac:	9305      	str	r3, [sp, #20]
 80138ae:	2300      	movs	r3, #0
 80138b0:	9304      	str	r3, [sp, #16]
 80138b2:	2300      	movs	r3, #0
 80138b4:	9303      	str	r3, [sp, #12]
 80138b6:	2301      	movs	r3, #1
 80138b8:	9302      	str	r3, [sp, #8]
 80138ba:	2304      	movs	r3, #4
 80138bc:	9301      	str	r3, [sp, #4]
 80138be:	2300      	movs	r3, #0
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	2314      	movs	r3, #20
 80138c4:	2216      	movs	r2, #22
 80138c6:	490a      	ldr	r1, [pc, #40]	; (80138f0 <_Z28getFont_Asap_Regular_20_4bppv+0x68>)
 80138c8:	480a      	ldr	r0, [pc, #40]	; (80138f4 <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
 80138ca:	f7ff ff4d 	bl	8013768 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80138ce:	4b05      	ldr	r3, [pc, #20]	; (80138e4 <_Z28getFont_Asap_Regular_20_4bppv+0x5c>)
 80138d0:	2201      	movs	r2, #1
 80138d2:	601a      	str	r2, [r3, #0]
 80138d4:	4808      	ldr	r0, [pc, #32]	; (80138f8 <_Z28getFont_Asap_Regular_20_4bppv+0x70>)
 80138d6:	f011 fd4d 	bl	8025374 <atexit>
    return Asap_Regular_20_4bpp;
 80138da:	4b06      	ldr	r3, [pc, #24]	; (80138f4 <_Z28getFont_Asap_Regular_20_4bppv+0x6c>)
}
 80138dc:	4618      	mov	r0, r3
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	20008794 	.word	0x20008794
 80138e8:	0802a0ac 	.word	0x0802a0ac
 80138ec:	08026ac0 	.word	0x08026ac0
 80138f0:	0802a0b0 	.word	0x0802a0b0
 80138f4:	20008770 	.word	0x20008770
 80138f8:	08013879 	.word	0x08013879

080138fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80138fc:	b480      	push	{r7}
 80138fe:	b083      	sub	sp, #12
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	4618      	mov	r0, r3
 801390a:	370c      	adds	r7, #12
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr

08013914 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
    {
    }
 801391e:	bf00      	nop
 8013920:	370c      	adds	r7, #12
 8013922:	46bd      	mov	sp, r7
 8013924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013928:	4770      	bx	lr

0801392a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801392a:	b480      	push	{r7}
 801392c:	b083      	sub	sp, #12
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
 8013932:	6039      	str	r1, [r7, #0]
    {
    }
 8013934:	bf00      	nop
 8013936:	370c      	adds	r7, #12
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	6039      	str	r1, [r7, #0]
    {
    }
 801394a:	bf00      	nop
 801394c:	370c      	adds	r7, #12
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr

08013956 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8013956:	b480      	push	{r7}
 8013958:	b083      	sub	sp, #12
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
 801395e:	460b      	mov	r3, r1
 8013960:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013962:	bf00      	nop
 8013964:	370c      	adds	r7, #12
 8013966:	46bd      	mov	sp, r7
 8013968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396c:	4770      	bx	lr

0801396e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 801396e:	b480      	push	{r7}
 8013970:	b083      	sub	sp, #12
 8013972:	af00      	add	r7, sp, #0
 8013974:	6078      	str	r0, [r7, #4]
    {
    }
 8013976:	bf00      	nop
 8013978:	370c      	adds	r7, #12
 801397a:	46bd      	mov	sp, r7
 801397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013980:	4770      	bx	lr

08013982 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8013982:	b480      	push	{r7}
 8013984:	b083      	sub	sp, #12
 8013986:	af00      	add	r7, sp, #0
 8013988:	6078      	str	r0, [r7, #4]
    {
    }
 801398a:	bf00      	nop
 801398c:	370c      	adds	r7, #12
 801398e:	46bd      	mov	sp, r7
 8013990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013994:	4770      	bx	lr
	...

08013998 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
    {
 80139a0:	4a04      	ldr	r2, [pc, #16]	; (80139b4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	601a      	str	r2, [r3, #0]
    }
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	4618      	mov	r0, r3
 80139aa:	370c      	adds	r7, #12
 80139ac:	46bd      	mov	sp, r7
 80139ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b2:	4770      	bx	lr
 80139b4:	08026bb4 	.word	0x08026bb4

080139b8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
    }
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f7ff ffe9 	bl	8013998 <_ZN8touchgfx15UIEventListenerD1Ev>
 80139c6:	2104      	movs	r1, #4
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f011 fc89 	bl	80252e0 <_ZdlPvj>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4618      	mov	r0, r3
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}

080139d8 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 80139d8:	b480      	push	{r7}
 80139da:	b083      	sub	sp, #12
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 80139e0:	4a07      	ldr	r2, [pc, #28]	; (8013a00 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	601a      	str	r2, [r3, #0]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2200      	movs	r2, #0
 80139ea:	605a      	str	r2, [r3, #4]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	721a      	strb	r2, [r3, #8]
    {
    }
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4618      	mov	r0, r3
 80139f6:	370c      	adds	r7, #12
 80139f8:	46bd      	mov	sp, r7
 80139fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fe:	4770      	bx	lr
 8013a00:	08026b94 	.word	0x08026b94

08013a04 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
    {
 8013a0c:	4a04      	ldr	r2, [pc, #16]	; (8013a20 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	601a      	str	r2, [r3, #0]
    }
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	4618      	mov	r0, r3
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	08026b94 	.word	0x08026b94

08013a24 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
    }
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f7ff ffe9 	bl	8013a04 <_ZN8touchgfx10TransitionD1Ev>
 8013a32:	210c      	movs	r1, #12
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f011 fc53 	bl	80252e0 <_ZdlPvj>
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3708      	adds	r7, #8
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8013a44:	b480      	push	{r7}
 8013a46:	b083      	sub	sp, #12
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	bf00      	nop
 8013a4e:	370c      	adds	r7, #12
 8013a50:	46bd      	mov	sp, r7
 8013a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a56:	4770      	bx	lr

08013a58 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8013a58:	b480      	push	{r7}
 8013a5a:	b083      	sub	sp, #12
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	bf00      	nop
 8013a62:	370c      	adds	r7, #12
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr

08013a6c <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8013a6c:	b480      	push	{r7}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	bf00      	nop
 8013a76:	370c      	adds	r7, #12
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7e:	4770      	bx	lr

08013a80 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	683a      	ldr	r2, [r7, #0]
 8013a8e:	605a      	str	r2, [r3, #4]
    }
 8013a90:	bf00      	nop
 8013a92:	370c      	adds	r7, #12
 8013a94:	46bd      	mov	sp, r7
 8013a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9a:	4770      	bx	lr

08013a9c <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8013a9c:	b480      	push	{r7}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013aa8:	bf00      	nop
 8013aaa:	370c      	adds	r7, #12
 8013aac:	46bd      	mov	sp, r7
 8013aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab2:	4770      	bx	lr

08013ab4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
    {
 8013abc:	4a04      	ldr	r2, [pc, #16]	; (8013ad0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	601a      	str	r2, [r3, #0]
    }
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr
 8013ad0:	08026b7c 	.word	0x08026b7c

08013ad4 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
    }
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff ffe9 	bl	8013ab4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013ae2:	2104      	movs	r1, #4
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f011 fbfb 	bl	80252e0 <_ZdlPvj>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	4618      	mov	r0, r3
 8013aee:	3708      	adds	r7, #8
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8013af4:	b480      	push	{r7}
 8013af6:	af00      	add	r7, sp, #0
    {
        return instance;
 8013af8:	4b03      	ldr	r3, [pc, #12]	; (8013b08 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8013afa:	681b      	ldr	r3, [r3, #0]
    }
 8013afc:	4618      	mov	r0, r3
 8013afe:	46bd      	mov	sp, r7
 8013b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b04:	4770      	bx	lr
 8013b06:	bf00      	nop
 8013b08:	200098ec 	.word	0x200098ec

08013b0c <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8013b0c:	b480      	push	{r7}
 8013b0e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8013b10:	4b0b      	ldr	r3, [pc, #44]	; (8013b40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d008      	beq.n	8013b2e <_ZN8touchgfx3HAL3lcdEv+0x22>
 8013b1c:	4b08      	ldr	r3, [pc, #32]	; (8013b40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d003      	beq.n	8013b2e <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8013b26:	4b06      	ldr	r3, [pc, #24]	; (8013b40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b2c:	e002      	b.n	8013b34 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8013b2e:	4b04      	ldr	r3, [pc, #16]	; (8013b40 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	689b      	ldr	r3, [r3, #8]
        }
    }
 8013b34:	4618      	mov	r0, r3
 8013b36:	46bd      	mov	sp, r7
 8013b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	200098ec 	.word	0x200098ec

08013b44 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b082      	sub	sp, #8
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	4a05      	ldr	r2, [pc, #20]	; (8013b64 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	601a      	str	r2, [r3, #0]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7ff ff1f 	bl	8013998 <_ZN8touchgfx15UIEventListenerD1Ev>
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3708      	adds	r7, #8
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	08028330 	.word	0x08028330

08013b68 <_ZN8touchgfx11ApplicationD0Ev>:
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f7ff ffe7 	bl	8013b44 <_ZN8touchgfx11ApplicationD1Ev>
 8013b76:	f44f 7198 	mov.w	r1, #304	; 0x130
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f011 fbb0 	bl	80252e0 <_ZdlPvj>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4618      	mov	r0, r3
 8013b84:	3708      	adds	r7, #8
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
	...

08013b8c <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	4618      	mov	r0, r3
 8013b98:	f007 f9b0 	bl	801aefc <_ZN8touchgfx11ApplicationC1Ev>
 8013b9c:	4a09      	ldr	r2, [pc, #36]	; (8013bc4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	601a      	str	r2, [r3, #0]
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4a04      	ldr	r2, [pc, #16]	; (8013bc8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8013bb6:	6013      	str	r3, [r2, #0]
    }
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	08026b40 	.word	0x08026b40
 8013bc8:	20009958 	.word	0x20009958

08013bcc <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	4a05      	ldr	r2, [pc, #20]	; (8013bec <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7ff ffb1 	bl	8013b44 <_ZN8touchgfx11ApplicationD1Ev>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	4618      	mov	r0, r3
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	08026b40 	.word	0x08026b40

08013bf0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b082      	sub	sp, #8
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f7ff ffe7 	bl	8013bcc <_ZN8touchgfx14MVPApplicationD1Ev>
 8013bfe:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f011 fb6c 	bl	80252e0 <_ZdlPvj>
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3708      	adds	r7, #8
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd80      	pop	{r7, pc}

08013c12 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b082      	sub	sp, #8
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f000 f804 	bl	8013c28 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8013c20:	bf00      	nop
 8013c22:	3708      	adds	r7, #8
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d00f      	beq.n	8013c5a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	330c      	adds	r3, #12
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4610      	mov	r0, r2
 8013c4e:	4798      	blx	r3
 8013c50:	4603      	mov	r3, r0
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d001      	beq.n	8013c5a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013c56:	2301      	movs	r3, #1
 8013c58:	e000      	b.n	8013c5c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d00e      	beq.n	8013c7e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	3308      	adds	r3, #8
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	4610      	mov	r0, r2
 8013c74:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8013c7e:	bf00      	nop
 8013c80:	3708      	adds	r7, #8
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}

08013c86 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b084      	sub	sp, #16
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	60f8      	str	r0, [r7, #12]
 8013c8e:	60b9      	str	r1, [r7, #8]
 8013c90:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8013c92:	f007 f911 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 8013c96:	4603      	mov	r3, r0
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f007 f913 	bl	801aec4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d008      	beq.n	8013cb8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	681a      	ldr	r2, [r3, #0]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	330c      	adds	r3, #12
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	4798      	blx	r3
    }
    if (*currentTrans)
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d007      	beq.n	8013cd0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	4610      	mov	r0, r2
 8013cce:	4798      	blx	r3
    }
    if (*currentScreen)
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d008      	beq.n	8013cea <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	3314      	adds	r3, #20
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	4610      	mov	r0, r2
 8013ce8:	4798      	blx	r3
    }
    if (*currentPresenter)
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d008      	beq.n	8013d04 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	3304      	adds	r3, #4
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	4610      	mov	r0, r2
 8013d02:	4798      	blx	r3
    }
    if (*currentScreen)
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d007      	beq.n	8013d1c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4610      	mov	r0, r2
 8013d1a:	4798      	blx	r3
    }
    if (*currentPresenter)
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d008      	beq.n	8013d36 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	3308      	adds	r3, #8
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	4610      	mov	r0, r2
 8013d34:	4798      	blx	r3
    }
}
 8013d36:	bf00      	nop
 8013d38:	3710      	adds	r7, #16
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}

08013d3e <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8013d3e:	b580      	push	{r7, lr}
 8013d40:	b084      	sub	sp, #16
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	60f8      	str	r0, [r7, #12]
 8013d46:	60b9      	str	r1, [r7, #8]
 8013d48:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	330c      	adds	r3, #12
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	68f8      	ldr	r0, [r7, #12]
 8013d54:	4798      	blx	r3
    newPresenter->activate();
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	68b8      	ldr	r0, [r7, #8]
 8013d5e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8013d60:	6879      	ldr	r1, [r7, #4]
 8013d62:	68f8      	ldr	r0, [r7, #12]
 8013d64:	f008 f95e 	bl	801c024 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	3310      	adds	r3, #16
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	4798      	blx	r3

    Application::getInstance()->draw();
 8013d74:	f007 f8a0 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 8013d78:	4602      	mov	r2, r0
 8013d7a:	6813      	ldr	r3, [r2, #0]
 8013d7c:	3328      	adds	r3, #40	; 0x28
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4610      	mov	r0, r2
 8013d82:	4798      	blx	r3
}
 8013d84:	bf00      	nop
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	683a      	ldr	r2, [r7, #0]
 8013d9a:	601a      	str	r2, [r3, #0]
    }
 8013d9c:	bf00      	nop
 8013d9e:	370c      	adds	r7, #12
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr

08013da8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	4a08      	ldr	r2, [pc, #32]	; (8013dd4 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	601a      	str	r2, [r3, #0]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f000 fa5d 	bl	801427c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7ff ff01 	bl	8013bcc <_ZN8touchgfx14MVPApplicationD1Ev>
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3708      	adds	r7, #8
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	08026aec 	.word	0x08026aec

08013dd8 <_ZN23FrontendApplicationBaseD0Ev>:
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7ff ffe1 	bl	8013da8 <_ZN23FrontendApplicationBaseD1Ev>
 8013de6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f011 fa78 	bl	80252e0 <_ZdlPvj>
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	4618      	mov	r0, r3
 8013df4:	3708      	adds	r7, #8
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
	...

08013dfc <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7ff fde6 	bl	80139d8 <_ZN8touchgfx10TransitionC1Ev>
 8013e0c:	4a03      	ldr	r2, [pc, #12]	; (8013e1c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	601a      	str	r2, [r3, #0]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	4618      	mov	r0, r3
 8013e16:	3708      	adds	r7, #8
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	bd80      	pop	{r7, pc}
 8013e1c:	08026acc 	.word	0x08026acc

08013e20 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	4a05      	ldr	r2, [pc, #20]	; (8013e40 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	601a      	str	r2, [r3, #0]
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7ff fde7 	bl	8013a04 <_ZN8touchgfx10TransitionD1Ev>
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	08026acc 	.word	0x08026acc

08013e44 <_ZN8touchgfx12NoTransitionD0Ev>:
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f7ff ffe7 	bl	8013e20 <_ZN8touchgfx12NoTransitionD1Ev>
 8013e52:	210c      	movs	r1, #12
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f011 fa43 	bl	80252e0 <_ZdlPvj>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3708      	adds	r7, #8
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2201      	movs	r2, #1
 8013e70:	721a      	strb	r2, [r3, #8]
    }
 8013e72:	bf00      	nop
 8013e74:	370c      	adds	r7, #12
 8013e76:	46bd      	mov	sp, r7
 8013e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7c:	4770      	bx	lr

08013e7e <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8013e7e:	b480      	push	{r7}
 8013e80:	b083      	sub	sp, #12
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	6078      	str	r0, [r7, #4]
 8013e86:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	683a      	ldr	r2, [r7, #0]
 8013e8c:	605a      	str	r2, [r3, #4]
    }
 8013e8e:	bf00      	nop
 8013e90:	370c      	adds	r7, #12
 8013e92:	46bd      	mov	sp, r7
 8013e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e98:	4770      	bx	lr
	...

08013e9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7ff fe6e 	bl	8013b8c <_ZN8touchgfx14MVPApplicationC1Ev>
 8013eb0:	4a13      	ldr	r2, [pc, #76]	; (8013f00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	601a      	str	r2, [r3, #0]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f000 f89f 	bl	8014000 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	68ba      	ldr	r2, [r7, #8]
 8013ece:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8013ed2:	f7ff fe0f 	bl	8013af4 <_ZN8touchgfx3HAL11getInstanceEv>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	6813      	ldr	r3, [r2, #0]
 8013eda:	3308      	adds	r3, #8
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2100      	movs	r1, #0
 8013ee0:	4610      	mov	r0, r2
 8013ee2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	f001 ff4b 	bl	8015d80 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8013eea:	f7ff fe0f 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8013eee:	4603      	mov	r3, r0
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f00c faec 	bl	80204ce <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3710      	adds	r7, #16
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	08026aec 	.word	0x08026aec

08013f04 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr

08013f1c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	683a      	ldr	r2, [r7, #0]
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff ffe9 	bl	8013f04 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	685a      	ldr	r2, [r3, #4]
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	605a      	str	r2, [r3, #4]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	683a      	ldr	r2, [r7, #0]
 8013f3e:	3308      	adds	r3, #8
 8013f40:	3208      	adds	r2, #8
 8013f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f46:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3708      	adds	r7, #8
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8013f54:	b590      	push	{r4, r7, lr}
 8013f56:	b089      	sub	sp, #36	; 0x24
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8013f62:	4b10      	ldr	r3, [pc, #64]	; (8013fa4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8013f64:	61bb      	str	r3, [r7, #24]
 8013f66:	2300      	movs	r3, #0
 8013f68:	61fb      	str	r3, [r7, #28]
 8013f6a:	f107 0008 	add.w	r0, r7, #8
 8013f6e:	f107 0318 	add.w	r3, r7, #24
 8013f72:	cb0c      	ldmia	r3, {r2, r3}
 8013f74:	6879      	ldr	r1, [r7, #4]
 8013f76:	f000 f85f 	bl	8014038 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8013f7a:	f107 0308 	add.w	r3, r7, #8
 8013f7e:	4619      	mov	r1, r3
 8013f80:	4620      	mov	r0, r4
 8013f82:	f7ff ffcb 	bl	8013f1c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8013f86:	f107 0308 	add.w	r3, r7, #8
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f000 f976 	bl	801427c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8013f9c:	bf00      	nop
 8013f9e:	3724      	adds	r7, #36	; 0x24
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd90      	pop	{r4, r7, pc}
 8013fa4:	08013fa9 	.word	0x08013fa9

08013fa8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b084      	sub	sp, #16
 8013fac:	af02      	add	r7, sp, #8
 8013fae:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	4b04      	ldr	r3, [pc, #16]	; (8013fd8 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8013fc8:	4804      	ldr	r0, [pc, #16]	; (8013fdc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8013fca:	f000 f855 	bl	8014078 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8013fce:	bf00      	nop
 8013fd0:	3708      	adds	r7, #8
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	2000994c 	.word	0x2000994c
 8013fdc:	20009948 	.word	0x20009948

08013fe0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	4a04      	ldr	r2, [pc, #16]	; (8013ffc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	370c      	adds	r7, #12
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffa:	4770      	bx	lr
 8013ffc:	08026b7c 	.word	0x08026b7c

08014000 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f7ff ffe8 	bl	8013fe0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014010:	4a08      	ldr	r2, [pc, #32]	; (8014034 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	601a      	str	r2, [r3, #0]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2200      	movs	r2, #0
 801401a:	605a      	str	r2, [r3, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	609a      	str	r2, [r3, #8]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2200      	movs	r2, #0
 8014026:	60da      	str	r2, [r3, #12]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	4618      	mov	r0, r3
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	08026b28 	.word	0x08026b28

08014038 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	60f8      	str	r0, [r7, #12]
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	4639      	mov	r1, r7
 8014044:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	4618      	mov	r0, r3
 801404c:	f7ff ffc8 	bl	8013fe0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8014050:	4a08      	ldr	r2, [pc, #32]	; (8014074 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	68ba      	ldr	r2, [r7, #8]
 801405a:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	3308      	adds	r3, #8
 8014060:	463a      	mov	r2, r7
 8014062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014066:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	4618      	mov	r0, r3
 801406e:	3710      	adds	r7, #16
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}
 8014074:	08026b28 	.word	0x08026b28

08014078 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014078:	b590      	push	{r4, r7, lr}
 801407a:	b089      	sub	sp, #36	; 0x24
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
 8014084:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	689a      	ldr	r2, [r3, #8]
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	3320      	adds	r3, #32
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	4610      	mov	r0, r2
 8014096:	4798      	blx	r3
 8014098:	4603      	mov	r3, r0
 801409a:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 801409e:	d205      	bcs.n	80140ac <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80140a0:	4b4d      	ldr	r3, [pc, #308]	; (80141d8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 80140a2:	4a4e      	ldr	r2, [pc, #312]	; (80141dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80140a4:	21c2      	movs	r1, #194	; 0xc2
 80140a6:	484e      	ldr	r0, [pc, #312]	; (80141e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80140a8:	f011 f946 	bl	8025338 <__assert_func>
 80140ac:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	685a      	ldr	r2, [r3, #4]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	3320      	adds	r3, #32
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4610      	mov	r0, r2
 80140be:	4798      	blx	r3
 80140c0:	4603      	mov	r3, r0
 80140c2:	2b0f      	cmp	r3, #15
 80140c4:	d805      	bhi.n	80140d2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80140c6:	4b47      	ldr	r3, [pc, #284]	; (80141e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80140c8:	4a44      	ldr	r2, [pc, #272]	; (80141dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80140ca:	21c3      	movs	r1, #195	; 0xc3
 80140cc:	4844      	ldr	r0, [pc, #272]	; (80141e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80140ce:	f011 f933 	bl	8025338 <__assert_func>
 80140d2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	68da      	ldr	r2, [r3, #12]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	3320      	adds	r3, #32
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	4610      	mov	r0, r2
 80140e4:	4798      	blx	r3
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b0b      	cmp	r3, #11
 80140ea:	d805      	bhi.n	80140f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80140ec:	4b3e      	ldr	r3, [pc, #248]	; (80141e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80140ee:	4a3b      	ldr	r2, [pc, #236]	; (80141dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80140f0:	21c4      	movs	r1, #196	; 0xc4
 80140f2:	483b      	ldr	r0, [pc, #236]	; (80141e0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80140f4:	f011 f920 	bl	8025338 <__assert_func>
 80140f8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80140fa:	683a      	ldr	r2, [r7, #0]
 80140fc:	68b9      	ldr	r1, [r7, #8]
 80140fe:	68f8      	ldr	r0, [r7, #12]
 8014100:	f7ff fdc1 	bl	8013c86 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	2100      	movs	r1, #0
 801410a:	4618      	mov	r0, r3
 801410c:	f000 f86e 	bl	80141ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8014110:	4603      	mov	r3, r0
 8014112:	4619      	mov	r1, r3
 8014114:	200c      	movs	r0, #12
 8014116:	f7ff fbf1 	bl	80138fc <_ZnwjPv>
 801411a:	4604      	mov	r4, r0
 801411c:	2c00      	cmp	r4, #0
 801411e:	d004      	beq.n	801412a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8014120:	4620      	mov	r0, r4
 8014122:	f7ff fe6b 	bl	8013dfc <_ZN8touchgfx12NoTransitionC1Ev>
 8014126:	4623      	mov	r3, r4
 8014128:	e000      	b.n	801412c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801412a:	4623      	mov	r3, r4
 801412c:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	689b      	ldr	r3, [r3, #8]
 8014132:	2100      	movs	r1, #0
 8014134:	4618      	mov	r0, r3
 8014136:	f000 f86c 	bl	8014212 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 801413a:	4603      	mov	r3, r0
 801413c:	4619      	mov	r1, r3
 801413e:	f44f 701e 	mov.w	r0, #632	; 0x278
 8014142:	f7ff fbdb 	bl	80138fc <_ZnwjPv>
 8014146:	4604      	mov	r4, r0
 8014148:	2c00      	cmp	r4, #0
 801414a:	d004      	beq.n	8014156 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 801414c:	4620      	mov	r0, r4
 801414e:	f002 f823 	bl	8016198 <_ZN8MainViewC1Ev>
 8014152:	4623      	mov	r3, r4
 8014154:	e000      	b.n	8014158 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 8014156:	4623      	mov	r3, r4
 8014158:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	2100      	movs	r1, #0
 8014160:	4618      	mov	r0, r3
 8014162:	f000 f869 	bl	8014238 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8014166:	4603      	mov	r3, r0
 8014168:	4619      	mov	r1, r3
 801416a:	2010      	movs	r0, #16
 801416c:	f7ff fbc6 	bl	80138fc <_ZnwjPv>
 8014170:	4604      	mov	r4, r0
 8014172:	2c00      	cmp	r4, #0
 8014174:	d005      	beq.n	8014182 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8014176:	69b9      	ldr	r1, [r7, #24]
 8014178:	4620      	mov	r0, r4
 801417a:	f001 ff9b 	bl	80160b4 <_ZN13MainPresenterC1ER8MainView>
 801417e:	4623      	mov	r3, r4
 8014180:	e000      	b.n	8014184 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8014182:	4623      	mov	r3, r4
 8014184:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	69fa      	ldr	r2, [r7, #28]
 801418a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	697a      	ldr	r2, [r7, #20]
 8014190:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	69ba      	ldr	r2, [r7, #24]
 8014196:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014198:	697b      	ldr	r3, [r7, #20]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d002      	beq.n	80141a4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	3304      	adds	r3, #4
 80141a2:	e000      	b.n	80141a6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 80141a4:	2300      	movs	r3, #0
 80141a6:	4619      	mov	r1, r3
 80141a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141aa:	f7ff fdef 	bl	8013d8c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	3304      	adds	r3, #4
 80141b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7ff fe62 	bl	8013e7e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80141ba:	69bb      	ldr	r3, [r7, #24]
 80141bc:	6979      	ldr	r1, [r7, #20]
 80141be:	4618      	mov	r0, r3
 80141c0:	f000 f84d 	bl	801425e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80141c4:	69fa      	ldr	r2, [r7, #28]
 80141c6:	6979      	ldr	r1, [r7, #20]
 80141c8:	69b8      	ldr	r0, [r7, #24]
 80141ca:	f7ff fdb8 	bl	8013d3e <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80141ce:	697b      	ldr	r3, [r7, #20]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3724      	adds	r7, #36	; 0x24
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd90      	pop	{r4, r7, pc}
 80141d8:	080264b4 	.word	0x080264b4
 80141dc:	08026bd4 	.word	0x08026bd4
 80141e0:	08026544 	.word	0x08026544
 80141e4:	08026588 	.word	0x08026588
 80141e8:	0802662c 	.word	0x0802662c

080141ec <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	460b      	mov	r3, r1
 80141f6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	3324      	adds	r3, #36	; 0x24
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	887a      	ldrh	r2, [r7, #2]
 8014202:	4611      	mov	r1, r2
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	4798      	blx	r3
 8014208:	4603      	mov	r3, r0
    }
 801420a:	4618      	mov	r0, r3
 801420c:	3708      	adds	r7, #8
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}

08014212 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8014212:	b580      	push	{r7, lr}
 8014214:	b082      	sub	sp, #8
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
 801421a:	460b      	mov	r3, r1
 801421c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	3324      	adds	r3, #36	; 0x24
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	887a      	ldrh	r2, [r7, #2]
 8014228:	4611      	mov	r1, r2
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	4798      	blx	r3
 801422e:	4603      	mov	r3, r0
    }
 8014230:	4618      	mov	r0, r3
 8014232:	3708      	adds	r7, #8
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8014238:	b580      	push	{r7, lr}
 801423a:	b082      	sub	sp, #8
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
 8014240:	460b      	mov	r3, r1
 8014242:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	3324      	adds	r3, #36	; 0x24
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	887a      	ldrh	r2, [r7, #2]
 801424e:	4611      	mov	r1, r2
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	4798      	blx	r3
 8014254:	4603      	mov	r3, r0
    }
 8014256:	4618      	mov	r0, r3
 8014258:	3708      	adds	r7, #8
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}

0801425e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801425e:	b480      	push	{r7}
 8014260:	b083      	sub	sp, #12
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
 8014266:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	683a      	ldr	r2, [r7, #0]
 801426c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801426e:	bf00      	nop
 8014270:	370c      	adds	r7, #12
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr
	...

0801427c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	4a05      	ldr	r2, [pc, #20]	; (801429c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	601a      	str	r2, [r3, #0]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	4618      	mov	r0, r3
 801428e:	f7ff fc11 	bl	8013ab4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	4618      	mov	r0, r3
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	08026b28 	.word	0x08026b28

080142a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f7ff ffe7 	bl	801427c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80142ae:	2110      	movs	r1, #16
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f011 f815 	bl	80252e0 <_ZdlPvj>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	4618      	mov	r0, r3
 80142ba:	3708      	adds	r7, #8
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	68d2      	ldr	r2, [r2, #12]
 80142d0:	1052      	asrs	r2, r2, #1
 80142d2:	1899      	adds	r1, r3, r2
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	f003 0301 	and.w	r3, r3, #1
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d102      	bne.n	80142e6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	e00a      	b.n	80142fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	687a      	ldr	r2, [r7, #4]
 80142ec:	68d2      	ldr	r2, [r2, #12]
 80142ee:	1052      	asrs	r2, r2, #1
 80142f0:	4413      	add	r3, r2
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	6892      	ldr	r2, [r2, #8]
 80142f8:	4413      	add	r3, r2
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4608      	mov	r0, r1
 80142fe:	4798      	blx	r3
    }
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	685b      	ldr	r3, [r3, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d010      	beq.n	801433a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d107      	bne.n	8014330 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	f003 0301 	and.w	r3, r3, #1
 8014328:	2b00      	cmp	r3, #0
 801432a:	d101      	bne.n	8014330 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801432c:	2301      	movs	r3, #1
 801432e:	e000      	b.n	8014332 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8014330:	2300      	movs	r3, #0
 8014332:	2b01      	cmp	r3, #1
 8014334:	d001      	beq.n	801433a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8014336:	2301      	movs	r3, #1
 8014338:	e000      	b.n	801433c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801433a:	2300      	movs	r3, #0
    }
 801433c:	4618      	mov	r0, r3
 801433e:	370c      	adds	r7, #12
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8014348:	b480      	push	{r7}
 801434a:	b083      	sub	sp, #12
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	683a      	ldr	r2, [r7, #0]
 8014356:	601a      	str	r2, [r3, #0]
    }
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	4618      	mov	r0, r3
 801435c:	370c      	adds	r7, #12
 801435e:	46bd      	mov	sp, r7
 8014360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014364:	4770      	bx	lr

08014366 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8014366:	b480      	push	{r7}
 8014368:	b083      	sub	sp, #12
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2200      	movs	r2, #0
 8014372:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2200      	movs	r2, #0
 8014378:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	80da      	strh	r2, [r3, #6]
    }
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	4618      	mov	r0, r3
 801438a:	370c      	adds	r7, #12
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr

08014394 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8014394:	b480      	push	{r7}
 8014396:	b085      	sub	sp, #20
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	4608      	mov	r0, r1
 801439e:	4611      	mov	r1, r2
 80143a0:	461a      	mov	r2, r3
 80143a2:	4603      	mov	r3, r0
 80143a4:	817b      	strh	r3, [r7, #10]
 80143a6:	460b      	mov	r3, r1
 80143a8:	813b      	strh	r3, [r7, #8]
 80143aa:	4613      	mov	r3, r2
 80143ac:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	897a      	ldrh	r2, [r7, #10]
 80143b2:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	893a      	ldrh	r2, [r7, #8]
 80143b8:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	88fa      	ldrh	r2, [r7, #6]
 80143be:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	8b3a      	ldrh	r2, [r7, #24]
 80143c4:	80da      	strh	r2, [r3, #6]
    }
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	4618      	mov	r0, r3
 80143ca:	3714      	adds	r7, #20
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	460b      	mov	r3, r1
 80143de:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	887a      	ldrh	r2, [r7, #2]
 80143e4:	801a      	strh	r2, [r3, #0]
    {
    }
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af02      	add	r7, sp, #8
 80143fa:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 80143fc:	4a13      	ldr	r2, [pc, #76]	; (801444c <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	1d18      	adds	r0, r3, #4
 8014406:	2300      	movs	r3, #0
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	2300      	movs	r3, #0
 801440c:	2200      	movs	r2, #0
 801440e:	2100      	movs	r1, #0
 8014410:	f7ff ffc0 	bl	8014394 <_ZN8touchgfx4RectC1Essss>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	330c      	adds	r3, #12
 8014418:	4618      	mov	r0, r3
 801441a:	f7ff ffa4 	bl	8014366 <_ZN8touchgfx4RectC1Ev>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2200      	movs	r2, #0
 8014422:	615a      	str	r2, [r3, #20]
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2200      	movs	r2, #0
 8014428:	619a      	str	r2, [r3, #24]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	61da      	str	r2, [r3, #28]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	2200      	movs	r2, #0
 8014434:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	2201      	movs	r2, #1
 801443c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	4618      	mov	r0, r3
 8014444:	3708      	adds	r7, #8
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
 801444a:	bf00      	nop
 801444c:	08028468 	.word	0x08028468

08014450 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	4a04      	ldr	r2, [pc, #16]	; (801446c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	601a      	str	r2, [r3, #0]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	4618      	mov	r0, r3
 8014462:	370c      	adds	r7, #12
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr
 801446c:	08028468 	.word	0x08028468

08014470 <_ZN8touchgfx8DrawableD0Ev>:
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f7ff ffe9 	bl	8014450 <_ZN8touchgfx8DrawableD1Ev>
 801447e:	2128      	movs	r1, #40	; 0x28
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f010 ff2d 	bl	80252e0 <_ZdlPvj>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	4618      	mov	r0, r3
 801448a:	3708      	adds	r7, #8
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}

08014490 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8014490:	b580      	push	{r7, lr}
 8014492:	b084      	sub	sp, #16
 8014494:	af00      	add	r7, sp, #0
 8014496:	60f8      	str	r0, [r7, #12]
 8014498:	4608      	mov	r0, r1
 801449a:	4611      	mov	r1, r2
 801449c:	461a      	mov	r2, r3
 801449e:	4603      	mov	r3, r0
 80144a0:	817b      	strh	r3, [r7, #10]
 80144a2:	460b      	mov	r3, r1
 80144a4:	813b      	strh	r3, [r7, #8]
 80144a6:	4613      	mov	r3, r2
 80144a8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	3334      	adds	r3, #52	; 0x34
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80144b6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80144ba:	68f8      	ldr	r0, [r7, #12]
 80144bc:	4798      	blx	r3
        setWidth(width);
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	3338      	adds	r3, #56	; 0x38
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80144ca:	4611      	mov	r1, r2
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	4798      	blx	r3
        setHeight(height);
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	333c      	adds	r3, #60	; 0x3c
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80144dc:	4611      	mov	r1, r2
 80144de:	68f8      	ldr	r0, [r7, #12]
 80144e0:	4798      	blx	r3
    }
 80144e2:	bf00      	nop
 80144e4:	3710      	adds	r7, #16
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}

080144ea <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 80144ea:	b480      	push	{r7}
 80144ec:	b083      	sub	sp, #12
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	6078      	str	r0, [r7, #4]
 80144f2:	460b      	mov	r3, r1
 80144f4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	887a      	ldrh	r2, [r7, #2]
 80144fa:	809a      	strh	r2, [r3, #4]
    }
 80144fc:	bf00      	nop
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	460b      	mov	r3, r1
 8014512:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	887a      	ldrh	r2, [r7, #2]
 8014518:	80da      	strh	r2, [r3, #6]
    }
 801451a:	bf00      	nop
 801451c:	370c      	adds	r7, #12
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr

08014526 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8014526:	b580      	push	{r7, lr}
 8014528:	b082      	sub	sp, #8
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
 801452e:	460b      	mov	r3, r1
 8014530:	807b      	strh	r3, [r7, #2]
 8014532:	4613      	mov	r3, r2
 8014534:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	332c      	adds	r3, #44	; 0x2c
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014542:	4611      	mov	r1, r2
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	4798      	blx	r3
        setY(y);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	3330      	adds	r3, #48	; 0x30
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014554:	4611      	mov	r1, r2
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	4798      	blx	r3
    }
 801455a:	bf00      	nop
 801455c:	3708      	adds	r7, #8
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}

08014562 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8014562:	b480      	push	{r7}
 8014564:	b083      	sub	sp, #12
 8014566:	af00      	add	r7, sp, #0
 8014568:	6078      	str	r0, [r7, #4]
 801456a:	460b      	mov	r3, r1
 801456c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	887a      	ldrh	r2, [r7, #2]
 8014572:	811a      	strh	r2, [r3, #8]
    }
 8014574:	bf00      	nop
 8014576:	370c      	adds	r7, #12
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr

08014580 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	460b      	mov	r3, r1
 801458a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	887a      	ldrh	r2, [r7, #2]
 8014590:	815a      	strh	r2, [r3, #10]
    }
 8014592:	bf00      	nop
 8014594:	370c      	adds	r7, #12
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr

0801459e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 801459e:	b480      	push	{r7}
 80145a0:	b083      	sub	sp, #12
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	bf00      	nop
 80145a8:	370c      	adds	r7, #12
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr

080145b2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 80145b2:	b480      	push	{r7}
 80145b4:	b083      	sub	sp, #12
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
 80145ba:	6039      	str	r1, [r7, #0]
 80145bc:	bf00      	nop
 80145be:	370c      	adds	r7, #12
 80145c0:	46bd      	mov	sp, r7
 80145c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c6:	4770      	bx	lr

080145c8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 80145c8:	b480      	push	{r7}
 80145ca:	b083      	sub	sp, #12
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
 80145d2:	bf00      	nop
 80145d4:	370c      	adds	r7, #12
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr

080145de <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 80145de:	b480      	push	{r7}
 80145e0:	b083      	sub	sp, #12
 80145e2:	af00      	add	r7, sp, #0
 80145e4:	6078      	str	r0, [r7, #4]
 80145e6:	6039      	str	r1, [r7, #0]
 80145e8:	bf00      	nop
 80145ea:	370c      	adds	r7, #12
 80145ec:	46bd      	mov	sp, r7
 80145ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f2:	4770      	bx	lr

080145f4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	bf00      	nop
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8014608:	b480      	push	{r7}
 801460a:	b083      	sub	sp, #12
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	460b      	mov	r3, r1
 8014612:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	78fa      	ldrb	r2, [r7, #3]
 8014618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801461c:	bf00      	nop
 801461e:	370c      	adds	r7, #12
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr

08014628 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8014628:	b480      	push	{r7}
 801462a:	b083      	sub	sp, #12
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
 8014630:	460b      	mov	r3, r1
 8014632:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	78fa      	ldrb	r2, [r7, #3]
 8014638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801463c:	bf00      	nop
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr

08014648 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8014648:	b480      	push	{r7}
 801464a:	b083      	sub	sp, #12
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8014656:	4618      	mov	r0, r3
 8014658:	370c      	adds	r7, #12
 801465a:	46bd      	mov	sp, r7
 801465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014660:	4770      	bx	lr

08014662 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8014662:	b480      	push	{r7}
 8014664:	b083      	sub	sp, #12
 8014666:	af00      	add	r7, sp, #0
 8014668:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8014670:	4618      	mov	r0, r3
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	460b      	mov	r3, r1
 8014686:	807b      	strh	r3, [r7, #2]
 8014688:	4613      	mov	r3, r2
 801468a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	3354      	adds	r3, #84	; 0x54
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	8879      	ldrh	r1, [r7, #2]
 8014696:	687a      	ldr	r2, [r7, #4]
 8014698:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801469c:	b292      	uxth	r2, r2
 801469e:	1a8a      	subs	r2, r1, r2
 80146a0:	b292      	uxth	r2, r2
 80146a2:	b210      	sxth	r0, r2
 80146a4:	8839      	ldrh	r1, [r7, #0]
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80146ac:	b292      	uxth	r2, r2
 80146ae:	1a8a      	subs	r2, r1, r2
 80146b0:	b292      	uxth	r2, r2
 80146b2:	b212      	sxth	r2, r2
 80146b4:	4601      	mov	r1, r0
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	4798      	blx	r3
    }
 80146ba:	bf00      	nop
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}

080146c2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80146c2:	b480      	push	{r7}
 80146c4:	b083      	sub	sp, #12
 80146c6:	af00      	add	r7, sp, #0
 80146c8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146d0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146d8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146e0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80146e2:	bf00      	nop
 80146e4:	370c      	adds	r7, #12
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr

080146ee <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b084      	sub	sp, #16
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	60f8      	str	r0, [r7, #12]
 80146f6:	60b9      	str	r1, [r7, #8]
 80146f8:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80146fa:	68f8      	ldr	r0, [r7, #12]
 80146fc:	f7ff ffe1 	bl	80146c2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	68fa      	ldr	r2, [r7, #12]
 801470c:	601a      	str	r2, [r3, #0]
    }
 801470e:	bf00      	nop
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
	...

08014718 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8014718:	b580      	push	{r7, lr}
 801471a:	b082      	sub	sp, #8
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	4a05      	ldr	r2, [pc, #20]	; (8014738 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	601a      	str	r2, [r3, #0]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	4618      	mov	r0, r3
 801472a:	f7ff fe91 	bl	8014450 <_ZN8touchgfx8DrawableD1Ev>
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	4618      	mov	r0, r3
 8014732:	3708      	adds	r7, #8
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}
 8014738:	08027704 	.word	0x08027704

0801473c <_ZN8touchgfx9ContainerD0Ev>:
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7ff ffe7 	bl	8014718 <_ZN8touchgfx9ContainerD1Ev>
 801474a:	212c      	movs	r1, #44	; 0x2c
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f010 fdc7 	bl	80252e0 <_ZdlPvj>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	4618      	mov	r0, r3
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	4a06      	ldr	r2, [pc, #24]	; (8014780 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	601a      	str	r2, [r3, #0]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	3304      	adds	r3, #4
 801476e:	4618      	mov	r0, r3
 8014770:	f7ff ffd2 	bl	8014718 <_ZN8touchgfx9ContainerD1Ev>
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	4618      	mov	r0, r3
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	08028560 	.word	0x08028560

08014784 <_ZN8touchgfx6ScreenD0Ev>:
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f7ff ffe5 	bl	801475c <_ZN8touchgfx6ScreenD1Ev>
 8014792:	213c      	movs	r1, #60	; 0x3c
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f010 fda3 	bl	80252e0 <_ZdlPvj>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	4618      	mov	r0, r3
 801479e:	3708      	adds	r7, #8
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}

080147a4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 80147a4:	b480      	push	{r7}
 80147a6:	b083      	sub	sp, #12
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	bf00      	nop
 80147ae:	370c      	adds	r7, #12
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr

080147b8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 80147b8:	b480      	push	{r7}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
 80147c0:	bf00      	nop
 80147c2:	370c      	adds	r7, #12
 80147c4:	46bd      	mov	sp, r7
 80147c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ca:	4770      	bx	lr

080147cc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	bf00      	nop
 80147d6:	370c      	adds	r7, #12
 80147d8:	46bd      	mov	sp, r7
 80147da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147de:	4770      	bx	lr

080147e0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
    {
    }
 80147e8:	bf00      	nop
 80147ea:	370c      	adds	r7, #12
 80147ec:	46bd      	mov	sp, r7
 80147ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f2:	4770      	bx	lr

080147f4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80147f4:	b480      	push	{r7}
 80147f6:	b083      	sub	sp, #12
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
 80147fc:	460b      	mov	r3, r1
 80147fe:	70fb      	strb	r3, [r7, #3]
    {
    }
 8014800:	bf00      	nop
 8014802:	370c      	adds	r7, #12
 8014804:	46bd      	mov	sp, r7
 8014806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480a:	4770      	bx	lr

0801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	3304      	adds	r3, #4
 801481a:	6839      	ldr	r1, [r7, #0]
 801481c:	4618      	mov	r0, r3
 801481e:	f003 fff1 	bl	8018804 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014822:	bf00      	nop
 8014824:	3708      	adds	r7, #8
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
	...

0801482c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 801482c:	b580      	push	{r7, lr}
 801482e:	b082      	sub	sp, #8
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	4618      	mov	r0, r3
 8014838:	f7ff fddc 	bl	80143f4 <_ZN8touchgfx8DrawableC1Ev>
 801483c:	4a03      	ldr	r2, [pc, #12]	; (801484c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	601a      	str	r2, [r3, #0]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}
 801484c:	08026e3c 	.word	0x08026e3c

08014850 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	4a05      	ldr	r2, [pc, #20]	; (8014870 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	4618      	mov	r0, r3
 8014862:	f7ff fdf5 	bl	8014450 <_ZN8touchgfx8DrawableD1Ev>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	4618      	mov	r0, r3
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	08026e3c 	.word	0x08026e3c

08014874 <_ZN8touchgfx6WidgetD0Ev>:
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f7ff ffe7 	bl	8014850 <_ZN8touchgfx6WidgetD1Ev>
 8014882:	2128      	movs	r1, #40	; 0x28
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f010 fd2b 	bl	80252e0 <_ZdlPvj>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	607b      	str	r3, [r7, #4]
 801489e:	460b      	mov	r3, r1
 80148a0:	817b      	strh	r3, [r7, #10]
 80148a2:	4613      	mov	r3, r2
 80148a4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7ff fecd 	bl	8014648 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d008      	beq.n	80148c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	4618      	mov	r0, r3
 80148b8:	f7ff fed3 	bl	8014662 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80148bc:	4603      	mov	r3, r0
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d001      	beq.n	80148c6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80148c2:	2301      	movs	r3, #1
 80148c4:	e000      	b.n	80148c8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80148c6:	2300      	movs	r3, #0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d002      	beq.n	80148d2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	601a      	str	r2, [r3, #0]
        }
    }
 80148d2:	bf00      	nop
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
	...

080148dc <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7ff ffa0 	bl	801482c <_ZN8touchgfx6WidgetC1Ev>
 80148ec:	4a0a      	ldr	r2, [pc, #40]	; (8014918 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	601a      	str	r2, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	22ff      	movs	r2, #255	; 0xff
 80148f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	3328      	adds	r3, #40	; 0x28
 80148fe:	2100      	movs	r1, #0
 8014900:	4618      	mov	r0, r3
 8014902:	f7ff fd21 	bl	8014348 <_ZN8touchgfx9colortypeC1Em>
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2200      	movs	r2, #0
 801490a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}
 8014918:	08027ffc 	.word	0x08027ffc

0801491c <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	4a05      	ldr	r2, [pc, #20]	; (801493c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	601a      	str	r2, [r3, #0]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff ff8f 	bl	8014850 <_ZN8touchgfx6WidgetD1Ev>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	08027ffc 	.word	0x08027ffc

08014940 <_ZN8touchgfx3BoxD0Ev>:
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff ffe7 	bl	801491c <_ZN8touchgfx3BoxD1Ev>
 801494e:	2130      	movs	r1, #48	; 0x30
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f010 fcc5 	bl	80252e0 <_ZdlPvj>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014970:	bf00      	nop
 8014972:	370c      	adds	r7, #12
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	6039      	str	r1, [r7, #0]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff ff4f 	bl	801482c <_ZN8touchgfx6WidgetC1Ev>
 801498e:	4a0b      	ldr	r2, [pc, #44]	; (80149bc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	601a      	str	r2, [r3, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	3326      	adds	r3, #38	; 0x26
 8014998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801499c:	4618      	mov	r0, r3
 801499e:	f7ff fd19 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	22ff      	movs	r2, #255	; 0xff
 80149a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 80149aa:	6839      	ldr	r1, [r7, #0]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f005 f92d 	bl	8019c0c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4618      	mov	r0, r3
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	080280e0 	.word	0x080280e0

080149c0 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b082      	sub	sp, #8
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	6078      	str	r0, [r7, #4]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7ff ff2e 	bl	801482c <_ZN8touchgfx6WidgetC1Ev>
 80149d0:	4a09      	ldr	r2, [pc, #36]	; (80149f8 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	601a      	str	r2, [r3, #0]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2200      	movs	r2, #0
 80149da:	629a      	str	r2, [r3, #40]	; 0x28
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2200      	movs	r2, #0
 80149e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2101      	movs	r1, #1
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7ff fe1d 	bl	8014628 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	4618      	mov	r0, r3
 80149f2:	3708      	adds	r7, #8
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	08027f14 	.word	0x08027f14

080149fc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 80149fc:	b480      	push	{r7}
 80149fe:	b083      	sub	sp, #12
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	683a      	ldr	r2, [r7, #0]
 8014a0a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014a0c:	bf00      	nop
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr

08014a18 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	4a05      	ldr	r2, [pc, #20]	; (8014a38 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	601a      	str	r2, [r3, #0]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7ff ff11 	bl	8014850 <_ZN8touchgfx6WidgetD1Ev>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	4618      	mov	r0, r3
 8014a32:	3708      	adds	r7, #8
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}
 8014a38:	08027f14 	.word	0x08027f14

08014a3c <_ZN8touchgfx14AbstractButtonD0Ev>:
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7ff ffe7 	bl	8014a18 <_ZN8touchgfx14AbstractButtonD1Ev>
 8014a4a:	2130      	movs	r1, #48	; 0x30
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f010 fc47 	bl	80252e0 <_ZdlPvj>
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	4618      	mov	r0, r3
 8014a56:	3708      	adds	r7, #8
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <_ZN8touchgfx11RadioButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    RadioButton() : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff ffaa 	bl	80149c0 <_ZN8touchgfx14AbstractButtonC1Ev>
 8014a6c:	4a19      	ldr	r2, [pc, #100]	; (8014ad4 <_ZN8touchgfx11RadioButtonC1Ev+0x78>)
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	601a      	str	r2, [r3, #0]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	332e      	adds	r3, #46	; 0x2e
 8014a76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7ff fcaa 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	3330      	adds	r3, #48	; 0x30
 8014a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7ff fca3 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	3332      	adds	r3, #50	; 0x32
 8014a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7ff fc9c 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	3334      	adds	r3, #52	; 0x34
 8014aa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7ff fc95 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	22ff      	movs	r2, #255	; 0xff
 8014aae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2200      	movs	r2, #0
 8014abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    { }
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	4618      	mov	r0, r3
 8014acc:	3708      	adds	r7, #8
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	080281b0 	.word	0x080281b0

08014ad8 <_ZN8touchgfx11RadioButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~RadioButton() { }
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	4a05      	ldr	r2, [pc, #20]	; (8014af8 <_ZN8touchgfx11RadioButtonD1Ev+0x20>)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	601a      	str	r2, [r3, #0]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ff ff95 	bl	8014a18 <_ZN8touchgfx14AbstractButtonD1Ev>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	4618      	mov	r0, r3
 8014af2:	3708      	adds	r7, #8
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	080281b0 	.word	0x080281b0

08014afc <_ZN8touchgfx11RadioButtonD0Ev>:
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f7ff ffe7 	bl	8014ad8 <_ZN8touchgfx11RadioButtonD1Ev>
 8014b0a:	2140      	movs	r1, #64	; 0x40
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f010 fbe7 	bl	80252e0 <_ZdlPvj>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	4618      	mov	r0, r3
 8014b16:	3708      	adds	r7, #8
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}

08014b1c <_ZN8touchgfx11RadioButton19setDeselectedActionERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setDeselectedAction(GenericCallback< const AbstractButton& >& callback)
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
 8014b24:	6039      	str	r1, [r7, #0]
    {
        deselectedAction = &callback;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	683a      	ldr	r2, [r7, #0]
 8014b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014b2c:	bf00      	nop
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr

08014b38 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>:
     *
     *        States whether or not it is possible to de-select the RadioButton by clicking it.
     *
     * @param state true if it should be possible to de-select by click.
     */
    void setDeselectionEnabled(bool state)
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	460b      	mov	r3, r1
 8014b42:	70fb      	strb	r3, [r7, #3]
    {
        deselectionEnabled = state;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	78fa      	ldrb	r2, [r7, #3]
 8014b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
 8014b4c:	bf00      	nop
 8014b4e:	370c      	adds	r7, #12
 8014b50:	46bd      	mov	sp, r7
 8014b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b56:	4770      	bx	lr

08014b58 <_ZNK8touchgfx11RadioButton21getDeselectionEnabledEv>:
     *
     *        Gets the current deselectionEnabled state.
     *
     * @return The current deselectionEnabled state.
     */
    bool getDeselectionEnabled() const
 8014b58:	b480      	push	{r7}
 8014b5a:	b083      	sub	sp, #12
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
    {
        return deselectionEnabled;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    }
 8014b66:	4618      	mov	r0, r3
 8014b68:	370c      	adds	r7, #12
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr

08014b72 <_ZNK8touchgfx11RadioButton11getSelectedEv>:
     *
     *        Gets the current selected state.
     *
     * @return The current selected state.
     */
    bool getSelected() const
 8014b72:	b480      	push	{r7}
 8014b74:	b083      	sub	sp, #12
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
    {
        return selected;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    }
 8014b80:	4618      	mov	r0, r3
 8014b82:	370c      	adds	r7, #12
 8014b84:	46bd      	mov	sp, r7
 8014b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8a:	4770      	bx	lr

08014b8c <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	460b      	mov	r3, r1
 8014b96:	807b      	strh	r3, [r7, #2]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	887a      	ldrh	r2, [r7, #2]
 8014b9c:	801a      	strh	r2, [r3, #0]
    }
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	370c      	adds	r7, #12
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	f7ff fe38 	bl	801482c <_ZN8touchgfx6WidgetC1Ev>
 8014bbc:	4a13      	ldr	r2, [pc, #76]	; (8014c0c <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	601a      	str	r2, [r3, #0]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	3326      	adds	r3, #38	; 0x26
 8014bc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7ff ffde 	bl	8014b8c <_ZN8touchgfx9TypedTextC1Et>
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	3328      	adds	r3, #40	; 0x28
 8014bd4:	2100      	movs	r1, #0
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff fbb6 	bl	8014348 <_ZN8touchgfx9colortypeC1Em>
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2200      	movs	r2, #0
 8014be0:	859a      	strh	r2, [r3, #44]	; 0x2c
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	22ff      	movs	r2, #255	; 0xff
 8014be6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2200      	movs	r2, #0
 8014bee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	4618      	mov	r0, r3
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	08027f80 	.word	0x08027f80

08014c10 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af02      	add	r7, sp, #8
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	2300      	movs	r3, #0
 8014c20:	2200      	movs	r2, #0
 8014c22:	2100      	movs	r1, #0
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f7ff fbb5 	bl	8014394 <_ZN8touchgfx4RectC1Essss>
    }
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	3708      	adds	r7, #8
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}

08014c32 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8014c32:	b480      	push	{r7}
 8014c34:	b083      	sub	sp, #12
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	6078      	str	r0, [r7, #4]
 8014c3a:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	683a      	ldr	r2, [r7, #0]
 8014c40:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014c42:	bf00      	nop
 8014c44:	370c      	adds	r7, #12
 8014c46:	46bd      	mov	sp, r7
 8014c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4c:	4770      	bx	lr

08014c4e <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8014c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c50:	b085      	sub	sp, #20
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	6078      	str	r0, [r7, #4]
 8014c56:	460b      	mov	r3, r1
 8014c58:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8014c5a:	687e      	ldr	r6, [r7, #4]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	3330      	adds	r3, #48	; 0x30
 8014c62:	681c      	ldr	r4, [r3, #0]
 8014c64:	887d      	ldrh	r5, [r7, #2]
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f000 f845 	bl	8014cf6 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	81bb      	strh	r3, [r7, #12]
 8014c70:	f107 030c 	add.w	r3, r7, #12
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7fe fcf5 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	6813      	ldr	r3, [r2, #0]
 8014c7e:	332c      	adds	r3, #44	; 0x2c
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	4610      	mov	r0, r2
 8014c84:	4798      	blx	r3
 8014c86:	4603      	mov	r3, r0
 8014c88:	1aeb      	subs	r3, r5, r3
 8014c8a:	b29b      	uxth	r3, r3
 8014c8c:	b21b      	sxth	r3, r3
 8014c8e:	4619      	mov	r1, r3
 8014c90:	4630      	mov	r0, r6
 8014c92:	47a0      	blx	r4
    }
 8014c94:	bf00      	nop
 8014c96:	3714      	adds	r7, #20
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c9c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b082      	sub	sp, #8
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	807b      	strh	r3, [r7, #2]
 8014ca8:	4613      	mov	r3, r2
 8014caa:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	332c      	adds	r3, #44	; 0x2c
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8014cba:	4610      	mov	r0, r2
 8014cbc:	4798      	blx	r3
        setBaselineY(baselineY);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	3360      	adds	r3, #96	; 0x60
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014cca:	4611      	mov	r1, r2
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	4798      	blx	r3
    }
 8014cd0:	bf00      	nop
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	887a      	ldrh	r2, [r7, #2]
 8014ce8:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8014cea:	bf00      	nop
 8014cec:	370c      	adds	r7, #12
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr

08014cf6 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8014cf6:	b480      	push	{r7}
 8014cf8:	b083      	sub	sp, #12
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8014d02:	4618      	mov	r0, r3
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr
	...

08014d10 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	4a05      	ldr	r2, [pc, #20]	; (8014d30 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	601a      	str	r2, [r3, #0]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7ff fd95 	bl	8014850 <_ZN8touchgfx6WidgetD1Ev>
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3708      	adds	r7, #8
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}
 8014d30:	08027f80 	.word	0x08027f80

08014d34 <_ZN8touchgfx8TextAreaD0Ev>:
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7ff ffe7 	bl	8014d10 <_ZN8touchgfx8TextAreaD1Ev>
 8014d42:	2134      	movs	r1, #52	; 0x34
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f010 facb 	bl	80252e0 <_ZdlPvj>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3708      	adds	r7, #8
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}

08014d54 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
        : TextArea()
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7ff ff24 	bl	8014bac <_ZN8touchgfx8TextAreaC1Ev>
 8014d64:	4a03      	ldr	r2, [pc, #12]	; (8014d74 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	601a      	str	r2, [r3, #0]
    {
    }
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3708      	adds	r7, #8
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}
 8014d74:	08026da8 	.word	0x08026da8

08014d78 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	4a05      	ldr	r2, [pc, #20]	; (8014d98 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	601a      	str	r2, [r3, #0]
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7ff ffc1 	bl	8014d10 <_ZN8touchgfx8TextAreaD1Ev>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	3708      	adds	r7, #8
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	08026da8 	.word	0x08026da8

08014d9c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7ff ffe7 	bl	8014d78 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8014daa:	2134      	movs	r1, #52	; 0x34
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f010 fa97 	bl	80252e0 <_ZdlPvj>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	4618      	mov	r0, r3
 8014db6:	3708      	adds	r7, #8
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}

08014dbc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b082      	sub	sp, #8
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7ff ffc4 	bl	8014d54 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8014dcc:	4a05      	ldr	r2, [pc, #20]	; (8014de4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	601a      	str	r2, [r3, #0]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	08028064 	.word	0x08028064

08014de8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8014de8:	b480      	push	{r7}
 8014dea:	b083      	sub	sp, #12
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	683a      	ldr	r2, [r7, #0]
 8014df6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8014df8:	bf00      	nop
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	4a05      	ldr	r2, [pc, #20]	; (8014e24 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	601a      	str	r2, [r3, #0]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff fca1 	bl	801475c <_ZN8touchgfx6ScreenD1Ev>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	3708      	adds	r7, #8
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	08026d74 	.word	0x08026d74

08014e28 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7ff ffe7 	bl	8014e04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8014e36:	2140      	movs	r1, #64	; 0x40
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f010 fa51 	bl	80252e0 <_ZdlPvj>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4618      	mov	r0, r3
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	4a24      	ldr	r2, [pc, #144]	; (8014ee4 <_ZN12MainViewBaseD1Ev+0x9c>)
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	601a      	str	r2, [r3, #0]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f000 fdcd 	bl	80159fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f000 fdc7 	bl	80159fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8014e74:	4618      	mov	r0, r3
 8014e76:	f000 fc0f 	bl	8015698 <_ZN8touchgfx16RadioButtonGroupILt4EED1Ev>
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8014e80:	4618      	mov	r0, r3
 8014e82:	f000 fdff 	bl	8015a84 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f000 fdf9 	bl	8015a84 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7ff fe1d 	bl	8014ad8 <_ZN8touchgfx11RadioButtonD1Ev>
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7ff fe17 	bl	8014ad8 <_ZN8touchgfx11RadioButtonD1Ev>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	33dc      	adds	r3, #220	; 0xdc
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff fe12 	bl	8014ad8 <_ZN8touchgfx11RadioButtonD1Ev>
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	339c      	adds	r3, #156	; 0x9c
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7ff fe0d 	bl	8014ad8 <_ZN8touchgfx11RadioButtonD1Ev>
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	3370      	adds	r3, #112	; 0x70
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f000 fdbc 	bl	8015a40 <_ZN8touchgfx5ImageD1Ev>
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	3340      	adds	r3, #64	; 0x40
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7ff fd25 	bl	801491c <_ZN8touchgfx3BoxD1Ev>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7ff ff95 	bl	8014e04 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4618      	mov	r0, r3
 8014ede:	3708      	adds	r7, #8
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	08026cdc 	.word	0x08026cdc

08014ee8 <_ZN12MainViewBaseD0Ev>:
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f7ff ffa9 	bl	8014e48 <_ZN12MainViewBaseD1Ev>
 8014ef6:	f44f 711e 	mov.w	r1, #632	; 0x278
 8014efa:	6878      	ldr	r0, [r7, #4]
 8014efc:	f010 f9f0 	bl	80252e0 <_ZdlPvj>
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4618      	mov	r0, r3
 8014f04:	3708      	adds	r7, #8
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
	...

08014f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 8014f0c:	b590      	push	{r4, r7, lr}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	4603      	mov	r3, r0
 8014f14:	71fb      	strb	r3, [r7, #7]
 8014f16:	460b      	mov	r3, r1
 8014f18:	71bb      	strb	r3, [r7, #6]
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 8014f1e:	f7fe fde9 	bl	8013af4 <_ZN8touchgfx3HAL11getInstanceEv>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d105      	bne.n	8014f34 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8014f28:	4b0a      	ldr	r3, [pc, #40]	; (8014f54 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 8014f2a:	4a0b      	ldr	r2, [pc, #44]	; (8014f58 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 8014f2c:	2138      	movs	r1, #56	; 0x38
 8014f2e:	480b      	ldr	r0, [pc, #44]	; (8014f5c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8014f30:	f010 fa02 	bl	8025338 <__assert_func>
 8014f34:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8014f36:	f7fe fde9 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8014f3a:	6803      	ldr	r3, [r0, #0]
 8014f3c:	332c      	adds	r3, #44	; 0x2c
 8014f3e:	681c      	ldr	r4, [r3, #0]
 8014f40:	797b      	ldrb	r3, [r7, #5]
 8014f42:	79ba      	ldrb	r2, [r7, #6]
 8014f44:	79f9      	ldrb	r1, [r7, #7]
 8014f46:	47a0      	blx	r4
 8014f48:	4603      	mov	r3, r0
    }
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	370c      	adds	r7, #12
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd90      	pop	{r4, r7, pc}
 8014f52:	bf00      	nop
 8014f54:	080267ac 	.word	0x080267ac
 8014f58:	08026e9c 	.word	0x08026e9c
 8014f5c:	080267f0 	.word	0x080267f0

08014f60 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8014f60:	b590      	push	{r4, r7, lr}
 8014f62:	b09d      	sub	sp, #116	; 0x74
 8014f64:	af02      	add	r7, sp, #8
 8014f66:	6078      	str	r0, [r7, #4]
    radioButtonSelectedCallback(this, &MainViewBase::radioButtonSelectedCallbackHandler),
    radioButtonDeselectedCallback(this, &MainViewBase::radioButtonDeselectedCallbackHandler)
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f000 fbbc 	bl	80156e8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8014f70:	4ae0      	ldr	r2, [pc, #896]	; (80152f4 <_ZN12MainViewBaseC1Ev+0x394>)
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	601a      	str	r2, [r3, #0]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	3340      	adds	r3, #64	; 0x40
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7ff fcae 	bl	80148dc <_ZN8touchgfx3BoxC1Ev>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8014f86:	f107 0308 	add.w	r3, r7, #8
 8014f8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7ff fa20 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8014f94:	f107 0308 	add.w	r3, r7, #8
 8014f98:	4619      	mov	r1, r3
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	f7ff fcee 	bl	801497c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	339c      	adds	r3, #156	; 0x9c
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7ff fd59 	bl	8014a5c <_ZN8touchgfx11RadioButtonC1Ev>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	33dc      	adds	r3, #220	; 0xdc
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7ff fd54 	bl	8014a5c <_ZN8touchgfx11RadioButtonC1Ev>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7ff fd4e 	bl	8014a5c <_ZN8touchgfx11RadioButtonC1Ev>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7ff fd48 	bl	8014a5c <_ZN8touchgfx11RadioButtonC1Ev>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7ff fef2 	bl	8014dbc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7ff feec 	bl	8014dbc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8014fea:	4618      	mov	r0, r3
 8014fec:	f000 fb92 	bl	8015714 <_ZN8touchgfx16RadioButtonGroupILt4EEC1Ev>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8014ff6:	4bc0      	ldr	r3, [pc, #768]	; (80152f8 <_ZN12MainViewBaseC1Ev+0x398>)
 8014ff8:	60fb      	str	r3, [r7, #12]
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	613b      	str	r3, [r7, #16]
 8014ffe:	f107 030c 	add.w	r3, r7, #12
 8015002:	cb0c      	ldmia	r3, {r2, r3}
 8015004:	6879      	ldr	r1, [r7, #4]
 8015006:	f000 fbd3 	bl	80157b0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8015010:	4bba      	ldr	r3, [pc, #744]	; (80152fc <_ZN12MainViewBaseC1Ev+0x39c>)
 8015012:	617b      	str	r3, [r7, #20]
 8015014:	2300      	movs	r3, #0
 8015016:	61bb      	str	r3, [r7, #24]
 8015018:	f107 0314 	add.w	r3, r7, #20
 801501c:	cb0c      	ldmia	r3, {r2, r3}
 801501e:	6879      	ldr	r1, [r7, #4]
 8015020:	f000 fbc6 	bl	80157b0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 800, 480);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801502a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801502e:	9300      	str	r3, [sp, #0]
 8015030:	f44f 7348 	mov.w	r3, #800	; 0x320
 8015034:	2200      	movs	r2, #0
 8015036:	2100      	movs	r1, #0
 8015038:	f7ff fa2a 	bl	8014490 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setVisible(false);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	3340      	adds	r3, #64	; 0x40
 8015040:	2100      	movs	r1, #0
 8015042:	4618      	mov	r0, r3
 8015044:	f7ff fae0 	bl	8014608 <_ZN8touchgfx8Drawable10setVisibleEb>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801504e:	2200      	movs	r2, #0
 8015050:	2100      	movs	r1, #0
 8015052:	2000      	movs	r0, #0
 8015054:	f7ff ff5a 	bl	8014f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015058:	4603      	mov	r3, r0
 801505a:	4619      	mov	r1, r3
 801505c:	4620      	mov	r0, r4
 801505e:	f7ff fc7f 	bl	8014960 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    backgroundImage.setXY(0, 0);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	3370      	adds	r3, #112	; 0x70
 8015066:	2200      	movs	r2, #0
 8015068:	2100      	movs	r1, #0
 801506a:	4618      	mov	r0, r3
 801506c:	f7ff fa5b 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_BG_ID));
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015076:	f107 031c 	add.w	r3, r7, #28
 801507a:	2100      	movs	r1, #0
 801507c:	4618      	mov	r0, r3
 801507e:	f7ff f9a9 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015082:	f107 031c 	add.w	r3, r7, #28
 8015086:	4619      	mov	r1, r3
 8015088:	4620      	mov	r0, r4
 801508a:	f004 fdbf 	bl	8019c0c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    radioButton1.setXY(56, 25);
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	339c      	adds	r3, #156	; 0x9c
 8015092:	2219      	movs	r2, #25
 8015094:	2138      	movs	r1, #56	; 0x38
 8015096:	4618      	mov	r0, r3
 8015098:	f7ff fa45 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    radioButton1.setBitmaps(touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_PRESSED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_PRESSED_ID));
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80150a2:	f107 0320 	add.w	r3, r7, #32
 80150a6:	2103      	movs	r1, #3
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7ff f993 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80150ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150b2:	2104      	movs	r1, #4
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7ff f98d 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80150ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80150be:	2101      	movs	r1, #1
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7ff f987 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80150c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150ca:	2102      	movs	r1, #2
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7ff f981 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80150d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80150d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80150da:	f107 0120 	add.w	r1, r7, #32
 80150de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80150e2:	9300      	str	r3, [sp, #0]
 80150e4:	4603      	mov	r3, r0
 80150e6:	4620      	mov	r0, r4
 80150e8:	f004 fdfe 	bl	8019ce8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    radioButton1.setSelected(true);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	339c      	adds	r3, #156	; 0x9c
 80150f0:	2101      	movs	r1, #1
 80150f2:	4618      	mov	r0, r3
 80150f4:	f004 feba 	bl	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButton1.setDeselectionEnabled(false);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	339c      	adds	r3, #156	; 0x9c
 80150fc:	2100      	movs	r1, #0
 80150fe:	4618      	mov	r0, r3
 8015100:	f7ff fd1a 	bl	8014b38 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>

    radioButton2.setXY(56, 78);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	33dc      	adds	r3, #220	; 0xdc
 8015108:	224e      	movs	r2, #78	; 0x4e
 801510a:	2138      	movs	r1, #56	; 0x38
 801510c:	4618      	mov	r0, r3
 801510e:	f7ff fa0a 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    radioButton2.setBitmaps(touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_PRESSED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_PRESSED_ID));
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8015118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801511c:	2103      	movs	r1, #3
 801511e:	4618      	mov	r0, r3
 8015120:	f7ff f958 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015128:	2104      	movs	r1, #4
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff f952 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015134:	2101      	movs	r1, #1
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff f94c 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 801513c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015140:	2102      	movs	r1, #2
 8015142:	4618      	mov	r0, r3
 8015144:	f7ff f946 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015148:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801514c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015150:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015154:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015158:	9300      	str	r3, [sp, #0]
 801515a:	4603      	mov	r3, r0
 801515c:	4620      	mov	r0, r4
 801515e:	f004 fdc3 	bl	8019ce8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    radioButton2.setSelected(false);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	33dc      	adds	r3, #220	; 0xdc
 8015166:	2100      	movs	r1, #0
 8015168:	4618      	mov	r0, r3
 801516a:	f004 fe7f 	bl	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButton2.setDeselectionEnabled(false);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	33dc      	adds	r3, #220	; 0xdc
 8015172:	2100      	movs	r1, #0
 8015174:	4618      	mov	r0, r3
 8015176:	f7ff fcdf 	bl	8014b38 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>

    radioButton3.setXY(56, 129);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015180:	2281      	movs	r2, #129	; 0x81
 8015182:	2138      	movs	r1, #56	; 0x38
 8015184:	4618      	mov	r0, r3
 8015186:	f7ff f9ce 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    radioButton3.setBitmaps(touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_PRESSED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_PRESSED_ID));
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f503 748e 	add.w	r4, r3, #284	; 0x11c
 8015190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015194:	2103      	movs	r1, #3
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff f91c 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 801519c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80151a0:	2104      	movs	r1, #4
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7ff f916 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80151a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80151ac:	2101      	movs	r1, #1
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7ff f910 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80151b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80151b8:	2102      	movs	r1, #2
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7ff f90a 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 80151c0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80151c4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80151c8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80151cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	4603      	mov	r3, r0
 80151d4:	4620      	mov	r0, r4
 80151d6:	f004 fd87 	bl	8019ce8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    radioButton3.setSelected(false);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80151e0:	2100      	movs	r1, #0
 80151e2:	4618      	mov	r0, r3
 80151e4:	f004 fe42 	bl	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButton3.setDeselectionEnabled(false);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80151ee:	2100      	movs	r1, #0
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7ff fca1 	bl	8014b38 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>

    radioButton4.setXY(56, 181);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80151fc:	22b5      	movs	r2, #181	; 0xb5
 80151fe:	2138      	movs	r1, #56	; 0x38
 8015200:	4618      	mov	r0, r3
 8015202:	f7ff f990 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    radioButton4.setBitmaps(touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_UNSELECTED_PRESSED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_ID), touchgfx::Bitmap(BITMAP_RADIO_BUTTON_SELECTED_PRESSED_ID));
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 801520c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015210:	2103      	movs	r1, #3
 8015212:	4618      	mov	r0, r3
 8015214:	f7ff f8de 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801521c:	2104      	movs	r1, #4
 801521e:	4618      	mov	r0, r3
 8015220:	f7ff f8d8 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015228:	2101      	movs	r1, #1
 801522a:	4618      	mov	r0, r3
 801522c:	f7ff f8d2 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 8015230:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015234:	2102      	movs	r1, #2
 8015236:	4618      	mov	r0, r3
 8015238:	f7ff f8cc 	bl	80143d4 <_ZN8touchgfx6BitmapC1Et>
 801523c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8015240:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015244:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8015248:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	4603      	mov	r3, r0
 8015250:	4620      	mov	r0, r4
 8015252:	f004 fd49 	bl	8019ce8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    radioButton4.setSelected(false);
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801525c:	2100      	movs	r1, #0
 801525e:	4618      	mov	r0, r3
 8015260:	f004 fe04 	bl	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButton4.setDeselectionEnabled(false);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801526a:	2100      	movs	r1, #0
 801526c:	4618      	mov	r0, r3
 801526e:	f7ff fc63 	bl	8014b38 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>

    selectedText.setXY(114, 137);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8015278:	2289      	movs	r2, #137	; 0x89
 801527a:	2172      	movs	r1, #114	; 0x72
 801527c:	4618      	mov	r0, r3
 801527e:	f7ff f952 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    selectedText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 8015288:	22ff      	movs	r2, #255	; 0xff
 801528a:	21ff      	movs	r1, #255	; 0xff
 801528c:	20ff      	movs	r0, #255	; 0xff
 801528e:	f7ff fe3d 	bl	8014f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015292:	4603      	mov	r3, r0
 8015294:	4619      	mov	r1, r3
 8015296:	4620      	mov	r0, r4
 8015298:	f7ff fccb 	bl	8014c32 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    selectedText.setLinespacing(0);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80152a2:	2100      	movs	r1, #0
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7ff fd17 	bl	8014cd8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    selectedTextBuffer[0] = 0;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2200      	movs	r2, #0
 80152ae:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
    selectedText.setWildcard(selectedTextBuffer);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80152be:	4619      	mov	r1, r3
 80152c0:	4610      	mov	r0, r2
 80152c2:	f7ff fd91 	bl	8014de8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    selectedText.resizeToCurrentText();
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80152cc:	4618      	mov	r0, r3
 80152ce:	f004 fba7 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    selectedText.setTypedText(touchgfx::TypedText(T_TEXTID1));
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 80152d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80152dc:	2100      	movs	r1, #0
 80152de:	4618      	mov	r0, r3
 80152e0:	f7ff fc54 	bl	8014b8c <_ZN8touchgfx9TypedTextC1Et>
 80152e4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80152e8:	4620      	mov	r0, r4
 80152ea:	f004 fbc3 	bl	8019a74 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    deselectedText.setXY(114, 189);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	e006      	b.n	8015300 <_ZN12MainViewBaseC1Ev+0x3a0>
 80152f2:	bf00      	nop
 80152f4:	08026cdc 	.word	0x08026cdc
 80152f8:	08015485 	.word	0x08015485
 80152fc:	0801556d 	.word	0x0801556d
 8015300:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8015304:	22bd      	movs	r2, #189	; 0xbd
 8015306:	2172      	movs	r1, #114	; 0x72
 8015308:	4618      	mov	r0, r3
 801530a:	f7ff f90c 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
    deselectedText.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f503 74ea 	add.w	r4, r3, #468	; 0x1d4
 8015314:	22ff      	movs	r2, #255	; 0xff
 8015316:	21ff      	movs	r1, #255	; 0xff
 8015318:	20ff      	movs	r0, #255	; 0xff
 801531a:	f7ff fdf7 	bl	8014f0c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801531e:	4603      	mov	r3, r0
 8015320:	4619      	mov	r1, r3
 8015322:	4620      	mov	r0, r4
 8015324:	f7ff fc85 	bl	8014c32 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    deselectedText.setLinespacing(0);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801532e:	2100      	movs	r1, #0
 8015330:	4618      	mov	r0, r3
 8015332:	f7ff fcd1 	bl	8014cd8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    deselectedTextBuffer[0] = 0;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2200      	movs	r2, #0
 801533a:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
    deselectedText.setWildcard(deselectedTextBuffer);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	f503 72ea 	add.w	r2, r3, #468	; 0x1d4
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f203 2352 	addw	r3, r3, #594	; 0x252
 801534a:	4619      	mov	r1, r3
 801534c:	4610      	mov	r0, r2
 801534e:	f7ff fd4b 	bl	8014de8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    deselectedText.resizeToCurrentText();
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8015358:	4618      	mov	r0, r3
 801535a:	f004 fb61 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    deselectedText.setTypedText(touchgfx::TypedText(T_TEXTID2));
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f503 74ea 	add.w	r4, r3, #468	; 0x1d4
 8015364:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015368:	2101      	movs	r1, #1
 801536a:	4618      	mov	r0, r3
 801536c:	f7ff fc0e 	bl	8014b8c <_ZN8touchgfx9TypedTextC1Et>
 8015370:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8015374:	4620      	mov	r0, r4
 8015376:	f004 fb7d 	bl	8019a74 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	3340      	adds	r3, #64	; 0x40
 8015380:	4619      	mov	r1, r3
 8015382:	4610      	mov	r0, r2
 8015384:	f7ff fa42 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8015388:	687a      	ldr	r2, [r7, #4]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	3370      	adds	r3, #112	; 0x70
 801538e:	4619      	mov	r1, r3
 8015390:	4610      	mov	r0, r2
 8015392:	f7ff fa3b 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(radioButton1);
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	339c      	adds	r3, #156	; 0x9c
 801539c:	4619      	mov	r1, r3
 801539e:	4610      	mov	r0, r2
 80153a0:	f7ff fa34 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(radioButton2);
 80153a4:	687a      	ldr	r2, [r7, #4]
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	33dc      	adds	r3, #220	; 0xdc
 80153aa:	4619      	mov	r1, r3
 80153ac:	4610      	mov	r0, r2
 80153ae:	f7ff fa2d 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(radioButton3);
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80153ba:	4619      	mov	r1, r3
 80153bc:	4610      	mov	r0, r2
 80153be:	f7ff fa25 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(radioButton4);
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80153ca:	4619      	mov	r1, r3
 80153cc:	4610      	mov	r0, r2
 80153ce:	f7ff fa1d 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(selectedText);
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80153da:	4619      	mov	r1, r3
 80153dc:	4610      	mov	r0, r2
 80153de:	f7ff fa15 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(deselectedText);
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80153ea:	4619      	mov	r1, r3
 80153ec:	4610      	mov	r0, r2
 80153ee:	f7ff fa0d 	bl	801480c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    radioButtonGroup.add(radioButton1);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	339c      	adds	r3, #156	; 0x9c
 80153fc:	4619      	mov	r1, r3
 80153fe:	4610      	mov	r0, r2
 8015400:	f000 f9f6 	bl	80157f0 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE>
    radioButtonGroup.add(radioButton2);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	33dc      	adds	r3, #220	; 0xdc
 801540e:	4619      	mov	r1, r3
 8015410:	4610      	mov	r0, r2
 8015412:	f000 f9ed 	bl	80157f0 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE>
    radioButtonGroup.add(radioButton3);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8015422:	4619      	mov	r1, r3
 8015424:	4610      	mov	r0, r2
 8015426:	f000 f9e3 	bl	80157f0 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE>
    radioButtonGroup.add(radioButton4);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8015436:	4619      	mov	r1, r3
 8015438:	4610      	mov	r0, r2
 801543a:	f000 f9d9 	bl	80157f0 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE>
    radioButtonGroup.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801544a:	4619      	mov	r1, r3
 801544c:	4610      	mov	r0, r2
 801544e:	f000 fa01 	bl	8015854 <_ZN8touchgfx16RadioButtonGroupILt4EE29setRadioButtonSelectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
    radioButtonGroup.setRadioButtonDeselectedHandler(radioButtonDeselectedCallback);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801545e:	4619      	mov	r1, r3
 8015460:	4610      	mov	r0, r2
 8015462:	f000 fa05 	bl	8015870 <_ZN8touchgfx16RadioButtonGroupILt4EE31setRadioButtonDeselectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
}
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	4618      	mov	r0, r3
 801546a:	376c      	adds	r7, #108	; 0x6c
 801546c:	46bd      	mov	sp, r7
 801546e:	bd90      	pop	{r4, r7, pc}

08015470 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]

}
 8015478:	bf00      	nop
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
    if (&src == &radioButton1)
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	339c      	adds	r3, #156	; 0x9c
 8015492:	683a      	ldr	r2, [r7, #0]
 8015494:	429a      	cmp	r2, r3
 8015496:	d114      	bne.n	80154c2 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
    {
        //RadioButton1Selected
        //When radioButton1 selected execute C++ code
        //Execute C++ code
        Unicode::snprintf(selectedTextBuffer, 4, "%d", 1);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 801549e:	2301      	movs	r3, #1
 80154a0:	4a31      	ldr	r2, [pc, #196]	; (8015568 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 80154a2:	2104      	movs	r1, #4
 80154a4:	f007 fd0a 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        selectedText.resizeToCurrentText();
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80154ae:	4618      	mov	r0, r3
 80154b0:	f004 fab6 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        selectedText.invalidate();
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80154ba:	4618      	mov	r0, r3
 80154bc:	f006 f92a 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
        //Execute C++ code
        Unicode::snprintf(selectedTextBuffer, 4, "%d", 4);
        selectedText.resizeToCurrentText();
        selectedText.invalidate();
    }
}
 80154c0:	e04e      	b.n	8015560 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    else if (&src == &radioButton2)
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	33dc      	adds	r3, #220	; 0xdc
 80154c6:	683a      	ldr	r2, [r7, #0]
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d114      	bne.n	80154f6 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x72>
        Unicode::snprintf(selectedTextBuffer, 4, "%d", 2);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 80154d2:	2302      	movs	r3, #2
 80154d4:	4a24      	ldr	r2, [pc, #144]	; (8015568 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 80154d6:	2104      	movs	r1, #4
 80154d8:	f007 fcf0 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        selectedText.resizeToCurrentText();
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80154e2:	4618      	mov	r0, r3
 80154e4:	f004 fa9c 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        selectedText.invalidate();
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80154ee:	4618      	mov	r0, r3
 80154f0:	f006 f910 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80154f4:	e034      	b.n	8015560 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    else if (&src == &radioButton3)
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80154fc:	683a      	ldr	r2, [r7, #0]
 80154fe:	429a      	cmp	r2, r3
 8015500:	d114      	bne.n	801552c <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa8>
        Unicode::snprintf(selectedTextBuffer, 4, "%d", 3);
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8015508:	2303      	movs	r3, #3
 801550a:	4a17      	ldr	r2, [pc, #92]	; (8015568 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 801550c:	2104      	movs	r1, #4
 801550e:	f007 fcd5 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        selectedText.resizeToCurrentText();
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8015518:	4618      	mov	r0, r3
 801551a:	f004 fa81 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        selectedText.invalidate();
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8015524:	4618      	mov	r0, r3
 8015526:	f006 f8f5 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801552a:	e019      	b.n	8015560 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    else if (&src == &radioButton4)
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8015532:	683a      	ldr	r2, [r7, #0]
 8015534:	429a      	cmp	r2, r3
 8015536:	d113      	bne.n	8015560 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
        Unicode::snprintf(selectedTextBuffer, 4, "%d", 4);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 801553e:	2304      	movs	r3, #4
 8015540:	4a09      	ldr	r2, [pc, #36]	; (8015568 <_ZN12MainViewBase34radioButtonSelectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 8015542:	2104      	movs	r1, #4
 8015544:	f007 fcba 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        selectedText.resizeToCurrentText();
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801554e:	4618      	mov	r0, r3
 8015550:	f004 fa66 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        selectedText.invalidate();
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801555a:	4618      	mov	r0, r3
 801555c:	f006 f8da 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8015560:	bf00      	nop
 8015562:	3708      	adds	r7, #8
 8015564:	46bd      	mov	sp, r7
 8015566:	bd80      	pop	{r7, pc}
 8015568:	08026830 	.word	0x08026830

0801556c <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b082      	sub	sp, #8
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	6039      	str	r1, [r7, #0]
    if (&src == &radioButton1)
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	339c      	adds	r3, #156	; 0x9c
 801557a:	683a      	ldr	r2, [r7, #0]
 801557c:	429a      	cmp	r2, r3
 801557e:	d114      	bne.n	80155aa <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
    {
        //RadioButton1Deselected
        //When radioButton1 deselected execute C++ code
        //Execute C++ code
        Unicode::snprintf(deselectedTextBuffer, 4, "%d", 1);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f203 2052 	addw	r0, r3, #594	; 0x252
 8015586:	2301      	movs	r3, #1
 8015588:	4a31      	ldr	r2, [pc, #196]	; (8015650 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 801558a:	2104      	movs	r1, #4
 801558c:	f007 fc96 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        deselectedText.resizeToCurrentText();
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8015596:	4618      	mov	r0, r3
 8015598:	f004 fa42 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        deselectedText.invalidate();
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80155a2:	4618      	mov	r0, r3
 80155a4:	f006 f8b6 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
        //Execute C++ code
        Unicode::snprintf(deselectedTextBuffer, 4, "%d", 4);
        deselectedText.resizeToCurrentText();
        deselectedText.invalidate();
    }
}
 80155a8:	e04e      	b.n	8015648 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    else if (&src == &radioButton2)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	33dc      	adds	r3, #220	; 0xdc
 80155ae:	683a      	ldr	r2, [r7, #0]
 80155b0:	429a      	cmp	r2, r3
 80155b2:	d114      	bne.n	80155de <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0x72>
        Unicode::snprintf(deselectedTextBuffer, 4, "%d", 2);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f203 2052 	addw	r0, r3, #594	; 0x252
 80155ba:	2302      	movs	r3, #2
 80155bc:	4a24      	ldr	r2, [pc, #144]	; (8015650 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 80155be:	2104      	movs	r1, #4
 80155c0:	f007 fc7c 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        deselectedText.resizeToCurrentText();
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80155ca:	4618      	mov	r0, r3
 80155cc:	f004 fa28 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        deselectedText.invalidate();
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80155d6:	4618      	mov	r0, r3
 80155d8:	f006 f89c 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80155dc:	e034      	b.n	8015648 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    else if (&src == &radioButton3)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80155e4:	683a      	ldr	r2, [r7, #0]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d114      	bne.n	8015614 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa8>
        Unicode::snprintf(deselectedTextBuffer, 4, "%d", 3);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f203 2052 	addw	r0, r3, #594	; 0x252
 80155f0:	2303      	movs	r3, #3
 80155f2:	4a17      	ldr	r2, [pc, #92]	; (8015650 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 80155f4:	2104      	movs	r1, #4
 80155f6:	f007 fc61 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        deselectedText.resizeToCurrentText();
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8015600:	4618      	mov	r0, r3
 8015602:	f004 fa0d 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        deselectedText.invalidate();
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801560c:	4618      	mov	r0, r3
 801560e:	f006 f881 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8015612:	e019      	b.n	8015648 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
    else if (&src == &radioButton4)
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801561a:	683a      	ldr	r2, [r7, #0]
 801561c:	429a      	cmp	r2, r3
 801561e:	d113      	bne.n	8015648 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xdc>
        Unicode::snprintf(deselectedTextBuffer, 4, "%d", 4);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f203 2052 	addw	r0, r3, #594	; 0x252
 8015626:	2304      	movs	r3, #4
 8015628:	4a09      	ldr	r2, [pc, #36]	; (8015650 <_ZN12MainViewBase36radioButtonDeselectedCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe4>)
 801562a:	2104      	movs	r1, #4
 801562c:	f007 fc46 	bl	801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        deselectedText.resizeToCurrentText();
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8015636:	4618      	mov	r0, r3
 8015638:	f004 f9f2 	bl	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        deselectedText.invalidate();
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8015642:	4618      	mov	r0, r3
 8015644:	f006 f866 	bl	801b714 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8015648:	bf00      	nop
 801564a:	3708      	adds	r7, #8
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}
 8015650:	08026830 	.word	0x08026830

08015654 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015654:	b580      	push	{r7, lr}
 8015656:	b082      	sub	sp, #8
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	4a05      	ldr	r2, [pc, #20]	; (8015674 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvED1Ev+0x20>)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	601a      	str	r2, [r3, #0]
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	4618      	mov	r0, r3
 8015666:	f000 f911 	bl	801588c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	4618      	mov	r0, r3
 801566e:	3708      	adds	r7, #8
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}
 8015674:	08026d5c 	.word	0x08026d5c

08015678 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvED0Ev>:
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7ff ffe7 	bl	8015654 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvED1Ev>
 8015686:	2110      	movs	r1, #16
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f00f fe29 	bl	80252e0 <_ZdlPvj>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	4618      	mov	r0, r3
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <_ZN8touchgfx16RadioButtonGroupILt4EED1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~RadioButtonGroup()
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
    {
    }
 80156a0:	4a08      	ldr	r2, [pc, #32]	; (80156c4 <_ZN8touchgfx16RadioButtonGroupILt4EED1Ev+0x2c>)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	601a      	str	r2, [r3, #0]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	3328      	adds	r3, #40	; 0x28
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7ff ffd2 	bl	8015654 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvED1Ev>
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	3318      	adds	r3, #24
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7ff ffcd 	bl	8015654 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvED1Ev>
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4618      	mov	r0, r3
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}
 80156c4:	08026d28 	.word	0x08026d28

080156c8 <_ZN8touchgfx16RadioButtonGroupILt4EED0Ev>:
    virtual ~RadioButtonGroup()
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
    }
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f7ff ffe1 	bl	8015698 <_ZN8touchgfx16RadioButtonGroupILt4EED1Ev>
 80156d6:	2140      	movs	r1, #64	; 0x40
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f00f fe01 	bl	80252e0 <_ZdlPvj>
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	4618      	mov	r0, r3
 80156e2:	3708      	adds	r7, #8
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	4618      	mov	r0, r3
 80156f4:	f006 fb1c 	bl	801bd30 <_ZN8touchgfx6ScreenC1Ev>
 80156f8:	4a05      	ldr	r2, [pc, #20]	; (8015710 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	601a      	str	r2, [r3, #0]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2200      	movs	r2, #0
 8015702:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	4618      	mov	r0, r3
 8015708:	3708      	adds	r7, #8
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	08026d74 	.word	0x08026d74

08015714 <_ZN8touchgfx16RadioButtonGroupILt4EEC1Ev>:
    RadioButtonGroup() :
 8015714:	b590      	push	{r4, r7, lr}
 8015716:	b087      	sub	sp, #28
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
        radioButtonDeselectedCallback(0)
 801571c:	4a19      	ldr	r2, [pc, #100]	; (8015784 <_ZN8touchgfx16RadioButtonGroupILt4EEC1Ev+0x70>)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	601a      	str	r2, [r3, #0]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2200      	movs	r2, #0
 8015726:	829a      	strh	r2, [r3, #20]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f103 0418 	add.w	r4, r3, #24
 801572e:	4a16      	ldr	r2, [pc, #88]	; (8015788 <_ZN8touchgfx16RadioButtonGroupILt4EEC1Ev+0x74>)
 8015730:	f107 0308 	add.w	r3, r7, #8
 8015734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015738:	e883 0003 	stmia.w	r3, {r0, r1}
 801573c:	f107 0308 	add.w	r3, r7, #8
 8015740:	cb0c      	ldmia	r3, {r2, r3}
 8015742:	6879      	ldr	r1, [r7, #4]
 8015744:	4620      	mov	r0, r4
 8015746:	f000 f939 	bl	80159bc <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8015750:	4a0e      	ldr	r2, [pc, #56]	; (801578c <_ZN8touchgfx16RadioButtonGroupILt4EEC1Ev+0x78>)
 8015752:	f107 0310 	add.w	r3, r7, #16
 8015756:	e892 0003 	ldmia.w	r2, {r0, r1}
 801575a:	e883 0003 	stmia.w	r3, {r0, r1}
 801575e:	f107 0310 	add.w	r3, r7, #16
 8015762:	cb0c      	ldmia	r3, {r2, r3}
 8015764:	6879      	ldr	r1, [r7, #4]
 8015766:	4620      	mov	r0, r4
 8015768:	f000 f928 	bl	80159bc <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2200      	movs	r2, #0
 8015770:	639a      	str	r2, [r3, #56]	; 0x38
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2200      	movs	r2, #0
 8015776:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	4618      	mov	r0, r3
 801577c:	371c      	adds	r7, #28
 801577e:	46bd      	mov	sp, r7
 8015780:	bd90      	pop	{r4, r7, pc}
 8015782:	bf00      	nop
 8015784:	08026d28 	.word	0x08026d28
 8015788:	08026834 	.word	0x08026834
 801578c:	0802683c 	.word	0x0802683c

08015790 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	4a04      	ldr	r2, [pc, #16]	; (80157ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	601a      	str	r2, [r3, #0]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	4618      	mov	r0, r3
 80157a2:	370c      	adds	r7, #12
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr
 80157ac:	08026e24 	.word	0x08026e24

080157b0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	4639      	mov	r1, r7
 80157bc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7ff ffe4 	bl	8015790 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80157c8:	4a08      	ldr	r2, [pc, #32]	; (80157ec <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	68ba      	ldr	r2, [r7, #8]
 80157d2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	3308      	adds	r3, #8
 80157d8:	463a      	mov	r2, r7
 80157da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80157de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	4618      	mov	r0, r3
 80157e6:	3710      	adds	r7, #16
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	08026d10 	.word	0x08026d10

080157f0 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE>:
     *        Add the RadioButton to the RadioButtonGroup. Only add as many RadioButtons as the
     *        stated CAPACITY. Checked by an assert.
     *
     * @param [in] radioButton the RadioButton that is to be added.
     */
    virtual void add(RadioButton& radioButton)
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	6039      	str	r1, [r7, #0]
    {
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	8a9b      	ldrh	r3, [r3, #20]
 80157fe:	2b03      	cmp	r3, #3
 8015800:	d905      	bls.n	801580e <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE+0x1e>
 8015802:	4b11      	ldr	r3, [pc, #68]	; (8015848 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE+0x58>)
 8015804:	4a11      	ldr	r2, [pc, #68]	; (801584c <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE+0x5c>)
 8015806:	2154      	movs	r1, #84	; 0x54
 8015808:	4811      	ldr	r0, [pc, #68]	; (8015850 <_ZN8touchgfx16RadioButtonGroupILt4EE3addERNS_11RadioButtonE+0x60>)
 801580a:	f00f fd95 	bl	8025338 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 801580e:	683a      	ldr	r2, [r7, #0]
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	3318      	adds	r3, #24
 8015814:	4619      	mov	r1, r3
 8015816:	4610      	mov	r0, r2
 8015818:	f7ff f8f0 	bl	80149fc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
        radioButton.setDeselectedAction(radioButtonUnselected);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	3328      	adds	r3, #40	; 0x28
 8015820:	4619      	mov	r1, r3
 8015822:	6838      	ldr	r0, [r7, #0]
 8015824:	f7ff f97a 	bl	8014b1c <_ZN8touchgfx11RadioButton19setDeselectedActionERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
        radioButtons[size++] = &radioButton;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	8a9b      	ldrh	r3, [r3, #20]
 801582c:	1c5a      	adds	r2, r3, #1
 801582e:	b291      	uxth	r1, r2
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	8291      	strh	r1, [r2, #20]
 8015834:	687a      	ldr	r2, [r7, #4]
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	4413      	add	r3, r2
 801583a:	683a      	ldr	r2, [r7, #0]
 801583c:	605a      	str	r2, [r3, #4]
    }
 801583e:	bf00      	nop
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}
 8015846:	bf00      	nop
 8015848:	08026844 	.word	0x08026844
 801584c:	08026ef8 	.word	0x08026ef8
 8015850:	08026880 	.word	0x08026880

08015854 <_ZN8touchgfx16RadioButtonGroupILt4EE29setRadioButtonSelectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the RadioButton that was selected.
     *
     * @see GenericCallback
     */
    void setRadioButtonSelectedHandler(GenericCallback< const AbstractButton& >& callback)
 8015854:	b480      	push	{r7}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
    {
        radioButtonSelectedCallback = &callback;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	683a      	ldr	r2, [r7, #0]
 8015862:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8015864:	bf00      	nop
 8015866:	370c      	adds	r7, #12
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr

08015870 <_ZN8touchgfx16RadioButtonGroupILt4EE31setRadioButtonDeselectedHandlerERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the RadioButton that was selected.
     *
     * @see GenericCallback
     */
    void setRadioButtonDeselectedHandler(GenericCallback< const AbstractButton& >& callback)
 8015870:	b480      	push	{r7}
 8015872:	b083      	sub	sp, #12
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
    {
        radioButtonDeselectedCallback = &callback;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	683a      	ldr	r2, [r7, #0]
 801587e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588a:	4770      	bx	lr

0801588c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
    }
 8015894:	4a04      	ldr	r2, [pc, #16]	; (80158a8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	601a      	str	r2, [r3, #0]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	370c      	adds	r7, #12
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr
 80158a8:	08026e24 	.word	0x08026e24

080158ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
    }
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7ff ffe9 	bl	801588c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80158ba:	2104      	movs	r1, #4
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f00f fd0f 	bl	80252e0 <_ZdlPvj>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4618      	mov	r0, r3
 80158c6:	3708      	adds	r7, #8
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}

080158cc <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     *        Handles the event that a RadioButton has been selected. deselects all other
     *        RadioButtons.
     *
     * @param radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 80158d6:	2300      	movs	r3, #0
 80158d8:	81fb      	strh	r3, [r7, #14]
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	8a9b      	ldrh	r3, [r3, #20]
 80158de:	89fa      	ldrh	r2, [r7, #14]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d21f      	bcs.n	8015924 <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x58>
        {
            if (radioButtons[i] != &radioButton)
 80158e4:	89fb      	ldrh	r3, [r7, #14]
 80158e6:	687a      	ldr	r2, [r7, #4]
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	4413      	add	r3, r2
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	683a      	ldr	r2, [r7, #0]
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d013      	beq.n	801591c <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x50>
            {
                if (radioButtons[i]->getSelected())
 80158f4:	89fb      	ldrh	r3, [r7, #14]
 80158f6:	687a      	ldr	r2, [r7, #4]
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	4413      	add	r3, r2
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	4618      	mov	r0, r3
 8015900:	f7ff f937 	bl	8014b72 <_ZNK8touchgfx11RadioButton11getSelectedEv>
 8015904:	4603      	mov	r3, r0
 8015906:	2b00      	cmp	r3, #0
 8015908:	d008      	beq.n	801591c <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x50>
                {
                    radioButtons[i]->setSelected(false);
 801590a:	89fb      	ldrh	r3, [r7, #14]
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	009b      	lsls	r3, r3, #2
 8015910:	4413      	add	r3, r2
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	2100      	movs	r1, #0
 8015916:	4618      	mov	r0, r3
 8015918:	f004 faa8 	bl	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 801591c:	89fb      	ldrh	r3, [r7, #14]
 801591e:	3301      	adds	r3, #1
 8015920:	81fb      	strh	r3, [r7, #14]
 8015922:	e7da      	b.n	80158da <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0xe>
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015928:	2b00      	cmp	r3, #0
 801592a:	d00d      	beq.n	8015948 <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7c>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	330c      	adds	r3, #12
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4610      	mov	r0, r2
 801593c:	4798      	blx	r3
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	d001      	beq.n	8015948 <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7c>
 8015944:	2301      	movs	r3, #1
 8015946:	e000      	b.n	801594a <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7e>
 8015948:	2300      	movs	r3, #0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d009      	beq.n	8015962 <_ZN8touchgfx16RadioButtonGroupILt4EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x96>
        {
            radioButtonSelectedCallback->execute(radioButton);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	3308      	adds	r3, #8
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	6839      	ldr	r1, [r7, #0]
 801595e:	4610      	mov	r0, r2
 8015960:	4798      	blx	r3
        }
    }
 8015962:	bf00      	nop
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <_ZN8touchgfx16RadioButtonGroupILt4EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
     *
     *        Handles the event that a RadioButton has been deselected.
     *
     * @param radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 801596a:	b580      	push	{r7, lr}
 801596c:	b082      	sub	sp, #8
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
 8015972:	6039      	str	r1, [r7, #0]
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015978:	2b00      	cmp	r3, #0
 801597a:	d00d      	beq.n	8015998 <_ZN8touchgfx16RadioButtonGroupILt4EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x2e>
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	330c      	adds	r3, #12
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	4610      	mov	r0, r2
 801598c:	4798      	blx	r3
 801598e:	4603      	mov	r3, r0
 8015990:	2b00      	cmp	r3, #0
 8015992:	d001      	beq.n	8015998 <_ZN8touchgfx16RadioButtonGroupILt4EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x2e>
 8015994:	2301      	movs	r3, #1
 8015996:	e000      	b.n	801599a <_ZN8touchgfx16RadioButtonGroupILt4EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x30>
 8015998:	2300      	movs	r3, #0
 801599a:	2b00      	cmp	r3, #0
 801599c:	d009      	beq.n	80159b2 <_ZN8touchgfx16RadioButtonGroupILt4EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x48>
        {
            radioButtonDeselectedCallback->execute(radioButton);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	3308      	adds	r3, #8
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	6839      	ldr	r1, [r7, #0]
 80159ae:	4610      	mov	r0, r2
 80159b0:	4798      	blx	r3
        }
    }
 80159b2:	bf00      	nop
 80159b4:	3708      	adds	r7, #8
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd80      	pop	{r7, pc}
	...

080159bc <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80159bc:	b580      	push	{r7, lr}
 80159be:	b084      	sub	sp, #16
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	60f8      	str	r0, [r7, #12]
 80159c4:	60b9      	str	r1, [r7, #8]
 80159c6:	4639      	mov	r1, r7
 80159c8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7ff fede 	bl	8015790 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80159d4:	4a08      	ldr	r2, [pc, #32]	; (80159f8 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E+0x3c>)
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	68ba      	ldr	r2, [r7, #8]
 80159de:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	3308      	adds	r3, #8
 80159e4:	463a      	mov	r2, r7
 80159e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80159ea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	4618      	mov	r0, r3
 80159f2:	3710      	adds	r7, #16
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	08026d5c 	.word	0x08026d5c

080159fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	4a05      	ldr	r2, [pc, #20]	; (8015a1c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	601a      	str	r2, [r3, #0]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7ff ff3d 	bl	801588c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	4618      	mov	r0, r3
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}
 8015a1c:	08026d10 	.word	0x08026d10

08015a20 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7ff ffe7 	bl	80159fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015a2e:	2110      	movs	r1, #16
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f00f fc55 	bl	80252e0 <_ZdlPvj>
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	4a05      	ldr	r2, [pc, #20]	; (8015a60 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	601a      	str	r2, [r3, #0]
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fe fefd 	bl	8014850 <_ZN8touchgfx6WidgetD1Ev>
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	080280e0 	.word	0x080280e0

08015a64 <_ZN8touchgfx5ImageD0Ev>:
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	f7ff ffe7 	bl	8015a40 <_ZN8touchgfx5ImageD1Ev>
 8015a72:	212c      	movs	r1, #44	; 0x2c
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f00f fc33 	bl	80252e0 <_ZdlPvj>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3708      	adds	r7, #8
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}

08015a84 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	4a05      	ldr	r2, [pc, #20]	; (8015aa4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	601a      	str	r2, [r3, #0]
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7ff f96f 	bl	8014d78 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	08028064 	.word	0x08028064

08015aa8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f7ff ffe7 	bl	8015a84 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015ab6:	2138      	movs	r1, #56	; 0x38
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f00f fc11 	bl	80252e0 <_ZdlPvj>
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}

08015ac8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	68d2      	ldr	r2, [r2, #12]
 8015ada:	1052      	asrs	r2, r2, #1
 8015adc:	1898      	adds	r0, r3, r2
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	68db      	ldr	r3, [r3, #12]
 8015ae2:	f003 0301 	and.w	r3, r3, #1
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d102      	bne.n	8015af0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	689b      	ldr	r3, [r3, #8]
 8015aee:	e00a      	b.n	8015b06 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	68d2      	ldr	r2, [r2, #12]
 8015af8:	1052      	asrs	r2, r2, #1
 8015afa:	4413      	add	r3, r2
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	687a      	ldr	r2, [r7, #4]
 8015b00:	6892      	ldr	r2, [r2, #8]
 8015b02:	4413      	add	r3, r2
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	6839      	ldr	r1, [r7, #0]
 8015b08:	4798      	blx	r3
    }
 8015b0a:	bf00      	nop
 8015b0c:	3708      	adds	r7, #8
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}

08015b12 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8015b12:	b480      	push	{r7}
 8015b14:	b083      	sub	sp, #12
 8015b16:	af00      	add	r7, sp, #0
 8015b18:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d010      	beq.n	8015b44 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	689b      	ldr	r3, [r3, #8]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d107      	bne.n	8015b3a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	f003 0301 	and.w	r3, r3, #1
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d101      	bne.n	8015b3a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015b36:	2301      	movs	r3, #1
 8015b38:	e000      	b.n	8015b3c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	2b01      	cmp	r3, #1
 8015b3e:	d001      	beq.n	8015b44 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015b40:	2301      	movs	r3, #1
 8015b42:	e000      	b.n	8015b46 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8015b44:	2300      	movs	r3, #0
    }
 8015b46:	4618      	mov	r0, r3
 8015b48:	370c      	adds	r7, #12
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b50:	4770      	bx	lr

08015b52 <_ZNK8touchgfx16RadioButtonGroupILt4EE14getRadioButtonEt>:
    virtual RadioButton* getRadioButton(uint16_t index) const
 8015b52:	b480      	push	{r7}
 8015b54:	b083      	sub	sp, #12
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	6078      	str	r0, [r7, #4]
 8015b5a:	460b      	mov	r3, r1
 8015b5c:	807b      	strh	r3, [r7, #2]
        return (size > index) ? radioButtons[index] : 0;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	8a9b      	ldrh	r3, [r3, #20]
 8015b62:	887a      	ldrh	r2, [r7, #2]
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d205      	bcs.n	8015b74 <_ZNK8touchgfx16RadioButtonGroupILt4EE14getRadioButtonEt+0x22>
 8015b68:	887b      	ldrh	r3, [r7, #2]
 8015b6a:	687a      	ldr	r2, [r7, #4]
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	4413      	add	r3, r2
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	e000      	b.n	8015b76 <_ZNK8touchgfx16RadioButtonGroupILt4EE14getRadioButtonEt+0x24>
 8015b74:	2300      	movs	r3, #0
    }
 8015b76:	4618      	mov	r0, r3
 8015b78:	370c      	adds	r7, #12
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr

08015b82 <_ZNK8touchgfx16RadioButtonGroupILt4EE27getSelectedRadioButtonIndexEv>:
    virtual int32_t getSelectedRadioButtonIndex() const
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b084      	sub	sp, #16
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
        for (uint16_t i = 0; i < size; i++)
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	81fb      	strh	r3, [r7, #14]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	8a9b      	ldrh	r3, [r3, #20]
 8015b92:	89fa      	ldrh	r2, [r7, #14]
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d210      	bcs.n	8015bba <_ZNK8touchgfx16RadioButtonGroupILt4EE27getSelectedRadioButtonIndexEv+0x38>
            if (radioButtons[i]->getSelected())
 8015b98:	89fb      	ldrh	r3, [r7, #14]
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	4413      	add	r3, r2
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7fe ffe5 	bl	8014b72 <_ZNK8touchgfx11RadioButton11getSelectedEv>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d001      	beq.n	8015bb2 <_ZNK8touchgfx16RadioButtonGroupILt4EE27getSelectedRadioButtonIndexEv+0x30>
                return i;
 8015bae:	89fb      	ldrh	r3, [r7, #14]
 8015bb0:	e005      	b.n	8015bbe <_ZNK8touchgfx16RadioButtonGroupILt4EE27getSelectedRadioButtonIndexEv+0x3c>
        for (uint16_t i = 0; i < size; i++)
 8015bb2:	89fb      	ldrh	r3, [r7, #14]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	81fb      	strh	r3, [r7, #14]
 8015bb8:	e7e9      	b.n	8015b8e <_ZNK8touchgfx16RadioButtonGroupILt4EE27getSelectedRadioButtonIndexEv+0xc>
        return -1;
 8015bba:	f04f 33ff 	mov.w	r3, #4294967295
    }
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3710      	adds	r7, #16
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}

08015bc6 <_ZNK8touchgfx16RadioButtonGroupILt4EE22getSelectedRadioButtonEv>:
    virtual RadioButton* getSelectedRadioButton() const
 8015bc6:	b580      	push	{r7, lr}
 8015bc8:	b084      	sub	sp, #16
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	6078      	str	r0, [r7, #4]
        int32_t index = getSelectedRadioButtonIndex();
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	3310      	adds	r3, #16
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	4798      	blx	r3
 8015bda:	60f8      	str	r0, [r7, #12]
        return (index < 0) ? 0 : getRadioButton(index);
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	db0a      	blt.n	8015bf8 <_ZNK8touchgfx16RadioButtonGroupILt4EE22getSelectedRadioButtonEv+0x32>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	330c      	adds	r3, #12
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	68fa      	ldr	r2, [r7, #12]
 8015bec:	b292      	uxth	r2, r2
 8015bee:	4611      	mov	r1, r2
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	4798      	blx	r3
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	e000      	b.n	8015bfa <_ZNK8touchgfx16RadioButtonGroupILt4EE22getSelectedRadioButtonEv+0x34>
 8015bf8:	2300      	movs	r3, #0
    }
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <_ZN8touchgfx16RadioButtonGroupILt4EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b082      	sub	sp, #8
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	6039      	str	r1, [r7, #0]
        radioButton.setSelected(true);
 8015c0c:	2101      	movs	r1, #1
 8015c0e:	6838      	ldr	r0, [r7, #0]
 8015c10:	f004 f92c 	bl	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	3324      	adds	r3, #36	; 0x24
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	683a      	ldr	r2, [r7, #0]
 8015c1e:	4611      	mov	r1, r2
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	4798      	blx	r3
    }
 8015c24:	bf00      	nop
 8015c26:	3708      	adds	r7, #8
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <_ZN8touchgfx16RadioButtonGroupILt4EE21setDeselectionEnabledEb>:
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	460b      	mov	r3, r1
 8015c36:	70fb      	strb	r3, [r7, #3]
        for (uint16_t i = 0; i < size; i++)
 8015c38:	2300      	movs	r3, #0
 8015c3a:	81fb      	strh	r3, [r7, #14]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	8a9b      	ldrh	r3, [r3, #20]
 8015c40:	89fa      	ldrh	r2, [r7, #14]
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d20d      	bcs.n	8015c62 <_ZN8touchgfx16RadioButtonGroupILt4EE21setDeselectionEnabledEb+0x36>
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
 8015c46:	89fb      	ldrh	r3, [r7, #14]
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	4413      	add	r3, r2
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	78fa      	ldrb	r2, [r7, #3]
 8015c52:	4611      	mov	r1, r2
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fe ff6f 	bl	8014b38 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>
        for (uint16_t i = 0; i < size; i++)
 8015c5a:	89fb      	ldrh	r3, [r7, #14]
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	81fb      	strh	r3, [r7, #14]
 8015c60:	e7ec      	b.n	8015c3c <_ZN8touchgfx16RadioButtonGroupILt4EE21setDeselectionEnabledEb+0x10>
    }
 8015c62:	bf00      	nop
 8015c64:	3710      	adds	r7, #16
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <_ZNK8touchgfx16RadioButtonGroupILt4EE21getDeselectionEnabledEv>:
    virtual bool getDeselectionEnabled() const
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8a9b      	ldrh	r3, [r3, #20]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d009      	beq.n	8015c8e <_ZNK8touchgfx16RadioButtonGroupILt4EE21getDeselectionEnabledEv+0x24>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	685b      	ldr	r3, [r3, #4]
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7fe ff6a 	bl	8014b58 <_ZNK8touchgfx11RadioButton21getDeselectionEnabledEv>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d001      	beq.n	8015c8e <_ZNK8touchgfx16RadioButtonGroupILt4EE21getDeselectionEnabledEv+0x24>
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	e000      	b.n	8015c90 <_ZNK8touchgfx16RadioButtonGroupILt4EE21getDeselectionEnabledEv+0x26>
 8015c8e:	2300      	movs	r3, #0
    }
 8015c90:	4618      	mov	r0, r3
 8015c92:	3708      	adds	r7, #8
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
 8015ca0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	687a      	ldr	r2, [r7, #4]
 8015ca8:	68d2      	ldr	r2, [r2, #12]
 8015caa:	1052      	asrs	r2, r2, #1
 8015cac:	1898      	adds	r0, r3, r2
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	f003 0301 	and.w	r3, r3, #1
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d102      	bne.n	8015cc0 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7executeES5_+0x28>
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	689b      	ldr	r3, [r3, #8]
 8015cbe:	e00a      	b.n	8015cd6 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7executeES5_+0x3e>
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	685b      	ldr	r3, [r3, #4]
 8015cc4:	687a      	ldr	r2, [r7, #4]
 8015cc6:	68d2      	ldr	r2, [r2, #12]
 8015cc8:	1052      	asrs	r2, r2, #1
 8015cca:	4413      	add	r3, r2
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	687a      	ldr	r2, [r7, #4]
 8015cd0:	6892      	ldr	r2, [r2, #8]
 8015cd2:	4413      	add	r3, r2
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	6839      	ldr	r1, [r7, #0]
 8015cd8:	4798      	blx	r3
    }
 8015cda:	bf00      	nop
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}

08015ce2 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8015ce2:	b480      	push	{r7}
 8015ce4:	b083      	sub	sp, #12
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	685b      	ldr	r3, [r3, #4]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d010      	beq.n	8015d14 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	689b      	ldr	r3, [r3, #8]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d107      	bne.n	8015d0a <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	68db      	ldr	r3, [r3, #12]
 8015cfe:	f003 0301 	and.w	r3, r3, #1
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d101      	bne.n	8015d0a <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015d06:	2301      	movs	r3, #1
 8015d08:	e000      	b.n	8015d0c <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	2b01      	cmp	r3, #1
 8015d0e:	d001      	beq.n	8015d14 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015d10:	2301      	movs	r3, #1
 8015d12:	e000      	b.n	8015d16 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt4EEERKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8015d14:	2300      	movs	r3, #0
    }
 8015d16:	4618      	mov	r0, r3
 8015d18:	370c      	adds	r7, #12
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d20:	4770      	bx	lr
	...

08015d24 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8015d24:	b480      	push	{r7}
 8015d26:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015d28:	4b02      	ldr	r3, [pc, #8]	; (8015d34 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr
 8015d34:	08026f68 	.word	0x08026f68

08015d38 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8015d38:	b480      	push	{r7}
 8015d3a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8015d3c:	2305      	movs	r3, #5
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8015d48:	b480      	push	{r7}
 8015d4a:	b085      	sub	sp, #20
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	4613      	mov	r3, r2
 8015d54:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8015d56:	4a07      	ldr	r2, [pc, #28]	; (8015d74 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6013      	str	r3, [r2, #0]
        fonts = f;
 8015d5c:	4a06      	ldr	r2, [pc, #24]	; (8015d78 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8015d62:	4a06      	ldr	r2, [pc, #24]	; (8015d7c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8015d64:	88fb      	ldrh	r3, [r7, #6]
 8015d66:	8013      	strh	r3, [r2, #0]
    }
 8015d68:	bf00      	nop
 8015d6a:	3714      	adds	r7, #20
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d72:	4770      	bx	lr
 8015d74:	2000995c 	.word	0x2000995c
 8015d78:	20009964 	.word	0x20009964
 8015d7c:	20009960 	.word	0x20009960

08015d80 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015d80:	b590      	push	{r4, r7, lr}
 8015d82:	b085      	sub	sp, #20
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	4603      	mov	r3, r0
 8015d88:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015d8e:	88fb      	ldrh	r3, [r7, #6]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d127      	bne.n	8015de4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015d94:	88fb      	ldrh	r3, [r7, #6]
 8015d96:	4a1e      	ldr	r2, [pc, #120]	; (8015e10 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d016      	beq.n	8015dce <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015da0:	88fb      	ldrh	r3, [r7, #6]
 8015da2:	4a1b      	ldr	r2, [pc, #108]	; (8015e10 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015da8:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	68ba      	ldr	r2, [r7, #8]
 8015db0:	4413      	add	r3, r2
 8015db2:	4a18      	ldr	r2, [pc, #96]	; (8015e14 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015db4:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015db6:	68bb      	ldr	r3, [r7, #8]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	4413      	add	r3, r2
 8015dbe:	4a16      	ldr	r2, [pc, #88]	; (8015e18 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015dc0:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8015dc2:	68bb      	ldr	r3, [r7, #8]
 8015dc4:	689b      	ldr	r3, [r3, #8]
 8015dc6:	68ba      	ldr	r2, [r7, #8]
 8015dc8:	4413      	add	r3, r2
 8015dca:	60fb      	str	r3, [r7, #12]
 8015dcc:	e00a      	b.n	8015de4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015dce:	4b11      	ldr	r3, [pc, #68]	; (8015e14 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015dd0:	4a12      	ldr	r2, [pc, #72]	; (8015e1c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015dd2:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015dd4:	4a12      	ldr	r2, [pc, #72]	; (8015e20 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015dd6:	4b10      	ldr	r3, [pc, #64]	; (8015e18 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015dd8:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015dda:	88fb      	ldrh	r3, [r7, #6]
 8015ddc:	4a11      	ldr	r2, [pc, #68]	; (8015e24 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015de2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d00d      	beq.n	8015e06 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015dea:	4a0f      	ldr	r2, [pc, #60]	; (8015e28 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015dec:	88fb      	ldrh	r3, [r7, #6]
 8015dee:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015df0:	f000 f83e 	bl	8015e70 <_ZN17TypedTextDatabase8getFontsEv>
 8015df4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015df6:	f000 f833 	bl	8015e60 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	4621      	mov	r1, r4
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f7ff ffa1 	bl	8015d48 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015e06:	bf00      	nop
 8015e08:	3714      	adds	r7, #20
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd90      	pop	{r4, r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	200087a8 	.word	0x200087a8
 8015e14:	200087b0 	.word	0x200087b0
 8015e18:	200087b4 	.word	0x200087b4
 8015e1c:	08090a2c 	.word	0x08090a2c
 8015e20:	08090a24 	.word	0x08090a24
 8015e24:	08090a98 	.word	0x08090a98
 8015e28:	200087ac 	.word	0x200087ac

08015e2c <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b083      	sub	sp, #12
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
 8015e34:	460b      	mov	r3, r1
 8015e36:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015e38:	4b07      	ldr	r3, [pc, #28]	; (8015e58 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015e3a:	681a      	ldr	r2, [r3, #0]
 8015e3c:	4b07      	ldr	r3, [pc, #28]	; (8015e5c <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8015e3e:	6819      	ldr	r1, [r3, #0]
 8015e40:	887b      	ldrh	r3, [r7, #2]
 8015e42:	009b      	lsls	r3, r3, #2
 8015e44:	440b      	add	r3, r1
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	005b      	lsls	r3, r3, #1
 8015e4a:	4413      	add	r3, r2
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	370c      	adds	r7, #12
 8015e50:	46bd      	mov	sp, r7
 8015e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e56:	4770      	bx	lr
 8015e58:	200087b0 	.word	0x200087b0
 8015e5c:	200087b4 	.word	0x200087b4

08015e60 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015e60:	b480      	push	{r7}
 8015e62:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015e64:	2302      	movs	r3, #2
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6e:	4770      	bx	lr

08015e70 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015e70:	b480      	push	{r7}
 8015e72:	af00      	add	r7, sp, #0
    return _fonts;
 8015e74:	4b02      	ldr	r3, [pc, #8]	; (8015e80 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7e:	4770      	bx	lr
 8015e80:	200087b8 	.word	0x200087b8

08015e84 <_Z41__static_initialization_and_destruction_0ii>:
    case 0:
        _fonts[0] = &(getFont_Asap_Regular_20_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b082      	sub	sp, #8
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
 8015e8c:	6039      	str	r1, [r7, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2b01      	cmp	r3, #1
 8015e92:	d109      	bne.n	8015ea8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e9a:	4293      	cmp	r3, r2
 8015e9c:	d104      	bne.n	8015ea8 <_Z41__static_initialization_and_destruction_0ii+0x24>
    &(getFont_Asap_Regular_20_4bpp())
 8015e9e:	f7fd fcf3 	bl	8013888 <_Z28getFont_Asap_Regular_20_4bppv>
 8015ea2:	4602      	mov	r2, r0
};
 8015ea4:	4b02      	ldr	r3, [pc, #8]	; (8015eb0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8015ea6:	601a      	str	r2, [r3, #0]
}  // namespace TypedTextDatabase
 8015ea8:	bf00      	nop
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}
 8015eb0:	200087b8 	.word	0x200087b8

08015eb4 <_GLOBAL__sub_I__fonts>:
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015ebc:	2001      	movs	r0, #1
 8015ebe:	f7ff ffe1 	bl	8015e84 <_Z41__static_initialization_and_destruction_0ii>
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	4a05      	ldr	r2, [pc, #20]	; (8015ee4 <_ZN19FrontendApplicationD1Ev+0x20>)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	601a      	str	r2, [r3, #0]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fd ff67 	bl	8013da8 <_ZN23FrontendApplicationBaseD1Ev>
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	4618      	mov	r0, r3
 8015ede:	3708      	adds	r7, #8
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}
 8015ee4:	08026fd4 	.word	0x08026fd4

08015ee8 <_ZN19FrontendApplicationD0Ev>:
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f7ff ffe7 	bl	8015ec4 <_ZN19FrontendApplicationD1Ev>
 8015ef6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f00f f9f0 	bl	80252e0 <_ZdlPvj>
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	4618      	mov	r0, r3
 8015f04:	3708      	adds	r7, #8
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b082      	sub	sp, #8
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015f18:	4618      	mov	r0, r3
 8015f1a:	f000 f997 	bl	801624c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f004 fe9d 	bl	801ac60 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8015f26:	bf00      	nop
 8015f28:	3708      	adds	r7, #8
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
	...

08015f30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	60f8      	str	r0, [r7, #12]
 8015f38:	60b9      	str	r1, [r7, #8]
 8015f3a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	68b9      	ldr	r1, [r7, #8]
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fd ffaa 	bl	8013e9c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015f48:	4a03      	ldr	r2, [pc, #12]	; (8015f58 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	601a      	str	r2, [r3, #0]
{
}
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	4618      	mov	r0, r3
 8015f52:	3710      	adds	r7, #16
 8015f54:	46bd      	mov	sp, r7
 8015f56:	bd80      	pop	{r7, pc}
 8015f58:	08026fd4 	.word	0x08026fd4

08015f5c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8015f5c:	b480      	push	{r7}
 8015f5e:	b083      	sub	sp, #12
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
    {
    }
 8015f64:	bf00      	nop
 8015f66:	370c      	adds	r7, #12
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr

08015f70 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8015f70:	b480      	push	{r7}
 8015f72:	b083      	sub	sp, #12
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
    {
    }
 8015f78:	bf00      	nop
 8015f7a:	370c      	adds	r7, #12
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr

08015f84 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8015f84:	b480      	push	{r7}
 8015f86:	b083      	sub	sp, #12
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
    {
 8015f8c:	4a04      	ldr	r2, [pc, #16]	; (8015fa0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	601a      	str	r2, [r3, #0]
    }
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	4618      	mov	r0, r3
 8015f96:	370c      	adds	r7, #12
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9e:	4770      	bx	lr
 8015fa0:	08027048 	.word	0x08027048

08015fa4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
    }
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7ff ffe9 	bl	8015f84 <_ZN8touchgfx9PresenterD1Ev>
 8015fb2:	2104      	movs	r1, #4
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f00f f993 	bl	80252e0 <_ZdlPvj>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8015fc4:	b480      	push	{r7}
 8015fc6:	b083      	sub	sp, #12
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
    {
 8015fcc:	4a04      	ldr	r2, [pc, #16]	; (8015fe0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	601a      	str	r2, [r3, #0]
    }
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	370c      	adds	r7, #12
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fde:	4770      	bx	lr
 8015fe0:	08027048 	.word	0x08027048

08015fe4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8015fe4:	b480      	push	{r7}
 8015fe6:	b083      	sub	sp, #12
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
 8015fec:	4a06      	ldr	r2, [pc, #24]	; (8016008 <_ZN13ModelListenerC1Ev+0x24>)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	601a      	str	r2, [r3, #0]
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	605a      	str	r2, [r3, #4]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	370c      	adds	r7, #12
 8015ffe:	46bd      	mov	sp, r7
 8016000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016004:	4770      	bx	lr
 8016006:	bf00      	nop
 8016008:	08027038 	.word	0x08027038

0801600c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	4a04      	ldr	r2, [pc, #16]	; (8016028 <_ZN13ModelListenerD1Ev+0x1c>)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	601a      	str	r2, [r3, #0]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	4618      	mov	r0, r3
 801601e:	370c      	adds	r7, #12
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	08027038 	.word	0x08027038

0801602c <_ZN13ModelListenerD0Ev>:
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7ff ffe9 	bl	801600c <_ZN13ModelListenerD1Ev>
 801603a:	2108      	movs	r1, #8
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f00f f94f 	bl	80252e0 <_ZdlPvj>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	4618      	mov	r0, r3
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	4a09      	ldr	r2, [pc, #36]	; (801607c <_ZN13MainPresenterD1Ev+0x30>)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	601a      	str	r2, [r3, #0]
 801605a:	4a09      	ldr	r2, [pc, #36]	; (8016080 <_ZN13MainPresenterD1Ev+0x34>)
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	605a      	str	r2, [r3, #4]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	3304      	adds	r3, #4
 8016064:	4618      	mov	r0, r3
 8016066:	f7ff ffd1 	bl	801600c <_ZN13ModelListenerD1Ev>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	4618      	mov	r0, r3
 801606e:	f7ff ff89 	bl	8015f84 <_ZN8touchgfx9PresenterD1Ev>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	4618      	mov	r0, r3
 8016076:	3708      	adds	r7, #8
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	08027010 	.word	0x08027010
 8016080:	08027028 	.word	0x08027028

08016084 <_ZThn4_N13MainPresenterD1Ev>:
 8016084:	f1a0 0004 	sub.w	r0, r0, #4
 8016088:	e7e0      	b.n	801604c <_ZN13MainPresenterD1Ev>
 801608a:	bf00      	nop

0801608c <_ZN13MainPresenterD0Ev>:
 801608c:	b580      	push	{r7, lr}
 801608e:	b082      	sub	sp, #8
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7ff ffd9 	bl	801604c <_ZN13MainPresenterD1Ev>
 801609a:	2110      	movs	r1, #16
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f00f f91f 	bl	80252e0 <_ZdlPvj>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	4618      	mov	r0, r3
 80160a6:	3708      	adds	r7, #8
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <_ZThn4_N13MainPresenterD0Ev>:
 80160ac:	f1a0 0004 	sub.w	r0, r0, #4
 80160b0:	e7ec      	b.n	801608c <_ZN13MainPresenterD0Ev>
	...

080160b4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
    : view(v)
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7ff ff7f 	bl	8015fc4 <_ZN8touchgfx9PresenterC1Ev>
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	3304      	adds	r3, #4
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7ff ff8a 	bl	8015fe4 <_ZN13ModelListenerC1Ev>
 80160d0:	4a06      	ldr	r2, [pc, #24]	; (80160ec <_ZN13MainPresenterC1ER8MainView+0x38>)
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	601a      	str	r2, [r3, #0]
 80160d6:	4a06      	ldr	r2, [pc, #24]	; (80160f0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	605a      	str	r2, [r3, #4]
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	683a      	ldr	r2, [r7, #0]
 80160e0:	60da      	str	r2, [r3, #12]
{
}
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	4618      	mov	r0, r3
 80160e6:	3708      	adds	r7, #8
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	08027010 	.word	0x08027010
 80160f0:	08027028 	.word	0x08027028

080160f4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80160f4:	b480      	push	{r7}
 80160f6:	b083      	sub	sp, #12
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
}
 80160fc:	bf00      	nop
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr

08016108 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
}
 8016110:	bf00      	nop
 8016112:	370c      	adds	r7, #12
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr

0801611c <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
        return rect.width;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801612a:	4618      	mov	r0, r3
 801612c:	370c      	adds	r7, #12
 801612e:	46bd      	mov	sp, r7
 8016130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016134:	4770      	bx	lr

08016136 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8016136:	b480      	push	{r7}
 8016138:	b083      	sub	sp, #12
 801613a:	af00      	add	r7, sp, #0
 801613c:	6078      	str	r0, [r7, #4]
        return rect.height;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8016144:	4618      	mov	r0, r3
 8016146:	370c      	adds	r7, #12
 8016148:	46bd      	mov	sp, r7
 801614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614e:	4770      	bx	lr

08016150 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8016150:	b580      	push	{r7, lr}
 8016152:	b082      	sub	sp, #8
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	4a05      	ldr	r2, [pc, #20]	; (8016170 <_ZN8MainViewD1Ev+0x20>)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	601a      	str	r2, [r3, #0]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	4618      	mov	r0, r3
 8016162:	f7fe fe71 	bl	8014e48 <_ZN12MainViewBaseD1Ev>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4618      	mov	r0, r3
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}
 8016170:	08027060 	.word	0x08027060

08016174 <_ZN8MainViewD0Ev>:
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7ff ffe7 	bl	8016150 <_ZN8MainViewD1Ev>
 8016182:	f44f 711e 	mov.w	r1, #632	; 0x278
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f00f f8aa 	bl	80252e0 <_ZdlPvj>
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	4618      	mov	r0, r3
 8016190:	3708      	adds	r7, #8
 8016192:	46bd      	mov	sp, r7
 8016194:	bd80      	pop	{r7, pc}
	...

08016198 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8016198:	b590      	push	{r4, r7, lr}
 801619a:	b083      	sub	sp, #12
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7fe fedc 	bl	8014f60 <_ZN12MainViewBaseC1Ev>
 80161a8:	4a14      	ldr	r2, [pc, #80]	; (80161fc <_ZN8MainViewC1Ev+0x64>)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	601a      	str	r2, [r3, #0]
{
    // Support of larger displays for this example
    // is handled by showing a black box in the
    // unused part of the display.
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80161ae:	4b14      	ldr	r3, [pc, #80]	; (8016200 <_ZN8MainViewC1Ev+0x68>)
 80161b0:	881b      	ldrh	r3, [r3, #0]
 80161b2:	461c      	mov	r4, r3
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	3370      	adds	r3, #112	; 0x70
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7ff ffaf 	bl	801611c <_ZNK8touchgfx8Drawable8getWidthEv>
 80161be:	4603      	mov	r3, r0
 80161c0:	429c      	cmp	r4, r3
 80161c2:	dc0a      	bgt.n	80161da <_ZN8MainViewC1Ev+0x42>
            HAL::DISPLAY_HEIGHT > backgroundImage.getHeight())
 80161c4:	4b0f      	ldr	r3, [pc, #60]	; (8016204 <_ZN8MainViewC1Ev+0x6c>)
 80161c6:	881b      	ldrh	r3, [r3, #0]
 80161c8:	461c      	mov	r4, r3
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	3370      	adds	r3, #112	; 0x70
 80161ce:	4618      	mov	r0, r3
 80161d0:	f7ff ffb1 	bl	8016136 <_ZNK8touchgfx8Drawable9getHeightEv>
 80161d4:	4603      	mov	r3, r0
    if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth() ||
 80161d6:	429c      	cmp	r4, r3
 80161d8:	dd01      	ble.n	80161de <_ZN8MainViewC1Ev+0x46>
 80161da:	2301      	movs	r3, #1
 80161dc:	e000      	b.n	80161e0 <_ZN8MainViewC1Ev+0x48>
 80161de:	2300      	movs	r3, #0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d005      	beq.n	80161f0 <_ZN8MainViewC1Ev+0x58>
    {
        backgroundBox.setVisible(true);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	3340      	adds	r3, #64	; 0x40
 80161e8:	2101      	movs	r1, #1
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7fe fa0c 	bl	8014608 <_ZN8touchgfx8Drawable10setVisibleEb>
    }
}
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	4618      	mov	r0, r3
 80161f4:	370c      	adds	r7, #12
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd90      	pop	{r4, r7, pc}
 80161fa:	bf00      	nop
 80161fc:	08027060 	.word	0x08027060
 8016200:	200098de 	.word	0x200098de
 8016204:	200098e0 	.word	0x200098e0

08016208 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8016208:	b480      	push	{r7}
 801620a:	b083      	sub	sp, #12
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
}
 8016210:	bf00      	nop
 8016212:	370c      	adds	r7, #12
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr

0801621c <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 801621c:	b480      	push	{r7}
 801621e:	b083      	sub	sp, #12
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
}
 8016224:	bf00      	nop
 8016226:	370c      	adds	r7, #12
 8016228:	46bd      	mov	sp, r7
 801622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622e:	4770      	bx	lr

08016230 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8016230:	b480      	push	{r7}
 8016232:	b083      	sub	sp, #12
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	2200      	movs	r2, #0
 801623c:	601a      	str	r2, [r3, #0]
{
}
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	4618      	mov	r0, r3
 8016242:	370c      	adds	r7, #12
 8016244:	46bd      	mov	sp, r7
 8016246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624a:	4770      	bx	lr

0801624c <_ZN5Model4tickEv>:

void Model::tick()
{
 801624c:	b480      	push	{r7}
 801624e:	b083      	sub	sp, #12
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
}
 8016254:	bf00      	nop
 8016256:	370c      	adds	r7, #12
 8016258:	46bd      	mov	sp, r7
 801625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625e:	4770      	bx	lr

08016260 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8016260:	b480      	push	{r7}
 8016262:	b083      	sub	sp, #12
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
    {
 8016268:	4a04      	ldr	r2, [pc, #16]	; (801627c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	601a      	str	r2, [r3, #0]
    }
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	4618      	mov	r0, r3
 8016272:	370c      	adds	r7, #12
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr
 801627c:	080270ac 	.word	0x080270ac

08016280 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8016280:	b580      	push	{r7, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
    }
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f7ff ffe9 	bl	8016260 <_ZN8touchgfx15TouchControllerD1Ev>
 801628e:	2104      	movs	r1, #4
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f00f f825 	bl	80252e0 <_ZdlPvj>
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4618      	mov	r0, r3
 801629a:	3708      	adds	r7, #8
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}

080162a0 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b082      	sub	sp, #8
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80162a8:	4b05      	ldr	r3, [pc, #20]	; (80162c0 <_ZN20STM32TouchController4initEv+0x20>)
 80162aa:	4a06      	ldr	r2, [pc, #24]	; (80162c4 <_ZN20STM32TouchController4initEv+0x24>)
 80162ac:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 80162ae:	4b04      	ldr	r3, [pc, #16]	; (80162c0 <_ZN20STM32TouchController4initEv+0x20>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	2070      	movs	r0, #112	; 0x70
 80162b6:	4798      	blx	r3
}
 80162b8:	bf00      	nop
 80162ba:	3708      	adds	r7, #8
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}
 80162c0:	200087bc 	.word	0x200087bc
 80162c4:	20000004 	.word	0x20000004

080162c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	60f8      	str	r0, [r7, #12]
 80162d0:	60b9      	str	r1, [r7, #8]
 80162d2:	607a      	str	r2, [r7, #4]
    /* Checking if the screen has been touched */

    if (tsDriver)
 80162d4:	4b0f      	ldr	r3, [pc, #60]	; (8016314 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d015      	beq.n	8016308 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 80162dc:	4b0d      	ldr	r3, [pc, #52]	; (8016314 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	691b      	ldr	r3, [r3, #16]
 80162e2:	2070      	movs	r0, #112	; 0x70
 80162e4:	4798      	blx	r3
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	bf14      	ite	ne
 80162ec:	2301      	movne	r3, #1
 80162ee:	2300      	moveq	r3, #0
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d008      	beq.n	8016308 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 80162f6:	4b07      	ldr	r3, [pc, #28]	; (8016314 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	695b      	ldr	r3, [r3, #20]
 80162fc:	68ba      	ldr	r2, [r7, #8]
 80162fe:	6879      	ldr	r1, [r7, #4]
 8016300:	2070      	movs	r0, #112	; 0x70
 8016302:	4798      	blx	r3
            return true;
 8016304:	2301      	movs	r3, #1
 8016306:	e000      	b.n	801630a <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 8016308:	2300      	movs	r3, #0
}
 801630a:	4618      	mov	r0, r3
 801630c:	3710      	adds	r7, #16
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}
 8016312:	bf00      	nop
 8016314:	200087bc 	.word	0x200087bc

08016318 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8016318:	b580      	push	{r7, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	af00      	add	r7, sp, #0
 801631e:	6078      	str	r0, [r7, #4]
 8016320:	4a05      	ldr	r2, [pc, #20]	; (8016338 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	601a      	str	r2, [r3, #0]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	4618      	mov	r0, r3
 801632a:	f7ff ff99 	bl	8016260 <_ZN8touchgfx15TouchControllerD1Ev>
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	4618      	mov	r0, r3
 8016332:	3708      	adds	r7, #8
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}
 8016338:	08027094 	.word	0x08027094

0801633c <_ZN20STM32TouchControllerD0Ev>:
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6878      	ldr	r0, [r7, #4]
 8016346:	f7ff ffe7 	bl	8016318 <_ZN20STM32TouchControllerD1Ev>
 801634a:	2104      	movs	r1, #4
 801634c:	6878      	ldr	r0, [r7, #4]
 801634e:	f00e ffc7 	bl	80252e0 <_ZdlPvj>
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	4618      	mov	r0, r3
 8016356:	3708      	adds	r7, #8
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801635c:	b480      	push	{r7}
 801635e:	b083      	sub	sp, #12
 8016360:	af00      	add	r7, sp, #0
 8016362:	4603      	mov	r3, r0
 8016364:	71fb      	strb	r3, [r7, #7]

}
 8016366:	bf00      	nop
 8016368:	370c      	adds	r7, #12
 801636a:	46bd      	mov	sp, r7
 801636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016370:	4770      	bx	lr

08016372 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8016372:	b480      	push	{r7}
 8016374:	b083      	sub	sp, #12
 8016376:	af00      	add	r7, sp, #0
 8016378:	4603      	mov	r3, r0
 801637a:	71fb      	strb	r3, [r7, #7]

}
 801637c:	bf00      	nop
 801637e:	370c      	adds	r7, #12
 8016380:	46bd      	mov	sp, r7
 8016382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016386:	4770      	bx	lr

08016388 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8016388:	b480      	push	{r7}
 801638a:	b083      	sub	sp, #12
 801638c:	af00      	add	r7, sp, #0
 801638e:	4603      	mov	r3, r0
 8016390:	71fb      	strb	r3, [r7, #7]

}
 8016392:	bf00      	nop
 8016394:	370c      	adds	r7, #12
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr
	...

080163a0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80163a0:	b480      	push	{r7}
 80163a2:	b083      	sub	sp, #12
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
    {
 80163a8:	4a04      	ldr	r2, [pc, #16]	; (80163bc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	601a      	str	r2, [r3, #0]
    }
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	4618      	mov	r0, r3
 80163b2:	370c      	adds	r7, #12
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr
 80163bc:	080279ac 	.word	0x080279ac

080163c0 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b082      	sub	sp, #8
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
    }
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f7ff ffe9 	bl	80163a0 <_ZN8touchgfx3HALD1Ev>
 80163ce:	2178      	movs	r1, #120	; 0x78
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f00e ff85 	bl	80252e0 <_ZdlPvj>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	4618      	mov	r0, r3
 80163da:	3708      	adds	r7, #8
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}

080163e0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80163e0:	b480      	push	{r7}
 80163e2:	b083      	sub	sp, #12
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	460b      	mov	r3, r1
 80163ea:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	78fa      	ldrb	r2, [r7, #3]
 80163f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2201      	movs	r2, #1
 80163f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80163fc:	bf00      	nop
 80163fe:	370c      	adds	r7, #12
 8016400:	46bd      	mov	sp, r7
 8016402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016406:	4770      	bx	lr

08016408 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	685a      	ldr	r2, [r3, #4]
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	685b      	ldr	r3, [r3, #4]
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4610      	mov	r0, r2
 801641e:	4798      	blx	r3
 8016420:	4603      	mov	r3, r0
    }
 8016422:	4618      	mov	r0, r3
 8016424:	3708      	adds	r7, #8
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}

0801642a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801642a:	b580      	push	{r7, lr}
 801642c:	b082      	sub	sp, #8
 801642e:	af00      	add	r7, sp, #0
 8016430:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8016432:	6878      	ldr	r0, [r7, #4]
 8016434:	f003 f8a6 	bl	8019584 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	3390      	adds	r3, #144	; 0x90
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	4798      	blx	r3
    }
 8016444:	bf00      	nop
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	6039      	str	r1, [r7, #0]
    {
        return false;
 8016456:	2300      	movs	r3, #0
    }
 8016458:	4618      	mov	r0, r3
 801645a:	370c      	adds	r7, #12
 801645c:	46bd      	mov	sp, r7
 801645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016462:	4770      	bx	lr

08016464 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8016464:	b590      	push	{r4, r7, lr}
 8016466:	b08b      	sub	sp, #44	; 0x2c
 8016468:	af00      	add	r7, sp, #0
 801646a:	60f8      	str	r0, [r7, #12]
 801646c:	60b9      	str	r1, [r7, #8]
 801646e:	4611      	mov	r1, r2
 8016470:	461a      	mov	r2, r3
 8016472:	460b      	mov	r3, r1
 8016474:	80fb      	strh	r3, [r7, #6]
 8016476:	4613      	mov	r3, r2
 8016478:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 801647a:	f7fd fb47 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 801647e:	4602      	mov	r2, r0
 8016480:	6813      	ldr	r3, [r2, #0]
 8016482:	3328      	adds	r3, #40	; 0x28
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	4610      	mov	r0, r2
 8016488:	4798      	blx	r3
 801648a:	4603      	mov	r3, r0
 801648c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 801648e:	8b7b      	ldrh	r3, [r7, #26]
 8016490:	4a3d      	ldr	r2, [pc, #244]	; (8016588 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8016492:	8812      	ldrh	r2, [r2, #0]
 8016494:	fb02 f303 	mul.w	r3, r2, r3
 8016498:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801649a:	68bb      	ldr	r3, [r7, #8]
 801649c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 801649e:	2300      	movs	r3, #0
 80164a0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80164a2:	2300      	movs	r3, #0
 80164a4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80164a6:	797b      	ldrb	r3, [r7, #5]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d005      	beq.n	80164b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80164ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164ae:	697b      	ldr	r3, [r7, #20]
 80164b0:	4413      	add	r3, r2
 80164b2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80164b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80164b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d005      	beq.n	80164cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80164c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164c2:	697b      	ldr	r3, [r7, #20]
 80164c4:	4413      	add	r3, r2
 80164c6:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80164c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ca:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80164cc:	88fb      	ldrh	r3, [r7, #6]
 80164ce:	3b01      	subs	r3, #1
 80164d0:	2b1f      	cmp	r3, #31
 80164d2:	d84d      	bhi.n	8016570 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 80164d4:	a201      	add	r2, pc, #4	; (adr r2, 80164dc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 80164d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164da:	bf00      	nop
 80164dc:	0801655d 	.word	0x0801655d
 80164e0:	0801655d 	.word	0x0801655d
 80164e4:	08016571 	.word	0x08016571
 80164e8:	0801655d 	.word	0x0801655d
 80164ec:	08016571 	.word	0x08016571
 80164f0:	08016571 	.word	0x08016571
 80164f4:	08016571 	.word	0x08016571
 80164f8:	0801655d 	.word	0x0801655d
 80164fc:	08016571 	.word	0x08016571
 8016500:	08016571 	.word	0x08016571
 8016504:	08016571 	.word	0x08016571
 8016508:	08016571 	.word	0x08016571
 801650c:	08016571 	.word	0x08016571
 8016510:	08016571 	.word	0x08016571
 8016514:	08016571 	.word	0x08016571
 8016518:	0801655d 	.word	0x0801655d
 801651c:	08016571 	.word	0x08016571
 8016520:	08016571 	.word	0x08016571
 8016524:	08016571 	.word	0x08016571
 8016528:	08016571 	.word	0x08016571
 801652c:	08016571 	.word	0x08016571
 8016530:	08016571 	.word	0x08016571
 8016534:	08016571 	.word	0x08016571
 8016538:	0801655d 	.word	0x0801655d
 801653c:	08016571 	.word	0x08016571
 8016540:	08016571 	.word	0x08016571
 8016544:	08016571 	.word	0x08016571
 8016548:	08016571 	.word	0x08016571
 801654c:	08016571 	.word	0x08016571
 8016550:	08016571 	.word	0x08016571
 8016554:	08016571 	.word	0x08016571
 8016558:	0801655d 	.word	0x0801655d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	3374      	adds	r3, #116	; 0x74
 8016562:	681c      	ldr	r4, [r3, #0]
 8016564:	69fb      	ldr	r3, [r7, #28]
 8016566:	6a3a      	ldr	r2, [r7, #32]
 8016568:	68b9      	ldr	r1, [r7, #8]
 801656a:	68f8      	ldr	r0, [r7, #12]
 801656c:	47a0      	blx	r4
            break;
 801656e:	e006      	b.n	801657e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8016570:	4b06      	ldr	r3, [pc, #24]	; (801658c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8016572:	4a07      	ldr	r2, [pc, #28]	; (8016590 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8016574:	f240 3125 	movw	r1, #805	; 0x325
 8016578:	4806      	ldr	r0, [pc, #24]	; (8016594 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801657a:	f00e fedd 	bl	8025338 <__assert_func>
            break;
        }
    }
 801657e:	bf00      	nop
 8016580:	372c      	adds	r7, #44	; 0x2c
 8016582:	46bd      	mov	sp, r7
 8016584:	bd90      	pop	{r4, r7, pc}
 8016586:	bf00      	nop
 8016588:	200098e6 	.word	0x200098e6
 801658c:	080268d4 	.word	0x080268d4
 8016590:	080271c0 	.word	0x080271c0
 8016594:	080268f4 	.word	0x080268f4

08016598 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8016598:	b580      	push	{r7, lr}
 801659a:	b084      	sub	sp, #16
 801659c:	af00      	add	r7, sp, #0
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]
 80165a4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d106      	bne.n	80165ba <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80165ac:	4b11      	ldr	r3, [pc, #68]	; (80165f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80165ae:	4a12      	ldr	r2, [pc, #72]	; (80165f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80165b0:	f240 3137 	movw	r1, #823	; 0x337
 80165b4:	4811      	ldr	r0, [pc, #68]	; (80165fc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80165b6:	f00e febf 	bl	8025338 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	68ba      	ldr	r2, [r7, #8]
 80165be:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	683a      	ldr	r2, [r7, #0]
 80165ca:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	bf14      	ite	ne
 80165d2:	2301      	movne	r3, #1
 80165d4:	2300      	moveq	r3, #0
 80165d6:	b2da      	uxtb	r2, r3
 80165d8:	4b09      	ldr	r3, [pc, #36]	; (8016600 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80165da:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	bf14      	ite	ne
 80165e2:	2301      	movne	r3, #1
 80165e4:	2300      	moveq	r3, #0
 80165e6:	b2da      	uxtb	r2, r3
 80165e8:	4b06      	ldr	r3, [pc, #24]	; (8016604 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80165ea:	701a      	strb	r2, [r3, #0]
    }
 80165ec:	bf00      	nop
 80165ee:	3710      	adds	r7, #16
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}
 80165f4:	08026938 	.word	0x08026938
 80165f8:	08027170 	.word	0x08027170
 80165fc:	080268f4 	.word	0x080268f4
 8016600:	200098e8 	.word	0x200098e8
 8016604:	200098e9 	.word	0x200098e9

08016608 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8016608:	b580      	push	{r7, lr}
 801660a:	b082      	sub	sp, #8
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	460b      	mov	r3, r1
 8016612:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016618:	2b00      	cmp	r3, #0
 801661a:	d004      	beq.n	8016626 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016620:	887a      	ldrh	r2, [r7, #2]
 8016622:	4610      	mov	r0, r2
 8016624:	4798      	blx	r3
        }
    }
 8016626:	bf00      	nop
 8016628:	3708      	adds	r7, #8
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}

0801662e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801662e:	b580      	push	{r7, lr}
 8016630:	b082      	sub	sp, #8
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	685a      	ldr	r2, [r3, #4]
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	685b      	ldr	r3, [r3, #4]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	3318      	adds	r3, #24
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	4610      	mov	r0, r2
 8016646:	4798      	blx	r3
 8016648:	4603      	mov	r3, r0
    }
 801664a:	4618      	mov	r0, r3
 801664c:	3708      	adds	r7, #8
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
	...

08016654 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8016654:	b480      	push	{r7}
 8016656:	b083      	sub	sp, #12
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016668:	429a      	cmp	r2, r3
 801666a:	d017      	beq.n	801669c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 801666c:	4b1a      	ldr	r3, [pc, #104]	; (80166d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d12a      	bne.n	80166ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016674:	4b19      	ldr	r3, [pc, #100]	; (80166dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016676:	881a      	ldrh	r2, [r3, #0]
 8016678:	4b19      	ldr	r3, [pc, #100]	; (80166e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801667a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801667c:	4b19      	ldr	r3, [pc, #100]	; (80166e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801667e:	881a      	ldrh	r2, [r3, #0]
 8016680:	4b19      	ldr	r3, [pc, #100]	; (80166e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016682:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8016684:	4b16      	ldr	r3, [pc, #88]	; (80166e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016686:	881a      	ldrh	r2, [r3, #0]
 8016688:	4b16      	ldr	r3, [pc, #88]	; (80166e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801668a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 801668c:	4b16      	ldr	r3, [pc, #88]	; (80166e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801668e:	881a      	ldrh	r2, [r3, #0]
 8016690:	4b12      	ldr	r3, [pc, #72]	; (80166dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016692:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8016694:	4b10      	ldr	r3, [pc, #64]	; (80166d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016696:	2201      	movs	r2, #1
 8016698:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801669a:	e016      	b.n	80166ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 801669c:	4b0e      	ldr	r3, [pc, #56]	; (80166d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d012      	beq.n	80166ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80166a4:	4b0f      	ldr	r3, [pc, #60]	; (80166e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80166a6:	881a      	ldrh	r2, [r3, #0]
 80166a8:	4b0d      	ldr	r3, [pc, #52]	; (80166e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80166aa:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80166ac:	4b0b      	ldr	r3, [pc, #44]	; (80166dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80166ae:	881a      	ldrh	r2, [r3, #0]
 80166b0:	4b0d      	ldr	r3, [pc, #52]	; (80166e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80166b2:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80166b4:	4b0c      	ldr	r3, [pc, #48]	; (80166e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80166b6:	881a      	ldrh	r2, [r3, #0]
 80166b8:	4b0a      	ldr	r3, [pc, #40]	; (80166e4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80166ba:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80166bc:	4b08      	ldr	r3, [pc, #32]	; (80166e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80166be:	881a      	ldrh	r2, [r3, #0]
 80166c0:	4b06      	ldr	r3, [pc, #24]	; (80166dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80166c2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80166c4:	4b04      	ldr	r3, [pc, #16]	; (80166d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80166c6:	2200      	movs	r2, #0
 80166c8:	701a      	strb	r2, [r3, #0]
    }
 80166ca:	bf00      	nop
 80166cc:	370c      	adds	r7, #12
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop
 80166d8:	200098e2 	.word	0x200098e2
 80166dc:	200098de 	.word	0x200098de
 80166e0:	200098e4 	.word	0x200098e4
 80166e4:	200098e0 	.word	0x200098e0
 80166e8:	200098e6 	.word	0x200098e6

080166ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	4618      	mov	r0, r3
 80166f8:	f002 f9c6 	bl	8018a88 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80166fc:	bf00      	nop
 80166fe:	3708      	adds	r7, #8
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	4a05      	ldr	r2, [pc, #20]	; (8016724 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	601a      	str	r2, [r3, #0]
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	4618      	mov	r0, r3
 8016716:	f7ff fe43 	bl	80163a0 <_ZN8touchgfx3HALD1Ev>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	4618      	mov	r0, r3
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}
 8016724:	08027398 	.word	0x08027398

08016728 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8016728:	b580      	push	{r7, lr}
 801672a:	b082      	sub	sp, #8
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f7ff ffe7 	bl	8016704 <_ZN20TouchGFXGeneratedHALD1Ev>
 8016736:	2178      	movs	r1, #120	; 0x78
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f00e fdd1 	bl	80252e0 <_ZdlPvj>
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	4618      	mov	r0, r3
 8016742:	3708      	adds	r7, #8
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	4618      	mov	r0, r3
 8016754:	f7ff ffca 	bl	80166ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8016758:	bf00      	nop
 801675a:	3708      	adds	r7, #8
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	4618      	mov	r0, r3
 801676c:	f001 fb0e 	bl	8017d8c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	4618      	mov	r0, r3
 8016784:	f001 fb8e 	bl	8017ea4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8016788:	4603      	mov	r3, r0
}
 801678a:	4618      	mov	r0, r3
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
 801679a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	6839      	ldr	r1, [r7, #0]
 80167a0:	4618      	mov	r0, r3
 80167a2:	f001 fb8d 	bl	8017ec0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80167a6:	bf00      	nop
 80167a8:	3708      	adds	r7, #8
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}

080167ae <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80167ae:	b580      	push	{r7, lr}
 80167b0:	b082      	sub	sp, #8
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	6078      	str	r0, [r7, #4]
 80167b6:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	6839      	ldr	r1, [r7, #0]
 80167bc:	4618      	mov	r0, r3
 80167be:	f001 fb95 	bl	8017eec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80167c2:	bf00      	nop
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}

080167ca <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b082      	sub	sp, #8
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f001 fb0b 	bl	8017df0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80167da:	bf00      	nop
 80167dc:	3708      	adds	r7, #8
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}

080167e2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80167e2:	b580      	push	{r7, lr}
 80167e4:	b082      	sub	sp, #8
 80167e6:	af00      	add	r7, sp, #0
 80167e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f001 fb0f 	bl	8017e10 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80167f2:	bf00      	nop
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b082      	sub	sp, #8
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	4618      	mov	r0, r3
 8016806:	f001 fb11 	bl	8017e2c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801680a:	bf00      	nop
 801680c:	3708      	adds	r7, #8
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}

08016812 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8016812:	b580      	push	{r7, lr}
 8016814:	b082      	sub	sp, #8
 8016816:	af00      	add	r7, sp, #0
 8016818:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4618      	mov	r0, r3
 801681e:	f001 fb13 	bl	8017e48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8016822:	bf00      	nop
 8016824:	3708      	adds	r7, #8
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}
	...

0801682c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	4a05      	ldr	r2, [pc, #20]	; (801684c <_ZN11TouchGFXHALD1Ev+0x20>)
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	601a      	str	r2, [r3, #0]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	4618      	mov	r0, r3
 801683e:	f7ff ff61 	bl	8016704 <_ZN20TouchGFXGeneratedHALD1Ev>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	4618      	mov	r0, r3
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}
 801684c:	080270c4 	.word	0x080270c4

08016850 <_ZN11TouchGFXHALD0Ev>:
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f7ff ffe7 	bl	801682c <_ZN11TouchGFXHALD1Ev>
 801685e:	2178      	movs	r1, #120	; 0x78
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f00e fd3d 	bl	80252e0 <_ZdlPvj>
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8016870:	b580      	push	{r7, lr}
 8016872:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8016874:	2203      	movs	r2, #3
 8016876:	2100      	movs	r1, #0
 8016878:	2001      	movs	r0, #1
 801687a:	f7fa f96f 	bl	8010b5c <xQueueGenericCreate>
 801687e:	4602      	mov	r2, r0
 8016880:	4b0b      	ldr	r3, [pc, #44]	; (80168b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8016882:	601a      	str	r2, [r3, #0]
 8016884:	4b0a      	ldr	r3, [pc, #40]	; (80168b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d006      	beq.n	801689a <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 801688c:	4b08      	ldr	r3, [pc, #32]	; (80168b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801688e:	6818      	ldr	r0, [r3, #0]
 8016890:	2300      	movs	r3, #0
 8016892:	2200      	movs	r2, #0
 8016894:	2100      	movs	r1, #0
 8016896:	f7fa f9bf 	bl	8010c18 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 801689a:	2200      	movs	r2, #0
 801689c:	2101      	movs	r1, #1
 801689e:	2001      	movs	r0, #1
 80168a0:	f7fa f95c 	bl	8010b5c <xQueueGenericCreate>
 80168a4:	4602      	mov	r2, r0
 80168a6:	4b03      	ldr	r3, [pc, #12]	; (80168b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80168a8:	601a      	str	r2, [r3, #0]
}
 80168aa:	bf00      	nop
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	200087c0 	.word	0x200087c0
 80168b4:	200087c4 	.word	0x200087c4

080168b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 80168bc:	4b04      	ldr	r3, [pc, #16]	; (80168d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f04f 31ff 	mov.w	r1, #4294967295
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7fa fcb9 	bl	801123c <xQueueSemaphoreTake>
}
 80168ca:	bf00      	nop
 80168cc:	bd80      	pop	{r7, pc}
 80168ce:	bf00      	nop
 80168d0:	200087c0 	.word	0x200087c0

080168d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 80168d8:	4b04      	ldr	r3, [pc, #16]	; (80168ec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 80168da:	6818      	ldr	r0, [r3, #0]
 80168dc:	2300      	movs	r3, #0
 80168de:	2200      	movs	r2, #0
 80168e0:	2100      	movs	r1, #0
 80168e2:	f7fa f999 	bl	8010c18 <xQueueGenericSend>
}
 80168e6:	bf00      	nop
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	200087c0 	.word	0x200087c0

080168f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 80168f4:	4b03      	ldr	r3, [pc, #12]	; (8016904 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	2100      	movs	r1, #0
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7fa fc9e 	bl	801123c <xQueueSemaphoreTake>
}
 8016900:	bf00      	nop
 8016902:	bd80      	pop	{r7, pc}
 8016904:	200087c0 	.word	0x200087c0

08016908 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 801690e:	2300      	movs	r3, #0
 8016910:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8016912:	4b0b      	ldr	r3, [pc, #44]	; (8016940 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	1d3a      	adds	r2, r7, #4
 8016918:	4611      	mov	r1, r2
 801691a:	4618      	mov	r0, r3
 801691c:	f7fa fb1a 	bl	8010f54 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d007      	beq.n	8016936 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8016926:	4b07      	ldr	r3, [pc, #28]	; (8016944 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8016928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801692c:	601a      	str	r2, [r3, #0]
 801692e:	f3bf 8f4f 	dsb	sy
 8016932:	f3bf 8f6f 	isb	sy
}
 8016936:	bf00      	nop
 8016938:	3708      	adds	r7, #8
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}
 801693e:	bf00      	nop
 8016940:	200087c0 	.word	0x200087c0
 8016944:	e000ed04 	.word	0xe000ed04

08016948 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
    if (vsync_q)
 801694e:	4b0e      	ldr	r3, [pc, #56]	; (8016988 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d013      	beq.n	801697e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8016956:	2300      	movs	r3, #0
 8016958:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 801695a:	4b0b      	ldr	r3, [pc, #44]	; (8016988 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 801695c:	6818      	ldr	r0, [r3, #0]
 801695e:	1d3a      	adds	r2, r7, #4
 8016960:	2300      	movs	r3, #0
 8016962:	490a      	ldr	r1, [pc, #40]	; (801698c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8016964:	f7fa fa5a 	bl	8010e1c <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d007      	beq.n	801697e <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801696e:	4b08      	ldr	r3, [pc, #32]	; (8016990 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8016970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016974:	601a      	str	r2, [r3, #0]
 8016976:	f3bf 8f4f 	dsb	sy
 801697a:	f3bf 8f6f 	isb	sy
    }
}
 801697e:	bf00      	nop
 8016980:	3708      	adds	r7, #8
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
 8016986:	bf00      	nop
 8016988:	200087c4 	.word	0x200087c4
 801698c:	20000068 	.word	0x20000068
 8016990:	e000ed04 	.word	0xe000ed04

08016994 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8016994:	b580      	push	{r7, lr}
 8016996:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8016998:	4b08      	ldr	r3, [pc, #32]	; (80169bc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2200      	movs	r2, #0
 801699e:	4908      	ldr	r1, [pc, #32]	; (80169c0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7fa fb69 	bl	8011078 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80169a6:	4b05      	ldr	r3, [pc, #20]	; (80169bc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	f04f 32ff 	mov.w	r2, #4294967295
 80169ae:	4904      	ldr	r1, [pc, #16]	; (80169c0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7fa fb61 	bl	8011078 <xQueueReceive>
}
 80169b6:	bf00      	nop
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	200087c4 	.word	0x200087c4
 80169c0:	20000068 	.word	0x20000068

080169c4 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	4603      	mov	r3, r0
 80169cc:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 80169ce:	88fb      	ldrh	r3, [r7, #6]
 80169d0:	4618      	mov	r0, r3
 80169d2:	f7fb f887 	bl	8011ae4 <vTaskDelay>
}
 80169d6:	bf00      	nop
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
	...

080169e0 <__NVIC_EnableIRQ>:
{
 80169e0:	b480      	push	{r7}
 80169e2:	b083      	sub	sp, #12
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	4603      	mov	r3, r0
 80169e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80169ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	db0d      	blt.n	8016a0e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80169f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169f6:	b2db      	uxtb	r3, r3
 80169f8:	f003 021f 	and.w	r2, r3, #31
 80169fc:	4907      	ldr	r1, [pc, #28]	; (8016a1c <__NVIC_EnableIRQ+0x3c>)
 80169fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a02:	095b      	lsrs	r3, r3, #5
 8016a04:	2001      	movs	r0, #1
 8016a06:	fa00 f202 	lsl.w	r2, r0, r2
 8016a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016a0e:	bf00      	nop
 8016a10:	370c      	adds	r7, #12
 8016a12:	46bd      	mov	sp, r7
 8016a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a18:	4770      	bx	lr
 8016a1a:	bf00      	nop
 8016a1c:	e000e100 	.word	0xe000e100

08016a20 <__NVIC_DisableIRQ>:
{
 8016a20:	b480      	push	{r7}
 8016a22:	b083      	sub	sp, #12
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	4603      	mov	r3, r0
 8016a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	db12      	blt.n	8016a58 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a36:	b2db      	uxtb	r3, r3
 8016a38:	f003 021f 	and.w	r2, r3, #31
 8016a3c:	4909      	ldr	r1, [pc, #36]	; (8016a64 <__NVIC_DisableIRQ+0x44>)
 8016a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a42:	095b      	lsrs	r3, r3, #5
 8016a44:	2001      	movs	r0, #1
 8016a46:	fa00 f202 	lsl.w	r2, r0, r2
 8016a4a:	3320      	adds	r3, #32
 8016a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016a54:	f3bf 8f6f 	isb	sy
}
 8016a58:	bf00      	nop
 8016a5a:	370c      	adds	r7, #12
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr
 8016a64:	e000e100 	.word	0xe000e100

08016a68 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2200      	movs	r2, #0
 8016a74:	601a      	str	r2, [r3, #0]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	370c      	adds	r7, #12
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr

08016a84 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8016a84:	b480      	push	{r7}
 8016a86:	b083      	sub	sp, #12
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
        return color;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
    }
 8016a90:	4618      	mov	r0, r3
 8016a92:	370c      	adds	r7, #12
 8016a94:	46bd      	mov	sp, r7
 8016a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9a:	4770      	bx	lr

08016a9c <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8016a9c:	b480      	push	{r7}
 8016a9e:	b083      	sub	sp, #12
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	b29b      	uxth	r3, r3
    }
 8016aaa:	4618      	mov	r0, r3
 8016aac:	370c      	adds	r7, #12
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab4:	4770      	bx	lr
	...

08016ab8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
    {
 8016ac0:	4a04      	ldr	r2, [pc, #16]	; (8016ad4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	601a      	str	r2, [r3, #0]
    }
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	4618      	mov	r0, r3
 8016aca:	370c      	adds	r7, #12
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr
 8016ad4:	0802726c 	.word	0x0802726c

08016ad8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
    }
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f7ff ffe9 	bl	8016ab8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016ae6:	2104      	movs	r1, #4
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f00e fbf9 	bl	80252e0 <_ZdlPvj>
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	4618      	mov	r0, r3
 8016af2:	3708      	adds	r7, #8
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}

08016af8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	3344      	adds	r3, #68	; 0x44
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	6878      	ldr	r0, [r7, #4]
 8016b0a:	4798      	blx	r3
    }
 8016b0c:	bf00      	nop
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8016b14:	b480      	push	{r7}
 8016b16:	b083      	sub	sp, #12
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8016b1c:	2300      	movs	r3, #0
    }
 8016b1e:	4618      	mov	r0, r3
 8016b20:	370c      	adds	r7, #12
 8016b22:	46bd      	mov	sp, r7
 8016b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b28:	4770      	bx	lr
	...

08016b2c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8016b2c:	b480      	push	{r7}
 8016b2e:	b083      	sub	sp, #12
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
    {
 8016b34:	4a04      	ldr	r2, [pc, #16]	; (8016b48 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	601a      	str	r2, [r3, #0]
    }
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	370c      	adds	r7, #12
 8016b40:	46bd      	mov	sp, r7
 8016b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b46:	4770      	bx	lr
 8016b48:	08027df0 	.word	0x08027df0

08016b4c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
    }
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f7ff ffe9 	bl	8016b2c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016b5a:	210c      	movs	r1, #12
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f00e fbbf 	bl	80252e0 <_ZdlPvj>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	4618      	mov	r0, r3
 8016b66:	3708      	adds	r7, #8
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016b6c:	b480      	push	{r7}
 8016b6e:	b083      	sub	sp, #12
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016b76:	4a09      	ldr	r2, [pc, #36]	; (8016b9c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	601a      	str	r2, [r3, #0]
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	683a      	ldr	r2, [r7, #0]
 8016b80:	605a      	str	r2, [r3, #4]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2200      	movs	r2, #0
 8016b86:	721a      	strb	r2, [r3, #8]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	725a      	strb	r2, [r3, #9]
    {
    }
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	4618      	mov	r0, r3
 8016b92:	370c      	adds	r7, #12
 8016b94:	46bd      	mov	sp, r7
 8016b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9a:	4770      	bx	lr
 8016b9c:	08027df0 	.word	0x08027df0

08016ba0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	685a      	ldr	r2, [r3, #4]
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	685b      	ldr	r3, [r3, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	3314      	adds	r3, #20
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4610      	mov	r0, r2
 8016bb8:	4798      	blx	r3
    }
 8016bba:	bf00      	nop
 8016bbc:	3708      	adds	r7, #8
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b082      	sub	sp, #8
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	3328      	adds	r3, #40	; 0x28
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4610      	mov	r0, r2
 8016bd6:	4798      	blx	r3
    }
 8016bd8:	bf00      	nop
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016be0:	b480      	push	{r7}
 8016be2:	b085      	sub	sp, #20
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	607a      	str	r2, [r7, #4]
 8016bec:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8016bf8:	68ba      	ldr	r2, [r7, #8]
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	430a      	orrs	r2, r1
 8016c00:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c08:	f023 0107 	bic.w	r1, r3, #7
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	430a      	orrs	r2, r1
 8016c14:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016c1c:	4b06      	ldr	r3, [pc, #24]	; (8016c38 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016c1e:	4013      	ands	r3, r2
 8016c20:	6839      	ldr	r1, [r7, #0]
 8016c22:	68fa      	ldr	r2, [r7, #12]
 8016c24:	6812      	ldr	r2, [r2, #0]
 8016c26:	430b      	orrs	r3, r1
 8016c28:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3714      	adds	r7, #20
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr
 8016c38:	ffffc000 	.word	0xffffc000

08016c3c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b082      	sub	sp, #8
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016c44:	f7fc ff56 	bl	8013af4 <_ZN8touchgfx3HAL11getInstanceEv>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7ff ffa8 	bl	8016ba0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016c50:	bf00      	nop
 8016c52:	3708      	adds	r7, #8
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
    assert(0);
 8016c60:	4b02      	ldr	r3, [pc, #8]	; (8016c6c <DMA2D_XferErrorCallback+0x14>)
 8016c62:	4a03      	ldr	r2, [pc, #12]	; (8016c70 <DMA2D_XferErrorCallback+0x18>)
 8016c64:	213e      	movs	r1, #62	; 0x3e
 8016c66:	4803      	ldr	r0, [pc, #12]	; (8016c74 <DMA2D_XferErrorCallback+0x1c>)
 8016c68:	f00e fb66 	bl	8025338 <__assert_func>
 8016c6c:	08026970 	.word	0x08026970
 8016c70:	08027288 	.word	0x08027288
 8016c74:	08026974 	.word	0x08026974

08016c78 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b082      	sub	sp, #8
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	3318      	adds	r3, #24
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7ff feef 	bl	8016a68 <_ZN8touchgfx9colortypeC1Ev>
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3708      	adds	r7, #8
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8016c94:	b5b0      	push	{r4, r5, r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016c9c:	687a      	ldr	r2, [r7, #4]
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	330c      	adds	r3, #12
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	4610      	mov	r0, r2
 8016ca6:	f7ff ff61 	bl	8016b6c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016caa:	4a0e      	ldr	r2, [pc, #56]	; (8016ce4 <_ZN10STM32F7DMAC1Ev+0x50>)
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	601a      	str	r2, [r3, #0]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f103 000c 	add.w	r0, r3, #12
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	3320      	adds	r3, #32
 8016cba:	2260      	movs	r2, #96	; 0x60
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	f002 fd87 	bl	80197d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	3320      	adds	r3, #32
 8016cc6:	245f      	movs	r4, #95	; 0x5f
 8016cc8:	461d      	mov	r5, r3
 8016cca:	2c00      	cmp	r4, #0
 8016ccc:	db05      	blt.n	8016cda <_ZN10STM32F7DMAC1Ev+0x46>
 8016cce:	4628      	mov	r0, r5
 8016cd0:	f7ff ffd2 	bl	8016c78 <_ZN8touchgfx6BlitOpC1Ev>
 8016cd4:	3520      	adds	r5, #32
 8016cd6:	3c01      	subs	r4, #1
 8016cd8:	e7f7      	b.n	8016cca <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8016ce4:	0802721c 	.word	0x0802721c

08016ce8 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
 8016cf0:	4a0b      	ldr	r2, [pc, #44]	; (8016d20 <_ZN10STM32F7DMAD1Ev+0x38>)
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8016cf6:	480b      	ldr	r0, [pc, #44]	; (8016d24 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016cf8:	f7ed f8a2 	bl	8003e40 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016cfc:	205a      	movs	r0, #90	; 0x5a
 8016cfe:	f7ff fe8f 	bl	8016a20 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	330c      	adds	r3, #12
 8016d06:	4618      	mov	r0, r3
 8016d08:	f000 faa0 	bl	801724c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7ff ff0c 	bl	8016b2c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	4618      	mov	r0, r3
 8016d18:	3708      	adds	r7, #8
 8016d1a:	46bd      	mov	sp, r7
 8016d1c:	bd80      	pop	{r7, pc}
 8016d1e:	bf00      	nop
 8016d20:	0802721c 	.word	0x0802721c
 8016d24:	2000a1e4 	.word	0x2000a1e4

08016d28 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b082      	sub	sp, #8
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
}
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f7ff ffd9 	bl	8016ce8 <_ZN10STM32F7DMAD1Ev>
 8016d36:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8016d3a:	6878      	ldr	r0, [r7, #4]
 8016d3c:	f00e fad0 	bl	80252e0 <_ZdlPvj>
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	4618      	mov	r0, r3
 8016d44:	3708      	adds	r7, #8
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}
	...

08016d4c <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b082      	sub	sp, #8
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016d54:	4b09      	ldr	r3, [pc, #36]	; (8016d7c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016d56:	4a0a      	ldr	r2, [pc, #40]	; (8016d80 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8016d58:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8016d5a:	4808      	ldr	r0, [pc, #32]	; (8016d7c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016d5c:	f7ed f826 	bl	8003dac <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016d60:	4b06      	ldr	r3, [pc, #24]	; (8016d7c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016d62:	4a08      	ldr	r2, [pc, #32]	; (8016d84 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016d64:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8016d66:	4b05      	ldr	r3, [pc, #20]	; (8016d7c <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016d68:	4a07      	ldr	r2, [pc, #28]	; (8016d88 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8016d6a:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016d6c:	205a      	movs	r0, #90	; 0x5a
 8016d6e:	f7ff fe37 	bl	80169e0 <__NVIC_EnableIRQ>
}
 8016d72:	bf00      	nop
 8016d74:	3708      	adds	r7, #8
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	2000a1e4 	.word	0x2000a1e4
 8016d80:	4002b000 	.word	0x4002b000
 8016d84:	08016c3d 	.word	0x08016c3d
 8016d88:	08016c59 	.word	0x08016c59

08016d8c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016d8c:	b480      	push	{r7}
 8016d8e:	b083      	sub	sp, #12
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8016d94:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	370c      	adds	r7, #12
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016da4:	b590      	push	{r4, r7, lr}
 8016da6:	b08d      	sub	sp, #52	; 0x34
 8016da8:	af02      	add	r7, sp, #8
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8016dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016db2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016db4:	2300      	movs	r3, #0
 8016db6:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016dbc:	2b20      	cmp	r3, #32
 8016dbe:	d007      	beq.n	8016dd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8016dc0:	683b      	ldr	r3, [r7, #0]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	2b40      	cmp	r3, #64	; 0x40
 8016dc6:	d003      	beq.n	8016dd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016dc8:	683b      	ldr	r3, [r7, #0]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2b04      	cmp	r3, #4
 8016dce:	d101      	bne.n	8016dd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	e000      	b.n	8016dd6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016dd4:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016dd6:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016dd8:	683b      	ldr	r3, [r7, #0]
 8016dda:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016ddc:	2b80      	cmp	r3, #128	; 0x80
 8016dde:	d004      	beq.n	8016dea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016de8:	d101      	bne.n	8016dee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016dea:	2301      	movs	r3, #1
 8016dec:	e000      	b.n	8016df0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8016dee:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016df0:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8016df2:	f7fc fe8b 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8016df6:	4602      	mov	r2, r0
 8016df8:	6813      	ldr	r3, [r2, #0]
 8016dfa:	3320      	adds	r3, #32
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	4610      	mov	r0, r2
 8016e00:	4798      	blx	r3
 8016e02:	4603      	mov	r3, r0
 8016e04:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	2b40      	cmp	r3, #64	; 0x40
 8016e0c:	d01d      	beq.n	8016e4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016e0e:	2b40      	cmp	r3, #64	; 0x40
 8016e10:	d804      	bhi.n	8016e1c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8016e12:	2b04      	cmp	r3, #4
 8016e14:	d00e      	beq.n	8016e34 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8016e16:	2b20      	cmp	r3, #32
 8016e18:	d017      	beq.n	8016e4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016e1a:	e019      	b.n	8016e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016e1c:	2b80      	cmp	r3, #128	; 0x80
 8016e1e:	d003      	beq.n	8016e28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e24:	d003      	beq.n	8016e2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8016e26:	e013      	b.n	8016e50 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016e28:	230a      	movs	r3, #10
 8016e2a:	623b      	str	r3, [r7, #32]
        break;
 8016e2c:	e01a      	b.n	8016e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016e2e:	2309      	movs	r3, #9
 8016e30:	623b      	str	r3, [r7, #32]
        break;
 8016e32:	e017      	b.n	8016e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8016e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016e38:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016e3a:	7f7b      	ldrb	r3, [r7, #29]
 8016e3c:	2b10      	cmp	r3, #16
 8016e3e:	d101      	bne.n	8016e44 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8016e40:	2302      	movs	r3, #2
 8016e42:	e000      	b.n	8016e46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8016e44:	2301      	movs	r3, #1
 8016e46:	623b      	str	r3, [r7, #32]
        break;
 8016e48:	e00c      	b.n	8016e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	623b      	str	r3, [r7, #32]
        break;
 8016e4e:	e009      	b.n	8016e64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016e50:	2300      	movs	r3, #0
 8016e52:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016e54:	7f7b      	ldrb	r3, [r7, #29]
 8016e56:	2b10      	cmp	r3, #16
 8016e58:	d101      	bne.n	8016e5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016e5a:	2302      	movs	r3, #2
 8016e5c:	e000      	b.n	8016e60 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8016e5e:	2301      	movs	r3, #1
 8016e60:	623b      	str	r3, [r7, #32]
        break;
 8016e62:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8016e64:	4a76      	ldr	r2, [pc, #472]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e68:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016e6a:	7f7b      	ldrb	r3, [r7, #29]
 8016e6c:	2b10      	cmp	r3, #16
 8016e6e:	d101      	bne.n	8016e74 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8016e70:	2302      	movs	r3, #2
 8016e72:	e000      	b.n	8016e76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8016e74:	2301      	movs	r3, #1
 8016e76:	4a72      	ldr	r2, [pc, #456]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e78:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	8adb      	ldrh	r3, [r3, #22]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	8a1b      	ldrh	r3, [r3, #16]
 8016e84:	1ad3      	subs	r3, r2, r3
 8016e86:	461a      	mov	r2, r3
 8016e88:	4b6d      	ldr	r3, [pc, #436]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016e8a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016e8c:	7f7b      	ldrb	r3, [r7, #29]
 8016e8e:	2b10      	cmp	r3, #16
 8016e90:	d101      	bne.n	8016e96 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8016e92:	2202      	movs	r2, #2
 8016e94:	e000      	b.n	8016e98 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8016e96:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	8adb      	ldrh	r3, [r3, #22]
 8016e9c:	4619      	mov	r1, r3
 8016e9e:	683b      	ldr	r3, [r7, #0]
 8016ea0:	8a1b      	ldrh	r3, [r3, #16]
 8016ea2:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ea6:	4866      	ldr	r0, [pc, #408]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ea8:	f7ff fe9a 	bl	8016be0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016eac:	4a64      	ldr	r2, [pc, #400]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016eae:	6a3b      	ldr	r3, [r7, #32]
 8016eb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	8a9b      	ldrh	r3, [r3, #20]
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	8a1b      	ldrh	r3, [r3, #16]
 8016ebc:	1ad3      	subs	r3, r2, r3
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	4b5f      	ldr	r3, [pc, #380]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ec2:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8016ec4:	7ffb      	ldrb	r3, [r7, #31]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d103      	bne.n	8016ed2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8016eca:	7fbb      	ldrb	r3, [r7, #30]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	f000 8082 	beq.w	8016fd6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	7f1b      	ldrb	r3, [r3, #28]
 8016ed6:	2bff      	cmp	r3, #255	; 0xff
 8016ed8:	d008      	beq.n	8016eec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8016eda:	4b59      	ldr	r3, [pc, #356]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016edc:	2202      	movs	r2, #2
 8016ede:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	7f1b      	ldrb	r3, [r3, #28]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	4b56      	ldr	r3, [pc, #344]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8016eea:	e002      	b.n	8016ef2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016eec:	4b54      	ldr	r3, [pc, #336]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016eee:	2200      	movs	r2, #0
 8016ef0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8016ef2:	7fbb      	ldrb	r3, [r7, #30]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d059      	beq.n	8016fac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8016ef8:	7f7b      	ldrb	r3, [r7, #29]
 8016efa:	2b10      	cmp	r3, #16
 8016efc:	d14a      	bne.n	8016f94 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	3318      	adds	r3, #24
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7ff fdca 	bl	8016a9c <_ZNK8touchgfx9colortypecvtEv>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	12db      	asrs	r3, r3, #11
 8016f0c:	f003 021f 	and.w	r2, r3, #31
 8016f10:	4613      	mov	r3, r2
 8016f12:	021b      	lsls	r3, r3, #8
 8016f14:	1a9b      	subs	r3, r3, r2
 8016f16:	4a4b      	ldr	r2, [pc, #300]	; (8017044 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016f18:	fb82 1203 	smull	r1, r2, r2, r3
 8016f1c:	441a      	add	r2, r3
 8016f1e:	1112      	asrs	r2, r2, #4
 8016f20:	17db      	asrs	r3, r3, #31
 8016f22:	1ad3      	subs	r3, r2, r3
 8016f24:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	3318      	adds	r3, #24
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7ff fdb6 	bl	8016a9c <_ZNK8touchgfx9colortypecvtEv>
 8016f30:	4603      	mov	r3, r0
 8016f32:	115b      	asrs	r3, r3, #5
 8016f34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016f38:	4613      	mov	r3, r2
 8016f3a:	021b      	lsls	r3, r3, #8
 8016f3c:	1a9b      	subs	r3, r3, r2
 8016f3e:	4a42      	ldr	r2, [pc, #264]	; (8017048 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016f40:	fb82 1203 	smull	r1, r2, r2, r3
 8016f44:	441a      	add	r2, r3
 8016f46:	1152      	asrs	r2, r2, #5
 8016f48:	17db      	asrs	r3, r3, #31
 8016f4a:	1ad3      	subs	r3, r2, r3
 8016f4c:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	3318      	adds	r3, #24
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7ff fda2 	bl	8016a9c <_ZNK8touchgfx9colortypecvtEv>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	f003 021f 	and.w	r2, r3, #31
 8016f5e:	4613      	mov	r3, r2
 8016f60:	021b      	lsls	r3, r3, #8
 8016f62:	1a9b      	subs	r3, r3, r2
 8016f64:	4a37      	ldr	r2, [pc, #220]	; (8017044 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016f66:	fb82 1203 	smull	r1, r2, r2, r3
 8016f6a:	441a      	add	r2, r3
 8016f6c:	1112      	asrs	r2, r2, #4
 8016f6e:	17db      	asrs	r3, r3, #31
 8016f70:	1ad3      	subs	r3, r2, r3
 8016f72:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	7f1b      	ldrb	r3, [r3, #28]
 8016f78:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	061a      	lsls	r2, r3, #24
 8016f7e:	69bb      	ldr	r3, [r7, #24]
 8016f80:	041b      	lsls	r3, r3, #16
 8016f82:	431a      	orrs	r2, r3
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	021b      	lsls	r3, r3, #8
 8016f88:	431a      	orrs	r2, r3
 8016f8a:	693b      	ldr	r3, [r7, #16]
 8016f8c:	4313      	orrs	r3, r2
 8016f8e:	4a2c      	ldr	r2, [pc, #176]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016f90:	6353      	str	r3, [r2, #52]	; 0x34
 8016f92:	e00b      	b.n	8016fac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	3318      	adds	r3, #24
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7ff fd73 	bl	8016a84 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	7f1b      	ldrb	r3, [r3, #28]
 8016fa4:	061b      	lsls	r3, r3, #24
 8016fa6:	4313      	orrs	r3, r2
 8016fa8:	4a25      	ldr	r2, [pc, #148]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016faa:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	8adb      	ldrh	r3, [r3, #22]
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	8a1b      	ldrh	r3, [r3, #16]
 8016fb6:	1ad3      	subs	r3, r2, r3
 8016fb8:	461a      	mov	r2, r3
 8016fba:	4b21      	ldr	r3, [pc, #132]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016fbc:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016fbe:	7f7b      	ldrb	r3, [r7, #29]
 8016fc0:	2b10      	cmp	r3, #16
 8016fc2:	d101      	bne.n	8016fc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8016fc4:	2302      	movs	r3, #2
 8016fc6:	e000      	b.n	8016fca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8016fc8:	2301      	movs	r3, #1
 8016fca:	4a1d      	ldr	r2, [pc, #116]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016fcc:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016fce:	2100      	movs	r1, #0
 8016fd0:	481b      	ldr	r0, [pc, #108]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016fd2:	f7ed f9b5 	bl	8004340 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016fd6:	2101      	movs	r1, #1
 8016fd8:	4819      	ldr	r0, [pc, #100]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016fda:	f7ed f9b1 	bl	8004340 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8016fde:	7ffb      	ldrb	r3, [r7, #31]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d102      	bne.n	8016fea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8016fe4:	7fbb      	ldrb	r3, [r7, #30]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d015      	beq.n	8017016 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016fee:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016ff0:	683b      	ldr	r3, [r7, #0]
 8016ff2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016ff4:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016ffa:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017000:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017006:	9301      	str	r3, [sp, #4]
 8017008:	9200      	str	r2, [sp, #0]
 801700a:	4623      	mov	r3, r4
 801700c:	4602      	mov	r2, r0
 801700e:	480c      	ldr	r0, [pc, #48]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017010:	f7ec ffb9 	bl	8003f86 <HAL_DMA2D_BlendingStart_IT>
 8017014:	e00f      	b.n	8017036 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801701a:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8017020:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8017026:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017028:	683b      	ldr	r3, [r7, #0]
 801702a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 801702c:	9300      	str	r3, [sp, #0]
 801702e:	4603      	mov	r3, r0
 8017030:	4803      	ldr	r0, [pc, #12]	; (8017040 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017032:	f7ec ff75 	bl	8003f20 <HAL_DMA2D_Start_IT>
    }
}
 8017036:	bf00      	nop
 8017038:	372c      	adds	r7, #44	; 0x2c
 801703a:	46bd      	mov	sp, r7
 801703c:	bd90      	pop	{r4, r7, pc}
 801703e:	bf00      	nop
 8017040:	2000a1e4 	.word	0x2000a1e4
 8017044:	84210843 	.word	0x84210843
 8017048:	82082083 	.word	0x82082083

0801704c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 801704c:	b590      	push	{r4, r7, lr}
 801704e:	b08d      	sub	sp, #52	; 0x34
 8017050:	af02      	add	r7, sp, #8
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8017056:	f7fc fd59 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 801705a:	4602      	mov	r2, r0
 801705c:	6813      	ldr	r3, [r2, #0]
 801705e:	3320      	adds	r3, #32
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	4610      	mov	r0, r2
 8017064:	4798      	blx	r3
 8017066:	4603      	mov	r3, r0
 8017068:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801706a:	7ffb      	ldrb	r3, [r7, #31]
 801706c:	2b10      	cmp	r3, #16
 801706e:	d101      	bne.n	8017074 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8017070:	2302      	movs	r3, #2
 8017072:	e000      	b.n	8017076 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8017074:	2301      	movs	r3, #1
 8017076:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8017078:	2300      	movs	r3, #0
 801707a:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 801707c:	7ffb      	ldrb	r3, [r7, #31]
 801707e:	2b10      	cmp	r3, #16
 8017080:	d149      	bne.n	8017116 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	3318      	adds	r3, #24
 8017086:	4618      	mov	r0, r3
 8017088:	f7ff fd08 	bl	8016a9c <_ZNK8touchgfx9colortypecvtEv>
 801708c:	4603      	mov	r3, r0
 801708e:	12db      	asrs	r3, r3, #11
 8017090:	f003 021f 	and.w	r2, r3, #31
 8017094:	4613      	mov	r3, r2
 8017096:	021b      	lsls	r3, r3, #8
 8017098:	1a9b      	subs	r3, r3, r2
 801709a:	4a69      	ldr	r2, [pc, #420]	; (8017240 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801709c:	fb82 1203 	smull	r1, r2, r2, r3
 80170a0:	441a      	add	r2, r3
 80170a2:	1112      	asrs	r2, r2, #4
 80170a4:	17db      	asrs	r3, r3, #31
 80170a6:	1ad3      	subs	r3, r2, r3
 80170a8:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	3318      	adds	r3, #24
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7ff fcf4 	bl	8016a9c <_ZNK8touchgfx9colortypecvtEv>
 80170b4:	4603      	mov	r3, r0
 80170b6:	115b      	asrs	r3, r3, #5
 80170b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80170bc:	4613      	mov	r3, r2
 80170be:	021b      	lsls	r3, r3, #8
 80170c0:	1a9b      	subs	r3, r3, r2
 80170c2:	4a60      	ldr	r2, [pc, #384]	; (8017244 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80170c4:	fb82 1203 	smull	r1, r2, r2, r3
 80170c8:	441a      	add	r2, r3
 80170ca:	1152      	asrs	r2, r2, #5
 80170cc:	17db      	asrs	r3, r3, #31
 80170ce:	1ad3      	subs	r3, r2, r3
 80170d0:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	3318      	adds	r3, #24
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7ff fce0 	bl	8016a9c <_ZNK8touchgfx9colortypecvtEv>
 80170dc:	4603      	mov	r3, r0
 80170de:	f003 021f 	and.w	r2, r3, #31
 80170e2:	4613      	mov	r3, r2
 80170e4:	021b      	lsls	r3, r3, #8
 80170e6:	1a9b      	subs	r3, r3, r2
 80170e8:	4a55      	ldr	r2, [pc, #340]	; (8017240 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80170ea:	fb82 1203 	smull	r1, r2, r2, r3
 80170ee:	441a      	add	r2, r3
 80170f0:	1112      	asrs	r2, r2, #4
 80170f2:	17db      	asrs	r3, r3, #31
 80170f4:	1ad3      	subs	r3, r2, r3
 80170f6:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	7f1b      	ldrb	r3, [r3, #28]
 80170fc:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	061a      	lsls	r2, r3, #24
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	041b      	lsls	r3, r3, #16
 8017106:	431a      	orrs	r2, r3
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	021b      	lsls	r3, r3, #8
 801710c:	4313      	orrs	r3, r2
 801710e:	68fa      	ldr	r2, [r7, #12]
 8017110:	4313      	orrs	r3, r2
 8017112:	623b      	str	r3, [r7, #32]
 8017114:	e00b      	b.n	801712e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	7f1b      	ldrb	r3, [r3, #28]
 801711a:	061b      	lsls	r3, r3, #24
 801711c:	461c      	mov	r4, r3
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	3318      	adds	r3, #24
 8017122:	4618      	mov	r0, r3
 8017124:	f7ff fcae 	bl	8016a84 <_ZNK8touchgfx9colortype10getColor32Ev>
 8017128:	4603      	mov	r3, r0
 801712a:	4323      	orrs	r3, r4
 801712c:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	2b08      	cmp	r3, #8
 8017134:	d103      	bne.n	801713e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8017136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801713a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801713c:	e003      	b.n	8017146 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801713e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8017142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017144:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8017146:	4a40      	ldr	r2, [pc, #256]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801714a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 801714c:	7ffb      	ldrb	r3, [r7, #31]
 801714e:	2b10      	cmp	r3, #16
 8017150:	d101      	bne.n	8017156 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8017152:	2302      	movs	r3, #2
 8017154:	e000      	b.n	8017158 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8017156:	2301      	movs	r3, #1
 8017158:	4a3b      	ldr	r2, [pc, #236]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801715a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	8adb      	ldrh	r3, [r3, #22]
 8017160:	461a      	mov	r2, r3
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	8a1b      	ldrh	r3, [r3, #16]
 8017166:	1ad3      	subs	r3, r2, r3
 8017168:	461a      	mov	r2, r3
 801716a:	4b37      	ldr	r3, [pc, #220]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801716c:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801716e:	7ffb      	ldrb	r3, [r7, #31]
 8017170:	2b10      	cmp	r3, #16
 8017172:	d101      	bne.n	8017178 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8017174:	2202      	movs	r2, #2
 8017176:	e000      	b.n	801717a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8017178:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801717a:	683b      	ldr	r3, [r7, #0]
 801717c:	8adb      	ldrh	r3, [r3, #22]
 801717e:	4619      	mov	r1, r3
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	8a1b      	ldrh	r3, [r3, #16]
 8017184:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8017186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017188:	482f      	ldr	r0, [pc, #188]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801718a:	f7ff fd29 	bl	8016be0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8017194:	d11e      	bne.n	80171d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8017196:	4b2c      	ldr	r3, [pc, #176]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017198:	2201      	movs	r2, #1
 801719a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 801719c:	4a2a      	ldr	r2, [pc, #168]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801719e:	6a3b      	ldr	r3, [r7, #32]
 80171a0:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80171a2:	4b29      	ldr	r3, [pc, #164]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171a4:	2209      	movs	r2, #9
 80171a6:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	8adb      	ldrh	r3, [r3, #22]
 80171ac:	461a      	mov	r2, r3
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	8a1b      	ldrh	r3, [r3, #16]
 80171b2:	1ad3      	subs	r3, r2, r3
 80171b4:	461a      	mov	r2, r3
 80171b6:	4b24      	ldr	r3, [pc, #144]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171b8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80171ba:	7ffb      	ldrb	r3, [r7, #31]
 80171bc:	2b10      	cmp	r3, #16
 80171be:	d101      	bne.n	80171c4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80171c0:	2302      	movs	r3, #2
 80171c2:	e000      	b.n	80171c6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80171c4:	2301      	movs	r3, #1
 80171c6:	4a20      	ldr	r2, [pc, #128]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171c8:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80171ca:	2100      	movs	r1, #0
 80171cc:	481e      	ldr	r0, [pc, #120]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171ce:	f7ed f8b7 	bl	8004340 <HAL_DMA2D_ConfigLayer>
 80171d2:	e005      	b.n	80171e0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80171d4:	4a1c      	ldr	r2, [pc, #112]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171d6:	69bb      	ldr	r3, [r7, #24]
 80171d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80171da:	4b1b      	ldr	r3, [pc, #108]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171dc:	2200      	movs	r2, #0
 80171de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80171e0:	2101      	movs	r1, #1
 80171e2:	4819      	ldr	r0, [pc, #100]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80171e4:	f7ed f8ac 	bl	8004340 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80171e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80171ee:	d115      	bne.n	801721c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80171f4:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80171fa:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017200:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8017206:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801720c:	9301      	str	r3, [sp, #4]
 801720e:	9200      	str	r2, [sp, #0]
 8017210:	4623      	mov	r3, r4
 8017212:	4602      	mov	r2, r0
 8017214:	480c      	ldr	r0, [pc, #48]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017216:	f7ec feb6 	bl	8003f86 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801721a:	e00d      	b.n	8017238 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	68db      	ldr	r3, [r3, #12]
 8017220:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8017226:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801722c:	9300      	str	r3, [sp, #0]
 801722e:	460b      	mov	r3, r1
 8017230:	6a39      	ldr	r1, [r7, #32]
 8017232:	4805      	ldr	r0, [pc, #20]	; (8017248 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8017234:	f7ec fe74 	bl	8003f20 <HAL_DMA2D_Start_IT>
}
 8017238:	bf00      	nop
 801723a:	372c      	adds	r7, #44	; 0x2c
 801723c:	46bd      	mov	sp, r7
 801723e:	bd90      	pop	{r4, r7, pc}
 8017240:	84210843 	.word	0x84210843
 8017244:	82082083 	.word	0x82082083
 8017248:	2000a1e4 	.word	0x2000a1e4

0801724c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
 8017254:	4a05      	ldr	r2, [pc, #20]	; (801726c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	601a      	str	r2, [r3, #0]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	4618      	mov	r0, r3
 801725e:	f7ff fc2b 	bl	8016ab8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	4618      	mov	r0, r3
 8017266:	3708      	adds	r7, #8
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}
 801726c:	08027e40 	.word	0x08027e40

08017270 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017270:	b580      	push	{r7, lr}
 8017272:	b082      	sub	sp, #8
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f7ff ffe7 	bl	801724c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801727e:	2114      	movs	r1, #20
 8017280:	6878      	ldr	r0, [r7, #4]
 8017282:	f00e f82d 	bl	80252e0 <_ZdlPvj>
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	4618      	mov	r0, r3
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8017290:	b480      	push	{r7}
 8017292:	b083      	sub	sp, #12
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
        texts = t;
 8017298:	4a04      	ldr	r2, [pc, #16]	; (80172ac <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6013      	str	r3, [r2, #0]
    }
 801729e:	bf00      	nop
 80172a0:	370c      	adds	r7, #12
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr
 80172aa:	bf00      	nop
 80172ac:	20009968 	.word	0x20009968

080172b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80172b0:	b480      	push	{r7}
 80172b2:	b085      	sub	sp, #20
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	60f8      	str	r0, [r7, #12]
 80172b8:	60b9      	str	r1, [r7, #8]
 80172ba:	607a      	str	r2, [r7, #4]
 80172bc:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80172be:	4a0b      	ldr	r2, [pc, #44]	; (80172ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	601a      	str	r2, [r3, #0]
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	68ba      	ldr	r2, [r7, #8]
 80172c8:	605a      	str	r2, [r3, #4]
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	609a      	str	r2, [r3, #8]
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	683a      	ldr	r2, [r7, #0]
 80172d4:	60da      	str	r2, [r3, #12]
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	69ba      	ldr	r2, [r7, #24]
 80172da:	611a      	str	r2, [r3, #16]
    {
    }
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	4618      	mov	r0, r3
 80172e0:	3714      	adds	r7, #20
 80172e2:	46bd      	mov	sp, r7
 80172e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e8:	4770      	bx	lr
 80172ea:	bf00      	nop
 80172ec:	08027388 	.word	0x08027388

080172f0 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80172f0:	b480      	push	{r7}
 80172f2:	b083      	sub	sp, #12
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
    {
 80172f8:	4a04      	ldr	r2, [pc, #16]	; (801730c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	601a      	str	r2, [r3, #0]
    }
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	4618      	mov	r0, r3
 8017302:	370c      	adds	r7, #12
 8017304:	46bd      	mov	sp, r7
 8017306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730a:	4770      	bx	lr
 801730c:	08027388 	.word	0x08027388

08017310 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
    }
 8017318:	6878      	ldr	r0, [r7, #4]
 801731a:	f7ff ffe9 	bl	80172f0 <_ZN8touchgfx7MVPHeapD1Ev>
 801731e:	2114      	movs	r1, #20
 8017320:	6878      	ldr	r0, [r7, #4]
 8017322:	f00d ffdd 	bl	80252e0 <_ZdlPvj>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	3708      	adds	r7, #8
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}

08017330 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8017330:	b480      	push	{r7}
 8017332:	b083      	sub	sp, #12
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
    {
 8017338:	4a04      	ldr	r2, [pc, #16]	; (801734c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	601a      	str	r2, [r3, #0]
    }
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	4618      	mov	r0, r3
 8017342:	370c      	adds	r7, #12
 8017344:	46bd      	mov	sp, r7
 8017346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734a:	4770      	bx	lr
 801734c:	08028254 	.word	0x08028254

08017350 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
    }
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f7ff ffe9 	bl	8017330 <_ZN8touchgfx3LCDD1Ev>
 801735e:	2108      	movs	r1, #8
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f00d ffbd 	bl	80252e0 <_ZdlPvj>
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	4618      	mov	r0, r3
 801736a:	3708      	adds	r7, #8
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8017370:	b480      	push	{r7}
 8017372:	b083      	sub	sp, #12
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2200      	movs	r2, #0
 801737c:	801a      	strh	r2, [r3, #0]
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2200      	movs	r2, #0
 8017382:	805a      	strh	r2, [r3, #2]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2200      	movs	r2, #0
 8017388:	809a      	strh	r2, [r3, #4]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2200      	movs	r2, #0
 801738e:	80da      	strh	r2, [r3, #6]
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2200      	movs	r2, #0
 8017394:	811a      	strh	r2, [r3, #8]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	2200      	movs	r2, #0
 801739a:	815a      	strh	r2, [r3, #10]
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	819a      	strh	r2, [r3, #12]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2200      	movs	r2, #0
 80173a6:	739a      	strb	r2, [r3, #14]
        {
        }
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	4618      	mov	r0, r3
 80173ac:	370c      	adds	r7, #12
 80173ae:	46bd      	mov	sp, r7
 80173b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b4:	4770      	bx	lr

080173b6 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80173b6:	b580      	push	{r7, lr}
 80173b8:	b082      	sub	sp, #8
 80173ba:	af00      	add	r7, sp, #0
 80173bc:	6078      	str	r0, [r7, #4]
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7ff ffd5 	bl	8017370 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2200      	movs	r2, #0
 80173ca:	611a      	str	r2, [r3, #16]
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2200      	movs	r2, #0
 80173d0:	829a      	strh	r2, [r3, #20]
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	4618      	mov	r0, r3
 80173d6:	3708      	adds	r7, #8
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80173dc:	b580      	push	{r7, lr}
 80173de:	b084      	sub	sp, #16
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
 80173e8:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80173ea:	4a44      	ldr	r2, [pc, #272]	; (80174fc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	601a      	str	r2, [r3, #0]
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	68ba      	ldr	r2, [r7, #8]
 80173f4:	605a      	str	r2, [r3, #4]
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	687a      	ldr	r2, [r7, #4]
 80173fa:	609a      	str	r2, [r3, #8]
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	683a      	ldr	r2, [r7, #0]
 8017400:	60da      	str	r2, [r3, #12]
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	2200      	movs	r2, #0
 8017406:	611a      	str	r2, [r3, #16]
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	2200      	movs	r2, #0
 801740c:	615a      	str	r2, [r3, #20]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2200      	movs	r2, #0
 8017412:	619a      	str	r2, [r3, #24]
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	331c      	adds	r3, #28
 8017418:	4618      	mov	r0, r3
 801741a:	f7ff ffcc 	bl	80173b6 <_ZN8touchgfx8GesturesC1Ev>
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	2200      	movs	r2, #0
 8017422:	639a      	str	r2, [r3, #56]	; 0x38
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	2200      	movs	r2, #0
 8017428:	63da      	str	r2, [r3, #60]	; 0x3c
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	2200      	movs	r2, #0
 801742e:	641a      	str	r2, [r3, #64]	; 0x40
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	2200      	movs	r2, #0
 8017434:	645a      	str	r2, [r3, #68]	; 0x44
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	2200      	movs	r2, #0
 801743a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	2201      	movs	r2, #1
 8017442:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	2201      	movs	r2, #1
 801744a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2200      	movs	r2, #0
 8017452:	64da      	str	r2, [r3, #76]	; 0x4c
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	3350      	adds	r3, #80	; 0x50
 8017458:	4618      	mov	r0, r3
 801745a:	f7fc ff84 	bl	8014366 <_ZN8touchgfx4RectC1Ev>
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	2201      	movs	r2, #1
 8017462:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	2200      	movs	r2, #0
 801746a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	2200      	movs	r2, #0
 8017472:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	2201      	movs	r2, #1
 801747a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2200      	movs	r2, #0
 8017482:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	2200      	movs	r2, #0
 801748a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	2200      	movs	r2, #0
 8017492:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	2200      	movs	r2, #0
 801749a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	2200      	movs	r2, #0
 80174a2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	2200      	movs	r2, #0
 80174aa:	671a      	str	r2, [r3, #112]	; 0x70
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2200      	movs	r2, #0
 80174b0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80174b4:	4a12      	ldr	r2, [pc, #72]	; (8017500 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80174ba:	4a12      	ldr	r2, [pc, #72]	; (8017504 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80174bc:	8b3b      	ldrh	r3, [r7, #24]
 80174be:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80174c0:	4a11      	ldr	r2, [pc, #68]	; (8017508 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80174c2:	8bbb      	ldrh	r3, [r7, #28]
 80174c4:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80174c6:	4b11      	ldr	r3, [pc, #68]	; (801750c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80174c8:	2200      	movs	r2, #0
 80174ca:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80174cc:	4b0d      	ldr	r3, [pc, #52]	; (8017504 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80174ce:	881a      	ldrh	r2, [r3, #0]
 80174d0:	4b0f      	ldr	r3, [pc, #60]	; (8017510 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80174d2:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80174d4:	4b0c      	ldr	r3, [pc, #48]	; (8017508 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80174d6:	881a      	ldrh	r2, [r3, #0]
 80174d8:	4b0e      	ldr	r3, [pc, #56]	; (8017514 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80174da:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80174dc:	8b3a      	ldrh	r2, [r7, #24]
 80174de:	8bbb      	ldrh	r3, [r7, #28]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d301      	bcc.n	80174e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80174e4:	2200      	movs	r2, #0
 80174e6:	e000      	b.n	80174ea <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80174e8:	2201      	movs	r2, #1
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	4618      	mov	r0, r3
 80174f4:	3710      	adds	r7, #16
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	bf00      	nop
 80174fc:	080279ac 	.word	0x080279ac
 8017500:	200098ec 	.word	0x200098ec
 8017504:	200098de 	.word	0x200098de
 8017508:	200098e0 	.word	0x200098e0
 801750c:	200098e2 	.word	0x200098e2
 8017510:	200098e4 	.word	0x200098e4
 8017514:	200098e6 	.word	0x200098e6

08017518 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8017518:	b580      	push	{r7, lr}
 801751a:	b082      	sub	sp, #8
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8017522:	683b      	ldr	r3, [r7, #0]
 8017524:	4618      	mov	r0, r3
 8017526:	f7fc fd15 	bl	8013f54 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801752a:	bf00      	nop
 801752c:	3708      	adds	r7, #8
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
	...

08017534 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8017534:	b580      	push	{r7, lr}
 8017536:	b086      	sub	sp, #24
 8017538:	af02      	add	r7, sp, #8
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	607a      	str	r2, [r7, #4]
 8017540:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8017542:	68f8      	ldr	r0, [r7, #12]
 8017544:	69bb      	ldr	r3, [r7, #24]
 8017546:	9300      	str	r3, [sp, #0]
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	68b9      	ldr	r1, [r7, #8]
 801754e:	f7ff feaf 	bl	80172b0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8017552:	4a04      	ldr	r2, [pc, #16]	; (8017564 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	601a      	str	r2, [r3, #0]
    {

    }
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	4618      	mov	r0, r3
 801755c:	3710      	adds	r7, #16
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	08027374 	.word	0x08027374

08017568 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8017568:	b580      	push	{r7, lr}
 801756a:	af00      	add	r7, sp, #0
 801756c:	4801      	ldr	r0, [pc, #4]	; (8017574 <__tcf_0+0xc>)
 801756e:	f000 f9d5 	bl	801791c <_ZN12FrontendHeapD1Ev>
 8017572:	bd80      	pop	{r7, pc}
 8017574:	200087c8 	.word	0x200087c8

08017578 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8017578:	b580      	push	{r7, lr}
 801757a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 801757c:	4b08      	ldr	r3, [pc, #32]	; (80175a0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	f003 0301 	and.w	r3, r3, #1
 8017584:	2b00      	cmp	r3, #0
 8017586:	d108      	bne.n	801759a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8017588:	4806      	ldr	r0, [pc, #24]	; (80175a4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 801758a:	f000 f831 	bl	80175f0 <_ZN12FrontendHeapC1Ev>
 801758e:	4b04      	ldr	r3, [pc, #16]	; (80175a0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8017590:	2201      	movs	r2, #1
 8017592:	601a      	str	r2, [r3, #0]
 8017594:	4804      	ldr	r0, [pc, #16]	; (80175a8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8017596:	f00d feed 	bl	8025374 <atexit>
        return instance;
 801759a:	4b02      	ldr	r3, [pc, #8]	; (80175a4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 801759c:	4618      	mov	r0, r3
 801759e:	bd80      	pop	{r7, pc}
 80175a0:	20008bdc 	.word	0x20008bdc
 80175a4:	200087c8 	.word	0x200087c8
 80175a8:	08017569 	.word	0x08017569

080175ac <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	4a05      	ldr	r2, [pc, #20]	; (80175cc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	601a      	str	r2, [r3, #0]
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	4618      	mov	r0, r3
 80175be:	f7ff fe97 	bl	80172f0 <_ZN8touchgfx7MVPHeapD1Ev>
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	4618      	mov	r0, r3
 80175c6:	3708      	adds	r7, #8
 80175c8:	46bd      	mov	sp, r7
 80175ca:	bd80      	pop	{r7, pc}
 80175cc:	08027374 	.word	0x08027374

080175d0 <_ZN16FrontendHeapBaseD0Ev>:
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b082      	sub	sp, #8
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f7ff ffe7 	bl	80175ac <_ZN16FrontendHeapBaseD1Ev>
 80175de:	2114      	movs	r1, #20
 80175e0:	6878      	ldr	r0, [r7, #4]
 80175e2:	f00d fe7d 	bl	80252e0 <_ZdlPvj>
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	4618      	mov	r0, r3
 80175ea:	3708      	adds	r7, #8
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80175f0:	b590      	push	{r4, r7, lr}
 80175f2:	b085      	sub	sp, #20
 80175f4:	af02      	add	r7, sp, #8
 80175f6:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80175f8:	6878      	ldr	r0, [r7, #4]
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	f103 0114 	add.w	r1, r3, #20
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	f503 742b 	add.w	r4, r3, #684	; 0x2ac
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8017612:	9300      	str	r3, [sp, #0]
 8017614:	4623      	mov	r3, r4
 8017616:	f7ff ff8d 	bl	8017534 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801761a:	4a18      	ldr	r2, [pc, #96]	; (801767c <_ZN12FrontendHeapC1Ev+0x8c>)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	601a      	str	r2, [r3, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	3314      	adds	r3, #20
 8017624:	4618      	mov	r0, r3
 8017626:	f000 f8db 	bl	80177e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	332c      	adds	r3, #44	; 0x2c
 801762e:	4618      	mov	r0, r3
 8017630:	f000 f90a 	bl	8017848 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801763a:	4618      	mov	r0, r3
 801763c:	f000 f93a 	bl	80178b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801764c:	687a      	ldr	r2, [r7, #4]
 801764e:	4619      	mov	r1, r3
 8017650:	f7fe fc6e 	bl	8015f30 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801765a:	4618      	mov	r0, r3
 801765c:	f7fe fde8 	bl	8016230 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8017660:	687a      	ldr	r2, [r7, #4]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8017668:	4619      	mov	r1, r3
 801766a:	4610      	mov	r0, r2
 801766c:	f7ff ff54 	bl	8017518 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	4618      	mov	r0, r3
 8017674:	370c      	adds	r7, #12
 8017676:	46bd      	mov	sp, r7
 8017678:	bd90      	pop	{r4, r7, pc}
 801767a:	bf00      	nop
 801767c:	080272c4 	.word	0x080272c4

08017680 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8017680:	b580      	push	{r7, lr}
 8017682:	b082      	sub	sp, #8
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
    {
 8017688:	4a05      	ldr	r2, [pc, #20]	; (80176a0 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	601a      	str	r2, [r3, #0]
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	4618      	mov	r0, r3
 8017692:	f7ff fe4d 	bl	8017330 <_ZN8touchgfx3LCDD1Ev>
    }
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	4618      	mov	r0, r3
 801769a:	3708      	adds	r7, #8
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}
 80176a0:	080295a0 	.word	0x080295a0

080176a4 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b082      	sub	sp, #8
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
    }
 80176ac:	6878      	ldr	r0, [r7, #4]
 80176ae:	f7ff ffe7 	bl	8017680 <_ZN8touchgfx8LCD24bppD1Ev>
 80176b2:	2158      	movs	r1, #88	; 0x58
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f00d fe13 	bl	80252e0 <_ZdlPvj>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b086      	sub	sp, #24
 80176c8:	af02      	add	r7, sp, #8
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	607a      	str	r2, [r7, #4]
 80176d0:	603b      	str	r3, [r7, #0]
 80176d2:	68f8      	ldr	r0, [r7, #12]
 80176d4:	8bbb      	ldrh	r3, [r7, #28]
 80176d6:	9301      	str	r3, [sp, #4]
 80176d8:	8b3b      	ldrh	r3, [r7, #24]
 80176da:	9300      	str	r3, [sp, #0]
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	687a      	ldr	r2, [r7, #4]
 80176e0:	68b9      	ldr	r1, [r7, #8]
 80176e2:	f7ff fe7b 	bl	80173dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80176e6:	4a04      	ldr	r2, [pc, #16]	; (80176f8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	601a      	str	r2, [r3, #0]
    }
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	4618      	mov	r0, r3
 80176f0:	3710      	adds	r7, #16
 80176f2:	46bd      	mov	sp, r7
 80176f4:	bd80      	pop	{r7, pc}
 80176f6:	bf00      	nop
 80176f8:	08027398 	.word	0x08027398

080176fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80176fc:	b580      	push	{r7, lr}
 80176fe:	b086      	sub	sp, #24
 8017700:	af02      	add	r7, sp, #8
 8017702:	60f8      	str	r0, [r7, #12]
 8017704:	60b9      	str	r1, [r7, #8]
 8017706:	607a      	str	r2, [r7, #4]
 8017708:	603b      	str	r3, [r7, #0]
 801770a:	68f8      	ldr	r0, [r7, #12]
 801770c:	8bbb      	ldrh	r3, [r7, #28]
 801770e:	9301      	str	r3, [sp, #4]
 8017710:	8b3b      	ldrh	r3, [r7, #24]
 8017712:	9300      	str	r3, [sp, #0]
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	687a      	ldr	r2, [r7, #4]
 8017718:	68b9      	ldr	r1, [r7, #8]
 801771a:	f7ff ffd3 	bl	80176c4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801771e:	4a04      	ldr	r2, [pc, #16]	; (8017730 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	601a      	str	r2, [r3, #0]
    }
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	4618      	mov	r0, r3
 8017728:	3710      	adds	r7, #16
 801772a:	46bd      	mov	sp, r7
 801772c:	bd80      	pop	{r7, pc}
 801772e:	bf00      	nop
 8017730:	080270c4 	.word	0x080270c4

08017734 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8017734:	b480      	push	{r7}
 8017736:	b083      	sub	sp, #12
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
 801773c:	4a04      	ldr	r2, [pc, #16]	; (8017750 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	601a      	str	r2, [r3, #0]
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	4618      	mov	r0, r3
 8017746:	370c      	adds	r7, #12
 8017748:	46bd      	mov	sp, r7
 801774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774e:	4770      	bx	lr
 8017750:	080270ac 	.word	0x080270ac

08017754 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	4618      	mov	r0, r3
 8017760:	f7ff ffe8 	bl	8017734 <_ZN8touchgfx15TouchControllerC1Ev>
 8017764:	4a03      	ldr	r2, [pc, #12]	; (8017774 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	601a      	str	r2, [r3, #0]
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	4618      	mov	r0, r3
 801776e:	3708      	adds	r7, #8
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}
 8017774:	08027094 	.word	0x08027094

08017778 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8017778:	b590      	push	{r4, r7, lr}
 801777a:	b085      	sub	sp, #20
 801777c:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801777e:	f7fe fad1 	bl	8015d24 <_ZN14BitmapDatabase11getInstanceEv>
 8017782:	4604      	mov	r4, r0
 8017784:	f7fe fad8 	bl	8015d38 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8017788:	4603      	mov	r3, r0
 801778a:	4619      	mov	r1, r3
 801778c:	2300      	movs	r3, #0
 801778e:	9300      	str	r3, [sp, #0]
 8017790:	2300      	movs	r3, #0
 8017792:	2200      	movs	r2, #0
 8017794:	4620      	mov	r0, r4
 8017796:	f005 fc51 	bl	801d03c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 801779a:	4809      	ldr	r0, [pc, #36]	; (80177c0 <touchgfx_init+0x48>)
 801779c:	f7ff fd78 	bl	8017290 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80177a0:	2000      	movs	r0, #0
 80177a2:	f7fe faed 	bl	8015d80 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80177a6:	4807      	ldr	r0, [pc, #28]	; (80177c4 <touchgfx_init+0x4c>)
 80177a8:	f005 fb96 	bl	801ced8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80177ac:	f7ff fee4 	bl	8017578 <_ZN12FrontendHeap11getInstanceEv>
 80177b0:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80177b2:	4805      	ldr	r0, [pc, #20]	; (80177c8 <touchgfx_init+0x50>)
 80177b4:	f7fe ffd4 	bl	8016760 <_ZN11TouchGFXHAL10initializeEv>
}
 80177b8:	bf00      	nop
 80177ba:	370c      	adds	r7, #12
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd90      	pop	{r4, r7, pc}
 80177c0:	2000985c 	.word	0x2000985c
 80177c4:	2000006c 	.word	0x2000006c
 80177c8:	20009860 	.word	0x20009860

080177cc <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80177d0:	4802      	ldr	r0, [pc, #8]	; (80177dc <touchgfx_taskEntry+0x10>)
 80177d2:	f001 f98a 	bl	8018aea <_ZN8touchgfx3HAL9taskEntryEv>
}
 80177d6:	bf00      	nop
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	20009860 	.word	0x20009860

080177e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b082      	sub	sp, #8
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	4618      	mov	r0, r3
 80177ec:	f000 ff6a 	bl	80186c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80177f0:	4a03      	ldr	r2, [pc, #12]	; (8017800 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	601a      	str	r2, [r3, #0]
    {
    }
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	4618      	mov	r0, r3
 80177fa:	3708      	adds	r7, #8
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}
 8017800:	08027340 	.word	0x08027340

08017804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
    {
    }
 801780c:	4a05      	ldr	r2, [pc, #20]	; (8017824 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	601a      	str	r2, [r3, #0]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	4618      	mov	r0, r3
 8017816:	f000 ff53 	bl	80186c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	4618      	mov	r0, r3
 801781e:	3708      	adds	r7, #8
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	08027340 	.word	0x08027340

08017828 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
    }
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7ff ffe7 	bl	8017804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017836:	2118      	movs	r1, #24
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f00d fd51 	bl	80252e0 <_ZdlPvj>
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	4618      	mov	r0, r3
 8017842:	3708      	adds	r7, #8
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017848:	b580      	push	{r7, lr}
 801784a:	b082      	sub	sp, #8
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	4618      	mov	r0, r3
 8017854:	f000 ff36 	bl	80186c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017858:	4a03      	ldr	r2, [pc, #12]	; (8017868 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	601a      	str	r2, [r3, #0]
    }
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	4618      	mov	r0, r3
 8017862:	3708      	adds	r7, #8
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}
 8017868:	0802730c 	.word	0x0802730c

0801786c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
    }
 8017874:	4a05      	ldr	r2, [pc, #20]	; (801788c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	601a      	str	r2, [r3, #0]
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	4618      	mov	r0, r3
 801787e:	f000 ff1f 	bl	80186c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	4618      	mov	r0, r3
 8017886:	3708      	adds	r7, #8
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}
 801788c:	0802730c 	.word	0x0802730c

08017890 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017890:	b580      	push	{r7, lr}
 8017892:	b082      	sub	sp, #8
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
    }
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f7ff ffe7 	bl	801786c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801789e:	f44f 7120 	mov.w	r1, #640	; 0x280
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f00d fd1c 	bl	80252e0 <_ZdlPvj>
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	4618      	mov	r0, r3
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
	...

080178b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b082      	sub	sp, #8
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	4618      	mov	r0, r3
 80178c0:	f000 ff00 	bl	80186c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80178c4:	4a03      	ldr	r2, [pc, #12]	; (80178d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	601a      	str	r2, [r3, #0]
    }
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	4618      	mov	r0, r3
 80178ce:	3708      	adds	r7, #8
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	080272d8 	.word	0x080272d8

080178d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
    }
 80178e0:	4a05      	ldr	r2, [pc, #20]	; (80178f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	601a      	str	r2, [r3, #0]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	4618      	mov	r0, r3
 80178ea:	f000 fee9 	bl	80186c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	4618      	mov	r0, r3
 80178f2:	3708      	adds	r7, #8
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	080272d8 	.word	0x080272d8

080178fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
    }
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f7ff ffe7 	bl	80178d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801790a:	2114      	movs	r1, #20
 801790c:	6878      	ldr	r0, [r7, #4]
 801790e:	f00d fce7 	bl	80252e0 <_ZdlPvj>
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	4618      	mov	r0, r3
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	4a10      	ldr	r2, [pc, #64]	; (8017968 <_ZN12FrontendHeapD1Ev+0x4c>)
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	601a      	str	r2, [r3, #0]
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8017930:	4618      	mov	r0, r3
 8017932:	f7fe fac7 	bl	8015ec4 <_ZN19FrontendApplicationD1Ev>
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801793c:	4618      	mov	r0, r3
 801793e:	f7ff ffcb 	bl	80178d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	332c      	adds	r3, #44	; 0x2c
 8017946:	4618      	mov	r0, r3
 8017948:	f7ff ff90 	bl	801786c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	3314      	adds	r3, #20
 8017950:	4618      	mov	r0, r3
 8017952:	f7ff ff57 	bl	8017804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	4618      	mov	r0, r3
 801795a:	f7ff fe27 	bl	80175ac <_ZN16FrontendHeapBaseD1Ev>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	4618      	mov	r0, r3
 8017962:	3708      	adds	r7, #8
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	080272c4 	.word	0x080272c4

0801796c <_ZN12FrontendHeapD0Ev>:
 801796c:	b580      	push	{r7, lr}
 801796e:	b082      	sub	sp, #8
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ff ffd1 	bl	801791c <_ZN12FrontendHeapD1Ev>
 801797a:	f240 4114 	movw	r1, #1044	; 0x414
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	f00d fcae 	bl	80252e0 <_ZdlPvj>
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	4618      	mov	r0, r3
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}
	...

08017990 <_Z41__static_initialization_and_destruction_0ii>:
 8017990:	b580      	push	{r7, lr}
 8017992:	b084      	sub	sp, #16
 8017994:	af02      	add	r7, sp, #8
 8017996:	6078      	str	r0, [r7, #4]
 8017998:	6039      	str	r1, [r7, #0]
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2b01      	cmp	r3, #1
 801799e:	d119      	bne.n	80179d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179a6:	4293      	cmp	r3, r2
 80179a8:	d114      	bne.n	80179d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80179aa:	4818      	ldr	r0, [pc, #96]	; (8017a0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80179ac:	f7ff fed2 	bl	8017754 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 80179b0:	4817      	ldr	r0, [pc, #92]	; (8017a10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80179b2:	f7ff f96f 	bl	8016c94 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 80179b6:	4817      	ldr	r0, [pc, #92]	; (8017a14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80179b8:	f007 fd66 	bl	801f488 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80179bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80179c0:	9301      	str	r3, [sp, #4]
 80179c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80179c6:	9300      	str	r3, [sp, #0]
 80179c8:	4b10      	ldr	r3, [pc, #64]	; (8017a0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80179ca:	4a12      	ldr	r2, [pc, #72]	; (8017a14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80179cc:	4910      	ldr	r1, [pc, #64]	; (8017a10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80179ce:	4812      	ldr	r0, [pc, #72]	; (8017a18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80179d0:	f7ff fe94 	bl	80176fc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d113      	bne.n	8017a02 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80179da:	683b      	ldr	r3, [r7, #0]
 80179dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d10e      	bne.n	8017a02 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80179e4:	480c      	ldr	r0, [pc, #48]	; (8017a18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80179e6:	f7fe ff21 	bl	801682c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80179ea:	480c      	ldr	r0, [pc, #48]	; (8017a1c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80179ec:	f7fb fd46 	bl	801347c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80179f0:	4808      	ldr	r0, [pc, #32]	; (8017a14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80179f2:	f7ff fe45 	bl	8017680 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 80179f6:	4806      	ldr	r0, [pc, #24]	; (8017a10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80179f8:	f7ff f976 	bl	8016ce8 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 80179fc:	4803      	ldr	r0, [pc, #12]	; (8017a0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80179fe:	f7fe fc8b 	bl	8016318 <_ZN20STM32TouchControllerD1Ev>
}
 8017a02:	bf00      	nop
 8017a04:	3708      	adds	r7, #8
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	20008be0 	.word	0x20008be0
 8017a10:	20008be4 	.word	0x20008be4
 8017a14:	20009804 	.word	0x20009804
 8017a18:	20009860 	.word	0x20009860
 8017a1c:	2000006c 	.word	0x2000006c

08017a20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8017a20:	b480      	push	{r7}
 8017a22:	b083      	sub	sp, #12
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017a28:	2301      	movs	r3, #1
    }
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	370c      	adds	r7, #12
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a34:	4770      	bx	lr

08017a36 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8017a36:	b480      	push	{r7}
 8017a38:	b083      	sub	sp, #12
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8017a3e:	230c      	movs	r3, #12
    }
 8017a40:	4618      	mov	r0, r3
 8017a42:	370c      	adds	r7, #12
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr

08017a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8017a4c:	b480      	push	{r7}
 8017a4e:	b083      	sub	sp, #12
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
 8017a54:	460b      	mov	r3, r1
 8017a56:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017a58:	887a      	ldrh	r2, [r7, #2]
 8017a5a:	4613      	mov	r3, r2
 8017a5c:	005b      	lsls	r3, r3, #1
 8017a5e:	4413      	add	r3, r2
 8017a60:	009b      	lsls	r3, r3, #2
 8017a62:	3308      	adds	r3, #8
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	4413      	add	r3, r2
    }
 8017a68:	4618      	mov	r0, r3
 8017a6a:	370c      	adds	r7, #12
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a72:	4770      	bx	lr

08017a74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8017a74:	b480      	push	{r7}
 8017a76:	b083      	sub	sp, #12
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
 8017a7c:	460b      	mov	r3, r1
 8017a7e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017a80:	887a      	ldrh	r2, [r7, #2]
 8017a82:	4613      	mov	r3, r2
 8017a84:	005b      	lsls	r3, r3, #1
 8017a86:	4413      	add	r3, r2
 8017a88:	009b      	lsls	r3, r3, #2
 8017a8a:	3308      	adds	r3, #8
 8017a8c:	687a      	ldr	r2, [r7, #4]
 8017a8e:	4413      	add	r3, r2
    }
 8017a90:	4618      	mov	r0, r3
 8017a92:	370c      	adds	r7, #12
 8017a94:	46bd      	mov	sp, r7
 8017a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9a:	4770      	bx	lr

08017a9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017a9c:	b480      	push	{r7}
 8017a9e:	b083      	sub	sp, #12
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017aa4:	2301      	movs	r3, #1
    }
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	370c      	adds	r7, #12
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab0:	4770      	bx	lr

08017ab2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017ab2:	b480      	push	{r7}
 8017ab4:	b083      	sub	sp, #12
 8017ab6:	af00      	add	r7, sp, #0
 8017ab8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017aba:	f44f 731e 	mov.w	r3, #632	; 0x278
    }
 8017abe:	4618      	mov	r0, r3
 8017ac0:	370c      	adds	r7, #12
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017aca:	b480      	push	{r7}
 8017acc:	b083      	sub	sp, #12
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	6078      	str	r0, [r7, #4]
 8017ad2:	460b      	mov	r3, r1
 8017ad4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017ad6:	887b      	ldrh	r3, [r7, #2]
 8017ad8:	f44f 721e 	mov.w	r2, #632	; 0x278
 8017adc:	fb02 f303 	mul.w	r3, r2, r3
 8017ae0:	3308      	adds	r3, #8
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	4413      	add	r3, r2
    }
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	370c      	adds	r7, #12
 8017aea:	46bd      	mov	sp, r7
 8017aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af0:	4770      	bx	lr

08017af2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017af2:	b480      	push	{r7}
 8017af4:	b083      	sub	sp, #12
 8017af6:	af00      	add	r7, sp, #0
 8017af8:	6078      	str	r0, [r7, #4]
 8017afa:	460b      	mov	r3, r1
 8017afc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017afe:	887b      	ldrh	r3, [r7, #2]
 8017b00:	f44f 721e 	mov.w	r2, #632	; 0x278
 8017b04:	fb02 f303 	mul.w	r3, r2, r3
 8017b08:	3308      	adds	r3, #8
 8017b0a:	687a      	ldr	r2, [r7, #4]
 8017b0c:	4413      	add	r3, r2
    }
 8017b0e:	4618      	mov	r0, r3
 8017b10:	370c      	adds	r7, #12
 8017b12:	46bd      	mov	sp, r7
 8017b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b18:	4770      	bx	lr

08017b1a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017b1a:	b480      	push	{r7}
 8017b1c:	b083      	sub	sp, #12
 8017b1e:	af00      	add	r7, sp, #0
 8017b20:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017b22:	2301      	movs	r3, #1
    }
 8017b24:	4618      	mov	r0, r3
 8017b26:	370c      	adds	r7, #12
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr

08017b30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017b30:	b480      	push	{r7}
 8017b32:	b083      	sub	sp, #12
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017b38:	2310      	movs	r3, #16
    }
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	370c      	adds	r7, #12
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b44:	4770      	bx	lr

08017b46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017b46:	b480      	push	{r7}
 8017b48:	b083      	sub	sp, #12
 8017b4a:	af00      	add	r7, sp, #0
 8017b4c:	6078      	str	r0, [r7, #4]
 8017b4e:	460b      	mov	r3, r1
 8017b50:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017b52:	887b      	ldrh	r3, [r7, #2]
 8017b54:	011b      	lsls	r3, r3, #4
 8017b56:	3308      	adds	r3, #8
 8017b58:	687a      	ldr	r2, [r7, #4]
 8017b5a:	4413      	add	r3, r2
    }
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	370c      	adds	r7, #12
 8017b60:	46bd      	mov	sp, r7
 8017b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b66:	4770      	bx	lr

08017b68 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017b68:	b480      	push	{r7}
 8017b6a:	b083      	sub	sp, #12
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	460b      	mov	r3, r1
 8017b72:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017b74:	887b      	ldrh	r3, [r7, #2]
 8017b76:	011b      	lsls	r3, r3, #4
 8017b78:	3308      	adds	r3, #8
 8017b7a:	687a      	ldr	r2, [r7, #4]
 8017b7c:	4413      	add	r3, r2
    }
 8017b7e:	4618      	mov	r0, r3
 8017b80:	370c      	adds	r7, #12
 8017b82:	46bd      	mov	sp, r7
 8017b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b88:	4770      	bx	lr

08017b8a <_GLOBAL__sub_I_touchgfx_init>:
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017b92:	2001      	movs	r0, #1
 8017b94:	f7ff fefc 	bl	8017990 <_Z41__static_initialization_and_destruction_0ii>
 8017b98:	bd80      	pop	{r7, pc}

08017b9a <_GLOBAL__sub_D_touchgfx_init>:
 8017b9a:	b580      	push	{r7, lr}
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	f7ff fef4 	bl	8017990 <_Z41__static_initialization_and_destruction_0ii>
 8017ba8:	bd80      	pop	{r7, pc}

08017baa <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017baa:	b580      	push	{r7, lr}
 8017bac:	b082      	sub	sp, #8
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	3318      	adds	r3, #24
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	4798      	blx	r3
    }
 8017bbe:	bf00      	nop
 8017bc0:	3708      	adds	r7, #8
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}

08017bc6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8017bc6:	b480      	push	{r7}
 8017bc8:	b083      	sub	sp, #12
 8017bca:	af00      	add	r7, sp, #0
 8017bcc:	6078      	str	r0, [r7, #4]
 8017bce:	460b      	mov	r3, r1
 8017bd0:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	78fa      	ldrb	r2, [r7, #3]
 8017bd6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8017bda:	bf00      	nop
 8017bdc:	370c      	adds	r7, #12
 8017bde:	46bd      	mov	sp, r7
 8017be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be4:	4770      	bx	lr

08017be6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017be6:	b480      	push	{r7}
 8017be8:	b083      	sub	sp, #12
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	b2da      	uxtb	r2, r3
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8017bfe:	bf00      	nop
 8017c00:	370c      	adds	r7, #12
 8017c02:	46bd      	mov	sp, r7
 8017c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c08:	4770      	bx	lr
	...

08017c0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b082      	sub	sp, #8
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	460b      	mov	r3, r1
 8017c16:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8017c18:	78fb      	ldrb	r3, [r7, #3]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d002      	beq.n	8017c24 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8017c1e:	78fb      	ldrb	r3, [r7, #3]
 8017c20:	2b02      	cmp	r3, #2
 8017c22:	d105      	bne.n	8017c30 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	78fa      	ldrb	r2, [r7, #3]
 8017c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8017c2c:	2301      	movs	r3, #1
 8017c2e:	e027      	b.n	8017c80 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8017c30:	78fb      	ldrb	r3, [r7, #3]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d123      	bne.n	8017c7e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d014      	beq.n	8017c68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	3380      	adds	r3, #128	; 0x80
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	4798      	blx	r3
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	461a      	mov	r2, r3
 8017c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c52:	429a      	cmp	r2, r3
 8017c54:	d008      	beq.n	8017c68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017c56:	4b0c      	ldr	r3, [pc, #48]	; (8017c88 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	f083 0301 	eor.w	r3, r3, #1
 8017c5e:	b2db      	uxtb	r3, r3
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d001      	beq.n	8017c68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8017c64:	2301      	movs	r3, #1
 8017c66:	e000      	b.n	8017c6a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8017c68:	2300      	movs	r3, #0
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d005      	beq.n	8017c7a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	78fa      	ldrb	r2, [r7, #3]
 8017c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8017c76:	2301      	movs	r3, #1
 8017c78:	e002      	b.n	8017c80 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	e000      	b.n	8017c80 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8017c7e:	2300      	movs	r3, #0
    }
 8017c80:	4618      	mov	r0, r3
 8017c82:	3708      	adds	r7, #8
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}
 8017c88:	200098e8 	.word	0x200098e8

08017c8c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8017c8c:	b480      	push	{r7}
 8017c8e:	b083      	sub	sp, #12
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	683a      	ldr	r2, [r7, #0]
 8017c9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8017c9c:	bf00      	nop
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr

08017ca8 <__NVIC_EnableIRQ>:
{
 8017ca8:	b480      	push	{r7}
 8017caa:	b083      	sub	sp, #12
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	4603      	mov	r3, r0
 8017cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	db0d      	blt.n	8017cd6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cbe:	b2db      	uxtb	r3, r3
 8017cc0:	f003 021f 	and.w	r2, r3, #31
 8017cc4:	4907      	ldr	r1, [pc, #28]	; (8017ce4 <__NVIC_EnableIRQ+0x3c>)
 8017cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cca:	095b      	lsrs	r3, r3, #5
 8017ccc:	2001      	movs	r0, #1
 8017cce:	fa00 f202 	lsl.w	r2, r0, r2
 8017cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017cd6:	bf00      	nop
 8017cd8:	370c      	adds	r7, #12
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce0:	4770      	bx	lr
 8017ce2:	bf00      	nop
 8017ce4:	e000e100 	.word	0xe000e100

08017ce8 <__NVIC_DisableIRQ>:
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b083      	sub	sp, #12
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	4603      	mov	r3, r0
 8017cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	db12      	blt.n	8017d20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	f003 021f 	and.w	r2, r3, #31
 8017d04:	4909      	ldr	r1, [pc, #36]	; (8017d2c <__NVIC_DisableIRQ+0x44>)
 8017d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d0a:	095b      	lsrs	r3, r3, #5
 8017d0c:	2001      	movs	r0, #1
 8017d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8017d12:	3320      	adds	r3, #32
 8017d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017d18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017d1c:	f3bf 8f6f 	isb	sy
}
 8017d20:	bf00      	nop
 8017d22:	370c      	adds	r7, #12
 8017d24:	46bd      	mov	sp, r7
 8017d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2a:	4770      	bx	lr
 8017d2c:	e000e100 	.word	0xe000e100

08017d30 <__NVIC_SetPriority>:
{
 8017d30:	b480      	push	{r7}
 8017d32:	b083      	sub	sp, #12
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	4603      	mov	r3, r0
 8017d38:	6039      	str	r1, [r7, #0]
 8017d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	db0c      	blt.n	8017d5e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017d44:	683b      	ldr	r3, [r7, #0]
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	4a0e      	ldr	r2, [pc, #56]	; (8017d84 <__NVIC_SetPriority+0x54>)
 8017d4a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8017d4e:	4608      	mov	r0, r1
 8017d50:	011b      	lsls	r3, r3, #4
 8017d52:	b2d9      	uxtb	r1, r3
 8017d54:	1813      	adds	r3, r2, r0
 8017d56:	460a      	mov	r2, r1
 8017d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017d5c:	e00c      	b.n	8017d78 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017d5e:	683b      	ldr	r3, [r7, #0]
 8017d60:	b2da      	uxtb	r2, r3
 8017d62:	4909      	ldr	r1, [pc, #36]	; (8017d88 <__NVIC_SetPriority+0x58>)
 8017d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d68:	b2db      	uxtb	r3, r3
 8017d6a:	f003 030f 	and.w	r3, r3, #15
 8017d6e:	3b04      	subs	r3, #4
 8017d70:	0112      	lsls	r2, r2, #4
 8017d72:	b2d2      	uxtb	r2, r2
 8017d74:	440b      	add	r3, r1
 8017d76:	761a      	strb	r2, [r3, #24]
}
 8017d78:	bf00      	nop
 8017d7a:	370c      	adds	r7, #12
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d82:	4770      	bx	lr
 8017d84:	e000e100 	.word	0xe000e100
 8017d88:	e000ed00 	.word	0xe000ed00

08017d8c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017d8c:	b5b0      	push	{r4, r5, r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	4618      	mov	r0, r3
 8017d98:	f001 f96c 	bl	8019074 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8017d9c:	687d      	ldr	r5, [r7, #4]
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	334c      	adds	r3, #76	; 0x4c
 8017da4:	681c      	ldr	r4, [r3, #0]
 8017da6:	f003 f887 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 8017daa:	4603      	mov	r3, r0
 8017dac:	4619      	mov	r1, r3
 8017dae:	4628      	mov	r0, r5
 8017db0:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	490d      	ldr	r1, [pc, #52]	; (8017dec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ff ff68 	bl	8017c8c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2101      	movs	r1, #1
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7ff ff23 	bl	8017c0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	3374      	adds	r3, #116	; 0x74
 8017dce:	681c      	ldr	r4, [r3, #0]
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8017dd8:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2101      	movs	r1, #1
 8017dde:	4618      	mov	r0, r3
 8017de0:	f7ff fef1 	bl	8017bc6 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8017de4:	bf00      	nop
 8017de6:	3708      	adds	r7, #8
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bdb0      	pop	{r4, r5, r7, pc}
 8017dec:	080169c5 	.word	0x080169c5

08017df0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b082      	sub	sp, #8
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017df8:	2109      	movs	r1, #9
 8017dfa:	205a      	movs	r0, #90	; 0x5a
 8017dfc:	f7ff ff98 	bl	8017d30 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017e00:	2109      	movs	r1, #9
 8017e02:	2058      	movs	r0, #88	; 0x58
 8017e04:	f7ff ff94 	bl	8017d30 <__NVIC_SetPriority>
}
 8017e08:	bf00      	nop
 8017e0a:	3708      	adds	r7, #8
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b082      	sub	sp, #8
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017e18:	205a      	movs	r0, #90	; 0x5a
 8017e1a:	f7ff ff45 	bl	8017ca8 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017e1e:	2058      	movs	r0, #88	; 0x58
 8017e20:	f7ff ff42 	bl	8017ca8 <__NVIC_EnableIRQ>
}
 8017e24:	bf00      	nop
 8017e26:	3708      	adds	r7, #8
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017e34:	205a      	movs	r0, #90	; 0x5a
 8017e36:	f7ff ff57 	bl	8017ce8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8017e3a:	2058      	movs	r0, #88	; 0x58
 8017e3c:	f7ff ff54 	bl	8017ce8 <__NVIC_DisableIRQ>
}
 8017e40:	bf00      	nop
 8017e42:	3708      	adds	r7, #8
 8017e44:	46bd      	mov	sp, r7
 8017e46:	bd80      	pop	{r7, pc}

08017e48 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017e48:	b480      	push	{r7}
 8017e4a:	b083      	sub	sp, #12
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017e50:	4b11      	ldr	r3, [pc, #68]	; (8017e98 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e52:	68db      	ldr	r3, [r3, #12]
 8017e54:	b29b      	uxth	r3, r3
 8017e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	3b01      	subs	r3, #1
 8017e5e:	b29a      	uxth	r2, r3
 8017e60:	4b0e      	ldr	r3, [pc, #56]	; (8017e9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017e62:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017e64:	4b0c      	ldr	r3, [pc, #48]	; (8017e98 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e66:	691b      	ldr	r3, [r3, #16]
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	3b01      	subs	r3, #1
 8017e72:	b29a      	uxth	r2, r3
 8017e74:	4b0a      	ldr	r3, [pc, #40]	; (8017ea0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8017e76:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8017e78:	4b08      	ldr	r3, [pc, #32]	; (8017e9c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017e7a:	881a      	ldrh	r2, [r3, #0]
 8017e7c:	4b06      	ldr	r3, [pc, #24]	; (8017e98 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017e80:	4b05      	ldr	r3, [pc, #20]	; (8017e98 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e84:	4a04      	ldr	r2, [pc, #16]	; (8017e98 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017e86:	f043 0301 	orr.w	r3, r3, #1
 8017e8a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8017e8c:	bf00      	nop
 8017e8e:	370c      	adds	r7, #12
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr
 8017e98:	40016800 	.word	0x40016800
 8017e9c:	200098d8 	.word	0x200098d8
 8017ea0:	200098da 	.word	0x200098da

08017ea4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017ea4:	b480      	push	{r7}
 8017ea6:	b083      	sub	sp, #12
 8017ea8:	af00      	add	r7, sp, #0
 8017eaa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8017eac:	4b03      	ldr	r3, [pc, #12]	; (8017ebc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8017eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	370c      	adds	r7, #12
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr
 8017ebc:	40016884 	.word	0x40016884

08017ec0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	b083      	sub	sp, #12
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8017eca:	4a06      	ldr	r2, [pc, #24]	; (8017ee4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8017ecc:	683b      	ldr	r3, [r7, #0]
 8017ece:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017ed0:	4b05      	ldr	r3, [pc, #20]	; (8017ee8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017ed2:	2201      	movs	r2, #1
 8017ed4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017ed6:	bf00      	nop
 8017ed8:	370c      	adds	r7, #12
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop
 8017ee4:	40016884 	.word	0x40016884
 8017ee8:	40016800 	.word	0x40016800

08017eec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6839      	ldr	r1, [r7, #0]
 8017efa:	4618      	mov	r0, r3
 8017efc:	f000 fdca 	bl	8018a94 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017f00:	bf00      	nop
 8017f02:	3708      	adds	r7, #8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b085      	sub	sp, #20
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8017f10:	4b0d      	ldr	r3, [pc, #52]	; (8017f48 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f14:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8017f16:	4b0c      	ldr	r3, [pc, #48]	; (8017f48 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8017f18:	68db      	ldr	r3, [r3, #12]
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	3301      	adds	r3, #1
 8017f24:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8017f26:	89fa      	ldrh	r2, [r7, #14]
 8017f28:	89bb      	ldrh	r3, [r7, #12]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	d201      	bcs.n	8017f32 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8017f2e:	2300      	movs	r3, #0
 8017f30:	e003      	b.n	8017f3a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8017f32:	89fa      	ldrh	r2, [r7, #14]
 8017f34:	89bb      	ldrh	r3, [r7, #12]
 8017f36:	1ad3      	subs	r3, r2, r3
 8017f38:	b29b      	uxth	r3, r3
    }
}
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	3714      	adds	r7, #20
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop
 8017f48:	40016800 	.word	0x40016800

08017f4c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8017f54:	4b1a      	ldr	r3, [pc, #104]	; (8017fc0 <HAL_LTDC_LineEventCallback+0x74>)
 8017f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f58:	4a1a      	ldr	r2, [pc, #104]	; (8017fc4 <HAL_LTDC_LineEventCallback+0x78>)
 8017f5a:	8812      	ldrh	r2, [r2, #0]
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	bf0c      	ite	eq
 8017f60:	2301      	moveq	r3, #1
 8017f62:	2300      	movne	r3, #0
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d017      	beq.n	8017f9a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8017f6a:	4b17      	ldr	r3, [pc, #92]	; (8017fc8 <HAL_LTDC_LineEventCallback+0x7c>)
 8017f6c:	881b      	ldrh	r3, [r3, #0]
 8017f6e:	4619      	mov	r1, r3
 8017f70:	6878      	ldr	r0, [r7, #4]
 8017f72:	f7ef f9c9 	bl	8007308 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8017f76:	f7fb fdbd 	bl	8013af4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f7ff fe32 	bl	8017be6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8017f82:	f7fe fce1 	bl	8016948 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8017f86:	f7fb fdb5 	bl	8013af4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f001 faf9 	bl	8019584 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8017f92:	2000      	movs	r0, #0
 8017f94:	f7fe f9e2 	bl	801635c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8017f98:	e00e      	b.n	8017fb8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8017f9a:	4b0a      	ldr	r3, [pc, #40]	; (8017fc4 <HAL_LTDC_LineEventCallback+0x78>)
 8017f9c:	881b      	ldrh	r3, [r3, #0]
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f7ef f9b1 	bl	8007308 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8017fa6:	2000      	movs	r0, #0
 8017fa8:	f7fe f9e3 	bl	8016372 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8017fac:	f7fb fda2 	bl	8013af4 <_ZN8touchgfx3HAL11getInstanceEv>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7ff fdf9 	bl	8017baa <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8017fb8:	bf00      	nop
 8017fba:	3708      	adds	r7, #8
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}
 8017fc0:	40016800 	.word	0x40016800
 8017fc4:	200098d8 	.word	0x200098d8
 8017fc8:	200098da 	.word	0x200098da

08017fcc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017fd0:	2201      	movs	r2, #1
 8017fd2:	490e      	ldr	r1, [pc, #56]	; (801800c <MX_USB_HOST_Init+0x40>)
 8017fd4:	480e      	ldr	r0, [pc, #56]	; (8018010 <MX_USB_HOST_Init+0x44>)
 8017fd6:	f7f6 fe1f 	bl	800ec18 <USBH_Init>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d001      	beq.n	8017fe4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017fe0:	f7e9 ffa6 	bl	8001f30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017fe4:	490b      	ldr	r1, [pc, #44]	; (8018014 <MX_USB_HOST_Init+0x48>)
 8017fe6:	480a      	ldr	r0, [pc, #40]	; (8018010 <MX_USB_HOST_Init+0x44>)
 8017fe8:	f7f6 feb1 	bl	800ed4e <USBH_RegisterClass>
 8017fec:	4603      	mov	r3, r0
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d001      	beq.n	8017ff6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017ff2:	f7e9 ff9d 	bl	8001f30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017ff6:	4806      	ldr	r0, [pc, #24]	; (8018010 <MX_USB_HOST_Init+0x44>)
 8017ff8:	f7f6 ff36 	bl	800ee68 <USBH_Start>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d001      	beq.n	8018006 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8018002:	f7e9 ff95 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018006:	bf00      	nop
 8018008:	bd80      	pop	{r7, pc}
 801800a:	bf00      	nop
 801800c:	08018019 	.word	0x08018019
 8018010:	2000a7d4 	.word	0x2000a7d4
 8018014:	20000034 	.word	0x20000034

08018018 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018018:	b480      	push	{r7}
 801801a:	b083      	sub	sp, #12
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	460b      	mov	r3, r1
 8018022:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018024:	78fb      	ldrb	r3, [r7, #3]
 8018026:	3b01      	subs	r3, #1
 8018028:	2b04      	cmp	r3, #4
 801802a:	d819      	bhi.n	8018060 <USBH_UserProcess+0x48>
 801802c:	a201      	add	r2, pc, #4	; (adr r2, 8018034 <USBH_UserProcess+0x1c>)
 801802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018032:	bf00      	nop
 8018034:	08018061 	.word	0x08018061
 8018038:	08018051 	.word	0x08018051
 801803c:	08018061 	.word	0x08018061
 8018040:	08018059 	.word	0x08018059
 8018044:	08018049 	.word	0x08018049
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018048:	4b09      	ldr	r3, [pc, #36]	; (8018070 <USBH_UserProcess+0x58>)
 801804a:	2203      	movs	r2, #3
 801804c:	701a      	strb	r2, [r3, #0]
  break;
 801804e:	e008      	b.n	8018062 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018050:	4b07      	ldr	r3, [pc, #28]	; (8018070 <USBH_UserProcess+0x58>)
 8018052:	2202      	movs	r2, #2
 8018054:	701a      	strb	r2, [r3, #0]
  break;
 8018056:	e004      	b.n	8018062 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018058:	4b05      	ldr	r3, [pc, #20]	; (8018070 <USBH_UserProcess+0x58>)
 801805a:	2201      	movs	r2, #1
 801805c:	701a      	strb	r2, [r3, #0]
  break;
 801805e:	e000      	b.n	8018062 <USBH_UserProcess+0x4a>

  default:
  break;
 8018060:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8018062:	bf00      	nop
 8018064:	370c      	adds	r7, #12
 8018066:	46bd      	mov	sp, r7
 8018068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop
 8018070:	200098dc 	.word	0x200098dc

08018074 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018074:	b580      	push	{r7, lr}
 8018076:	b08a      	sub	sp, #40	; 0x28
 8018078:	af00      	add	r7, sp, #0
 801807a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801807c:	f107 0314 	add.w	r3, r7, #20
 8018080:	2200      	movs	r2, #0
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	605a      	str	r2, [r3, #4]
 8018086:	609a      	str	r2, [r3, #8]
 8018088:	60da      	str	r2, [r3, #12]
 801808a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018094:	d13c      	bne.n	8018110 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018096:	4b20      	ldr	r3, [pc, #128]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 8018098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801809a:	4a1f      	ldr	r2, [pc, #124]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 801809c:	f043 0301 	orr.w	r3, r3, #1
 80180a0:	6313      	str	r3, [r2, #48]	; 0x30
 80180a2:	4b1d      	ldr	r3, [pc, #116]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180a6:	f003 0301 	and.w	r3, r3, #1
 80180aa:	613b      	str	r3, [r7, #16]
 80180ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80180ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80180b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80180b4:	2302      	movs	r3, #2
 80180b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80180b8:	2300      	movs	r3, #0
 80180ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80180bc:	2303      	movs	r3, #3
 80180be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80180c0:	230a      	movs	r3, #10
 80180c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80180c4:	f107 0314 	add.w	r3, r7, #20
 80180c8:	4619      	mov	r1, r3
 80180ca:	4814      	ldr	r0, [pc, #80]	; (801811c <HAL_HCD_MspInit+0xa8>)
 80180cc:	f7ec fa66 	bl	800459c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80180d0:	4b11      	ldr	r3, [pc, #68]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180d4:	4a10      	ldr	r2, [pc, #64]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180da:	6353      	str	r3, [r2, #52]	; 0x34
 80180dc:	4b0e      	ldr	r3, [pc, #56]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80180e4:	60fb      	str	r3, [r7, #12]
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	4b0b      	ldr	r3, [pc, #44]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180ec:	4a0a      	ldr	r2, [pc, #40]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80180f2:	6453      	str	r3, [r2, #68]	; 0x44
 80180f4:	4b08      	ldr	r3, [pc, #32]	; (8018118 <HAL_HCD_MspInit+0xa4>)
 80180f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80180fc:	60bb      	str	r3, [r7, #8]
 80180fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018100:	2200      	movs	r2, #0
 8018102:	2105      	movs	r1, #5
 8018104:	2043      	movs	r0, #67	; 0x43
 8018106:	f7eb fc23 	bl	8003950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801810a:	2043      	movs	r0, #67	; 0x43
 801810c:	f7eb fc3c 	bl	8003988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018110:	bf00      	nop
 8018112:	3728      	adds	r7, #40	; 0x28
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}
 8018118:	40023800 	.word	0x40023800
 801811c:	40020000 	.word	0x40020000

08018120 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b082      	sub	sp, #8
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801812e:	4618      	mov	r0, r3
 8018130:	f7f7 f9ed 	bl	800f50e <USBH_LL_IncTimer>
}
 8018134:	bf00      	nop
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}

0801813c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b082      	sub	sp, #8
 8018140:	af00      	add	r7, sp, #0
 8018142:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801814a:	4618      	mov	r0, r3
 801814c:	f7f7 fa32 	bl	800f5b4 <USBH_LL_Connect>
}
 8018150:	bf00      	nop
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018166:	4618      	mov	r0, r3
 8018168:	f7f7 fa58 	bl	800f61c <USBH_LL_Disconnect>
}
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}

08018174 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
 801817c:	460b      	mov	r3, r1
 801817e:	70fb      	strb	r3, [r7, #3]
 8018180:	4613      	mov	r3, r2
 8018182:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801818a:	4618      	mov	r0, r3
 801818c:	f7f7 fa96 	bl	800f6bc <USBH_LL_NotifyURBChange>
#endif
}
 8018190:	bf00      	nop
 8018192:	3708      	adds	r7, #8
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7f7 f9db 	bl	800f562 <USBH_LL_PortEnabled>
} 
 80181ac:	bf00      	nop
 80181ae:	3708      	adds	r7, #8
 80181b0:	46bd      	mov	sp, r7
 80181b2:	bd80      	pop	{r7, pc}

080181b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b082      	sub	sp, #8
 80181b8:	af00      	add	r7, sp, #0
 80181ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7f7 f9db 	bl	800f57e <USBH_LL_PortDisabled>
} 
 80181c8:	bf00      	nop
 80181ca:	3708      	adds	r7, #8
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}

080181d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80181de:	2b01      	cmp	r3, #1
 80181e0:	d12a      	bne.n	8018238 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80181e2:	4a18      	ldr	r2, [pc, #96]	; (8018244 <USBH_LL_Init+0x74>)
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	4a15      	ldr	r2, [pc, #84]	; (8018244 <USBH_LL_Init+0x74>)
 80181ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181f2:	4b14      	ldr	r3, [pc, #80]	; (8018244 <USBH_LL_Init+0x74>)
 80181f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80181f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80181fa:	4b12      	ldr	r3, [pc, #72]	; (8018244 <USBH_LL_Init+0x74>)
 80181fc:	2208      	movs	r2, #8
 80181fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8018200:	4b10      	ldr	r3, [pc, #64]	; (8018244 <USBH_LL_Init+0x74>)
 8018202:	2203      	movs	r2, #3
 8018204:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018206:	4b0f      	ldr	r3, [pc, #60]	; (8018244 <USBH_LL_Init+0x74>)
 8018208:	2200      	movs	r2, #0
 801820a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801820c:	4b0d      	ldr	r3, [pc, #52]	; (8018244 <USBH_LL_Init+0x74>)
 801820e:	2202      	movs	r2, #2
 8018210:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018212:	4b0c      	ldr	r3, [pc, #48]	; (8018244 <USBH_LL_Init+0x74>)
 8018214:	2200      	movs	r2, #0
 8018216:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8018218:	480a      	ldr	r0, [pc, #40]	; (8018244 <USBH_LL_Init+0x74>)
 801821a:	f7ec fca4 	bl	8004b66 <HAL_HCD_Init>
 801821e:	4603      	mov	r3, r0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d001      	beq.n	8018228 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018224:	f7e9 fe84 	bl	8001f30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018228:	4806      	ldr	r0, [pc, #24]	; (8018244 <USBH_LL_Init+0x74>)
 801822a:	f7ed f893 	bl	8005354 <HAL_HCD_GetCurrentFrame>
 801822e:	4603      	mov	r3, r0
 8018230:	4619      	mov	r1, r3
 8018232:	6878      	ldr	r0, [r7, #4]
 8018234:	f7f7 f95c 	bl	800f4f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018238:	2300      	movs	r3, #0
}
 801823a:	4618      	mov	r0, r3
 801823c:	3708      	adds	r7, #8
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	2000abac 	.word	0x2000abac

08018248 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018250:	2300      	movs	r3, #0
 8018252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018254:	2300      	movs	r3, #0
 8018256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801825e:	4618      	mov	r0, r3
 8018260:	f7ed f800 	bl	8005264 <HAL_HCD_Start>
 8018264:	4603      	mov	r3, r0
 8018266:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018268:	7bfb      	ldrb	r3, [r7, #15]
 801826a:	4618      	mov	r0, r3
 801826c:	f000 f95c 	bl	8018528 <USBH_Get_USB_Status>
 8018270:	4603      	mov	r3, r0
 8018272:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018274:	7bbb      	ldrb	r3, [r7, #14]
}
 8018276:	4618      	mov	r0, r3
 8018278:	3710      	adds	r7, #16
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}

0801827e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801827e:	b580      	push	{r7, lr}
 8018280:	b084      	sub	sp, #16
 8018282:	af00      	add	r7, sp, #0
 8018284:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018286:	2300      	movs	r3, #0
 8018288:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801828a:	2300      	movs	r3, #0
 801828c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018294:	4618      	mov	r0, r3
 8018296:	f7ed f808 	bl	80052aa <HAL_HCD_Stop>
 801829a:	4603      	mov	r3, r0
 801829c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801829e:	7bfb      	ldrb	r3, [r7, #15]
 80182a0:	4618      	mov	r0, r3
 80182a2:	f000 f941 	bl	8018528 <USBH_Get_USB_Status>
 80182a6:	4603      	mov	r3, r0
 80182a8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80182aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3710      	adds	r7, #16
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}

080182b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b084      	sub	sp, #16
 80182b8:	af00      	add	r7, sp, #0
 80182ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80182bc:	2301      	movs	r3, #1
 80182be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7ed f852 	bl	8005370 <HAL_HCD_GetCurrentSpeed>
 80182cc:	4603      	mov	r3, r0
 80182ce:	2b01      	cmp	r3, #1
 80182d0:	d007      	beq.n	80182e2 <USBH_LL_GetSpeed+0x2e>
 80182d2:	2b01      	cmp	r3, #1
 80182d4:	d302      	bcc.n	80182dc <USBH_LL_GetSpeed+0x28>
 80182d6:	2b02      	cmp	r3, #2
 80182d8:	d006      	beq.n	80182e8 <USBH_LL_GetSpeed+0x34>
 80182da:	e008      	b.n	80182ee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80182dc:	2300      	movs	r3, #0
 80182de:	73fb      	strb	r3, [r7, #15]
    break;
 80182e0:	e008      	b.n	80182f4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80182e2:	2301      	movs	r3, #1
 80182e4:	73fb      	strb	r3, [r7, #15]
    break;
 80182e6:	e005      	b.n	80182f4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80182e8:	2302      	movs	r3, #2
 80182ea:	73fb      	strb	r3, [r7, #15]
    break;
 80182ec:	e002      	b.n	80182f4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80182ee:	2301      	movs	r3, #1
 80182f0:	73fb      	strb	r3, [r7, #15]
    break;
 80182f2:	bf00      	nop
  }
  return  speed;
 80182f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3710      	adds	r7, #16
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}

080182fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80182fe:	b580      	push	{r7, lr}
 8018300:	b084      	sub	sp, #16
 8018302:	af00      	add	r7, sp, #0
 8018304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018306:	2300      	movs	r3, #0
 8018308:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801830a:	2300      	movs	r3, #0
 801830c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018314:	4618      	mov	r0, r3
 8018316:	f7ec ffe5 	bl	80052e4 <HAL_HCD_ResetPort>
 801831a:	4603      	mov	r3, r0
 801831c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801831e:	7bfb      	ldrb	r3, [r7, #15]
 8018320:	4618      	mov	r0, r3
 8018322:	f000 f901 	bl	8018528 <USBH_Get_USB_Status>
 8018326:	4603      	mov	r3, r0
 8018328:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801832a:	7bbb      	ldrb	r3, [r7, #14]
}
 801832c:	4618      	mov	r0, r3
 801832e:	3710      	adds	r7, #16
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}

08018334 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b082      	sub	sp, #8
 8018338:	af00      	add	r7, sp, #0
 801833a:	6078      	str	r0, [r7, #4]
 801833c:	460b      	mov	r3, r1
 801833e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018346:	78fa      	ldrb	r2, [r7, #3]
 8018348:	4611      	mov	r1, r2
 801834a:	4618      	mov	r0, r3
 801834c:	f7ec ffed 	bl	800532a <HAL_HCD_HC_GetXferCount>
 8018350:	4603      	mov	r3, r0
}
 8018352:	4618      	mov	r0, r3
 8018354:	3708      	adds	r7, #8
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}

0801835a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801835a:	b590      	push	{r4, r7, lr}
 801835c:	b089      	sub	sp, #36	; 0x24
 801835e:	af04      	add	r7, sp, #16
 8018360:	6078      	str	r0, [r7, #4]
 8018362:	4608      	mov	r0, r1
 8018364:	4611      	mov	r1, r2
 8018366:	461a      	mov	r2, r3
 8018368:	4603      	mov	r3, r0
 801836a:	70fb      	strb	r3, [r7, #3]
 801836c:	460b      	mov	r3, r1
 801836e:	70bb      	strb	r3, [r7, #2]
 8018370:	4613      	mov	r3, r2
 8018372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018374:	2300      	movs	r3, #0
 8018376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018378:	2300      	movs	r3, #0
 801837a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8018382:	787c      	ldrb	r4, [r7, #1]
 8018384:	78ba      	ldrb	r2, [r7, #2]
 8018386:	78f9      	ldrb	r1, [r7, #3]
 8018388:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801838a:	9302      	str	r3, [sp, #8]
 801838c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	4623      	mov	r3, r4
 801839a:	f7ec fc3a 	bl	8004c12 <HAL_HCD_HC_Init>
 801839e:	4603      	mov	r3, r0
 80183a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80183a2:	7bfb      	ldrb	r3, [r7, #15]
 80183a4:	4618      	mov	r0, r3
 80183a6:	f000 f8bf 	bl	8018528 <USBH_Get_USB_Status>
 80183aa:	4603      	mov	r3, r0
 80183ac:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80183ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80183b0:	4618      	mov	r0, r3
 80183b2:	3714      	adds	r7, #20
 80183b4:	46bd      	mov	sp, r7
 80183b6:	bd90      	pop	{r4, r7, pc}

080183b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	460b      	mov	r3, r1
 80183c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183c4:	2300      	movs	r3, #0
 80183c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80183c8:	2300      	movs	r3, #0
 80183ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80183d2:	78fa      	ldrb	r2, [r7, #3]
 80183d4:	4611      	mov	r1, r2
 80183d6:	4618      	mov	r0, r3
 80183d8:	f7ec fcb3 	bl	8004d42 <HAL_HCD_HC_Halt>
 80183dc:	4603      	mov	r3, r0
 80183de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80183e0:	7bfb      	ldrb	r3, [r7, #15]
 80183e2:	4618      	mov	r0, r3
 80183e4:	f000 f8a0 	bl	8018528 <USBH_Get_USB_Status>
 80183e8:	4603      	mov	r3, r0
 80183ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80183ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3710      	adds	r7, #16
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}

080183f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80183f6:	b590      	push	{r4, r7, lr}
 80183f8:	b089      	sub	sp, #36	; 0x24
 80183fa:	af04      	add	r7, sp, #16
 80183fc:	6078      	str	r0, [r7, #4]
 80183fe:	4608      	mov	r0, r1
 8018400:	4611      	mov	r1, r2
 8018402:	461a      	mov	r2, r3
 8018404:	4603      	mov	r3, r0
 8018406:	70fb      	strb	r3, [r7, #3]
 8018408:	460b      	mov	r3, r1
 801840a:	70bb      	strb	r3, [r7, #2]
 801840c:	4613      	mov	r3, r2
 801840e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018410:	2300      	movs	r3, #0
 8018412:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018414:	2300      	movs	r3, #0
 8018416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801841e:	787c      	ldrb	r4, [r7, #1]
 8018420:	78ba      	ldrb	r2, [r7, #2]
 8018422:	78f9      	ldrb	r1, [r7, #3]
 8018424:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018428:	9303      	str	r3, [sp, #12]
 801842a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801842c:	9302      	str	r3, [sp, #8]
 801842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018430:	9301      	str	r3, [sp, #4]
 8018432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018436:	9300      	str	r3, [sp, #0]
 8018438:	4623      	mov	r3, r4
 801843a:	f7ec fca5 	bl	8004d88 <HAL_HCD_HC_SubmitRequest>
 801843e:	4603      	mov	r3, r0
 8018440:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8018442:	7bfb      	ldrb	r3, [r7, #15]
 8018444:	4618      	mov	r0, r3
 8018446:	f000 f86f 	bl	8018528 <USBH_Get_USB_Status>
 801844a:	4603      	mov	r3, r0
 801844c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801844e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018450:	4618      	mov	r0, r3
 8018452:	3714      	adds	r7, #20
 8018454:	46bd      	mov	sp, r7
 8018456:	bd90      	pop	{r4, r7, pc}

08018458 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b082      	sub	sp, #8
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
 8018460:	460b      	mov	r3, r1
 8018462:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801846a:	78fa      	ldrb	r2, [r7, #3]
 801846c:	4611      	mov	r1, r2
 801846e:	4618      	mov	r0, r3
 8018470:	f7ec ff46 	bl	8005300 <HAL_HCD_HC_GetURBState>
 8018474:	4603      	mov	r3, r0
}
 8018476:	4618      	mov	r0, r3
 8018478:	3708      	adds	r7, #8
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}

0801847e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801847e:	b580      	push	{r7, lr}
 8018480:	b082      	sub	sp, #8
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
 8018486:	460b      	mov	r3, r1
 8018488:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8018490:	2b01      	cmp	r3, #1
 8018492:	d103      	bne.n	801849c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018494:	78fb      	ldrb	r3, [r7, #3]
 8018496:	4618      	mov	r0, r3
 8018498:	f000 f872 	bl	8018580 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801849c:	20c8      	movs	r0, #200	; 0xc8
 801849e:	f7ea fee9 	bl	8003274 <HAL_Delay>
  return USBH_OK;
 80184a2:	2300      	movs	r3, #0
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	3708      	adds	r7, #8
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}

080184ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80184ac:	b480      	push	{r7}
 80184ae:	b085      	sub	sp, #20
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	460b      	mov	r3, r1
 80184b6:	70fb      	strb	r3, [r7, #3]
 80184b8:	4613      	mov	r3, r2
 80184ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80184c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80184c4:	78fa      	ldrb	r2, [r7, #3]
 80184c6:	68f9      	ldr	r1, [r7, #12]
 80184c8:	4613      	mov	r3, r2
 80184ca:	009b      	lsls	r3, r3, #2
 80184cc:	4413      	add	r3, r2
 80184ce:	00db      	lsls	r3, r3, #3
 80184d0:	440b      	add	r3, r1
 80184d2:	333b      	adds	r3, #59	; 0x3b
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d00a      	beq.n	80184f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80184da:	78fa      	ldrb	r2, [r7, #3]
 80184dc:	68f9      	ldr	r1, [r7, #12]
 80184de:	4613      	mov	r3, r2
 80184e0:	009b      	lsls	r3, r3, #2
 80184e2:	4413      	add	r3, r2
 80184e4:	00db      	lsls	r3, r3, #3
 80184e6:	440b      	add	r3, r1
 80184e8:	3350      	adds	r3, #80	; 0x50
 80184ea:	78ba      	ldrb	r2, [r7, #2]
 80184ec:	701a      	strb	r2, [r3, #0]
 80184ee:	e009      	b.n	8018504 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80184f0:	78fa      	ldrb	r2, [r7, #3]
 80184f2:	68f9      	ldr	r1, [r7, #12]
 80184f4:	4613      	mov	r3, r2
 80184f6:	009b      	lsls	r3, r3, #2
 80184f8:	4413      	add	r3, r2
 80184fa:	00db      	lsls	r3, r3, #3
 80184fc:	440b      	add	r3, r1
 80184fe:	3351      	adds	r3, #81	; 0x51
 8018500:	78ba      	ldrb	r2, [r7, #2]
 8018502:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018504:	2300      	movs	r3, #0
}
 8018506:	4618      	mov	r0, r3
 8018508:	3714      	adds	r7, #20
 801850a:	46bd      	mov	sp, r7
 801850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018510:	4770      	bx	lr

08018512 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018512:	b580      	push	{r7, lr}
 8018514:	b082      	sub	sp, #8
 8018516:	af00      	add	r7, sp, #0
 8018518:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801851a:	6878      	ldr	r0, [r7, #4]
 801851c:	f7ea feaa 	bl	8003274 <HAL_Delay>
}
 8018520:	bf00      	nop
 8018522:	3708      	adds	r7, #8
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018528:	b480      	push	{r7}
 801852a:	b085      	sub	sp, #20
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018532:	2300      	movs	r3, #0
 8018534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018536:	79fb      	ldrb	r3, [r7, #7]
 8018538:	2b03      	cmp	r3, #3
 801853a:	d817      	bhi.n	801856c <USBH_Get_USB_Status+0x44>
 801853c:	a201      	add	r2, pc, #4	; (adr r2, 8018544 <USBH_Get_USB_Status+0x1c>)
 801853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018542:	bf00      	nop
 8018544:	08018555 	.word	0x08018555
 8018548:	0801855b 	.word	0x0801855b
 801854c:	08018561 	.word	0x08018561
 8018550:	08018567 	.word	0x08018567
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018554:	2300      	movs	r3, #0
 8018556:	73fb      	strb	r3, [r7, #15]
    break;
 8018558:	e00b      	b.n	8018572 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801855a:	2302      	movs	r3, #2
 801855c:	73fb      	strb	r3, [r7, #15]
    break;
 801855e:	e008      	b.n	8018572 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018560:	2301      	movs	r3, #1
 8018562:	73fb      	strb	r3, [r7, #15]
    break;
 8018564:	e005      	b.n	8018572 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018566:	2302      	movs	r3, #2
 8018568:	73fb      	strb	r3, [r7, #15]
    break;
 801856a:	e002      	b.n	8018572 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801856c:	2302      	movs	r3, #2
 801856e:	73fb      	strb	r3, [r7, #15]
    break;
 8018570:	bf00      	nop
  }
  return usb_status;
 8018572:	7bfb      	ldrb	r3, [r7, #15]
}
 8018574:	4618      	mov	r0, r3
 8018576:	3714      	adds	r7, #20
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr

08018580 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	4603      	mov	r3, r0
 8018588:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 801858a:	79fb      	ldrb	r3, [r7, #7]
 801858c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801858e:	79fb      	ldrb	r3, [r7, #7]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d102      	bne.n	801859a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8018594:	2301      	movs	r3, #1
 8018596:	73fb      	strb	r3, [r7, #15]
 8018598:	e001      	b.n	801859e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801859a:	2300      	movs	r3, #0
 801859c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801859e:	7bfb      	ldrb	r3, [r7, #15]
 80185a0:	461a      	mov	r2, r3
 80185a2:	2120      	movs	r1, #32
 80185a4:	4803      	ldr	r0, [pc, #12]	; (80185b4 <MX_DriverVbusFS+0x34>)
 80185a6:	f7ec fac5 	bl	8004b34 <HAL_GPIO_WritePin>
}
 80185aa:	bf00      	nop
 80185ac:	3710      	adds	r7, #16
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
 80185b2:	bf00      	nop
 80185b4:	40020c00 	.word	0x40020c00

080185b8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80185b8:	8880      	ldrh	r0, [r0, #4]
 80185ba:	4770      	bx	lr

080185bc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80185bc:	2300      	movs	r3, #0
 80185be:	8083      	strh	r3, [r0, #4]
 80185c0:	4770      	bx	lr
	...

080185c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80185c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185c6:	6803      	ldr	r3, [r0, #0]
 80185c8:	460e      	mov	r6, r1
 80185ca:	2100      	movs	r1, #0
 80185cc:	4605      	mov	r5, r0
 80185ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185d0:	4798      	blx	r3
 80185d2:	4604      	mov	r4, r0
 80185d4:	682b      	ldr	r3, [r5, #0]
 80185d6:	4628      	mov	r0, r5
 80185d8:	1b34      	subs	r4, r6, r4
 80185da:	6a1b      	ldr	r3, [r3, #32]
 80185dc:	b2a4      	uxth	r4, r4
 80185de:	4798      	blx	r3
 80185e0:	88ab      	ldrh	r3, [r5, #4]
 80185e2:	fbb4 f4f0 	udiv	r4, r4, r0
 80185e6:	42a3      	cmp	r3, r4
 80185e8:	d805      	bhi.n	80185f6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80185ea:	4b0e      	ldr	r3, [pc, #56]	; (8018624 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80185ec:	211e      	movs	r1, #30
 80185ee:	4a0e      	ldr	r2, [pc, #56]	; (8018628 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80185f0:	480e      	ldr	r0, [pc, #56]	; (801862c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80185f2:	f00c fea1 	bl	8025338 <__assert_func>
 80185f6:	682b      	ldr	r3, [r5, #0]
 80185f8:	2100      	movs	r1, #0
 80185fa:	4628      	mov	r0, r5
 80185fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185fe:	4798      	blx	r3
 8018600:	682b      	ldr	r3, [r5, #0]
 8018602:	4607      	mov	r7, r0
 8018604:	4628      	mov	r0, r5
 8018606:	6a1b      	ldr	r3, [r3, #32]
 8018608:	4798      	blx	r3
 801860a:	1bf3      	subs	r3, r6, r7
 801860c:	b29b      	uxth	r3, r3
 801860e:	fbb3 f2f0 	udiv	r2, r3, r0
 8018612:	fb02 3010 	mls	r0, r2, r0, r3
 8018616:	b118      	cbz	r0, 8018620 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8018618:	4b05      	ldr	r3, [pc, #20]	; (8018630 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801861a:	211f      	movs	r1, #31
 801861c:	4a02      	ldr	r2, [pc, #8]	; (8018628 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801861e:	e7e7      	b.n	80185f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8018620:	4620      	mov	r0, r4
 8018622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018624:	08027444 	.word	0x08027444
 8018628:	080275b2 	.word	0x080275b2
 801862c:	08027459 	.word	0x08027459
 8018630:	08027487 	.word	0x08027487

08018634 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018634:	b538      	push	{r3, r4, r5, lr}
 8018636:	6803      	ldr	r3, [r0, #0]
 8018638:	460d      	mov	r5, r1
 801863a:	4604      	mov	r4, r0
 801863c:	6a1b      	ldr	r3, [r3, #32]
 801863e:	4798      	blx	r3
 8018640:	4285      	cmp	r5, r0
 8018642:	d905      	bls.n	8018650 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018644:	4b0c      	ldr	r3, [pc, #48]	; (8018678 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8018646:	212f      	movs	r1, #47	; 0x2f
 8018648:	4a0c      	ldr	r2, [pc, #48]	; (801867c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801864a:	480d      	ldr	r0, [pc, #52]	; (8018680 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801864c:	f00c fe74 	bl	8025338 <__assert_func>
 8018650:	6823      	ldr	r3, [r4, #0]
 8018652:	4620      	mov	r0, r4
 8018654:	88a5      	ldrh	r5, [r4, #4]
 8018656:	69db      	ldr	r3, [r3, #28]
 8018658:	4798      	blx	r3
 801865a:	4285      	cmp	r5, r0
 801865c:	d303      	bcc.n	8018666 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801865e:	4b09      	ldr	r3, [pc, #36]	; (8018684 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018660:	2130      	movs	r1, #48	; 0x30
 8018662:	4a06      	ldr	r2, [pc, #24]	; (801867c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018664:	e7f1      	b.n	801864a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	4620      	mov	r0, r4
 801866a:	88a1      	ldrh	r1, [r4, #4]
 801866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801866e:	4798      	blx	r3
 8018670:	88a3      	ldrh	r3, [r4, #4]
 8018672:	3301      	adds	r3, #1
 8018674:	80a3      	strh	r3, [r4, #4]
 8018676:	bd38      	pop	{r3, r4, r5, pc}
 8018678:	08027501 	.word	0x08027501
 801867c:	080275f5 	.word	0x080275f5
 8018680:	08027459 	.word	0x08027459
 8018684:	08027518 	.word	0x08027518

08018688 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018688:	b570      	push	{r4, r5, r6, lr}
 801868a:	6803      	ldr	r3, [r0, #0]
 801868c:	4616      	mov	r6, r2
 801868e:	4604      	mov	r4, r0
 8018690:	460d      	mov	r5, r1
 8018692:	6a1b      	ldr	r3, [r3, #32]
 8018694:	4798      	blx	r3
 8018696:	4286      	cmp	r6, r0
 8018698:	d905      	bls.n	80186a6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801869a:	4b06      	ldr	r3, [pc, #24]	; (80186b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801869c:	2139      	movs	r1, #57	; 0x39
 801869e:	4a06      	ldr	r2, [pc, #24]	; (80186b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80186a0:	4806      	ldr	r0, [pc, #24]	; (80186bc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80186a2:	f00c fe49 	bl	8025338 <__assert_func>
 80186a6:	6823      	ldr	r3, [r4, #0]
 80186a8:	4629      	mov	r1, r5
 80186aa:	4620      	mov	r0, r4
 80186ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186b2:	4718      	bx	r3
 80186b4:	08027501 	.word	0x08027501
 80186b8:	08027568 	.word	0x08027568
 80186bc:	08027459 	.word	0x08027459

080186c0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80186c0:	4770      	bx	lr
	...

080186c4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80186c4:	4a02      	ldr	r2, [pc, #8]	; (80186d0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80186c6:	6002      	str	r2, [r0, #0]
 80186c8:	2200      	movs	r2, #0
 80186ca:	8082      	strh	r2, [r0, #4]
 80186cc:	4770      	bx	lr
 80186ce:	bf00      	nop
 80186d0:	0802753c 	.word	0x0802753c

080186d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80186d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80186d6:	2000      	movs	r0, #0
 80186d8:	b12b      	cbz	r3, 80186e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80186da:	b920      	cbnz	r0, 80186e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80186dc:	1a5a      	subs	r2, r3, r1
 80186de:	699b      	ldr	r3, [r3, #24]
 80186e0:	4250      	negs	r0, r2
 80186e2:	4150      	adcs	r0, r2
 80186e4:	e7f8      	b.n	80186d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80186e6:	4770      	bx	lr

080186e8 <_ZN8touchgfx9Container9removeAllEv>:
 80186e8:	2200      	movs	r2, #0
 80186ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80186ec:	b123      	cbz	r3, 80186f8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80186ee:	6999      	ldr	r1, [r3, #24]
 80186f0:	6281      	str	r1, [r0, #40]	; 0x28
 80186f2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80186f6:	e7f8      	b.n	80186ea <_ZN8touchgfx9Container9removeAllEv+0x2>
 80186f8:	4770      	bx	lr

080186fa <_ZN8touchgfx9Container6unlinkEv>:
 80186fa:	2300      	movs	r3, #0
 80186fc:	6283      	str	r3, [r0, #40]	; 0x28
 80186fe:	4770      	bx	lr

08018700 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8018700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018704:	461f      	mov	r7, r3
 8018706:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801870a:	460d      	mov	r5, r1
 801870c:	4616      	mov	r6, r2
 801870e:	b103      	cbz	r3, 8018712 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8018710:	6038      	str	r0, [r7, #0]
 8018712:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018714:	b314      	cbz	r4, 801875c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8018716:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801871a:	b1eb      	cbz	r3, 8018758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801871c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018720:	428d      	cmp	r5, r1
 8018722:	db19      	blt.n	8018758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018724:	b289      	uxth	r1, r1
 8018726:	8923      	ldrh	r3, [r4, #8]
 8018728:	440b      	add	r3, r1
 801872a:	b21b      	sxth	r3, r3
 801872c:	429d      	cmp	r5, r3
 801872e:	da13      	bge.n	8018758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018730:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018734:	4296      	cmp	r6, r2
 8018736:	db0f      	blt.n	8018758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018738:	b292      	uxth	r2, r2
 801873a:	8963      	ldrh	r3, [r4, #10]
 801873c:	4413      	add	r3, r2
 801873e:	b21b      	sxth	r3, r3
 8018740:	429e      	cmp	r6, r3
 8018742:	da09      	bge.n	8018758 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018744:	6823      	ldr	r3, [r4, #0]
 8018746:	1ab2      	subs	r2, r6, r2
 8018748:	1a69      	subs	r1, r5, r1
 801874a:	4620      	mov	r0, r4
 801874c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8018750:	b212      	sxth	r2, r2
 8018752:	463b      	mov	r3, r7
 8018754:	b209      	sxth	r1, r1
 8018756:	47c0      	blx	r8
 8018758:	69a4      	ldr	r4, [r4, #24]
 801875a:	e7db      	b.n	8018714 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018760 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018760:	2200      	movs	r2, #0
 8018762:	8002      	strh	r2, [r0, #0]
 8018764:	8042      	strh	r2, [r0, #2]
 8018766:	8082      	strh	r2, [r0, #4]
 8018768:	80c2      	strh	r2, [r0, #6]
 801876a:	4770      	bx	lr

0801876c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801876c:	b570      	push	{r4, r5, r6, lr}
 801876e:	460d      	mov	r5, r1
 8018770:	4616      	mov	r6, r2
 8018772:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018774:	b13c      	cbz	r4, 8018786 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018776:	6823      	ldr	r3, [r4, #0]
 8018778:	4620      	mov	r0, r4
 801877a:	4632      	mov	r2, r6
 801877c:	4629      	mov	r1, r5
 801877e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018780:	4798      	blx	r3
 8018782:	69a4      	ldr	r4, [r4, #24]
 8018784:	e7f6      	b.n	8018774 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018786:	bd70      	pop	{r4, r5, r6, pc}

08018788 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8018788:	b538      	push	{r3, r4, r5, lr}
 801878a:	460d      	mov	r5, r1
 801878c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801878e:	b134      	cbz	r4, 801879e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018790:	682b      	ldr	r3, [r5, #0]
 8018792:	4621      	mov	r1, r4
 8018794:	4628      	mov	r0, r5
 8018796:	689b      	ldr	r3, [r3, #8]
 8018798:	4798      	blx	r3
 801879a:	69a4      	ldr	r4, [r4, #24]
 801879c:	e7f7      	b.n	801878e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801879e:	bd38      	pop	{r3, r4, r5, pc}

080187a0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80187a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80187a2:	b19b      	cbz	r3, 80187cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80187a4:	428b      	cmp	r3, r1
 80187a6:	d109      	bne.n	80187bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80187a8:	699a      	ldr	r2, [r3, #24]
 80187aa:	2100      	movs	r1, #0
 80187ac:	6159      	str	r1, [r3, #20]
 80187ae:	6282      	str	r2, [r0, #40]	; 0x28
 80187b0:	b902      	cbnz	r2, 80187b4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80187b2:	4770      	bx	lr
 80187b4:	6199      	str	r1, [r3, #24]
 80187b6:	4770      	bx	lr
 80187b8:	4613      	mov	r3, r2
 80187ba:	b13a      	cbz	r2, 80187cc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80187bc:	699a      	ldr	r2, [r3, #24]
 80187be:	428a      	cmp	r2, r1
 80187c0:	d1fa      	bne.n	80187b8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80187c2:	698a      	ldr	r2, [r1, #24]
 80187c4:	619a      	str	r2, [r3, #24]
 80187c6:	2300      	movs	r3, #0
 80187c8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80187cc:	4770      	bx	lr

080187ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80187ce:	b410      	push	{r4}
 80187d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80187d2:	4604      	mov	r4, r0
 80187d4:	b92b      	cbnz	r3, 80187e2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80187d6:	6803      	ldr	r3, [r0, #0]
 80187d8:	4611      	mov	r1, r2
 80187da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80187e0:	4718      	bx	r3
 80187e2:	b941      	cbnz	r1, 80187f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80187e4:	6193      	str	r3, [r2, #24]
 80187e6:	6282      	str	r2, [r0, #40]	; 0x28
 80187e8:	6154      	str	r4, [r2, #20]
 80187ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187ee:	4770      	bx	lr
 80187f0:	4603      	mov	r3, r0
 80187f2:	2800      	cmp	r0, #0
 80187f4:	d0f9      	beq.n	80187ea <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80187f6:	4299      	cmp	r1, r3
 80187f8:	6998      	ldr	r0, [r3, #24]
 80187fa:	d1f9      	bne.n	80187f0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80187fc:	6190      	str	r0, [r2, #24]
 80187fe:	618a      	str	r2, [r1, #24]
 8018800:	e7f2      	b.n	80187e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08018804 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8018804:	4288      	cmp	r0, r1
 8018806:	b508      	push	{r3, lr}
 8018808:	d105      	bne.n	8018816 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801880a:	4b11      	ldr	r3, [pc, #68]	; (8018850 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801880c:	2123      	movs	r1, #35	; 0x23
 801880e:	4a11      	ldr	r2, [pc, #68]	; (8018854 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018810:	4811      	ldr	r0, [pc, #68]	; (8018858 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8018812:	f00c fd91 	bl	8025338 <__assert_func>
 8018816:	694b      	ldr	r3, [r1, #20]
 8018818:	b11b      	cbz	r3, 8018822 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801881a:	4b10      	ldr	r3, [pc, #64]	; (801885c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801881c:	2124      	movs	r1, #36	; 0x24
 801881e:	4a0d      	ldr	r2, [pc, #52]	; (8018854 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8018820:	e7f6      	b.n	8018810 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018822:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8018826:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018828:	b913      	cbnz	r3, 8018830 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801882a:	6281      	str	r1, [r0, #40]	; 0x28
 801882c:	bd08      	pop	{r3, pc}
 801882e:	4613      	mov	r3, r2
 8018830:	699a      	ldr	r2, [r3, #24]
 8018832:	b12a      	cbz	r2, 8018840 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8018834:	428b      	cmp	r3, r1
 8018836:	d1fa      	bne.n	801882e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8018838:	4b09      	ldr	r3, [pc, #36]	; (8018860 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801883a:	2135      	movs	r1, #53	; 0x35
 801883c:	4a05      	ldr	r2, [pc, #20]	; (8018854 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801883e:	e7e7      	b.n	8018810 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8018840:	428b      	cmp	r3, r1
 8018842:	d103      	bne.n	801884c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8018844:	4b06      	ldr	r3, [pc, #24]	; (8018860 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8018846:	2138      	movs	r1, #56	; 0x38
 8018848:	4a02      	ldr	r2, [pc, #8]	; (8018854 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801884a:	e7e1      	b.n	8018810 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801884c:	6199      	str	r1, [r3, #24]
 801884e:	e7ed      	b.n	801882c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8018850:	08027633 	.word	0x08027633
 8018854:	08027788 	.word	0x08027788
 8018858:	0802765f 	.word	0x0802765f
 801885c:	08027692 	.word	0x08027692
 8018860:	080276c8 	.word	0x080276c8

08018864 <_ZN8touchgfx4RectaNERKS0_>:
 8018864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018868:	888b      	ldrh	r3, [r1, #4]
 801886a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801886e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018872:	444b      	add	r3, r9
 8018874:	b29b      	uxth	r3, r3
 8018876:	fa0f f883 	sxth.w	r8, r3
 801887a:	45c2      	cmp	sl, r8
 801887c:	da30      	bge.n	80188e0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801887e:	8882      	ldrh	r2, [r0, #4]
 8018880:	4452      	add	r2, sl
 8018882:	b292      	uxth	r2, r2
 8018884:	fa0f fe82 	sxth.w	lr, r2
 8018888:	45f1      	cmp	r9, lr
 801888a:	da29      	bge.n	80188e0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801888c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018890:	88cc      	ldrh	r4, [r1, #6]
 8018892:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018896:	442c      	add	r4, r5
 8018898:	b224      	sxth	r4, r4
 801889a:	42a6      	cmp	r6, r4
 801889c:	da20      	bge.n	80188e0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801889e:	88c7      	ldrh	r7, [r0, #6]
 80188a0:	4437      	add	r7, r6
 80188a2:	b2bf      	uxth	r7, r7
 80188a4:	fa0f fc87 	sxth.w	ip, r7
 80188a8:	4565      	cmp	r5, ip
 80188aa:	da19      	bge.n	80188e0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 80188ac:	45ca      	cmp	sl, r9
 80188ae:	4654      	mov	r4, sl
 80188b0:	bfb8      	it	lt
 80188b2:	464c      	movlt	r4, r9
 80188b4:	42b5      	cmp	r5, r6
 80188b6:	bfb8      	it	lt
 80188b8:	4635      	movlt	r5, r6
 80188ba:	45f0      	cmp	r8, lr
 80188bc:	bfc8      	it	gt
 80188be:	4613      	movgt	r3, r2
 80188c0:	1b1b      	subs	r3, r3, r4
 80188c2:	8083      	strh	r3, [r0, #4]
 80188c4:	88ca      	ldrh	r2, [r1, #6]
 80188c6:	884b      	ldrh	r3, [r1, #2]
 80188c8:	8004      	strh	r4, [r0, #0]
 80188ca:	4413      	add	r3, r2
 80188cc:	8045      	strh	r5, [r0, #2]
 80188ce:	b29b      	uxth	r3, r3
 80188d0:	b21a      	sxth	r2, r3
 80188d2:	4594      	cmp	ip, r2
 80188d4:	bfb8      	it	lt
 80188d6:	463b      	movlt	r3, r7
 80188d8:	1b5b      	subs	r3, r3, r5
 80188da:	80c3      	strh	r3, [r0, #6]
 80188dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188e0:	2300      	movs	r3, #0
 80188e2:	8003      	strh	r3, [r0, #0]
 80188e4:	8043      	strh	r3, [r0, #2]
 80188e6:	8083      	strh	r3, [r0, #4]
 80188e8:	80c3      	strh	r3, [r0, #6]
 80188ea:	e7f7      	b.n	80188dc <_ZN8touchgfx4RectaNERKS0_+0x78>

080188ec <_ZNK8touchgfx4Rect7isEmptyEv>:
 80188ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80188f0:	b12b      	cbz	r3, 80188fe <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80188f2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80188f6:	fab0 f080 	clz	r0, r0
 80188fa:	0940      	lsrs	r0, r0, #5
 80188fc:	4770      	bx	lr
 80188fe:	2001      	movs	r0, #1
 8018900:	4770      	bx	lr

08018902 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018906:	2300      	movs	r3, #0
 8018908:	4604      	mov	r4, r0
 801890a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801890c:	8003      	strh	r3, [r0, #0]
 801890e:	8043      	strh	r3, [r0, #2]
 8018910:	8083      	strh	r3, [r0, #4]
 8018912:	80c3      	strh	r3, [r0, #6]
 8018914:	2d00      	cmp	r5, #0
 8018916:	d040      	beq.n	801899a <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8018918:	1d28      	adds	r0, r5, #4
 801891a:	f7ff ffe7 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801891e:	b988      	cbnz	r0, 8018944 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018920:	4620      	mov	r0, r4
 8018922:	f7ff ffe3 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 8018926:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801892a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801892e:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018932:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8018936:	b138      	cbz	r0, 8018948 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8018938:	8022      	strh	r2, [r4, #0]
 801893a:	8063      	strh	r3, [r4, #2]
 801893c:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018940:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018944:	69ad      	ldr	r5, [r5, #24]
 8018946:	e7e5      	b.n	8018914 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8018948:	f9b4 0000 	ldrsh.w	r0, [r4]
 801894c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018950:	4290      	cmp	r0, r2
 8018952:	4607      	mov	r7, r0
 8018954:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8018958:	460e      	mov	r6, r1
 801895a:	bfa8      	it	ge
 801895c:	4617      	movge	r7, r2
 801895e:	4299      	cmp	r1, r3
 8018960:	4472      	add	r2, lr
 8018962:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8018966:	bfa8      	it	ge
 8018968:	461e      	movge	r6, r3
 801896a:	4440      	add	r0, r8
 801896c:	4471      	add	r1, lr
 801896e:	4463      	add	r3, ip
 8018970:	b200      	sxth	r0, r0
 8018972:	8027      	strh	r7, [r4, #0]
 8018974:	b212      	sxth	r2, r2
 8018976:	8066      	strh	r6, [r4, #2]
 8018978:	b209      	sxth	r1, r1
 801897a:	b21b      	sxth	r3, r3
 801897c:	4290      	cmp	r0, r2
 801897e:	bfac      	ite	ge
 8018980:	ebc7 0200 	rsbge	r2, r7, r0
 8018984:	ebc7 0202 	rsblt	r2, r7, r2
 8018988:	4299      	cmp	r1, r3
 801898a:	bfac      	ite	ge
 801898c:	ebc6 0301 	rsbge	r3, r6, r1
 8018990:	ebc6 0303 	rsblt	r3, r6, r3
 8018994:	80a2      	strh	r2, [r4, #4]
 8018996:	80e3      	strh	r3, [r4, #6]
 8018998:	e7d4      	b.n	8018944 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801899a:	4620      	mov	r0, r4
 801899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80189a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80189a4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80189a8:	b383      	cbz	r3, 8018a0c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80189aa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80189ac:	b374      	cbz	r4, 8018a0c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80189ae:	f9b1 5000 	ldrsh.w	r5, [r1]
 80189b2:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80189b6:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80189ba:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80189be:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80189c2:	b303      	cbz	r3, 8018a06 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80189c4:	4668      	mov	r0, sp
 80189c6:	1d21      	adds	r1, r4, #4
 80189c8:	f8ad 5000 	strh.w	r5, [sp]
 80189cc:	f8ad 6002 	strh.w	r6, [sp, #2]
 80189d0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80189d4:	f8ad 8006 	strh.w	r8, [sp, #6]
 80189d8:	f7ff ff44 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 80189dc:	4668      	mov	r0, sp
 80189de:	f7ff ff85 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 80189e2:	b980      	cbnz	r0, 8018a06 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80189e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80189e8:	4669      	mov	r1, sp
 80189ea:	88a2      	ldrh	r2, [r4, #4]
 80189ec:	4620      	mov	r0, r4
 80189ee:	1a9b      	subs	r3, r3, r2
 80189f0:	88e2      	ldrh	r2, [r4, #6]
 80189f2:	f8ad 3000 	strh.w	r3, [sp]
 80189f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80189fa:	1a9b      	subs	r3, r3, r2
 80189fc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018a00:	6823      	ldr	r3, [r4, #0]
 8018a02:	689b      	ldr	r3, [r3, #8]
 8018a04:	4798      	blx	r3
 8018a06:	69a4      	ldr	r4, [r4, #24]
 8018a08:	2c00      	cmp	r4, #0
 8018a0a:	d1d8      	bne.n	80189be <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8018a0c:	b002      	add	sp, #8
 8018a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018a14:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018a18:	460d      	mov	r5, r1
 8018a1a:	4616      	mov	r6, r2
 8018a1c:	b323      	cbz	r3, 8018a68 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018a1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018a20:	b314      	cbz	r4, 8018a68 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018a22:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018a26:	b1eb      	cbz	r3, 8018a64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018a28:	6828      	ldr	r0, [r5, #0]
 8018a2a:	466b      	mov	r3, sp
 8018a2c:	6869      	ldr	r1, [r5, #4]
 8018a2e:	c303      	stmia	r3!, {r0, r1}
 8018a30:	4668      	mov	r0, sp
 8018a32:	1d21      	adds	r1, r4, #4
 8018a34:	f7ff ff16 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 8018a38:	4668      	mov	r0, sp
 8018a3a:	f7ff ff57 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 8018a3e:	b988      	cbnz	r0, 8018a64 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018a40:	f8bd 3000 	ldrh.w	r3, [sp]
 8018a44:	4669      	mov	r1, sp
 8018a46:	88a2      	ldrh	r2, [r4, #4]
 8018a48:	4620      	mov	r0, r4
 8018a4a:	1a9b      	subs	r3, r3, r2
 8018a4c:	88e2      	ldrh	r2, [r4, #6]
 8018a4e:	f8ad 3000 	strh.w	r3, [sp]
 8018a52:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018a56:	1a9b      	subs	r3, r3, r2
 8018a58:	4632      	mov	r2, r6
 8018a5a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018a5e:	6823      	ldr	r3, [r4, #0]
 8018a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a62:	4798      	blx	r3
 8018a64:	69a4      	ldr	r4, [r4, #24]
 8018a66:	e7db      	b.n	8018a20 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8018a68:	b002      	add	sp, #8
 8018a6a:	bd70      	pop	{r4, r5, r6, pc}

08018a6c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8018a6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018a70:	4770      	bx	lr

08018a72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018a72:	6803      	ldr	r3, [r0, #0]
 8018a74:	b513      	push	{r0, r1, r4, lr}
 8018a76:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	e9cd 3300 	strd	r3, r3, [sp]
 8018a80:	466b      	mov	r3, sp
 8018a82:	47a0      	blx	r4
 8018a84:	b002      	add	sp, #8
 8018a86:	bd10      	pop	{r4, pc}

08018a88 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018a88:	2301      	movs	r3, #1
 8018a8a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018a8e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018a92:	4770      	bx	lr

08018a94 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8018a94:	2301      	movs	r3, #1
 8018a96:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018a9a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018a9e:	4770      	bx	lr

08018aa0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018aa0:	6843      	ldr	r3, [r0, #4]
 8018aa2:	2201      	movs	r2, #1
 8018aa4:	725a      	strb	r2, [r3, #9]
 8018aa6:	6840      	ldr	r0, [r0, #4]
 8018aa8:	6803      	ldr	r3, [r0, #0]
 8018aaa:	691b      	ldr	r3, [r3, #16]
 8018aac:	4718      	bx	r3

08018aae <_ZN8touchgfx3HAL8flushDMAEv>:
 8018aae:	6840      	ldr	r0, [r0, #4]
 8018ab0:	6803      	ldr	r3, [r0, #0]
 8018ab2:	689b      	ldr	r3, [r3, #8]
 8018ab4:	4718      	bx	r3
	...

08018ab8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018ab8:	4b04      	ldr	r3, [pc, #16]	; (8018acc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018aba:	781b      	ldrb	r3, [r3, #0]
 8018abc:	b123      	cbz	r3, 8018ac8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018abe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018ac2:	f080 0001 	eor.w	r0, r0, #1
 8018ac6:	4770      	bx	lr
 8018ac8:	2001      	movs	r0, #1
 8018aca:	4770      	bx	lr
 8018acc:	200098e8 	.word	0x200098e8

08018ad0 <_ZN8touchgfx3HAL8endFrameEv>:
 8018ad0:	b510      	push	{r4, lr}
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	6840      	ldr	r0, [r0, #4]
 8018ad6:	6803      	ldr	r3, [r0, #0]
 8018ad8:	689b      	ldr	r3, [r3, #8]
 8018ada:	4798      	blx	r3
 8018adc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8018ae0:	b113      	cbz	r3, 8018ae8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018ae8:	bd10      	pop	{r4, pc}

08018aea <_ZN8touchgfx3HAL9taskEntryEv>:
 8018aea:	b508      	push	{r3, lr}
 8018aec:	6803      	ldr	r3, [r0, #0]
 8018aee:	4604      	mov	r4, r0
 8018af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018af2:	4798      	blx	r3
 8018af4:	6823      	ldr	r3, [r4, #0]
 8018af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018af8:	4620      	mov	r0, r4
 8018afa:	4798      	blx	r3
 8018afc:	f7fd ff4a 	bl	8016994 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b04:	e7f8      	b.n	8018af8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018b08 <_ZN8touchgfx3HAL4tickEv>:
 8018b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018b0a:	6803      	ldr	r3, [r0, #0]
 8018b0c:	4604      	mov	r4, r0
 8018b0e:	4d5c      	ldr	r5, [pc, #368]	; (8018c80 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8018b14:	4798      	blx	r3
 8018b16:	2800      	cmp	r0, #0
 8018b18:	f000 8097 	beq.w	8018c4a <_ZN8touchgfx3HAL4tickEv+0x142>
 8018b1c:	2001      	movs	r0, #1
 8018b1e:	2600      	movs	r6, #0
 8018b20:	f7fd fc1c 	bl	801635c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018b24:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8018b28:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8018b2c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018b30:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8018b34:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018b38:	b133      	cbz	r3, 8018b48 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018b3a:	6823      	ldr	r3, [r4, #0]
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018b42:	4798      	blx	r3
 8018b44:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8018b48:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018b4c:	2601      	movs	r6, #1
 8018b4e:	6862      	ldr	r2, [r4, #4]
 8018b50:	f083 0301 	eor.w	r3, r3, #1
 8018b54:	702e      	strb	r6, [r5, #0]
 8018b56:	7253      	strb	r3, [r2, #9]
 8018b58:	f002 f9ae 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 8018b5c:	6803      	ldr	r3, [r0, #0]
 8018b5e:	4631      	mov	r1, r6
 8018b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b62:	4798      	blx	r3
 8018b64:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018b68:	b90b      	cbnz	r3, 8018b6e <_ZN8touchgfx3HAL4tickEv+0x66>
 8018b6a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018b6e:	f002 f9a3 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 8018b72:	6803      	ldr	r3, [r0, #0]
 8018b74:	695b      	ldr	r3, [r3, #20]
 8018b76:	4798      	blx	r3
 8018b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b7a:	6803      	ldr	r3, [r0, #0]
 8018b7c:	691b      	ldr	r3, [r3, #16]
 8018b7e:	4798      	blx	r3
 8018b80:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018b84:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018b88:	3b01      	subs	r3, #1
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018b90:	b10a      	cbz	r2, 8018b96 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d1eb      	bne.n	8018b6e <_ZN8touchgfx3HAL4tickEv+0x66>
 8018b96:	4a3b      	ldr	r2, [pc, #236]	; (8018c84 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018b98:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018b9c:	7813      	ldrb	r3, [r2, #0]
 8018b9e:	3301      	adds	r3, #1
 8018ba0:	b25b      	sxtb	r3, r3
 8018ba2:	4299      	cmp	r1, r3
 8018ba4:	7013      	strb	r3, [r2, #0]
 8018ba6:	dc10      	bgt.n	8018bca <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018ba8:	2300      	movs	r3, #0
 8018baa:	68e0      	ldr	r0, [r4, #12]
 8018bac:	a902      	add	r1, sp, #8
 8018bae:	7013      	strb	r3, [r2, #0]
 8018bb0:	aa03      	add	r2, sp, #12
 8018bb2:	6803      	ldr	r3, [r0, #0]
 8018bb4:	68db      	ldr	r3, [r3, #12]
 8018bb6:	4798      	blx	r3
 8018bb8:	6823      	ldr	r3, [r4, #0]
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d051      	beq.n	8018c62 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018bbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018bc8:	4798      	blx	r3
 8018bca:	2300      	movs	r3, #0
 8018bcc:	6960      	ldr	r0, [r4, #20]
 8018bce:	f88d 3007 	strb.w	r3, [sp, #7]
 8018bd2:	b158      	cbz	r0, 8018bec <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018bd4:	6803      	ldr	r3, [r0, #0]
 8018bd6:	f10d 0107 	add.w	r1, sp, #7
 8018bda:	68db      	ldr	r3, [r3, #12]
 8018bdc:	4798      	blx	r3
 8018bde:	b128      	cbz	r0, 8018bec <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018be2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018be6:	6803      	ldr	r3, [r0, #0]
 8018be8:	68db      	ldr	r3, [r3, #12]
 8018bea:	4798      	blx	r3
 8018bec:	f104 001c 	add.w	r0, r4, #28
 8018bf0:	f00c fabe 	bl	8025170 <_ZN8touchgfx8Gestures4tickEv>
 8018bf4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018bf8:	b30b      	cbz	r3, 8018c3e <_ZN8touchgfx3HAL4tickEv+0x136>
 8018bfa:	6920      	ldr	r0, [r4, #16]
 8018bfc:	6803      	ldr	r3, [r0, #0]
 8018bfe:	691b      	ldr	r3, [r3, #16]
 8018c00:	4798      	blx	r3
 8018c02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c04:	4606      	mov	r6, r0
 8018c06:	b903      	cbnz	r3, 8018c0a <_ZN8touchgfx3HAL4tickEv+0x102>
 8018c08:	6720      	str	r0, [r4, #112]	; 0x70
 8018c0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c0c:	4a1e      	ldr	r2, [pc, #120]	; (8018c88 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018c0e:	1af3      	subs	r3, r6, r3
 8018c10:	4293      	cmp	r3, r2
 8018c12:	d914      	bls.n	8018c3e <_ZN8touchgfx3HAL4tickEv+0x136>
 8018c14:	6920      	ldr	r0, [r4, #16]
 8018c16:	6803      	ldr	r3, [r0, #0]
 8018c18:	699b      	ldr	r3, [r3, #24]
 8018c1a:	4798      	blx	r3
 8018c1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018c1e:	2264      	movs	r2, #100	; 0x64
 8018c20:	1af3      	subs	r3, r6, r3
 8018c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	dc1e      	bgt.n	8018c6c <_ZN8touchgfx3HAL4tickEv+0x164>
 8018c2e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8018c32:	6920      	ldr	r0, [r4, #16]
 8018c34:	2100      	movs	r1, #0
 8018c36:	6803      	ldr	r3, [r0, #0]
 8018c38:	69db      	ldr	r3, [r3, #28]
 8018c3a:	4798      	blx	r3
 8018c3c:	6726      	str	r6, [r4, #112]	; 0x70
 8018c3e:	f002 f93b 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 8018c42:	6803      	ldr	r3, [r0, #0]
 8018c44:	2100      	movs	r1, #0
 8018c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c48:	4798      	blx	r3
 8018c4a:	6823      	ldr	r3, [r4, #0]
 8018c4c:	4620      	mov	r0, r4
 8018c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018c52:	4798      	blx	r3
 8018c54:	2001      	movs	r0, #1
 8018c56:	f7fd fb8c 	bl	8016372 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	702b      	strb	r3, [r5, #0]
 8018c5e:	b004      	add	sp, #16
 8018c60:	bd70      	pop	{r4, r5, r6, pc}
 8018c62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018c66:	4620      	mov	r0, r4
 8018c68:	4798      	blx	r3
 8018c6a:	e7ae      	b.n	8018bca <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018c6c:	2863      	cmp	r0, #99	; 0x63
 8018c6e:	bfcb      	itete	gt
 8018c70:	2300      	movgt	r3, #0
 8018c72:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018c76:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018c7a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018c7e:	e7d8      	b.n	8018c32 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018c80:	200098f0 	.word	0x200098f0
 8018c84:	200098f1 	.word	0x200098f1
 8018c88:	05f5e100 	.word	0x05f5e100

08018c8c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018c8c:	f7fd be22 	b.w	80168d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018c90 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018c90:	6581      	str	r1, [r0, #88]	; 0x58
 8018c92:	301c      	adds	r0, #28
 8018c94:	f00c ba6a 	b.w	802516c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018c98 <_ZN8touchgfx3HAL5touchEll>:
 8018c98:	b530      	push	{r4, r5, lr}
 8018c9a:	b087      	sub	sp, #28
 8018c9c:	4604      	mov	r4, r0
 8018c9e:	a804      	add	r0, sp, #16
 8018ca0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018ca4:	f001 fec6 	bl	801aa34 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018ca8:	9b04      	ldr	r3, [sp, #16]
 8018caa:	a906      	add	r1, sp, #24
 8018cac:	a803      	add	r0, sp, #12
 8018cae:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018cb2:	9b05      	ldr	r3, [sp, #20]
 8018cb4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018cb8:	f001 ff0a 	bl	801aad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018cbc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018cc0:	f104 001c 	add.w	r0, r4, #28
 8018cc4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018cc8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018ccc:	b189      	cbz	r1, 8018cf2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018cce:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018cd2:	9300      	str	r3, [sp, #0]
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018cda:	462a      	mov	r2, r5
 8018cdc:	f00c fa56 	bl	802518c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018ce0:	b128      	cbz	r0, 8018cee <_ZN8touchgfx3HAL5touchEll+0x56>
 8018ce2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018ce6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018ce8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018cec:	6623      	str	r3, [r4, #96]	; 0x60
 8018cee:	b007      	add	sp, #28
 8018cf0:	bd30      	pop	{r4, r5, pc}
 8018cf2:	f00c fa8f 	bl	8025214 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018cfc:	e7f1      	b.n	8018ce2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08018cfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018cfe:	b570      	push	{r4, r5, r6, lr}
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d050      	beq.n	8018da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018d04:	ea81 0002 	eor.w	r0, r1, r2
 8018d08:	07c6      	lsls	r6, r0, #31
 8018d0a:	d508      	bpl.n	8018d1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018d0c:	3a01      	subs	r2, #1
 8018d0e:	18cc      	adds	r4, r1, r3
 8018d10:	42a1      	cmp	r1, r4
 8018d12:	d048      	beq.n	8018da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018d14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018d18:	f801 0b01 	strb.w	r0, [r1], #1
 8018d1c:	e7f8      	b.n	8018d10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018d1e:	07d5      	lsls	r5, r2, #31
 8018d20:	bf42      	ittt	mi
 8018d22:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018d26:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018d2a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018d2e:	2b01      	cmp	r3, #1
 8018d30:	d915      	bls.n	8018d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018d32:	ea82 0001 	eor.w	r0, r2, r1
 8018d36:	0784      	lsls	r4, r0, #30
 8018d38:	d02d      	beq.n	8018d96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8018d3a:	1e94      	subs	r4, r2, #2
 8018d3c:	4608      	mov	r0, r1
 8018d3e:	18ce      	adds	r6, r1, r3
 8018d40:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8018d44:	f820 5b02 	strh.w	r5, [r0], #2
 8018d48:	1a35      	subs	r5, r6, r0
 8018d4a:	2d01      	cmp	r5, #1
 8018d4c:	d8f8      	bhi.n	8018d40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8018d4e:	1e98      	subs	r0, r3, #2
 8018d50:	f003 0301 	and.w	r3, r3, #1
 8018d54:	f020 0001 	bic.w	r0, r0, #1
 8018d58:	3002      	adds	r0, #2
 8018d5a:	4401      	add	r1, r0
 8018d5c:	4402      	add	r2, r0
 8018d5e:	1f14      	subs	r4, r2, #4
 8018d60:	4608      	mov	r0, r1
 8018d62:	18ce      	adds	r6, r1, r3
 8018d64:	1a35      	subs	r5, r6, r0
 8018d66:	2d03      	cmp	r5, #3
 8018d68:	d810      	bhi.n	8018d8c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8018d6a:	089c      	lsrs	r4, r3, #2
 8018d6c:	00a0      	lsls	r0, r4, #2
 8018d6e:	4401      	add	r1, r0
 8018d70:	3801      	subs	r0, #1
 8018d72:	4402      	add	r2, r0
 8018d74:	f06f 0003 	mvn.w	r0, #3
 8018d78:	fb00 3404 	mla	r4, r0, r4, r3
 8018d7c:	440c      	add	r4, r1
 8018d7e:	42a1      	cmp	r1, r4
 8018d80:	d011      	beq.n	8018da6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8018d82:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018d86:	f801 3b01 	strb.w	r3, [r1], #1
 8018d8a:	e7f8      	b.n	8018d7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8018d8c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8018d90:	f840 5b04 	str.w	r5, [r0], #4
 8018d94:	e7e6      	b.n	8018d64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8018d96:	0790      	lsls	r0, r2, #30
 8018d98:	d0e1      	beq.n	8018d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018d9a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018d9e:	3b02      	subs	r3, #2
 8018da0:	f821 0b02 	strh.w	r0, [r1], #2
 8018da4:	e7db      	b.n	8018d5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8018da6:	2001      	movs	r0, #1
 8018da8:	bd70      	pop	{r4, r5, r6, pc}

08018daa <_ZN8touchgfx3HAL7noTouchEv>:
 8018daa:	b510      	push	{r4, lr}
 8018dac:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018db0:	4604      	mov	r4, r0
 8018db2:	b153      	cbz	r3, 8018dca <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018db4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018db8:	2101      	movs	r1, #1
 8018dba:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018dbe:	301c      	adds	r0, #28
 8018dc0:	f00c fa28 	bl	8025214 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018dca:	bd10      	pop	{r4, pc}

08018dcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018dd0:	4605      	mov	r5, r0
 8018dd2:	6980      	ldr	r0, [r0, #24]
 8018dd4:	b085      	sub	sp, #20
 8018dd6:	460f      	mov	r7, r1
 8018dd8:	4690      	mov	r8, r2
 8018dda:	4699      	mov	r9, r3
 8018ddc:	b930      	cbnz	r0, 8018dec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018dde:	4b1f      	ldr	r3, [pc, #124]	; (8018e5c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018de0:	f44f 7198 	mov.w	r1, #304	; 0x130
 8018de4:	4a1e      	ldr	r2, [pc, #120]	; (8018e60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018de6:	481f      	ldr	r0, [pc, #124]	; (8018e64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8018de8:	f00c faa6 	bl	8025338 <__assert_func>
 8018dec:	ac04      	add	r4, sp, #16
 8018dee:	2600      	movs	r6, #0
 8018df0:	f844 6d04 	str.w	r6, [r4, #-4]!
 8018df4:	6806      	ldr	r6, [r0, #0]
 8018df6:	9401      	str	r4, [sp, #4]
 8018df8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8018dfc:	9400      	str	r4, [sp, #0]
 8018dfe:	6834      	ldr	r4, [r6, #0]
 8018e00:	47a0      	blx	r4
 8018e02:	4c19      	ldr	r4, [pc, #100]	; (8018e68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8018e04:	4606      	mov	r6, r0
 8018e06:	f8a4 9000 	strh.w	r9, [r4]
 8018e0a:	f7fa fe7f 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8018e0e:	6803      	ldr	r3, [r0, #0]
 8018e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e12:	4798      	blx	r3
 8018e14:	280c      	cmp	r0, #12
 8018e16:	d80f      	bhi.n	8018e38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8018e18:	e8df f000 	tbb	[pc, r0]
 8018e1c:	1b1b1207 	.word	0x1b1b1207
 8018e20:	1b1b1b1b 	.word	0x1b1b1b1b
 8018e24:	1b1b1b1b 	.word	0x1b1b1b1b
 8018e28:	1b          	.byte	0x1b
 8018e29:	00          	.byte	0x00
 8018e2a:	8823      	ldrh	r3, [r4, #0]
 8018e2c:	fb08 7203 	mla	r2, r8, r3, r7
 8018e30:	9b03      	ldr	r3, [sp, #12]
 8018e32:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018e36:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018e38:	4630      	mov	r0, r6
 8018e3a:	b005      	add	sp, #20
 8018e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e40:	8822      	ldrh	r2, [r4, #0]
 8018e42:	9b03      	ldr	r3, [sp, #12]
 8018e44:	fb08 7202 	mla	r2, r8, r2, r7
 8018e48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e4c:	1a9a      	subs	r2, r3, r2
 8018e4e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8018e50:	e7f2      	b.n	8018e38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8018e52:	4b06      	ldr	r3, [pc, #24]	; (8018e6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8018e54:	f240 114d 	movw	r1, #333	; 0x14d
 8018e58:	4a01      	ldr	r2, [pc, #4]	; (8018e60 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018e5a:	e7c4      	b.n	8018de6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018e5c:	08027831 	.word	0x08027831
 8018e60:	08027b42 	.word	0x08027b42
 8018e64:	08027876 	.word	0x08027876
 8018e68:	200098e4 	.word	0x200098e4
 8018e6c:	0802789c 	.word	0x0802789c

08018e70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8018e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e74:	4698      	mov	r8, r3
 8018e76:	6803      	ldr	r3, [r0, #0]
 8018e78:	b087      	sub	sp, #28
 8018e7a:	460e      	mov	r6, r1
 8018e7c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8018e7e:	4617      	mov	r7, r2
 8018e80:	4b0d      	ldr	r3, [pc, #52]	; (8018eb8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8018e82:	4604      	mov	r4, r0
 8018e84:	f8b3 9000 	ldrh.w	r9, [r3]
 8018e88:	f7fa fe40 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8018e8c:	6803      	ldr	r3, [r0, #0]
 8018e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e90:	4798      	blx	r3
 8018e92:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018e96:	463a      	mov	r2, r7
 8018e98:	4631      	mov	r1, r6
 8018e9a:	9302      	str	r3, [sp, #8]
 8018e9c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018ea0:	9301      	str	r3, [sp, #4]
 8018ea2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018ea6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8018eaa:	9300      	str	r3, [sp, #0]
 8018eac:	4620      	mov	r0, r4
 8018eae:	4643      	mov	r3, r8
 8018eb0:	47a8      	blx	r5
 8018eb2:	b007      	add	sp, #28
 8018eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eb8:	200098e4 	.word	0x200098e4

08018ebc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec0:	4606      	mov	r6, r0
 8018ec2:	b089      	sub	sp, #36	; 0x24
 8018ec4:	4610      	mov	r0, r2
 8018ec6:	460c      	mov	r4, r1
 8018ec8:	4691      	mov	r9, r2
 8018eca:	4698      	mov	r8, r3
 8018ecc:	f004 f80a 	bl	801cee4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	f000 8092 	beq.w	8018ffa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8018ed6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8019014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018eda:	ad08      	add	r5, sp, #32
 8018edc:	f8df b138 	ldr.w	fp, [pc, #312]	; 8019018 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8018ee0:	f8da 0000 	ldr.w	r0, [sl]
 8018ee4:	4f4a      	ldr	r7, [pc, #296]	; (8019010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8018ee6:	6802      	ldr	r2, [r0, #0]
 8018ee8:	6a12      	ldr	r2, [r2, #32]
 8018eea:	4790      	blx	r2
 8018eec:	f8da 0000 	ldr.w	r0, [sl]
 8018ef0:	6802      	ldr	r2, [r0, #0]
 8018ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018ef4:	4790      	blx	r2
 8018ef6:	f8bb 3000 	ldrh.w	r3, [fp]
 8018efa:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8018efe:	4628      	mov	r0, r5
 8018f00:	9300      	str	r3, [sp, #0]
 8018f02:	883b      	ldrh	r3, [r7, #0]
 8018f04:	9301      	str	r3, [sp, #4]
 8018f06:	f004 f8ad 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018f0a:	f8ab 0000 	strh.w	r0, [fp]
 8018f0e:	4628      	mov	r0, r5
 8018f10:	f004 f8e2 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018f14:	f8da b000 	ldr.w	fp, [sl]
 8018f18:	8038      	strh	r0, [r7, #0]
 8018f1a:	4648      	mov	r0, r9
 8018f1c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8018f20:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8018f24:	9302      	str	r3, [sp, #8]
 8018f26:	f003 ffdd 	bl	801cee4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018f2a:	f8da 2000 	ldr.w	r2, [sl]
 8018f2e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8018f32:	63d0      	str	r0, [r2, #60]	; 0x3c
 8018f34:	4620      	mov	r0, r4
 8018f36:	6822      	ldr	r2, [r4, #0]
 8018f38:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8018f3c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8018f3e:	2200      	movs	r2, #0
 8018f40:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8018f44:	4611      	mov	r1, r2
 8018f46:	4798      	blx	r3
 8018f48:	2201      	movs	r2, #1
 8018f4a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8018f4e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8018f52:	1d22      	adds	r2, r4, #4
 8018f54:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8018f58:	2900      	cmp	r1, #0
 8018f5a:	d051      	beq.n	8019000 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8018f5c:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8018f60:	2900      	cmp	r1, #0
 8018f62:	d04d      	beq.n	8019000 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8018f64:	6810      	ldr	r0, [r2, #0]
 8018f66:	f10d 0c18 	add.w	ip, sp, #24
 8018f6a:	6851      	ldr	r1, [r2, #4]
 8018f6c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018f70:	4641      	mov	r1, r8
 8018f72:	a806      	add	r0, sp, #24
 8018f74:	f7ff fc76 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 8018f78:	4628      	mov	r0, r5
 8018f7a:	f004 f9ff 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018f7e:	4680      	mov	r8, r0
 8018f80:	f7fa fdc4 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8018f84:	6802      	ldr	r2, [r0, #0]
 8018f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018f88:	4790      	blx	r2
 8018f8a:	4580      	cmp	r8, r0
 8018f8c:	d03d      	beq.n	801900a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8018f8e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8018f90:	b150      	cbz	r0, 8018fa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8018f92:	4628      	mov	r0, r5
 8018f94:	f004 f9f2 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018f98:	4605      	mov	r5, r0
 8018f9a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8018f9c:	6803      	ldr	r3, [r0, #0]
 8018f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa0:	4798      	blx	r3
 8018fa2:	1a2b      	subs	r3, r5, r0
 8018fa4:	4258      	negs	r0, r3
 8018fa6:	4158      	adcs	r0, r3
 8018fa8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8018fac:	2500      	movs	r5, #0
 8018fae:	6963      	ldr	r3, [r4, #20]
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	6822      	ldr	r2, [r4, #0]
 8018fb4:	a906      	add	r1, sp, #24
 8018fb6:	6165      	str	r5, [r4, #20]
 8018fb8:	9303      	str	r3, [sp, #12]
 8018fba:	6892      	ldr	r2, [r2, #8]
 8018fbc:	4790      	blx	r2
 8018fbe:	9b03      	ldr	r3, [sp, #12]
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	4652      	mov	r2, sl
 8018fc4:	6163      	str	r3, [r4, #20]
 8018fc6:	4649      	mov	r1, r9
 8018fc8:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8018fcc:	6823      	ldr	r3, [r4, #0]
 8018fce:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8018fd2:	4c10      	ldr	r4, [pc, #64]	; (8019014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8018fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fd6:	4798      	blx	r3
 8018fd8:	6820      	ldr	r0, [r4, #0]
 8018fda:	9b02      	ldr	r3, [sp, #8]
 8018fdc:	9a00      	ldr	r2, [sp, #0]
 8018fde:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8018fe2:	4b0d      	ldr	r3, [pc, #52]	; (8019018 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8018fe4:	801a      	strh	r2, [r3, #0]
 8018fe6:	4b0a      	ldr	r3, [pc, #40]	; (8019010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8018fe8:	9a01      	ldr	r2, [sp, #4]
 8018fea:	801a      	strh	r2, [r3, #0]
 8018fec:	6803      	ldr	r3, [r0, #0]
 8018fee:	6a1b      	ldr	r3, [r3, #32]
 8018ff0:	4798      	blx	r3
 8018ff2:	6820      	ldr	r0, [r4, #0]
 8018ff4:	6803      	ldr	r3, [r0, #0]
 8018ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ff8:	4798      	blx	r3
 8018ffa:	b009      	add	sp, #36	; 0x24
 8018ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019000:	ab06      	add	r3, sp, #24
 8019002:	6810      	ldr	r0, [r2, #0]
 8019004:	6851      	ldr	r1, [r2, #4]
 8019006:	c303      	stmia	r3!, {r0, r1}
 8019008:	e7b6      	b.n	8018f78 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801900a:	2000      	movs	r0, #0
 801900c:	e7cc      	b.n	8018fa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801900e:	bf00      	nop
 8019010:	200098e6 	.word	0x200098e6
 8019014:	200098ec 	.word	0x200098ec
 8019018:	200098e4 	.word	0x200098e4

0801901c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801901c:	4b07      	ldr	r3, [pc, #28]	; (801903c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801901e:	b510      	push	{r4, lr}
 8019020:	781b      	ldrb	r3, [r3, #0]
 8019022:	4604      	mov	r4, r0
 8019024:	b13b      	cbz	r3, 8019036 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019026:	6803      	ldr	r3, [r0, #0]
 8019028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801902a:	4798      	blx	r3
 801902c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801902e:	4283      	cmp	r3, r0
 8019030:	d101      	bne.n	8019036 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019032:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019034:	bd10      	pop	{r4, pc}
 8019036:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019038:	e7fc      	b.n	8019034 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801903a:	bf00      	nop
 801903c:	200098e8 	.word	0x200098e8

08019040 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019040:	4b0b      	ldr	r3, [pc, #44]	; (8019070 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8019042:	b510      	push	{r4, lr}
 8019044:	781b      	ldrb	r3, [r3, #0]
 8019046:	4604      	mov	r4, r0
 8019048:	b95b      	cbnz	r3, 8019062 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801904a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801904e:	2b02      	cmp	r3, #2
 8019050:	d007      	beq.n	8019062 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019052:	6840      	ldr	r0, [r0, #4]
 8019054:	f000 fbc8 	bl	80197e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019058:	b118      	cbz	r0, 8019062 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801905a:	6862      	ldr	r2, [r4, #4]
 801905c:	7a53      	ldrb	r3, [r2, #9]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d0fc      	beq.n	801905c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019062:	f7fd fc29 	bl	80168b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019066:	4620      	mov	r0, r4
 8019068:	f7ff ffd8 	bl	801901c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801906c:	bd10      	pop	{r4, pc}
 801906e:	bf00      	nop
 8019070:	200098e8 	.word	0x200098e8

08019074 <_ZN8touchgfx3HAL10initializeEv>:
 8019074:	b510      	push	{r4, lr}
 8019076:	4604      	mov	r4, r0
 8019078:	f7fd fbfa 	bl	8016870 <_ZN8touchgfx10OSWrappers10initializeEv>
 801907c:	6860      	ldr	r0, [r4, #4]
 801907e:	6803      	ldr	r3, [r0, #0]
 8019080:	68db      	ldr	r3, [r3, #12]
 8019082:	4798      	blx	r3
 8019084:	68e0      	ldr	r0, [r4, #12]
 8019086:	6803      	ldr	r3, [r0, #0]
 8019088:	689b      	ldr	r3, [r3, #8]
 801908a:	4798      	blx	r3
 801908c:	6823      	ldr	r3, [r4, #0]
 801908e:	4620      	mov	r0, r4
 8019090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019096:	4718      	bx	r3

08019098 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019098:	b508      	push	{r3, lr}
 801909a:	290c      	cmp	r1, #12
 801909c:	d817      	bhi.n	80190ce <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801909e:	e8df f001 	tbb	[pc, r1]
 80190a2:	090b      	.short	0x090b
 80190a4:	0d0d0d07 	.word	0x0d0d0d07
 80190a8:	1414140d 	.word	0x1414140d
 80190ac:	1414      	.short	0x1414
 80190ae:	0d          	.byte	0x0d
 80190af:	00          	.byte	0x00
 80190b0:	2020      	movs	r0, #32
 80190b2:	bd08      	pop	{r3, pc}
 80190b4:	2018      	movs	r0, #24
 80190b6:	e7fc      	b.n	80190b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80190b8:	2010      	movs	r0, #16
 80190ba:	e7fa      	b.n	80190b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80190bc:	4b05      	ldr	r3, [pc, #20]	; (80190d4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80190be:	f44f 710c 	mov.w	r1, #560	; 0x230
 80190c2:	4a05      	ldr	r2, [pc, #20]	; (80190d8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80190c4:	4805      	ldr	r0, [pc, #20]	; (80190dc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80190c6:	f00c f937 	bl	8025338 <__assert_func>
 80190ca:	2008      	movs	r0, #8
 80190cc:	e7f1      	b.n	80190b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80190ce:	2000      	movs	r0, #0
 80190d0:	e7ef      	b.n	80190b2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80190d2:	bf00      	nop
 80190d4:	0802796f 	.word	0x0802796f
 80190d8:	08027d04 	.word	0x08027d04
 80190dc:	08027876 	.word	0x08027876

080190e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80190e0:	b570      	push	{r4, r5, r6, lr}
 80190e2:	460d      	mov	r5, r1
 80190e4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80190e8:	4616      	mov	r6, r2
 80190ea:	461c      	mov	r4, r3
 80190ec:	f7ff ffd4 	bl	8019098 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80190f0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80190f4:	10c0      	asrs	r0, r0, #3
 80190f6:	fb06 5101 	mla	r1, r6, r1, r5
 80190fa:	fb00 4001 	mla	r0, r0, r1, r4
 80190fe:	bd70      	pop	{r4, r5, r6, pc}

08019100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8019100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019104:	b08a      	sub	sp, #40	; 0x28
 8019106:	f04f 0c00 	mov.w	ip, #0
 801910a:	4604      	mov	r4, r0
 801910c:	469a      	mov	sl, r3
 801910e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8019112:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8019116:	f1b8 0f02 	cmp.w	r8, #2
 801911a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801911e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019122:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8019126:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801912a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801912e:	f8cd c020 	str.w	ip, [sp, #32]
 8019132:	d030      	beq.n	8019196 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8019134:	2bff      	cmp	r3, #255	; 0xff
 8019136:	d12c      	bne.n	8019192 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8019138:	4560      	cmp	r0, ip
 801913a:	bf14      	ite	ne
 801913c:	2004      	movne	r0, #4
 801913e:	2001      	moveq	r0, #1
 8019140:	9204      	str	r2, [sp, #16]
 8019142:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019146:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801914a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801914e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019152:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801915a:	4620      	mov	r0, r4
 801915c:	f7ff ff5e 	bl	801901c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019160:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019164:	4603      	mov	r3, r0
 8019166:	4651      	mov	r1, sl
 8019168:	4620      	mov	r0, r4
 801916a:	e9cd 9700 	strd	r9, r7, [sp]
 801916e:	f7ff ffb7 	bl	80190e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019172:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019176:	9005      	str	r0, [sp, #20]
 8019178:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801917c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8019180:	b106      	cbz	r6, 8019184 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8019182:	b98d      	cbnz	r5, 80191a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8019184:	4b12      	ldr	r3, [pc, #72]	; (80191d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8019186:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801918a:	4a12      	ldr	r2, [pc, #72]	; (80191d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801918c:	4812      	ldr	r0, [pc, #72]	; (80191d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801918e:	f00c f8d3 	bl	8025338 <__assert_func>
 8019192:	2004      	movs	r0, #4
 8019194:	e7d4      	b.n	8019140 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019196:	2bff      	cmp	r3, #255	; 0xff
 8019198:	d104      	bne.n	80191a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801919a:	2800      	cmp	r0, #0
 801919c:	bf14      	ite	ne
 801919e:	2040      	movne	r0, #64	; 0x40
 80191a0:	2020      	moveq	r0, #32
 80191a2:	e7cd      	b.n	8019140 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80191a4:	2040      	movs	r0, #64	; 0x40
 80191a6:	e7cb      	b.n	8019140 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 80191a8:	6823      	ldr	r3, [r4, #0]
 80191aa:	4620      	mov	r0, r4
 80191ac:	9d02      	ldr	r5, [sp, #8]
 80191ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191b0:	4798      	blx	r3
 80191b2:	4228      	tst	r0, r5
 80191b4:	d104      	bne.n	80191c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 80191b6:	4b09      	ldr	r3, [pc, #36]	; (80191dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 80191b8:	f240 11b1 	movw	r1, #433	; 0x1b1
 80191bc:	4a05      	ldr	r2, [pc, #20]	; (80191d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 80191be:	e7e5      	b.n	801918c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 80191c0:	6860      	ldr	r0, [r4, #4]
 80191c2:	a902      	add	r1, sp, #8
 80191c4:	6803      	ldr	r3, [r0, #0]
 80191c6:	685b      	ldr	r3, [r3, #4]
 80191c8:	4798      	blx	r3
 80191ca:	b00a      	add	sp, #40	; 0x28
 80191cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191d0:	080278f2 	.word	0x080278f2
 80191d4:	08027ba6 	.word	0x08027ba6
 80191d8:	08027876 	.word	0x08027876
 80191dc:	0802792a 	.word	0x0802792a

080191e0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 80191e0:	b510      	push	{r4, lr}
 80191e2:	b08a      	sub	sp, #40	; 0x28
 80191e4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80191e8:	9408      	str	r4, [sp, #32]
 80191ea:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 80191ee:	9407      	str	r4, [sp, #28]
 80191f0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 80191f4:	9406      	str	r4, [sp, #24]
 80191f6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80191fa:	9405      	str	r4, [sp, #20]
 80191fc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8019200:	9404      	str	r4, [sp, #16]
 8019202:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8019206:	9403      	str	r4, [sp, #12]
 8019208:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801920c:	9402      	str	r4, [sp, #8]
 801920e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8019212:	e9cd 3400 	strd	r3, r4, [sp]
 8019216:	4613      	mov	r3, r2
 8019218:	2200      	movs	r2, #0
 801921a:	f7ff ff71 	bl	8019100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801921e:	b00a      	add	sp, #40	; 0x28
 8019220:	bd10      	pop	{r4, pc}
	...

08019224 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8019224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019226:	b08b      	sub	sp, #44	; 0x2c
 8019228:	4616      	mov	r6, r2
 801922a:	460d      	mov	r5, r1
 801922c:	461f      	mov	r7, r3
 801922e:	4604      	mov	r4, r0
 8019230:	f7fa fc6c 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8019234:	6803      	ldr	r3, [r0, #0]
 8019236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019238:	4798      	blx	r3
 801923a:	4b0e      	ldr	r3, [pc, #56]	; (8019274 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801923c:	2200      	movs	r2, #0
 801923e:	4629      	mov	r1, r5
 8019240:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019244:	881b      	ldrh	r3, [r3, #0]
 8019246:	4620      	mov	r0, r4
 8019248:	9306      	str	r3, [sp, #24]
 801924a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801924e:	9305      	str	r3, [sp, #20]
 8019250:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019254:	9304      	str	r3, [sp, #16]
 8019256:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801925a:	9303      	str	r3, [sp, #12]
 801925c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019260:	9302      	str	r3, [sp, #8]
 8019262:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019266:	e9cd 7300 	strd	r7, r3, [sp]
 801926a:	4633      	mov	r3, r6
 801926c:	f7ff ff48 	bl	8019100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019270:	b00b      	add	sp, #44	; 0x2c
 8019272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019274:	200098e4 	.word	0x200098e4

08019278 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8019278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801927c:	461f      	mov	r7, r3
 801927e:	4b14      	ldr	r3, [pc, #80]	; (80192d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8019280:	b08a      	sub	sp, #40	; 0x28
 8019282:	4616      	mov	r6, r2
 8019284:	f8b3 8000 	ldrh.w	r8, [r3]
 8019288:	460d      	mov	r5, r1
 801928a:	4604      	mov	r4, r0
 801928c:	f7fa fc3e 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8019290:	6803      	ldr	r3, [r0, #0]
 8019292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019294:	4798      	blx	r3
 8019296:	2302      	movs	r3, #2
 8019298:	9008      	str	r0, [sp, #32]
 801929a:	2200      	movs	r2, #0
 801929c:	4629      	mov	r1, r5
 801929e:	4620      	mov	r0, r4
 80192a0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 80192a4:	2301      	movs	r3, #1
 80192a6:	9305      	str	r3, [sp, #20]
 80192a8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80192ac:	9304      	str	r3, [sp, #16]
 80192ae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80192b2:	9303      	str	r3, [sp, #12]
 80192b4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80192b8:	9302      	str	r3, [sp, #8]
 80192ba:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80192be:	e9cd 7300 	strd	r7, r3, [sp]
 80192c2:	4633      	mov	r3, r6
 80192c4:	f7ff ff1c 	bl	8019100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80192c8:	b00a      	add	sp, #40	; 0x28
 80192ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192ce:	bf00      	nop
 80192d0:	200098e4 	.word	0x200098e4

080192d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 80192d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192d8:	b08b      	sub	sp, #44	; 0x2c
 80192da:	469b      	mov	fp, r3
 80192dc:	4604      	mov	r4, r0
 80192de:	4692      	mov	sl, r2
 80192e0:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80192e4:	2600      	movs	r6, #0
 80192e6:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80192ea:	4689      	mov	r9, r1
 80192ec:	2fff      	cmp	r7, #255	; 0xff
 80192ee:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80192f2:	9608      	str	r6, [sp, #32]
 80192f4:	bf14      	ite	ne
 80192f6:	2308      	movne	r3, #8
 80192f8:	2302      	moveq	r3, #2
 80192fa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80192fe:	f7ff fe8d 	bl	801901c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019302:	465a      	mov	r2, fp
 8019304:	4603      	mov	r3, r0
 8019306:	4651      	mov	r1, sl
 8019308:	4620      	mov	r0, r4
 801930a:	e9cd 8500 	strd	r8, r5, [sp]
 801930e:	f7ff fee7 	bl	80190e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019312:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019316:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801931a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801931e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8019322:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8019326:	f8ad 301a 	strh.w	r3, [sp, #26]
 801932a:	6823      	ldr	r3, [r4, #0]
 801932c:	9d02      	ldr	r5, [sp, #8]
 801932e:	9005      	str	r0, [sp, #20]
 8019330:	4620      	mov	r0, r4
 8019332:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019336:	f8ad 801e 	strh.w	r8, [sp, #30]
 801933a:	f8cd 9020 	str.w	r9, [sp, #32]
 801933e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019344:	4798      	blx	r3
 8019346:	4228      	tst	r0, r5
 8019348:	d106      	bne.n	8019358 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801934a:	4b07      	ldr	r3, [pc, #28]	; (8019368 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801934c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8019350:	4a06      	ldr	r2, [pc, #24]	; (801936c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8019352:	4807      	ldr	r0, [pc, #28]	; (8019370 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8019354:	f00b fff0 	bl	8025338 <__assert_func>
 8019358:	6860      	ldr	r0, [r4, #4]
 801935a:	a902      	add	r1, sp, #8
 801935c:	6803      	ldr	r3, [r0, #0]
 801935e:	685b      	ldr	r3, [r3, #4]
 8019360:	4798      	blx	r3
 8019362:	b00b      	add	sp, #44	; 0x2c
 8019364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019368:	0802792a 	.word	0x0802792a
 801936c:	08027c6f 	.word	0x08027c6f
 8019370:	08027876 	.word	0x08027876

08019374 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019374:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019378:	461f      	mov	r7, r3
 801937a:	4b0b      	ldr	r3, [pc, #44]	; (80193a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801937c:	460d      	mov	r5, r1
 801937e:	4616      	mov	r6, r2
 8019380:	f8b3 8000 	ldrh.w	r8, [r3]
 8019384:	4604      	mov	r4, r0
 8019386:	f7fa fbc1 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 801938a:	6803      	ldr	r3, [r0, #0]
 801938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801938e:	4798      	blx	r3
 8019390:	463b      	mov	r3, r7
 8019392:	4632      	mov	r2, r6
 8019394:	4629      	mov	r1, r5
 8019396:	e9cd 8000 	strd	r8, r0, [sp]
 801939a:	4620      	mov	r0, r4
 801939c:	f7ff fea0 	bl	80190e0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80193a0:	b002      	add	sp, #8
 80193a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193a6:	bf00      	nop
 80193a8:	200098e4 	.word	0x200098e4

080193ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80193ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193b0:	4698      	mov	r8, r3
 80193b2:	b088      	sub	sp, #32
 80193b4:	2300      	movs	r3, #0
 80193b6:	4617      	mov	r7, r2
 80193b8:	4604      	mov	r4, r0
 80193ba:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80193be:	9306      	str	r3, [sp, #24]
 80193c0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80193c4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80193c8:	f8ad 6010 	strh.w	r6, [sp, #16]
 80193cc:	f8ad 5012 	strh.w	r5, [sp, #18]
 80193d0:	e9cd 3100 	strd	r3, r1, [sp]
 80193d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80193d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80193dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80193e0:	f88d 301c 	strb.w	r3, [sp, #28]
 80193e4:	f7ff fe1a 	bl	801901c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80193e8:	4642      	mov	r2, r8
 80193ea:	4603      	mov	r3, r0
 80193ec:	4639      	mov	r1, r7
 80193ee:	4620      	mov	r0, r4
 80193f0:	f7ff ffc0 	bl	8019374 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80193f4:	4b16      	ldr	r3, [pc, #88]	; (8019450 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 80193f6:	9003      	str	r0, [sp, #12]
 80193f8:	881b      	ldrh	r3, [r3, #0]
 80193fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80193fe:	f7fa fb85 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8019402:	6803      	ldr	r3, [r0, #0]
 8019404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019406:	4798      	blx	r3
 8019408:	f88d 001e 	strb.w	r0, [sp, #30]
 801940c:	f88d 001d 	strb.w	r0, [sp, #29]
 8019410:	b106      	cbz	r6, 8019414 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8019412:	b935      	cbnz	r5, 8019422 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8019414:	4b0f      	ldr	r3, [pc, #60]	; (8019454 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8019416:	f240 11cd 	movw	r1, #461	; 0x1cd
 801941a:	4a0f      	ldr	r2, [pc, #60]	; (8019458 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801941c:	480f      	ldr	r0, [pc, #60]	; (801945c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801941e:	f00b ff8b 	bl	8025338 <__assert_func>
 8019422:	6823      	ldr	r3, [r4, #0]
 8019424:	4620      	mov	r0, r4
 8019426:	9d00      	ldr	r5, [sp, #0]
 8019428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801942a:	4798      	blx	r3
 801942c:	4228      	tst	r0, r5
 801942e:	d104      	bne.n	801943a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8019430:	4b0b      	ldr	r3, [pc, #44]	; (8019460 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8019432:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8019436:	4a08      	ldr	r2, [pc, #32]	; (8019458 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8019438:	e7f0      	b.n	801941c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801943a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801943c:	4669      	mov	r1, sp
 801943e:	6860      	ldr	r0, [r4, #4]
 8019440:	9306      	str	r3, [sp, #24]
 8019442:	6803      	ldr	r3, [r0, #0]
 8019444:	685b      	ldr	r3, [r3, #4]
 8019446:	4798      	blx	r3
 8019448:	b008      	add	sp, #32
 801944a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801944e:	bf00      	nop
 8019450:	200098e4 	.word	0x200098e4
 8019454:	080278f2 	.word	0x080278f2
 8019458:	08027a58 	.word	0x08027a58
 801945c:	08027876 	.word	0x08027876
 8019460:	0802792a 	.word	0x0802792a

08019464 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8019464:	b570      	push	{r4, r5, r6, lr}
 8019466:	b08a      	sub	sp, #40	; 0x28
 8019468:	4604      	mov	r4, r0
 801946a:	466b      	mov	r3, sp
 801946c:	e883 0006 	stmia.w	r3, {r1, r2}
 8019470:	4b1f      	ldr	r3, [pc, #124]	; (80194f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8019472:	781b      	ldrb	r3, [r3, #0]
 8019474:	b933      	cbnz	r3, 8019484 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8019476:	4b1f      	ldr	r3, [pc, #124]	; (80194f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8019478:	f240 11f9 	movw	r1, #505	; 0x1f9
 801947c:	4a1e      	ldr	r2, [pc, #120]	; (80194f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801947e:	481f      	ldr	r0, [pc, #124]	; (80194fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019480:	f00b ff5a 	bl	8025338 <__assert_func>
 8019484:	2300      	movs	r3, #0
 8019486:	f8bd 5000 	ldrh.w	r5, [sp]
 801948a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801948e:	9308      	str	r3, [sp, #32]
 8019490:	2301      	movs	r3, #1
 8019492:	9302      	str	r3, [sp, #8]
 8019494:	6803      	ldr	r3, [r0, #0]
 8019496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019498:	4798      	blx	r3
 801949a:	4632      	mov	r2, r6
 801949c:	4629      	mov	r1, r5
 801949e:	4603      	mov	r3, r0
 80194a0:	4620      	mov	r0, r4
 80194a2:	f7ff ff67 	bl	8019374 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80194a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80194a8:	9003      	str	r0, [sp, #12]
 80194aa:	9305      	str	r3, [sp, #20]
 80194ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80194b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80194b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80194b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80194bc:	4b10      	ldr	r3, [pc, #64]	; (8019500 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80194be:	881b      	ldrh	r3, [r3, #0]
 80194c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80194c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80194c8:	f7fa fb20 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 80194cc:	6803      	ldr	r3, [r0, #0]
 80194ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194d0:	4798      	blx	r3
 80194d2:	23ff      	movs	r3, #255	; 0xff
 80194d4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80194d8:	a902      	add	r1, sp, #8
 80194da:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80194de:	6860      	ldr	r0, [r4, #4]
 80194e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80194e4:	6803      	ldr	r3, [r0, #0]
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	4798      	blx	r3
 80194ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80194ec:	b00a      	add	sp, #40	; 0x28
 80194ee:	bd70      	pop	{r4, r5, r6, pc}
 80194f0:	200098e9 	.word	0x200098e9
 80194f4:	080277c3 	.word	0x080277c3
 80194f8:	08027afc 	.word	0x08027afc
 80194fc:	08027876 	.word	0x08027876
 8019500:	200098e4 	.word	0x200098e4

08019504 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019506:	b08b      	sub	sp, #44	; 0x2c
 8019508:	4604      	mov	r4, r0
 801950a:	466d      	mov	r5, sp
 801950c:	e885 0006 	stmia.w	r5, {r1, r2}
 8019510:	461d      	mov	r5, r3
 8019512:	2300      	movs	r3, #0
 8019514:	f8bd 6000 	ldrh.w	r6, [sp]
 8019518:	9308      	str	r3, [sp, #32]
 801951a:	2301      	movs	r3, #1
 801951c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019520:	9302      	str	r3, [sp, #8]
 8019522:	6803      	ldr	r3, [r0, #0]
 8019524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019526:	4798      	blx	r3
 8019528:	463a      	mov	r2, r7
 801952a:	4631      	mov	r1, r6
 801952c:	4603      	mov	r3, r0
 801952e:	4620      	mov	r0, r4
 8019530:	f7ff ff20 	bl	8019374 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019534:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019538:	9003      	str	r0, [sp, #12]
 801953a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801953e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019542:	9505      	str	r5, [sp, #20]
 8019544:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019548:	4b0d      	ldr	r3, [pc, #52]	; (8019580 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801954a:	881b      	ldrh	r3, [r3, #0]
 801954c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019550:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019552:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019556:	f7fa fad9 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 801955a:	6803      	ldr	r3, [r0, #0]
 801955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801955e:	4798      	blx	r3
 8019560:	23ff      	movs	r3, #255	; 0xff
 8019562:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019566:	a902      	add	r1, sp, #8
 8019568:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801956c:	6860      	ldr	r0, [r4, #4]
 801956e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019572:	6803      	ldr	r3, [r0, #0]
 8019574:	685b      	ldr	r3, [r3, #4]
 8019576:	4798      	blx	r3
 8019578:	4628      	mov	r0, r5
 801957a:	b00b      	add	sp, #44	; 0x2c
 801957c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801957e:	bf00      	nop
 8019580:	200098e4 	.word	0x200098e4

08019584 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019584:	b570      	push	{r4, r5, r6, lr}
 8019586:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801958a:	4604      	mov	r4, r0
 801958c:	b19b      	cbz	r3, 80195b6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801958e:	2002      	movs	r0, #2
 8019590:	f7fc fefa 	bl	8016388 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019594:	2300      	movs	r3, #0
 8019596:	4620      	mov	r0, r4
 8019598:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801959c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80195a0:	6823      	ldr	r3, [r4, #0]
 80195a2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80195a6:	f7ff fd39 	bl	801901c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80195aa:	4601      	mov	r1, r0
 80195ac:	4620      	mov	r0, r4
 80195ae:	462b      	mov	r3, r5
 80195b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195b4:	4718      	bx	r3
 80195b6:	bd70      	pop	{r4, r5, r6, pc}

080195b8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80195b8:	4770      	bx	lr

080195ba <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80195ba:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80195be:	1a13      	subs	r3, r2, r0
 80195c0:	4258      	negs	r0, r3
 80195c2:	4158      	adcs	r0, r3
 80195c4:	4770      	bx	lr

080195c6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80195c6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80195ca:	1a9b      	subs	r3, r3, r2
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	bfdc      	itt	le
 80195d0:	6882      	ldrle	r2, [r0, #8]
 80195d2:	189b      	addle	r3, r3, r2
 80195d4:	2b01      	cmp	r3, #1
 80195d6:	bfcc      	ite	gt
 80195d8:	2000      	movgt	r0, #0
 80195da:	2001      	movle	r0, #1
 80195dc:	4770      	bx	lr

080195de <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80195de:	6902      	ldr	r2, [r0, #16]
 80195e0:	6840      	ldr	r0, [r0, #4]
 80195e2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80195e6:	4770      	bx	lr

080195e8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80195e8:	6803      	ldr	r3, [r0, #0]
 80195ea:	691b      	ldr	r3, [r3, #16]
 80195ec:	4718      	bx	r3

080195ee <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80195ee:	4770      	bx	lr

080195f0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80195f0:	4770      	bx	lr
	...

080195f4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80195f4:	2301      	movs	r3, #1
 80195f6:	b570      	push	{r4, r5, r6, lr}
 80195f8:	7203      	strb	r3, [r0, #8]
 80195fa:	4604      	mov	r4, r0
 80195fc:	6840      	ldr	r0, [r0, #4]
 80195fe:	6803      	ldr	r3, [r0, #0]
 8019600:	699b      	ldr	r3, [r3, #24]
 8019602:	4798      	blx	r3
 8019604:	6803      	ldr	r3, [r0, #0]
 8019606:	4605      	mov	r5, r0
 8019608:	2b08      	cmp	r3, #8
 801960a:	d01e      	beq.n	801964a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801960c:	d80b      	bhi.n	8019626 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801960e:	2b02      	cmp	r3, #2
 8019610:	d027      	beq.n	8019662 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019612:	2b04      	cmp	r3, #4
 8019614:	d011      	beq.n	801963a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019616:	2b01      	cmp	r3, #1
 8019618:	d028      	beq.n	801966c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801961a:	4b17      	ldr	r3, [pc, #92]	; (8019678 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801961c:	218b      	movs	r1, #139	; 0x8b
 801961e:	4a17      	ldr	r2, [pc, #92]	; (801967c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019620:	4817      	ldr	r0, [pc, #92]	; (8019680 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019622:	f00b fe89 	bl	8025338 <__assert_func>
 8019626:	2b40      	cmp	r3, #64	; 0x40
 8019628:	d020      	beq.n	801966c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801962a:	d801      	bhi.n	8019630 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801962c:	2b20      	cmp	r3, #32
 801962e:	e7f3      	b.n	8019618 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019630:	2b80      	cmp	r3, #128	; 0x80
 8019632:	d01b      	beq.n	801966c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019638:	e7ee      	b.n	8019618 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801963a:	6823      	ldr	r3, [r4, #0]
 801963c:	7f01      	ldrb	r1, [r0, #28]
 801963e:	4620      	mov	r0, r4
 8019640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019642:	4798      	blx	r3
 8019644:	6823      	ldr	r3, [r4, #0]
 8019646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019648:	e006      	b.n	8019658 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801964a:	6823      	ldr	r3, [r4, #0]
 801964c:	7f01      	ldrb	r1, [r0, #28]
 801964e:	4620      	mov	r0, r4
 8019650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019652:	4798      	blx	r3
 8019654:	6823      	ldr	r3, [r4, #0]
 8019656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019658:	4629      	mov	r1, r5
 801965a:	4620      	mov	r0, r4
 801965c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019660:	4718      	bx	r3
 8019662:	6823      	ldr	r3, [r4, #0]
 8019664:	4620      	mov	r0, r4
 8019666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019668:	4798      	blx	r3
 801966a:	e7f3      	b.n	8019654 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801966c:	6823      	ldr	r3, [r4, #0]
 801966e:	4620      	mov	r0, r4
 8019670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019672:	4798      	blx	r3
 8019674:	e7e6      	b.n	8019644 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8019676:	bf00      	nop
 8019678:	08027d4d 	.word	0x08027d4d
 801967c:	08027e5c 	.word	0x08027e5c
 8019680:	08027d72 	.word	0x08027d72

08019684 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019684:	b570      	push	{r4, r5, r6, lr}
 8019686:	4604      	mov	r4, r0
 8019688:	460e      	mov	r6, r1
 801968a:	6860      	ldr	r0, [r4, #4]
 801968c:	6803      	ldr	r3, [r0, #0]
 801968e:	685b      	ldr	r3, [r3, #4]
 8019690:	4798      	blx	r3
 8019692:	2800      	cmp	r0, #0
 8019694:	d1f9      	bne.n	801968a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019696:	4d0b      	ldr	r5, [pc, #44]	; (80196c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8019698:	6828      	ldr	r0, [r5, #0]
 801969a:	6803      	ldr	r3, [r0, #0]
 801969c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801969e:	4798      	blx	r3
 80196a0:	f7fd f926 	bl	80168f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80196a4:	6860      	ldr	r0, [r4, #4]
 80196a6:	4631      	mov	r1, r6
 80196a8:	6803      	ldr	r3, [r0, #0]
 80196aa:	689b      	ldr	r3, [r3, #8]
 80196ac:	4798      	blx	r3
 80196ae:	6823      	ldr	r3, [r4, #0]
 80196b0:	4620      	mov	r0, r4
 80196b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196b4:	4798      	blx	r3
 80196b6:	6828      	ldr	r0, [r5, #0]
 80196b8:	6803      	ldr	r3, [r0, #0]
 80196ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196c0:	4718      	bx	r3
 80196c2:	bf00      	nop
 80196c4:	200098ec 	.word	0x200098ec

080196c8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80196c8:	b508      	push	{r3, lr}
 80196ca:	f7fd f8f5 	bl	80168b8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80196ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80196d2:	f7fd b8ff 	b.w	80168d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080196d6 <_ZN8touchgfx13DMA_Interface5startEv>:
 80196d6:	b510      	push	{r4, lr}
 80196d8:	4604      	mov	r4, r0
 80196da:	6840      	ldr	r0, [r0, #4]
 80196dc:	6803      	ldr	r3, [r0, #0]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	4798      	blx	r3
 80196e2:	b948      	cbnz	r0, 80196f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80196e4:	7a63      	ldrb	r3, [r4, #9]
 80196e6:	b13b      	cbz	r3, 80196f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80196e8:	7a23      	ldrb	r3, [r4, #8]
 80196ea:	b92b      	cbnz	r3, 80196f8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80196ec:	6823      	ldr	r3, [r4, #0]
 80196ee:	4620      	mov	r0, r4
 80196f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196f6:	4718      	bx	r3
 80196f8:	bd10      	pop	{r4, pc}
	...

080196fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80196fc:	b510      	push	{r4, lr}
 80196fe:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8019702:	1b12      	subs	r2, r2, r4
 8019704:	2a00      	cmp	r2, #0
 8019706:	bfdc      	itt	le
 8019708:	6883      	ldrle	r3, [r0, #8]
 801970a:	18d2      	addle	r2, r2, r3
 801970c:	2a01      	cmp	r2, #1
 801970e:	dd18      	ble.n	8019742 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019710:	6843      	ldr	r3, [r0, #4]
 8019712:	f101 021c 	add.w	r2, r1, #28
 8019716:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801971a:	f851 4b04 	ldr.w	r4, [r1], #4
 801971e:	4291      	cmp	r1, r2
 8019720:	f843 4b04 	str.w	r4, [r3], #4
 8019724:	d1f9      	bne.n	801971a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019726:	880a      	ldrh	r2, [r1, #0]
 8019728:	801a      	strh	r2, [r3, #0]
 801972a:	788a      	ldrb	r2, [r1, #2]
 801972c:	709a      	strb	r2, [r3, #2]
 801972e:	68c3      	ldr	r3, [r0, #12]
 8019730:	6882      	ldr	r2, [r0, #8]
 8019732:	f3bf 8f5b 	dmb	ish
 8019736:	3301      	adds	r3, #1
 8019738:	429a      	cmp	r2, r3
 801973a:	bfd8      	it	le
 801973c:	1a9b      	suble	r3, r3, r2
 801973e:	60c3      	str	r3, [r0, #12]
 8019740:	bd10      	pop	{r4, pc}
 8019742:	4b03      	ldr	r3, [pc, #12]	; (8019750 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019744:	2139      	movs	r1, #57	; 0x39
 8019746:	4a03      	ldr	r2, [pc, #12]	; (8019754 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019748:	4803      	ldr	r0, [pc, #12]	; (8019758 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801974a:	f00b fdf5 	bl	8025338 <__assert_func>
 801974e:	bf00      	nop
 8019750:	08027d98 	.word	0x08027d98
 8019754:	08027e8c 	.word	0x08027e8c
 8019758:	08027d72 	.word	0x08027d72

0801975c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801975c:	b510      	push	{r4, lr}
 801975e:	6803      	ldr	r3, [r0, #0]
 8019760:	4604      	mov	r4, r0
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	4798      	blx	r3
 8019766:	b128      	cbz	r0, 8019774 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019768:	4b07      	ldr	r3, [pc, #28]	; (8019788 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801976a:	213f      	movs	r1, #63	; 0x3f
 801976c:	4a07      	ldr	r2, [pc, #28]	; (801978c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801976e:	4808      	ldr	r0, [pc, #32]	; (8019790 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019770:	f00b fde2 	bl	8025338 <__assert_func>
 8019774:	6923      	ldr	r3, [r4, #16]
 8019776:	68a2      	ldr	r2, [r4, #8]
 8019778:	f3bf 8f5b 	dmb	ish
 801977c:	3301      	adds	r3, #1
 801977e:	429a      	cmp	r2, r3
 8019780:	bfd8      	it	le
 8019782:	1a9b      	suble	r3, r3, r2
 8019784:	6123      	str	r3, [r4, #16]
 8019786:	bd10      	pop	{r4, pc}
 8019788:	08027dbb 	.word	0x08027dbb
 801978c:	08027eda 	.word	0x08027eda
 8019790:	08027d72 	.word	0x08027d72

08019794 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019794:	b570      	push	{r4, r5, r6, lr}
 8019796:	4604      	mov	r4, r0
 8019798:	6840      	ldr	r0, [r0, #4]
 801979a:	6803      	ldr	r3, [r0, #0]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	4798      	blx	r3
 80197a0:	4605      	mov	r5, r0
 80197a2:	b930      	cbnz	r0, 80197b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80197a4:	7a23      	ldrb	r3, [r4, #8]
 80197a6:	b123      	cbz	r3, 80197b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80197a8:	6860      	ldr	r0, [r4, #4]
 80197aa:	6803      	ldr	r3, [r0, #0]
 80197ac:	695b      	ldr	r3, [r3, #20]
 80197ae:	4798      	blx	r3
 80197b0:	7225      	strb	r5, [r4, #8]
 80197b2:	6860      	ldr	r0, [r4, #4]
 80197b4:	6803      	ldr	r3, [r0, #0]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	4798      	blx	r3
 80197ba:	b928      	cbnz	r0, 80197c8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80197bc:	6823      	ldr	r3, [r4, #0]
 80197be:	4620      	mov	r0, r4
 80197c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197c6:	4718      	bx	r3
 80197c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197cc:	f7fd b89c 	b.w	8016908 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080197d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80197d0:	b510      	push	{r4, lr}
 80197d2:	6082      	str	r2, [r0, #8]
 80197d4:	2200      	movs	r2, #0
 80197d6:	4c03      	ldr	r4, [pc, #12]	; (80197e4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80197d8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80197dc:	e9c0 4100 	strd	r4, r1, [r0]
 80197e0:	bd10      	pop	{r4, pc}
 80197e2:	bf00      	nop
 80197e4:	08027e40 	.word	0x08027e40

080197e8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80197e8:	6840      	ldr	r0, [r0, #4]
 80197ea:	6803      	ldr	r3, [r0, #0]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	4718      	bx	r3

080197f0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80197f0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80197f4:	4770      	bx	lr

080197f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80197f6:	b570      	push	{r4, r5, r6, lr}
 80197f8:	790b      	ldrb	r3, [r1, #4]
 80197fa:	4604      	mov	r4, r0
 80197fc:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019800:	460e      	mov	r6, r1
 8019802:	2b00      	cmp	r3, #0
 8019804:	bf0c      	ite	eq
 8019806:	2301      	moveq	r3, #1
 8019808:	2300      	movne	r3, #0
 801980a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801980e:	d110      	bne.n	8019832 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019810:	b185      	cbz	r5, 8019834 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 8019812:	7933      	ldrb	r3, [r6, #4]
 8019814:	2b01      	cmp	r3, #1
 8019816:	d113      	bne.n	8019840 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019818:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801981a:	b188      	cbz	r0, 8019840 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801981c:	6803      	ldr	r3, [r0, #0]
 801981e:	68db      	ldr	r3, [r3, #12]
 8019820:	4798      	blx	r3
 8019822:	b168      	cbz	r0, 8019840 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019824:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019826:	4621      	mov	r1, r4
 8019828:	6803      	ldr	r3, [r0, #0]
 801982a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801982e:	689b      	ldr	r3, [r3, #8]
 8019830:	4718      	bx	r3
 8019832:	b12d      	cbz	r5, 8019840 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019834:	6823      	ldr	r3, [r4, #0]
 8019836:	4620      	mov	r0, r4
 8019838:	695b      	ldr	r3, [r3, #20]
 801983a:	4798      	blx	r3
 801983c:	2d00      	cmp	r5, #0
 801983e:	d1e8      	bne.n	8019812 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019840:	bd70      	pop	{r4, r5, r6, pc}
	...

08019844 <_ZNK8touchgfx9TypedText7getTextEv>:
 8019844:	b510      	push	{r4, lr}
 8019846:	4604      	mov	r4, r0
 8019848:	f7f9 ff40 	bl	80136cc <_ZNK8touchgfx9TypedText11assertValidEv>
 801984c:	4b03      	ldr	r3, [pc, #12]	; (801985c <_ZNK8touchgfx9TypedText7getTextEv+0x18>)
 801984e:	8821      	ldrh	r1, [r4, #0]
 8019850:	6818      	ldr	r0, [r3, #0]
 8019852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019856:	f7fc bae9 	b.w	8015e2c <_ZNK8touchgfx5Texts7getTextEt>
 801985a:	bf00      	nop
 801985c:	20009968 	.word	0x20009968

08019860 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019860:	b570      	push	{r4, r5, r6, lr}
 8019862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019866:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019868:	4604      	mov	r4, r0
 801986a:	429a      	cmp	r2, r3
 801986c:	d00c      	beq.n	8019888 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801986e:	f850 3b26 	ldr.w	r3, [r0], #38
 8019872:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8019874:	f7ff ffe6 	bl	8019844 <_ZNK8touchgfx9TypedText7getTextEv>
 8019878:	2300      	movs	r3, #0
 801987a:	4601      	mov	r1, r0
 801987c:	46ac      	mov	ip, r5
 801987e:	4620      	mov	r0, r4
 8019880:	461a      	mov	r2, r3
 8019882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019886:	4760      	bx	ip
 8019888:	2000      	movs	r0, #0
 801988a:	bd70      	pop	{r4, r5, r6, pc}

0801988c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801988c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801988e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019892:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019894:	429a      	cmp	r2, r3
 8019896:	d016      	beq.n	80198c6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8019898:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801989c:	4620      	mov	r0, r4
 801989e:	f7f9 fee1 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 80198a2:	6803      	ldr	r3, [r0, #0]
 80198a4:	4605      	mov	r5, r0
 80198a6:	4620      	mov	r0, r4
 80198a8:	69de      	ldr	r6, [r3, #28]
 80198aa:	f7f9 fef7 	bl	801369c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80198ae:	4607      	mov	r7, r0
 80198b0:	4620      	mov	r0, r4
 80198b2:	f7ff ffc7 	bl	8019844 <_ZNK8touchgfx9TypedText7getTextEv>
 80198b6:	2300      	movs	r3, #0
 80198b8:	4602      	mov	r2, r0
 80198ba:	4639      	mov	r1, r7
 80198bc:	9300      	str	r3, [sp, #0]
 80198be:	4628      	mov	r0, r5
 80198c0:	47b0      	blx	r6
 80198c2:	b003      	add	sp, #12
 80198c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198c6:	2000      	movs	r0, #0
 80198c8:	e7fb      	b.n	80198c2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

080198ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80198ca:	b40e      	push	{r1, r2, r3}
 80198cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80198d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80198d6:	b09b      	sub	sp, #108	; 0x6c
 80198d8:	4604      	mov	r4, r0
 80198da:	429a      	cmp	r2, r3
 80198dc:	d03f      	beq.n	801995e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 80198de:	f100 0726 	add.w	r7, r0, #38	; 0x26
 80198e2:	ab22      	add	r3, sp, #136	; 0x88
 80198e4:	4638      	mov	r0, r7
 80198e6:	9303      	str	r3, [sp, #12]
 80198e8:	f7f9 febc 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 80198ec:	6803      	ldr	r3, [r0, #0]
 80198ee:	4680      	mov	r8, r0
 80198f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198f2:	4798      	blx	r3
 80198f4:	4606      	mov	r6, r0
 80198f6:	b205      	sxth	r5, r0
 80198f8:	a804      	add	r0, sp, #16
 80198fa:	f002 fdf9 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 80198fe:	f8d8 3000 	ldr.w	r3, [r8]
 8019902:	4640      	mov	r0, r8
 8019904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019906:	4798      	blx	r3
 8019908:	9a03      	ldr	r2, [sp, #12]
 801990a:	4603      	mov	r3, r0
 801990c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801990e:	a804      	add	r0, sp, #16
 8019910:	f002 fe0b 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019914:	4638      	mov	r0, r7
 8019916:	f7f9 fec1 	bl	801369c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801991a:	4680      	mov	r8, r0
 801991c:	4638      	mov	r0, r7
 801991e:	f7f9 fea1 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 8019922:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8019926:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801992a:	4642      	mov	r2, r8
 801992c:	9300      	str	r3, [sp, #0]
 801992e:	4603      	mov	r3, r0
 8019930:	a804      	add	r0, sp, #16
 8019932:	f000 fea4 	bl	801a67e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019936:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801993a:	b203      	sxth	r3, r0
 801993c:	18a9      	adds	r1, r5, r2
 801993e:	2900      	cmp	r1, #0
 8019940:	dd0b      	ble.n	801995a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8019942:	3b01      	subs	r3, #1
 8019944:	fb13 f302 	smulbb	r3, r3, r2
 8019948:	fb16 3300 	smlabb	r3, r6, r0, r3
 801994c:	b21d      	sxth	r5, r3
 801994e:	4628      	mov	r0, r5
 8019950:	b01b      	add	sp, #108	; 0x6c
 8019952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019956:	b003      	add	sp, #12
 8019958:	4770      	bx	lr
 801995a:	2b00      	cmp	r3, #0
 801995c:	dcf7      	bgt.n	801994e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801995e:	2500      	movs	r5, #0
 8019960:	e7f5      	b.n	801994e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

08019964 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801996c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801996e:	b08d      	sub	sp, #52	; 0x34
 8019970:	4604      	mov	r4, r0
 8019972:	429e      	cmp	r6, r3
 8019974:	4688      	mov	r8, r1
 8019976:	d04b      	beq.n	8019a10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8019978:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801997c:	4628      	mov	r0, r5
 801997e:	f7f9 fe71 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 8019982:	4607      	mov	r7, r0
 8019984:	2800      	cmp	r0, #0
 8019986:	d043      	beq.n	8019a10 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8019988:	4628      	mov	r0, r5
 801998a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801998e:	f7f9 fe9d 	bl	80136cc <_ZNK8touchgfx9TypedText11assertValidEv>
 8019992:	4b21      	ldr	r3, [pc, #132]	; (8019a18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8019994:	4628      	mov	r0, r5
 8019996:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80199a0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80199a4:	785e      	ldrb	r6, [r3, #1]
 80199a6:	f7f9 fe79 	bl	801369c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80199aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80199ac:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80199b0:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80199b4:	9309      	str	r3, [sp, #36]	; 0x24
 80199b6:	4b19      	ldr	r3, [pc, #100]	; (8019a1c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 80199b8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80199c2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80199c6:	9707      	str	r7, [sp, #28]
 80199c8:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80199cc:	f88d 6020 	strb.w	r6, [sp, #32]
 80199d0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80199d4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80199d8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80199dc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80199e0:	b10a      	cbz	r2, 80199e6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 80199e2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80199e4:	b906      	cbnz	r6, 80199e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 80199e6:	689e      	ldr	r6, [r3, #8]
 80199e8:	af05      	add	r7, sp, #20
 80199ea:	4621      	mov	r1, r4
 80199ec:	4638      	mov	r0, r7
 80199ee:	f001 ff38 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80199f2:	4628      	mov	r0, r5
 80199f4:	f7ff ff26 	bl	8019844 <_ZNK8touchgfx9TypedText7getTextEv>
 80199f8:	2300      	movs	r3, #0
 80199fa:	9001      	str	r0, [sp, #4]
 80199fc:	4630      	mov	r0, r6
 80199fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019a02:	ab07      	add	r3, sp, #28
 8019a04:	9300      	str	r3, [sp, #0]
 8019a06:	4643      	mov	r3, r8
 8019a08:	e897 0006 	ldmia.w	r7, {r1, r2}
 8019a0c:	f000 fc04 	bl	801a218 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019a10:	b00d      	add	sp, #52	; 0x34
 8019a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a16:	bf00      	nop
 8019a18:	2000995c 	.word	0x2000995c
 8019a1c:	200098ec 	.word	0x200098ec

08019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019a20:	b570      	push	{r4, r5, r6, lr}
 8019a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019a26:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019a28:	4604      	mov	r4, r0
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d021      	beq.n	8019a72 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8019a2e:	6803      	ldr	r3, [r0, #0]
 8019a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a32:	4798      	blx	r3
 8019a34:	6823      	ldr	r3, [r4, #0]
 8019a36:	4605      	mov	r5, r0
 8019a38:	4620      	mov	r0, r4
 8019a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019a3c:	4798      	blx	r3
 8019a3e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8019a42:	4606      	mov	r6, r0
 8019a44:	b22d      	sxth	r5, r5
 8019a46:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019a4a:	6823      	ldr	r3, [r4, #0]
 8019a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a4e:	d109      	bne.n	8019a64 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8019a50:	4629      	mov	r1, r5
 8019a52:	4620      	mov	r0, r4
 8019a54:	4798      	blx	r3
 8019a56:	6823      	ldr	r3, [r4, #0]
 8019a58:	4631      	mov	r1, r6
 8019a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a62:	4718      	bx	r3
 8019a64:	4601      	mov	r1, r0
 8019a66:	4620      	mov	r0, r4
 8019a68:	4798      	blx	r3
 8019a6a:	6823      	ldr	r3, [r4, #0]
 8019a6c:	4629      	mov	r1, r5
 8019a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a70:	e7f4      	b.n	8019a5c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8019a72:	bd70      	pop	{r4, r5, r6, pc}

08019a74 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8019a74:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019a78:	84c1      	strh	r1, [r0, #38]	; 0x26
 8019a7a:	b922      	cbnz	r2, 8019a86 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8019a7c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019a80:	b90b      	cbnz	r3, 8019a86 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8019a82:	f7ff bfcd 	b.w	8019a20 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019a86:	4770      	bx	lr

08019a88 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019a88:	2300      	movs	r3, #0
 8019a8a:	8003      	strh	r3, [r0, #0]
 8019a8c:	8043      	strh	r3, [r0, #2]
 8019a8e:	8083      	strh	r3, [r0, #4]
 8019a90:	80c3      	strh	r3, [r0, #6]
 8019a92:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019a96:	b91b      	cbnz	r3, 8019aa0 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 8019a98:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019a9c:	2bff      	cmp	r3, #255	; 0xff
 8019a9e:	d103      	bne.n	8019aa8 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 8019aa0:	890b      	ldrh	r3, [r1, #8]
 8019aa2:	8083      	strh	r3, [r0, #4]
 8019aa4:	894b      	ldrh	r3, [r1, #10]
 8019aa6:	80c3      	strh	r3, [r0, #6]
 8019aa8:	4770      	bx	lr
	...

08019aac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aae:	4604      	mov	r4, r0
 8019ab0:	466b      	mov	r3, sp
 8019ab2:	6808      	ldr	r0, [r1, #0]
 8019ab4:	6849      	ldr	r1, [r1, #4]
 8019ab6:	c303      	stmia	r3!, {r0, r1}
 8019ab8:	6823      	ldr	r3, [r4, #0]
 8019aba:	4669      	mov	r1, sp
 8019abc:	4620      	mov	r0, r4
 8019abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac0:	4798      	blx	r3
 8019ac2:	4b08      	ldr	r3, [pc, #32]	; (8019ae4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019aca:	b10a      	cbz	r2, 8019ad0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019acc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019ace:	b900      	cbnz	r0, 8019ad2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019ad0:	6898      	ldr	r0, [r3, #8]
 8019ad2:	6803      	ldr	r3, [r0, #0]
 8019ad4:	4669      	mov	r1, sp
 8019ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019ad8:	69dd      	ldr	r5, [r3, #28]
 8019ada:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019ade:	47a8      	blx	r5
 8019ae0:	b003      	add	sp, #12
 8019ae2:	bd30      	pop	{r4, r5, pc}
 8019ae4:	200098ec 	.word	0x200098ec

08019ae8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019ae8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019af0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019af2:	4604      	mov	r4, r0
 8019af4:	429a      	cmp	r2, r3
 8019af6:	d018      	beq.n	8019b2a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8019af8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019afc:	4628      	mov	r0, r5
 8019afe:	f7f9 fdb1 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 8019b02:	6803      	ldr	r3, [r0, #0]
 8019b04:	4606      	mov	r6, r0
 8019b06:	4628      	mov	r0, r5
 8019b08:	69df      	ldr	r7, [r3, #28]
 8019b0a:	f7f9 fdc7 	bl	801369c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8019b0e:	4680      	mov	r8, r0
 8019b10:	4628      	mov	r0, r5
 8019b12:	f7ff fe97 	bl	8019844 <_ZNK8touchgfx9TypedText7getTextEv>
 8019b16:	2300      	movs	r3, #0
 8019b18:	4602      	mov	r2, r0
 8019b1a:	4641      	mov	r1, r8
 8019b1c:	9300      	str	r3, [sp, #0]
 8019b1e:	4630      	mov	r0, r6
 8019b20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019b22:	47b8      	blx	r7
 8019b24:	b002      	add	sp, #8
 8019b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b2a:	2000      	movs	r0, #0
 8019b2c:	e7fa      	b.n	8019b24 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08019b2e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8019b2e:	b570      	push	{r4, r5, r6, lr}
 8019b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b34:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8019b36:	4604      	mov	r4, r0
 8019b38:	429a      	cmp	r2, r3
 8019b3a:	d00c      	beq.n	8019b56 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8019b3c:	f850 3b26 	ldr.w	r3, [r0], #38
 8019b40:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8019b42:	f7ff fe7f 	bl	8019844 <_ZNK8touchgfx9TypedText7getTextEv>
 8019b46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8019b48:	4601      	mov	r1, r0
 8019b4a:	46ac      	mov	ip, r5
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	2300      	movs	r3, #0
 8019b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b54:	4760      	bx	ip
 8019b56:	2000      	movs	r0, #0
 8019b58:	bd70      	pop	{r4, r5, r6, pc}
	...

08019b5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b64:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8019b66:	b08d      	sub	sp, #52	; 0x34
 8019b68:	4604      	mov	r4, r0
 8019b6a:	429e      	cmp	r6, r3
 8019b6c:	460f      	mov	r7, r1
 8019b6e:	d048      	beq.n	8019c02 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8019b70:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019b74:	4628      	mov	r0, r5
 8019b76:	f7f9 fd75 	bl	8013664 <_ZNK8touchgfx9TypedText7getFontEv>
 8019b7a:	4680      	mov	r8, r0
 8019b7c:	2800      	cmp	r0, #0
 8019b7e:	d040      	beq.n	8019c02 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8019b80:	4628      	mov	r0, r5
 8019b82:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8019b86:	f7f9 fda1 	bl	80136cc <_ZNK8touchgfx9TypedText11assertValidEv>
 8019b8a:	4b1f      	ldr	r3, [pc, #124]	; (8019c08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8019b8c:	4628      	mov	r0, r5
 8019b8e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8019b98:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8019b9c:	785e      	ldrb	r6, [r3, #1]
 8019b9e:	f7f9 fd7d 	bl	801369c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8019ba2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8019ba6:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8019baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019bac:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8019bb0:	f88d 6020 	strb.w	r6, [sp, #32]
 8019bb4:	ae05      	add	r6, sp, #20
 8019bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8019bb8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8019bbc:	f8cd 801c 	str.w	r8, [sp, #28]
 8019bc0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8019bc4:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8019bc8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8019bcc:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8019bd0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8019bd4:	f7f9 ff9a 	bl	8013b0c <_ZN8touchgfx3HAL3lcdEv>
 8019bd8:	4621      	mov	r1, r4
 8019bda:	4680      	mov	r8, r0
 8019bdc:	4630      	mov	r0, r6
 8019bde:	f001 fe40 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019be2:	4628      	mov	r0, r5
 8019be4:	f7ff fe2e 	bl	8019844 <_ZNK8touchgfx9TypedText7getTextEv>
 8019be8:	2300      	movs	r3, #0
 8019bea:	9303      	str	r3, [sp, #12]
 8019bec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019bee:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019bf2:	ab07      	add	r3, sp, #28
 8019bf4:	4640      	mov	r0, r8
 8019bf6:	9300      	str	r3, [sp, #0]
 8019bf8:	463b      	mov	r3, r7
 8019bfa:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019bfe:	f000 fb0b 	bl	801a218 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019c02:	b00d      	add	sp, #52	; 0x34
 8019c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c08:	2000995c 	.word	0x2000995c

08019c0c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019c0c:	b570      	push	{r4, r5, r6, lr}
 8019c0e:	4605      	mov	r5, r0
 8019c10:	880b      	ldrh	r3, [r1, #0]
 8019c12:	4604      	mov	r4, r0
 8019c14:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019c16:	f855 3b26 	ldr.w	r3, [r5], #38
 8019c1a:	4628      	mov	r0, r5
 8019c1c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8019c1e:	f003 fa21 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c22:	b201      	sxth	r1, r0
 8019c24:	4620      	mov	r0, r4
 8019c26:	47b0      	blx	r6
 8019c28:	6823      	ldr	r3, [r4, #0]
 8019c2a:	4628      	mov	r0, r5
 8019c2c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8019c2e:	f003 fa53 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c32:	b201      	sxth	r1, r0
 8019c34:	4620      	mov	r0, r4
 8019c36:	47b0      	blx	r6
 8019c38:	4628      	mov	r0, r5
 8019c3a:	f003 fae1 	bl	801d200 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019c3e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8019c42:	bd70      	pop	{r4, r5, r6, pc}

08019c44 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019c44:	b510      	push	{r4, lr}
 8019c46:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	2bff      	cmp	r3, #255	; 0xff
 8019c4e:	d006      	beq.n	8019c5e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019c50:	2300      	movs	r3, #0
 8019c52:	8003      	strh	r3, [r0, #0]
 8019c54:	8043      	strh	r3, [r0, #2]
 8019c56:	8083      	strh	r3, [r0, #4]
 8019c58:	80c3      	strh	r3, [r0, #6]
 8019c5a:	4620      	mov	r0, r4
 8019c5c:	bd10      	pop	{r4, pc}
 8019c5e:	3126      	adds	r1, #38	; 0x26
 8019c60:	f003 fa74 	bl	801d14c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019c64:	e7f9      	b.n	8019c5a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019c68 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	b088      	sub	sp, #32
 8019c70:	2500      	movs	r5, #0
 8019c72:	460f      	mov	r7, r1
 8019c74:	f854 3b26 	ldr.w	r3, [r4], #38
 8019c78:	a904      	add	r1, sp, #16
 8019c7a:	4606      	mov	r6, r0
 8019c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019c82:	4798      	blx	r3
 8019c84:	4620      	mov	r0, r4
 8019c86:	f003 f9ed 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c8a:	4680      	mov	r8, r0
 8019c8c:	4620      	mov	r0, r4
 8019c8e:	f003 fa23 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c92:	9506      	str	r5, [sp, #24]
 8019c94:	ad06      	add	r5, sp, #24
 8019c96:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019c9a:	4639      	mov	r1, r7
 8019c9c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019ca0:	4628      	mov	r0, r5
 8019ca2:	f7fe fddf 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 8019ca6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019caa:	b1c3      	cbz	r3, 8019cde <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8019cac:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019cb0:	b1ab      	cbz	r3, 8019cde <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8019cb2:	4b0c      	ldr	r3, [pc, #48]	; (8019ce4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019cba:	b10a      	cbz	r2, 8019cc0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8019cbc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019cbe:	b900      	cbnz	r0, 8019cc2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8019cc0:	6898      	ldr	r0, [r3, #8]
 8019cc2:	2701      	movs	r7, #1
 8019cc4:	6801      	ldr	r1, [r0, #0]
 8019cc6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019cca:	9702      	str	r7, [sp, #8]
 8019ccc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019cd0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019cd4:	e9cd 5600 	strd	r5, r6, [sp]
 8019cd8:	68cd      	ldr	r5, [r1, #12]
 8019cda:	4621      	mov	r1, r4
 8019cdc:	47a8      	blx	r5
 8019cde:	b008      	add	sp, #32
 8019ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ce4:	200098ec 	.word	0x200098ec

08019ce8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8019ce8:	b538      	push	{r3, r4, r5, lr}
 8019cea:	8809      	ldrh	r1, [r1, #0]
 8019cec:	f100 052e 	add.w	r5, r0, #46	; 0x2e
 8019cf0:	4604      	mov	r4, r0
 8019cf2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8019cf4:	8812      	ldrh	r2, [r2, #0]
 8019cf6:	8602      	strh	r2, [r0, #48]	; 0x30
 8019cf8:	881b      	ldrh	r3, [r3, #0]
 8019cfa:	8643      	strh	r3, [r0, #50]	; 0x32
 8019cfc:	9b04      	ldr	r3, [sp, #16]
 8019cfe:	881b      	ldrh	r3, [r3, #0]
 8019d00:	8683      	strh	r3, [r0, #52]	; 0x34
 8019d02:	4628      	mov	r0, r5
 8019d04:	f003 f9ae 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019d08:	8120      	strh	r0, [r4, #8]
 8019d0a:	4628      	mov	r0, r5
 8019d0c:	f003 f9e4 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019d10:	8160      	strh	r0, [r4, #10]
 8019d12:	bd38      	pop	{r3, r4, r5, pc}

08019d14 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 8019d14:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8019d18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019d1c:	b122      	cbz	r2, 8019d28 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x14>
 8019d1e:	b10b      	cbz	r3, 8019d24 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x10>
 8019d20:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8019d22:	4770      	bx	lr
 8019d24:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8019d26:	4770      	bx	lr
 8019d28:	b10b      	cbz	r3, 8019d2e <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1a>
 8019d2a:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8019d2c:	4770      	bx	lr
 8019d2e:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 8019d30:	4770      	bx	lr

08019d32 <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 8019d32:	b513      	push	{r0, r1, r4, lr}
 8019d34:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 8019d38:	4604      	mov	r4, r0
 8019d3a:	2bff      	cmp	r3, #255	; 0xff
 8019d3c:	d007      	beq.n	8019d4e <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 8019d3e:	2300      	movs	r3, #0
 8019d40:	8003      	strh	r3, [r0, #0]
 8019d42:	8043      	strh	r3, [r0, #2]
 8019d44:	8083      	strh	r3, [r0, #4]
 8019d46:	80c3      	strh	r3, [r0, #6]
 8019d48:	4620      	mov	r0, r4
 8019d4a:	b002      	add	sp, #8
 8019d4c:	bd10      	pop	{r4, pc}
 8019d4e:	4608      	mov	r0, r1
 8019d50:	f7ff ffe0 	bl	8019d14 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8019d54:	a902      	add	r1, sp, #8
 8019d56:	f821 0d04 	strh.w	r0, [r1, #-4]!
 8019d5a:	4620      	mov	r0, r4
 8019d5c:	f003 f9f6 	bl	801d14c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019d60:	e7f2      	b.n	8019d48 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>
	...

08019d64 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 8019d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d68:	b08b      	sub	sp, #44	; 0x2c
 8019d6a:	460f      	mov	r7, r1
 8019d6c:	4606      	mov	r6, r0
 8019d6e:	f7ff ffd1 	bl	8019d14 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8019d72:	ad0a      	add	r5, sp, #40	; 0x28
 8019d74:	f825 0d14 	strh.w	r0, [r5, #-20]!
 8019d78:	4628      	mov	r0, r5
 8019d7a:	f003 f973 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019d7e:	4680      	mov	r8, r0
 8019d80:	fa0f f980 	sxth.w	r9, r0
 8019d84:	4628      	mov	r0, r5
 8019d86:	f003 f9a7 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019d8a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8019d8e:	88bc      	ldrh	r4, [r7, #4]
 8019d90:	2300      	movs	r3, #0
 8019d92:	fa0f fc80 	sxth.w	ip, r0
 8019d96:	440c      	add	r4, r1
 8019d98:	9306      	str	r3, [sp, #24]
 8019d9a:	b2a4      	uxth	r4, r4
 8019d9c:	fa0f fe84 	sxth.w	lr, r4
 8019da0:	459e      	cmp	lr, r3
 8019da2:	dd28      	ble.n	8019df6 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 8019da4:	4589      	cmp	r9, r1
 8019da6:	dd26      	ble.n	8019df6 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 8019da8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019dac:	88fb      	ldrh	r3, [r7, #6]
 8019dae:	4413      	add	r3, r2
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	b21f      	sxth	r7, r3
 8019db4:	2f00      	cmp	r7, #0
 8019db6:	dd1e      	ble.n	8019df6 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 8019db8:	4594      	cmp	ip, r2
 8019dba:	dd1c      	ble.n	8019df6 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x92>
 8019dbc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8019dc0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019dc4:	45f1      	cmp	r9, lr
 8019dc6:	bfb8      	it	lt
 8019dc8:	4644      	movlt	r4, r8
 8019dca:	45bc      	cmp	ip, r7
 8019dcc:	bfb8      	it	lt
 8019dce:	4603      	movlt	r3, r0
 8019dd0:	f8ad 1018 	strh.w	r1, [sp, #24]
 8019dd4:	1a64      	subs	r4, r4, r1
 8019dd6:	1a9b      	subs	r3, r3, r2
 8019dd8:	f8ad 201a 	strh.w	r2, [sp, #26]
 8019ddc:	f8ad 401c 	strh.w	r4, [sp, #28]
 8019de0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019de4:	4b1c      	ldr	r3, [pc, #112]	; (8019e58 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xf4>)
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	b943      	cbnz	r3, 8019dfc <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x98>
 8019dea:	4b1c      	ldr	r3, [pc, #112]	; (8019e5c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xf8>)
 8019dec:	21b8      	movs	r1, #184	; 0xb8
 8019dee:	4a1c      	ldr	r2, [pc, #112]	; (8019e60 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xfc>)
 8019df0:	481c      	ldr	r0, [pc, #112]	; (8019e64 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x100>)
 8019df2:	f00b faa1 	bl	8025338 <__assert_func>
 8019df6:	2300      	movs	r3, #0
 8019df8:	9307      	str	r3, [sp, #28]
 8019dfa:	e7f3      	b.n	8019de4 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x80>
 8019dfc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e04:	429a      	cmp	r2, r3
 8019e06:	d024      	beq.n	8019e52 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xee>
 8019e08:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019e0c:	b30b      	cbz	r3, 8019e52 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xee>
 8019e0e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019e12:	b1f3      	cbz	r3, 8019e52 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xee>
 8019e14:	2300      	movs	r3, #0
 8019e16:	a908      	add	r1, sp, #32
 8019e18:	4630      	mov	r0, r6
 8019e1a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019e1e:	6833      	ldr	r3, [r6, #0]
 8019e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e22:	4798      	blx	r3
 8019e24:	4b10      	ldr	r3, [pc, #64]	; (8019e68 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x104>)
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019e2c:	b10a      	cbz	r2, 8019e32 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xce>
 8019e2e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019e30:	b900      	cbnz	r0, 8019e34 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0xd0>
 8019e32:	6898      	ldr	r0, [r3, #8]
 8019e34:	2401      	movs	r4, #1
 8019e36:	6801      	ldr	r1, [r0, #0]
 8019e38:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019e3c:	9402      	str	r4, [sp, #8]
 8019e3e:	f896 4036 	ldrb.w	r4, [r6, #54]	; 0x36
 8019e42:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019e46:	9401      	str	r4, [sp, #4]
 8019e48:	ac06      	add	r4, sp, #24
 8019e4a:	9400      	str	r4, [sp, #0]
 8019e4c:	68cc      	ldr	r4, [r1, #12]
 8019e4e:	4629      	mov	r1, r5
 8019e50:	47a0      	blx	r4
 8019e52:	b00b      	add	sp, #44	; 0x2c
 8019e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e58:	20009994 	.word	0x20009994
 8019e5c:	08028144 	.word	0x08028144
 8019e60:	08028218 	.word	0x08028218
 8019e64:	08028180 	.word	0x08028180
 8019e68:	200098ec 	.word	0x200098ec

08019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>:
 8019e6c:	b510      	push	{r4, lr}
 8019e6e:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8019e72:	4604      	mov	r4, r0
 8019e74:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
 8019e78:	b18b      	cbz	r3, 8019e9e <_ZN8touchgfx11RadioButton11setSelectedEb+0x32>
 8019e7a:	b951      	cbnz	r1, 8019e92 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019e7c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019e7e:	b140      	cbz	r0, 8019e92 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019e80:	6803      	ldr	r3, [r0, #0]
 8019e82:	68db      	ldr	r3, [r3, #12]
 8019e84:	4798      	blx	r3
 8019e86:	b120      	cbz	r0, 8019e92 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019e88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019e8a:	6803      	ldr	r3, [r0, #0]
 8019e8c:	4621      	mov	r1, r4
 8019e8e:	689b      	ldr	r3, [r3, #8]
 8019e90:	4798      	blx	r3
 8019e92:	6823      	ldr	r3, [r4, #0]
 8019e94:	4620      	mov	r0, r4
 8019e96:	695b      	ldr	r3, [r3, #20]
 8019e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e9c:	4718      	bx	r3
 8019e9e:	2900      	cmp	r1, #0
 8019ea0:	d0f7      	beq.n	8019e92 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019ea2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019ea4:	2800      	cmp	r0, #0
 8019ea6:	d0f4      	beq.n	8019e92 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019ea8:	6803      	ldr	r3, [r0, #0]
 8019eaa:	68db      	ldr	r3, [r3, #12]
 8019eac:	4798      	blx	r3
 8019eae:	2800      	cmp	r0, #0
 8019eb0:	d0ef      	beq.n	8019e92 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019eb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019eb4:	e7e9      	b.n	8019e8a <_ZN8touchgfx11RadioButton11setSelectedEb+0x1e>

08019eb6 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 8019eb6:	b570      	push	{r4, r5, r6, lr}
 8019eb8:	790b      	ldrb	r3, [r1, #4]
 8019eba:	4604      	mov	r4, r0
 8019ebc:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019ec0:	460e      	mov	r6, r1
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	bf0c      	ite	eq
 8019ec6:	2301      	moveq	r3, #1
 8019ec8:	2300      	movne	r3, #0
 8019eca:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8019ece:	d10f      	bne.n	8019ef0 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8019ed0:	b17d      	cbz	r5, 8019ef2 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019ed2:	7931      	ldrb	r1, [r6, #4]
 8019ed4:	2901      	cmp	r1, #1
 8019ed6:	d112      	bne.n	8019efe <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8019ed8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8019edc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019ee0:	b172      	cbz	r2, 8019f00 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019ee2:	f083 0101 	eor.w	r1, r3, #1
 8019ee6:	4620      	mov	r0, r4
 8019ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019eec:	f7ff bfbe 	b.w	8019e6c <_ZN8touchgfx11RadioButton11setSelectedEb>
 8019ef0:	b12d      	cbz	r5, 8019efe <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8019ef2:	6823      	ldr	r3, [r4, #0]
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	695b      	ldr	r3, [r3, #20]
 8019ef8:	4798      	blx	r3
 8019efa:	2d00      	cmp	r5, #0
 8019efc:	d1e9      	bne.n	8019ed2 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019efe:	bd70      	pop	{r4, r5, r6, pc}
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d1fc      	bne.n	8019efe <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8019f04:	e7ef      	b.n	8019ee6 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

08019f06 <_ZN8touchgfx3LCD4initEv>:
 8019f06:	4770      	bx	lr

08019f08 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019f08:	2000      	movs	r0, #0
 8019f0a:	4770      	bx	lr

08019f0c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f10:	b091      	sub	sp, #68	; 0x44
 8019f12:	4699      	mov	r9, r3
 8019f14:	4617      	mov	r7, r2
 8019f16:	2500      	movs	r5, #0
 8019f18:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8019f1c:	4680      	mov	r8, r0
 8019f1e:	a80e      	add	r0, sp, #56	; 0x38
 8019f20:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8019f22:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8019f26:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8019f2a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8019f2e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019f32:	910d      	str	r1, [sp, #52]	; 0x34
 8019f34:	950e      	str	r5, [sp, #56]	; 0x38
 8019f36:	f000 fe39 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019f3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019f3c:	f8d9 6000 	ldr.w	r6, [r9]
 8019f40:	6818      	ldr	r0, [r3, #0]
 8019f42:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019f44:	f9b4 b000 	ldrsh.w	fp, [r4]
 8019f48:	1b80      	subs	r0, r0, r6
 8019f4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f4e:	eb02 0c06 	add.w	ip, r2, r6
 8019f52:	ebab 0e0c 	sub.w	lr, fp, ip
 8019f56:	4570      	cmp	r0, lr
 8019f58:	f340 80bc 	ble.w	801a0d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019f5c:	88a1      	ldrh	r1, [r4, #4]
 8019f5e:	4459      	add	r1, fp
 8019f60:	b209      	sxth	r1, r1
 8019f62:	458c      	cmp	ip, r1
 8019f64:	f300 80b6 	bgt.w	801a0d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8019f68:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8019f6c:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8019f70:	4283      	cmp	r3, r0
 8019f72:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8019f76:	edd9 6a07 	vldr	s13, [r9, #28]
 8019f7a:	bfa8      	it	ge
 8019f7c:	4603      	movge	r3, r0
 8019f7e:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8019f82:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8019f86:	45e3      	cmp	fp, ip
 8019f88:	ee07 3a90 	vmov	s15, r3
 8019f8c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019f90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8019f94:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019f98:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019f9c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019fa0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019fa4:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019fa8:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019fac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019fb0:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019fb4:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019fb8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019fbc:	f340 808d 	ble.w	801a0da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8019fc0:	fb9e f5f3 	sdiv	r5, lr, r3
 8019fc4:	ee07 5a10 	vmov	s14, r5
 8019fc8:	2d00      	cmp	r5, #0
 8019fca:	fb03 e415 	mls	r4, r3, r5, lr
 8019fce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fd2:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019fd6:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019fda:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019fde:	dd12      	ble.n	801a006 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8019fe0:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019fe4:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019fe8:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019fec:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ff4:	bf14      	ite	ne
 8019ff6:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019ffa:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019ffe:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a002:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a006:	fb05 f703 	mul.w	r7, r5, r3
 801a00a:	1bc0      	subs	r0, r0, r7
 801a00c:	443e      	add	r6, r7
 801a00e:	1997      	adds	r7, r2, r6
 801a010:	4407      	add	r7, r0
 801a012:	42b9      	cmp	r1, r7
 801a014:	bfbc      	itt	lt
 801a016:	1a88      	sublt	r0, r1, r2
 801a018:	1b80      	sublt	r0, r0, r6
 801a01a:	2800      	cmp	r0, #0
 801a01c:	dd5a      	ble.n	801a0d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801a01e:	fb90 f1f3 	sdiv	r1, r0, r3
 801a022:	fb03 0211 	mls	r2, r3, r1, r0
 801a026:	b90a      	cbnz	r2, 801a02c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801a028:	3901      	subs	r1, #1
 801a02a:	461a      	mov	r2, r3
 801a02c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a030:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801a034:	44a4      	add	ip, r4
 801a036:	2900      	cmp	r1, #0
 801a038:	bfcc      	ite	gt
 801a03a:	469e      	movgt	lr, r3
 801a03c:	4696      	movle	lr, r2
 801a03e:	fb03 c505 	mla	r5, r3, r5, ip
 801a042:	eef0 6a42 	vmov.f32	s13, s4
 801a046:	eeb0 7a61 	vmov.f32	s14, s3
 801a04a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a04e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a052:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a056:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a05a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a05e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a062:	ee17 0a90 	vmov	r0, s15
 801a066:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a06a:	fb90 f6f3 	sdiv	r6, r0, r3
 801a06e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a072:	ee17 0a90 	vmov	r0, s15
 801a076:	fb90 f7f3 	sdiv	r7, r0, r3
 801a07a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a07e:	f8d0 8000 	ldr.w	r8, [r0]
 801a082:	900c      	str	r0, [sp, #48]	; 0x30
 801a084:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a086:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801a08a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801a08e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801a092:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801a096:	f8cd a020 	str.w	sl, [sp, #32]
 801a09a:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801a09e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a0a0:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801a0a4:	9603      	str	r6, [sp, #12]
 801a0a6:	44ca      	add	sl, r9
 801a0a8:	9506      	str	r5, [sp, #24]
 801a0aa:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801a0ae:	ee16 0a90 	vmov	r0, s13
 801a0b2:	f8cd a01c 	str.w	sl, [sp, #28]
 801a0b6:	fb07 0704 	mla	r7, r7, r4, r0
 801a0ba:	ee17 0a10 	vmov	r0, s14
 801a0be:	fb06 0604 	mla	r6, r6, r4, r0
 801a0c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a0c4:	9702      	str	r7, [sp, #8]
 801a0c6:	e9cd 3600 	strd	r3, r6, [sp]
 801a0ca:	ebae 0304 	sub.w	r3, lr, r4
 801a0ce:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801a0d2:	47a8      	blx	r5
 801a0d4:	b011      	add	sp, #68	; 0x44
 801a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0da:	462c      	mov	r4, r5
 801a0dc:	e797      	b.n	801a00e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801a0de <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a0de:	b570      	push	{r4, r5, r6, lr}
 801a0e0:	4604      	mov	r4, r0
 801a0e2:	2500      	movs	r5, #0
 801a0e4:	9804      	ldr	r0, [sp, #16]
 801a0e6:	7223      	strb	r3, [r4, #8]
 801a0e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a0ec:	8025      	strh	r5, [r4, #0]
 801a0ee:	6061      	str	r1, [r4, #4]
 801a0f0:	7263      	strb	r3, [r4, #9]
 801a0f2:	60e0      	str	r0, [r4, #12]
 801a0f4:	8222      	strh	r2, [r4, #16]
 801a0f6:	8265      	strh	r5, [r4, #18]
 801a0f8:	82a5      	strh	r5, [r4, #20]
 801a0fa:	82e5      	strh	r5, [r4, #22]
 801a0fc:	8325      	strh	r5, [r4, #24]
 801a0fe:	8365      	strh	r5, [r4, #26]
 801a100:	83a5      	strh	r5, [r4, #28]
 801a102:	77a5      	strb	r5, [r4, #30]
 801a104:	6803      	ldr	r3, [r0, #0]
 801a106:	695b      	ldr	r3, [r3, #20]
 801a108:	4798      	blx	r3
 801a10a:	4606      	mov	r6, r0
 801a10c:	b1f8      	cbz	r0, 801a14e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a10e:	68e0      	ldr	r0, [r4, #12]
 801a110:	4631      	mov	r1, r6
 801a112:	6803      	ldr	r3, [r0, #0]
 801a114:	68db      	ldr	r3, [r3, #12]
 801a116:	4798      	blx	r3
 801a118:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a11c:	4605      	mov	r5, r0
 801a11e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a122:	7a83      	ldrb	r3, [r0, #10]
 801a124:	4313      	orrs	r3, r2
 801a126:	83a3      	strh	r3, [r4, #28]
 801a128:	7a63      	ldrb	r3, [r4, #9]
 801a12a:	2b04      	cmp	r3, #4
 801a12c:	d10f      	bne.n	801a14e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801a12e:	68e0      	ldr	r0, [r4, #12]
 801a130:	462a      	mov	r2, r5
 801a132:	4631      	mov	r1, r6
 801a134:	6803      	ldr	r3, [r0, #0]
 801a136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a138:	4798      	blx	r3
 801a13a:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801a13e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a142:	7aab      	ldrb	r3, [r5, #10]
 801a144:	4313      	orrs	r3, r2
 801a146:	4418      	add	r0, r3
 801a148:	8ba3      	ldrh	r3, [r4, #28]
 801a14a:	4418      	add	r0, r3
 801a14c:	83a0      	strh	r0, [r4, #28]
 801a14e:	4620      	mov	r0, r4
 801a150:	bd70      	pop	{r4, r5, r6, pc}

0801a152 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a156:	2400      	movs	r4, #0
 801a158:	b085      	sub	sp, #20
 801a15a:	4681      	mov	r9, r0
 801a15c:	460f      	mov	r7, r1
 801a15e:	4692      	mov	sl, r2
 801a160:	469b      	mov	fp, r3
 801a162:	46a0      	mov	r8, r4
 801a164:	4626      	mov	r6, r4
 801a166:	4554      	cmp	r4, sl
 801a168:	da21      	bge.n	801a1ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801a16a:	2300      	movs	r3, #0
 801a16c:	463a      	mov	r2, r7
 801a16e:	4659      	mov	r1, fp
 801a170:	4648      	mov	r0, r9
 801a172:	9303      	str	r3, [sp, #12]
 801a174:	ab03      	add	r3, sp, #12
 801a176:	f002 fb3d 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a17a:	4605      	mov	r5, r0
 801a17c:	b1b8      	cbz	r0, 801a1ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801a17e:	280a      	cmp	r0, #10
 801a180:	d015      	beq.n	801a1ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801a182:	9a03      	ldr	r2, [sp, #12]
 801a184:	b182      	cbz	r2, 801a1a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801a186:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801a18a:	4641      	mov	r1, r8
 801a18c:	7a93      	ldrb	r3, [r2, #10]
 801a18e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a192:	8895      	ldrh	r5, [r2, #4]
 801a194:	4303      	orrs	r3, r0
 801a196:	4638      	mov	r0, r7
 801a198:	9301      	str	r3, [sp, #4]
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a19e:	4798      	blx	r3
 801a1a0:	9b01      	ldr	r3, [sp, #4]
 801a1a2:	4418      	add	r0, r3
 801a1a4:	4406      	add	r6, r0
 801a1a6:	b2b6      	uxth	r6, r6
 801a1a8:	3401      	adds	r4, #1
 801a1aa:	46a8      	mov	r8, r5
 801a1ac:	e7db      	b.n	801a166 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801a1ae:	4630      	mov	r0, r6
 801a1b0:	b005      	add	sp, #20
 801a1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a1b6:	2a02      	cmp	r2, #2
 801a1b8:	b530      	push	{r4, r5, lr}
 801a1ba:	d011      	beq.n	801a1e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a1bc:	2a03      	cmp	r2, #3
 801a1be:	d01c      	beq.n	801a1fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a1c0:	2a01      	cmp	r2, #1
 801a1c2:	d10c      	bne.n	801a1de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a1c4:	888b      	ldrh	r3, [r1, #4]
 801a1c6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a1ca:	8801      	ldrh	r1, [r0, #0]
 801a1cc:	1a9b      	subs	r3, r3, r2
 801a1ce:	8844      	ldrh	r4, [r0, #2]
 801a1d0:	1a5b      	subs	r3, r3, r1
 801a1d2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a1d6:	8004      	strh	r4, [r0, #0]
 801a1d8:	8043      	strh	r3, [r0, #2]
 801a1da:	8081      	strh	r1, [r0, #4]
 801a1dc:	80c2      	strh	r2, [r0, #6]
 801a1de:	bd30      	pop	{r4, r5, pc}
 801a1e0:	88cb      	ldrh	r3, [r1, #6]
 801a1e2:	88c2      	ldrh	r2, [r0, #6]
 801a1e4:	1a9b      	subs	r3, r3, r2
 801a1e6:	8842      	ldrh	r2, [r0, #2]
 801a1e8:	1a9b      	subs	r3, r3, r2
 801a1ea:	888a      	ldrh	r2, [r1, #4]
 801a1ec:	8881      	ldrh	r1, [r0, #4]
 801a1ee:	8043      	strh	r3, [r0, #2]
 801a1f0:	1a52      	subs	r2, r2, r1
 801a1f2:	8801      	ldrh	r1, [r0, #0]
 801a1f4:	1a52      	subs	r2, r2, r1
 801a1f6:	8002      	strh	r2, [r0, #0]
 801a1f8:	e7f1      	b.n	801a1de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a1fa:	88cb      	ldrh	r3, [r1, #6]
 801a1fc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a200:	8841      	ldrh	r1, [r0, #2]
 801a202:	1a9b      	subs	r3, r3, r2
 801a204:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a208:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a20c:	1a5b      	subs	r3, r3, r1
 801a20e:	8045      	strh	r5, [r0, #2]
 801a210:	8082      	strh	r2, [r0, #4]
 801a212:	8003      	strh	r3, [r0, #0]
 801a214:	80c4      	strh	r4, [r0, #6]
 801a216:	e7e2      	b.n	801a1de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a218 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801a218:	b570      	push	{r4, r5, r6, lr}
 801a21a:	b086      	sub	sp, #24
 801a21c:	ac02      	add	r4, sp, #8
 801a21e:	e884 0006 	stmia.w	r4, {r1, r2}
 801a222:	461a      	mov	r2, r3
 801a224:	ab0c      	add	r3, sp, #48	; 0x30
 801a226:	9305      	str	r3, [sp, #20]
 801a228:	4b0a      	ldr	r3, [pc, #40]	; (801a254 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801a22a:	685d      	ldr	r5, [r3, #4]
 801a22c:	1069      	asrs	r1, r5, #1
 801a22e:	07ed      	lsls	r5, r5, #31
 801a230:	eb00 0601 	add.w	r6, r0, r1
 801a234:	bf46      	itte	mi
 801a236:	681b      	ldrmi	r3, [r3, #0]
 801a238:	5841      	ldrmi	r1, [r0, r1]
 801a23a:	681d      	ldrpl	r5, [r3, #0]
 801a23c:	4630      	mov	r0, r6
 801a23e:	bf48      	it	mi
 801a240:	58cd      	ldrmi	r5, [r1, r3]
 801a242:	4621      	mov	r1, r4
 801a244:	9b05      	ldr	r3, [sp, #20]
 801a246:	9301      	str	r3, [sp, #4]
 801a248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a24a:	9300      	str	r3, [sp, #0]
 801a24c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a24e:	47a8      	blx	r5
 801a250:	b006      	add	sp, #24
 801a252:	bd70      	pop	{r4, r5, r6, pc}
 801a254:	20000060 	.word	0x20000060

0801a258 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a25c:	b09d      	sub	sp, #116	; 0x74
 801a25e:	9114      	str	r1, [sp, #80]	; 0x50
 801a260:	9315      	str	r3, [sp, #84]	; 0x54
 801a262:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801a264:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a266:	8809      	ldrh	r1, [r1, #0]
 801a268:	889b      	ldrh	r3, [r3, #4]
 801a26a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801a26c:	440b      	add	r3, r1
 801a26e:	9210      	str	r2, [sp, #64]	; 0x40
 801a270:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801a274:	b21b      	sxth	r3, r3
 801a276:	900f      	str	r0, [sp, #60]	; 0x3c
 801a278:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801a27c:	930e      	str	r3, [sp, #56]	; 0x38
 801a27e:	6833      	ldr	r3, [r6, #0]
 801a280:	7a59      	ldrb	r1, [r3, #9]
 801a282:	7a1b      	ldrb	r3, [r3, #8]
 801a284:	9113      	str	r1, [sp, #76]	; 0x4c
 801a286:	9312      	str	r3, [sp, #72]	; 0x48
 801a288:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a28a:	f9b3 4000 	ldrsh.w	r4, [r3]
 801a28e:	2a00      	cmp	r2, #0
 801a290:	d059      	beq.n	801a346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801a292:	7c33      	ldrb	r3, [r6, #16]
 801a294:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a296:	2b04      	cmp	r3, #4
 801a298:	bf14      	ite	ne
 801a29a:	2301      	movne	r3, #1
 801a29c:	2302      	moveq	r3, #2
 801a29e:	4413      	add	r3, r2
 801a2a0:	f04f 0800 	mov.w	r8, #0
 801a2a4:	930d      	str	r3, [sp, #52]	; 0x34
 801a2a6:	4645      	mov	r5, r8
 801a2a8:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801a2ac:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801a2b0:	4293      	cmp	r3, r2
 801a2b2:	da75      	bge.n	801a3a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a2b8:	6832      	ldr	r2, [r6, #0]
 801a2ba:	931a      	str	r3, [sp, #104]	; 0x68
 801a2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2be:	428b      	cmp	r3, r1
 801a2c0:	db43      	blt.n	801a34a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801a2c2:	6813      	ldr	r3, [r2, #0]
 801a2c4:	4610      	mov	r0, r2
 801a2c6:	695b      	ldr	r3, [r3, #20]
 801a2c8:	4798      	blx	r3
 801a2ca:	4681      	mov	r9, r0
 801a2cc:	6830      	ldr	r0, [r6, #0]
 801a2ce:	aa1b      	add	r2, sp, #108	; 0x6c
 801a2d0:	4649      	mov	r1, r9
 801a2d2:	6803      	ldr	r3, [r0, #0]
 801a2d4:	689f      	ldr	r7, [r3, #8]
 801a2d6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801a2da:	47b8      	blx	r7
 801a2dc:	901a      	str	r0, [sp, #104]	; 0x68
 801a2de:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801a2e2:	45d1      	cmp	r9, sl
 801a2e4:	d045      	beq.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a2e6:	f242 070b 	movw	r7, #8203	; 0x200b
 801a2ea:	45b9      	cmp	r9, r7
 801a2ec:	d041      	beq.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a2ee:	f1b9 0f00 	cmp.w	r9, #0
 801a2f2:	f000 80ee 	beq.w	801a4d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801a2f6:	f1b9 0f0a 	cmp.w	r9, #10
 801a2fa:	d057      	beq.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a2fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a2fe:	b383      	cbz	r3, 801a362 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801a300:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801a304:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a306:	2a00      	cmp	r2, #0
 801a308:	f000 80d2 	beq.w	801a4b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801a30c:	f1bb 0f00 	cmp.w	fp, #0
 801a310:	d100      	bne.n	801a314 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801a312:	4444      	add	r4, r8
 801a314:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801a318:	f1bb 0f01 	cmp.w	fp, #1
 801a31c:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801a320:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a324:	ea48 0803 	orr.w	r8, r8, r3
 801a328:	d128      	bne.n	801a37c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801a32a:	eba4 0408 	sub.w	r4, r4, r8
 801a32e:	2d00      	cmp	r5, #0
 801a330:	d143      	bne.n	801a3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801a332:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a334:	eb08 0304 	add.w	r3, r8, r4
 801a338:	4413      	add	r3, r2
 801a33a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a33c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a340:	4293      	cmp	r3, r2
 801a342:	da44      	bge.n	801a3ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a344:	e02b      	b.n	801a39e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801a346:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a348:	e7aa      	b.n	801a2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801a34a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801a34e:	4659      	mov	r1, fp
 801a350:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801a352:	9301      	str	r3, [sp, #4]
 801a354:	ab1b      	add	r3, sp, #108	; 0x6c
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	ab1a      	add	r3, sp, #104	; 0x68
 801a35a:	f002 fa7f 	bl	801c85c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a35e:	4681      	mov	r9, r0
 801a360:	e7bd      	b.n	801a2de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801a362:	6830      	ldr	r0, [r6, #0]
 801a364:	6803      	ldr	r3, [r0, #0]
 801a366:	691b      	ldr	r3, [r3, #16]
 801a368:	4798      	blx	r3
 801a36a:	4550      	cmp	r0, sl
 801a36c:	d001      	beq.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a36e:	42b8      	cmp	r0, r7
 801a370:	d1c8      	bne.n	801a304 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a374:	464d      	mov	r5, r9
 801a376:	3301      	adds	r3, #1
 801a378:	930c      	str	r3, [sp, #48]	; 0x30
 801a37a:	e797      	b.n	801a2ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801a37c:	2d00      	cmp	r5, #0
 801a37e:	f000 80aa 	beq.w	801a4d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801a382:	f1bb 0f00 	cmp.w	fp, #0
 801a386:	d118      	bne.n	801a3ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801a388:	6830      	ldr	r0, [r6, #0]
 801a38a:	4629      	mov	r1, r5
 801a38c:	6803      	ldr	r3, [r0, #0]
 801a38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a390:	4798      	blx	r3
 801a392:	4404      	add	r4, r0
 801a394:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a398:	1ae3      	subs	r3, r4, r3
 801a39a:	4293      	cmp	r3, r2
 801a39c:	dd17      	ble.n	801a3ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a39e:	464d      	mov	r5, r9
 801a3a0:	2d00      	cmp	r5, #0
 801a3a2:	f000 8096 	beq.w	801a4d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801a3a6:	2d0a      	cmp	r5, #10
 801a3a8:	f040 8084 	bne.w	801a4b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801a3ac:	250a      	movs	r5, #10
 801a3ae:	fab5 f085 	clz	r0, r5
 801a3b2:	0940      	lsrs	r0, r0, #5
 801a3b4:	b01d      	add	sp, #116	; 0x74
 801a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ba:	6830      	ldr	r0, [r6, #0]
 801a3bc:	4629      	mov	r1, r5
 801a3be:	6803      	ldr	r3, [r0, #0]
 801a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3c2:	4798      	blx	r3
 801a3c4:	f1bb 0f01 	cmp.w	fp, #1
 801a3c8:	eba4 0400 	sub.w	r4, r4, r0
 801a3cc:	d0b1      	beq.n	801a332 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a3ce:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a3d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a3d2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a3d6:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a3da:	7b43      	ldrb	r3, [r0, #13]
 801a3dc:	4421      	add	r1, r4
 801a3de:	015b      	lsls	r3, r3, #5
 801a3e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a3e4:	7983      	ldrb	r3, [r0, #6]
 801a3e6:	4313      	orrs	r3, r2
 801a3e8:	440b      	add	r3, r1
 801a3ea:	42ab      	cmp	r3, r5
 801a3ec:	dbc1      	blt.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3f0:	4299      	cmp	r1, r3
 801a3f2:	dabe      	bge.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a3f4:	6830      	ldr	r0, [r6, #0]
 801a3f6:	42a5      	cmp	r5, r4
 801a3f8:	6803      	ldr	r3, [r0, #0]
 801a3fa:	bfcc      	ite	gt
 801a3fc:	1b2d      	subgt	r5, r5, r4
 801a3fe:	2500      	movle	r5, #0
 801a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a402:	bfc8      	it	gt
 801a404:	b2ad      	uxthgt	r5, r5
 801a406:	4798      	blx	r3
 801a408:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a40a:	4935      	ldr	r1, [pc, #212]	; (801a4e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801a40c:	7b5a      	ldrb	r2, [r3, #13]
 801a40e:	f893 e008 	ldrb.w	lr, [r3, #8]
 801a412:	f012 0f40 	tst.w	r2, #64	; 0x40
 801a416:	bf18      	it	ne
 801a418:	468c      	movne	ip, r1
 801a41a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a41c:	bf08      	it	eq
 801a41e:	f04f 0c00 	moveq.w	ip, #0
 801a422:	4408      	add	r0, r1
 801a424:	00d1      	lsls	r1, r2, #3
 801a426:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a42a:	ea41 070e 	orr.w	r7, r1, lr
 801a42e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801a430:	ea4c 0707 	orr.w	r7, ip, r7
 801a434:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a438:	1bc7      	subs	r7, r0, r7
 801a43a:	b2bf      	uxth	r7, r7
 801a43c:	fa0f fa87 	sxth.w	sl, r7
 801a440:	4551      	cmp	r1, sl
 801a442:	dd33      	ble.n	801a4ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801a444:	0112      	lsls	r2, r2, #4
 801a446:	79d8      	ldrb	r0, [r3, #7]
 801a448:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a44c:	4302      	orrs	r2, r0
 801a44e:	4492      	add	sl, r2
 801a450:	4551      	cmp	r1, sl
 801a452:	dc8e      	bgt.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a454:	1bcf      	subs	r7, r1, r7
 801a456:	468a      	mov	sl, r1
 801a458:	b2bf      	uxth	r7, r7
 801a45a:	9317      	str	r3, [sp, #92]	; 0x5c
 801a45c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a45e:	6830      	ldr	r0, [r6, #0]
 801a460:	681a      	ldr	r2, [r3, #0]
 801a462:	6801      	ldr	r1, [r0, #0]
 801a464:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801a466:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a468:	9311      	str	r3, [sp, #68]	; 0x44
 801a46a:	9216      	str	r2, [sp, #88]	; 0x58
 801a46c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a46e:	4788      	blx	r1
 801a470:	79b1      	ldrb	r1, [r6, #6]
 801a472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a474:	910b      	str	r1, [sp, #44]	; 0x2c
 801a476:	7bb1      	ldrb	r1, [r6, #14]
 801a478:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a47a:	910a      	str	r1, [sp, #40]	; 0x28
 801a47c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801a480:	9109      	str	r1, [sp, #36]	; 0x24
 801a482:	68b1      	ldr	r1, [r6, #8]
 801a484:	9305      	str	r3, [sp, #20]
 801a486:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a488:	9206      	str	r2, [sp, #24]
 801a48a:	e9cd a501 	strd	sl, r5, [sp, #4]
 801a48e:	4425      	add	r5, r4
 801a490:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a494:	b22d      	sxth	r5, r5
 801a496:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a498:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a49c:	9500      	str	r5, [sp, #0]
 801a49e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a4a0:	681a      	ldr	r2, [r3, #0]
 801a4a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a4a8:	47a8      	blx	r5
 801a4aa:	e762      	b.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a4ac:	2700      	movs	r7, #0
 801a4ae:	e7d4      	b.n	801a45a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801a4b0:	4690      	mov	r8, r2
 801a4b2:	e75e      	b.n	801a372 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801a4b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a4b6:	3401      	adds	r4, #1
 801a4b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a4ba:	429c      	cmp	r4, r3
 801a4bc:	f6bf af77 	bge.w	801a3ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801a4c0:	4659      	mov	r1, fp
 801a4c2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801a4c4:	f002 f956 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a4c8:	4605      	mov	r5, r0
 801a4ca:	b110      	cbz	r0, 801a4d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801a4cc:	280a      	cmp	r0, #10
 801a4ce:	d1f2      	bne.n	801a4b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801a4d0:	e76c      	b.n	801a3ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a4d2:	2500      	movs	r5, #0
 801a4d4:	e76b      	b.n	801a3ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801a4d6:	f1bb 0f00 	cmp.w	fp, #0
 801a4da:	f43f af5b 	beq.w	801a394 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801a4de:	e776      	b.n	801a3ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a4e0:	fffffe00 	.word	0xfffffe00

0801a4e4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a4e4:	b530      	push	{r4, r5, lr}
 801a4e6:	8a44      	ldrh	r4, [r0, #18]
 801a4e8:	8ac5      	ldrh	r5, [r0, #22]
 801a4ea:	82c3      	strh	r3, [r0, #22]
 801a4ec:	442c      	add	r4, r5
 801a4ee:	1ae4      	subs	r4, r4, r3
 801a4f0:	8b03      	ldrh	r3, [r0, #24]
 801a4f2:	8244      	strh	r4, [r0, #18]
 801a4f4:	8a84      	ldrh	r4, [r0, #20]
 801a4f6:	4422      	add	r2, r4
 801a4f8:	440c      	add	r4, r1
 801a4fa:	1a59      	subs	r1, r3, r1
 801a4fc:	8342      	strh	r2, [r0, #26]
 801a4fe:	8284      	strh	r4, [r0, #20]
 801a500:	8301      	strh	r1, [r0, #24]
 801a502:	bd30      	pop	{r4, r5, pc}

0801a504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a508:	7a45      	ldrb	r5, [r0, #9]
 801a50a:	b085      	sub	sp, #20
 801a50c:	4604      	mov	r4, r0
 801a50e:	4689      	mov	r9, r1
 801a510:	1eeb      	subs	r3, r5, #3
 801a512:	b2db      	uxtb	r3, r3
 801a514:	b329      	cbz	r1, 801a562 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801a516:	2b01      	cmp	r3, #1
 801a518:	d921      	bls.n	801a55e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801a51a:	1e69      	subs	r1, r5, #1
 801a51c:	f1d1 0b00 	rsbs	fp, r1, #0
 801a520:	eb4b 0b01 	adc.w	fp, fp, r1
 801a524:	1eaa      	subs	r2, r5, #2
 801a526:	2500      	movs	r5, #0
 801a528:	4253      	negs	r3, r2
 801a52a:	9500      	str	r5, [sp, #0]
 801a52c:	4153      	adcs	r3, r2
 801a52e:	9301      	str	r3, [sp, #4]
 801a530:	2600      	movs	r6, #0
 801a532:	f242 080b 	movw	r8, #8203	; 0x200b
 801a536:	8266      	strh	r6, [r4, #18]
 801a538:	82a6      	strh	r6, [r4, #20]
 801a53a:	2300      	movs	r3, #0
 801a53c:	68e2      	ldr	r2, [r4, #12]
 801a53e:	7a21      	ldrb	r1, [r4, #8]
 801a540:	9303      	str	r3, [sp, #12]
 801a542:	ab03      	add	r3, sp, #12
 801a544:	6860      	ldr	r0, [r4, #4]
 801a546:	8827      	ldrh	r7, [r4, #0]
 801a548:	f002 f954 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a54c:	8020      	strh	r0, [r4, #0]
 801a54e:	b9b0      	cbnz	r0, 801a57e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801a550:	8b22      	ldrh	r2, [r4, #24]
 801a552:	2300      	movs	r3, #0
 801a554:	4611      	mov	r1, r2
 801a556:	4620      	mov	r0, r4
 801a558:	f7ff ffc4 	bl	801a4e4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a55c:	e062      	b.n	801a624 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801a55e:	468b      	mov	fp, r1
 801a560:	e7e0      	b.n	801a524 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801a562:	2b01      	cmp	r3, #1
 801a564:	f105 35ff 	add.w	r5, r5, #4294967295
 801a568:	9101      	str	r1, [sp, #4]
 801a56a:	468b      	mov	fp, r1
 801a56c:	bf8c      	ite	hi
 801a56e:	2300      	movhi	r3, #0
 801a570:	2301      	movls	r3, #1
 801a572:	2d01      	cmp	r5, #1
 801a574:	9300      	str	r3, [sp, #0]
 801a576:	bf8c      	ite	hi
 801a578:	2500      	movhi	r5, #0
 801a57a:	2501      	movls	r5, #1
 801a57c:	e7d8      	b.n	801a530 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801a57e:	8ae3      	ldrh	r3, [r4, #22]
 801a580:	280a      	cmp	r0, #10
 801a582:	f103 0301 	add.w	r3, r3, #1
 801a586:	82e3      	strh	r3, [r4, #22]
 801a588:	d0e2      	beq.n	801a550 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801a58a:	9a03      	ldr	r2, [sp, #12]
 801a58c:	b972      	cbnz	r2, 801a5ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801a58e:	4540      	cmp	r0, r8
 801a590:	d1d3      	bne.n	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a592:	8823      	ldrh	r3, [r4, #0]
 801a594:	8b21      	ldrh	r1, [r4, #24]
 801a596:	2b20      	cmp	r3, #32
 801a598:	d001      	beq.n	801a59e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801a59a:	4543      	cmp	r3, r8
 801a59c:	d11d      	bne.n	801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a59e:	2f20      	cmp	r7, #32
 801a5a0:	d002      	beq.n	801a5a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a5a2:	4547      	cmp	r7, r8
 801a5a4:	bf18      	it	ne
 801a5a6:	460e      	movne	r6, r1
 801a5a8:	2001      	movs	r0, #1
 801a5aa:	e017      	b.n	801a5dc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801a5ac:	4540      	cmp	r0, r8
 801a5ae:	d012      	beq.n	801a5d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801a5b0:	8893      	ldrh	r3, [r2, #4]
 801a5b2:	4639      	mov	r1, r7
 801a5b4:	8023      	strh	r3, [r4, #0]
 801a5b6:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801a5ba:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801a5be:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801a5c2:	ea4a 0a00 	orr.w	sl, sl, r0
 801a5c6:	68e0      	ldr	r0, [r4, #12]
 801a5c8:	6803      	ldr	r3, [r0, #0]
 801a5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a5cc:	4798      	blx	r3
 801a5ce:	eb0a 0200 	add.w	r2, sl, r0
 801a5d2:	b292      	uxth	r2, r2
 801a5d4:	e7dd      	b.n	801a592 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	e7db      	b.n	801a592 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801a5da:	2000      	movs	r0, #0
 801a5dc:	440a      	add	r2, r1
 801a5de:	8aa3      	ldrh	r3, [r4, #20]
 801a5e0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a5e4:	b292      	uxth	r2, r2
 801a5e6:	8322      	strh	r2, [r4, #24]
 801a5e8:	4413      	add	r3, r2
 801a5ea:	f1b9 0f00 	cmp.w	r9, #0
 801a5ee:	d022      	beq.n	801a636 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801a5f0:	f1bb 0f00 	cmp.w	fp, #0
 801a5f4:	d102      	bne.n	801a5fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801a5f6:	9901      	ldr	r1, [sp, #4]
 801a5f8:	b149      	cbz	r1, 801a60e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801a5fa:	b140      	cbz	r0, 801a60e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801a5fc:	8ba1      	ldrh	r1, [r4, #28]
 801a5fe:	4419      	add	r1, r3
 801a600:	458c      	cmp	ip, r1
 801a602:	da12      	bge.n	801a62a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801a604:	8a61      	ldrh	r1, [r4, #18]
 801a606:	b181      	cbz	r1, 801a62a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801a608:	4563      	cmp	r3, ip
 801a60a:	dd96      	ble.n	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a60c:	e004      	b.n	801a618 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801a60e:	4563      	cmp	r3, ip
 801a610:	dd93      	ble.n	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a612:	8a63      	ldrh	r3, [r4, #18]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d090      	beq.n	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a618:	2301      	movs	r3, #1
 801a61a:	8ba2      	ldrh	r2, [r4, #28]
 801a61c:	77a3      	strb	r3, [r4, #30]
 801a61e:	8b63      	ldrh	r3, [r4, #26]
 801a620:	4413      	add	r3, r2
 801a622:	8363      	strh	r3, [r4, #26]
 801a624:	b005      	add	sp, #20
 801a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a62a:	2300      	movs	r3, #0
 801a62c:	4611      	mov	r1, r2
 801a62e:	4620      	mov	r0, r4
 801a630:	f7ff ff58 	bl	801a4e4 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a634:	e781      	b.n	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a636:	4563      	cmp	r3, ip
 801a638:	dd16      	ble.n	801a668 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801a63a:	9b00      	ldr	r3, [sp, #0]
 801a63c:	b113      	cbz	r3, 801a644 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a63e:	2301      	movs	r3, #1
 801a640:	460a      	mov	r2, r1
 801a642:	e787      	b.n	801a554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801a644:	2d00      	cmp	r5, #0
 801a646:	f43f af78 	beq.w	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a64a:	2800      	cmp	r0, #0
 801a64c:	f47f af75 	bne.w	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a650:	2f20      	cmp	r7, #32
 801a652:	d001      	beq.n	801a658 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801a654:	4547      	cmp	r7, r8
 801a656:	d102      	bne.n	801a65e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801a658:	2301      	movs	r3, #1
 801a65a:	4632      	mov	r2, r6
 801a65c:	e77b      	b.n	801a556 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801a65e:	8a63      	ldrh	r3, [r4, #18]
 801a660:	2b00      	cmp	r3, #0
 801a662:	f43f af6a 	beq.w	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a666:	e7dd      	b.n	801a624 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801a668:	2800      	cmp	r0, #0
 801a66a:	f47f af66 	bne.w	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a66e:	2f20      	cmp	r7, #32
 801a670:	d002      	beq.n	801a678 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801a672:	4547      	cmp	r7, r8
 801a674:	f47f af61 	bne.w	801a53a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a678:	2301      	movs	r3, #1
 801a67a:	4632      	mov	r2, r6
 801a67c:	e7d7      	b.n	801a62e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801a67e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a67e:	b570      	push	{r4, r5, r6, lr}
 801a680:	4606      	mov	r6, r0
 801a682:	b08a      	sub	sp, #40	; 0x28
 801a684:	4615      	mov	r5, r2
 801a686:	b191      	cbz	r1, 801a6ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801a688:	2401      	movs	r4, #1
 801a68a:	e9cd 3100 	strd	r3, r1, [sp]
 801a68e:	4613      	mov	r3, r2
 801a690:	4601      	mov	r1, r0
 801a692:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a696:	a802      	add	r0, sp, #8
 801a698:	f7ff fd21 	bl	801a0de <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a69c:	2100      	movs	r1, #0
 801a69e:	a802      	add	r0, sp, #8
 801a6a0:	f7ff ff30 	bl	801a504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a6a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a6a8:	b173      	cbz	r3, 801a6c8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a6aa:	3401      	adds	r4, #1
 801a6ac:	e7f6      	b.n	801a69c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801a6ae:	2401      	movs	r4, #1
 801a6b0:	4611      	mov	r1, r2
 801a6b2:	f002 f85f 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a6b6:	280a      	cmp	r0, #10
 801a6b8:	4629      	mov	r1, r5
 801a6ba:	4630      	mov	r0, r6
 801a6bc:	bf08      	it	eq
 801a6be:	3401      	addeq	r4, #1
 801a6c0:	f002 f858 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a6c4:	2800      	cmp	r0, #0
 801a6c6:	d1f6      	bne.n	801a6b6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801a6c8:	b2a0      	uxth	r0, r4
 801a6ca:	b00a      	add	sp, #40	; 0x28
 801a6cc:	bd70      	pop	{r4, r5, r6, pc}

0801a6ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6d2:	b0db      	sub	sp, #364	; 0x16c
 801a6d4:	468a      	mov	sl, r1
 801a6d6:	461c      	mov	r4, r3
 801a6d8:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801a6dc:	9009      	str	r0, [sp, #36]	; 0x24
 801a6de:	f1bb 0f00 	cmp.w	fp, #0
 801a6e2:	f000 80c7 	beq.w	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	f000 80c3 	beq.w	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a6ee:	7ba3      	ldrb	r3, [r4, #14]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	f000 80bf 	beq.w	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a6f6:	af0c      	add	r7, sp, #48	; 0x30
 801a6f8:	6810      	ldr	r0, [r2, #0]
 801a6fa:	6851      	ldr	r1, [r2, #4]
 801a6fc:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801a700:	463b      	mov	r3, r7
 801a702:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801a706:	c303      	stmia	r3!, {r0, r1}
 801a708:	2100      	movs	r1, #0
 801a70a:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801a70e:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801a712:	4638      	mov	r0, r7
 801a714:	910e      	str	r1, [sp, #56]	; 0x38
 801a716:	a90e      	add	r1, sp, #56	; 0x38
 801a718:	79a2      	ldrb	r2, [r4, #6]
 801a71a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a71e:	f7ff fd4a 	bl	801a1b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a722:	a90e      	add	r1, sp, #56	; 0x38
 801a724:	79a2      	ldrb	r2, [r4, #6]
 801a726:	4608      	mov	r0, r1
 801a728:	f7ff fd45 	bl	801a1b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a72c:	4648      	mov	r0, r9
 801a72e:	f001 fedf 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801a732:	6820      	ldr	r0, [r4, #0]
 801a734:	6803      	ldr	r3, [r0, #0]
 801a736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a738:	4798      	blx	r3
 801a73a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a73c:	4603      	mov	r3, r0
 801a73e:	4659      	mov	r1, fp
 801a740:	4648      	mov	r0, r9
 801a742:	f001 fef2 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a746:	a82e      	add	r0, sp, #184	; 0xb8
 801a748:	f001 fed2 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801a74c:	f894 8004 	ldrb.w	r8, [r4, #4]
 801a750:	f1b8 0f00 	cmp.w	r8, #0
 801a754:	d009      	beq.n	801a76a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801a756:	6820      	ldr	r0, [r4, #0]
 801a758:	6803      	ldr	r3, [r0, #0]
 801a75a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a75c:	4798      	blx	r3
 801a75e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a760:	4603      	mov	r3, r0
 801a762:	4659      	mov	r1, fp
 801a764:	a82e      	add	r0, sp, #184	; 0xb8
 801a766:	f001 fee0 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a76a:	6820      	ldr	r0, [r4, #0]
 801a76c:	6803      	ldr	r3, [r0, #0]
 801a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a770:	4798      	blx	r3
 801a772:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a776:	182e      	adds	r6, r5, r0
 801a778:	2e00      	cmp	r6, #0
 801a77a:	dd45      	ble.n	801a808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801a77c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a780:	4283      	cmp	r3, r0
 801a782:	db41      	blt.n	801a808 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801a784:	441d      	add	r5, r3
 801a786:	fb95 f5f6 	sdiv	r5, r5, r6
 801a78a:	a844      	add	r0, sp, #272	; 0x110
 801a78c:	f001 feb0 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801a790:	7c23      	ldrb	r3, [r4, #16]
 801a792:	b14b      	cbz	r3, 801a7a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801a794:	6820      	ldr	r0, [r4, #0]
 801a796:	6803      	ldr	r3, [r0, #0]
 801a798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a79a:	4798      	blx	r3
 801a79c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801a79e:	4603      	mov	r3, r0
 801a7a0:	4659      	mov	r1, fp
 801a7a2:	a844      	add	r0, sp, #272	; 0x110
 801a7a4:	f001 fec1 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a7a8:	7c21      	ldrb	r1, [r4, #16]
 801a7aa:	a810      	add	r0, sp, #64	; 0x40
 801a7ac:	7963      	ldrb	r3, [r4, #5]
 801a7ae:	9101      	str	r1, [sp, #4]
 801a7b0:	6821      	ldr	r1, [r4, #0]
 801a7b2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801a7b6:	9100      	str	r1, [sp, #0]
 801a7b8:	a944      	add	r1, sp, #272	; 0x110
 801a7ba:	f7ff fc90 	bl	801a0de <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a7be:	7c23      	ldrb	r3, [r4, #16]
 801a7c0:	bb23      	cbnz	r3, 801a80c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801a7c2:	fa1f fb86 	uxth.w	fp, r6
 801a7c6:	2d00      	cmp	r5, #0
 801a7c8:	dd57      	ble.n	801a87a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801a7ca:	7961      	ldrb	r1, [r4, #5]
 801a7cc:	4648      	mov	r0, r9
 801a7ce:	f001 ffd1 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	f1b8 0f00 	cmp.w	r8, #0
 801a7d8:	d005      	beq.n	801a7e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801a7da:	9008      	str	r0, [sp, #32]
 801a7dc:	a82e      	add	r0, sp, #184	; 0xb8
 801a7de:	7961      	ldrb	r1, [r4, #5]
 801a7e0:	f001 ffc8 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a7e4:	9b08      	ldr	r3, [sp, #32]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d044      	beq.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a7ea:	2b0a      	cmp	r3, #10
 801a7ec:	d1eb      	bne.n	801a7c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801a7ee:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a7f2:	3d01      	subs	r5, #1
 801a7f4:	445b      	add	r3, fp
 801a7f6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a7fa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a7fe:	eba3 030b 	sub.w	r3, r3, fp
 801a802:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a806:	e7de      	b.n	801a7c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801a808:	2500      	movs	r5, #0
 801a80a:	e7be      	b.n	801a78a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801a80c:	0073      	lsls	r3, r6, #1
 801a80e:	9308      	str	r3, [sp, #32]
 801a810:	2d00      	cmp	r5, #0
 801a812:	dd32      	ble.n	801a87a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801a814:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a818:	a810      	add	r0, sp, #64	; 0x40
 801a81a:	9b08      	ldr	r3, [sp, #32]
 801a81c:	428b      	cmp	r3, r1
 801a81e:	bfd4      	ite	le
 801a820:	2100      	movle	r1, #0
 801a822:	2101      	movgt	r1, #1
 801a824:	f7ff fe6e 	bl	801a504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a828:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801a82c:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a830:	fa1f fb83 	uxth.w	fp, r3
 801a834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a838:	459b      	cmp	fp, r3
 801a83a:	d00b      	beq.n	801a854 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a83c:	7961      	ldrb	r1, [r4, #5]
 801a83e:	4648      	mov	r0, r9
 801a840:	f001 ff98 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a844:	f1b8 0f00 	cmp.w	r8, #0
 801a848:	d0f0      	beq.n	801a82c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801a84a:	7961      	ldrb	r1, [r4, #5]
 801a84c:	a82e      	add	r0, sp, #184	; 0xb8
 801a84e:	f001 ff91 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a852:	e7eb      	b.n	801a82c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801a854:	b2b3      	uxth	r3, r6
 801a856:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a85a:	3d01      	subs	r5, #1
 801a85c:	441a      	add	r2, r3
 801a85e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801a862:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a866:	1ad3      	subs	r3, r2, r3
 801a868:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a86c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a870:	2b00      	cmp	r3, #0
 801a872:	d1cd      	bne.n	801a810 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801a874:	b05b      	add	sp, #364	; 0x16c
 801a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a87a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801a87e:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801a882:	7c23      	ldrb	r3, [r4, #16]
 801a884:	2b00      	cmp	r3, #0
 801a886:	d05f      	beq.n	801a948 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801a888:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801a88c:	a810      	add	r0, sp, #64	; 0x40
 801a88e:	458b      	cmp	fp, r1
 801a890:	bfd4      	ite	le
 801a892:	2100      	movle	r1, #0
 801a894:	2101      	movgt	r1, #1
 801a896:	f7ff fe35 	bl	801a504 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a89a:	f1b8 0f00 	cmp.w	r8, #0
 801a89e:	d04c      	beq.n	801a93a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a8a0:	7c23      	ldrb	r3, [r4, #16]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d053      	beq.n	801a94e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801a8a6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801a8aa:	7922      	ldrb	r2, [r4, #4]
 801a8ac:	2a01      	cmp	r2, #1
 801a8ae:	d13c      	bne.n	801a92a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a8b0:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801a8b4:	1ac0      	subs	r0, r0, r3
 801a8b6:	2302      	movs	r3, #2
 801a8b8:	fb90 f0f3 	sdiv	r0, r0, r3
 801a8bc:	b200      	sxth	r0, r0
 801a8be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a8c2:	4418      	add	r0, r3
 801a8c4:	7c23      	ldrb	r3, [r4, #16]
 801a8c6:	8028      	strh	r0, [r5, #0]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d03a      	beq.n	801a942 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801a8cc:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801a8d0:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801a8d4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a8d8:	f8cd 9010 	str.w	r9, [sp, #16]
 801a8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a8de:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	2100      	movs	r1, #0
 801a8e6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801a8ea:	e9cd 5700 	strd	r5, r7, [sp]
 801a8ee:	4652      	mov	r2, sl
 801a8f0:	f7ff fcb2 	bl	801a258 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a8f4:	2800      	cmp	r0, #0
 801a8f6:	d1bd      	bne.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a8f8:	b2b2      	uxth	r2, r6
 801a8fa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801a8fe:	4611      	mov	r1, r2
 801a900:	4413      	add	r3, r2
 801a902:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801a906:	b21b      	sxth	r3, r3
 801a908:	1a52      	subs	r2, r2, r1
 801a90a:	7c21      	ldrb	r1, [r4, #16]
 801a90c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a910:	b212      	sxth	r2, r2
 801a912:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801a916:	b109      	cbz	r1, 801a91c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a918:	42b2      	cmp	r2, r6
 801a91a:	dbab      	blt.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a91c:	887a      	ldrh	r2, [r7, #2]
 801a91e:	88f9      	ldrh	r1, [r7, #6]
 801a920:	440a      	add	r2, r1
 801a922:	b212      	sxth	r2, r2
 801a924:	4293      	cmp	r3, r2
 801a926:	ddac      	ble.n	801a882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801a928:	e7a4      	b.n	801a874 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801a92a:	2a02      	cmp	r2, #2
 801a92c:	d107      	bne.n	801a93e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a92e:	7be2      	ldrb	r2, [r4, #15]
 801a930:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801a934:	1a80      	subs	r0, r0, r2
 801a936:	1ac0      	subs	r0, r0, r3
 801a938:	e7c0      	b.n	801a8bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801a93a:	7be0      	ldrb	r0, [r4, #15]
 801a93c:	e7bf      	b.n	801a8be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801a93e:	2000      	movs	r0, #0
 801a940:	e7bd      	b.n	801a8be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801a942:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a946:	e7c3      	b.n	801a8d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801a948:	f1b8 0f00 	cmp.w	r8, #0
 801a94c:	d0f5      	beq.n	801a93a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a94e:	2300      	movs	r3, #0
 801a950:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a954:	6821      	ldr	r1, [r4, #0]
 801a956:	a82e      	add	r0, sp, #184	; 0xb8
 801a958:	f7ff fbfb 	bl	801a152 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a95c:	b203      	sxth	r3, r0
 801a95e:	e7a4      	b.n	801a8aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801a960 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a960:	2b02      	cmp	r3, #2
 801a962:	b510      	push	{r4, lr}
 801a964:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a968:	d00b      	beq.n	801a982 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a96a:	2b03      	cmp	r3, #3
 801a96c:	d00e      	beq.n	801a98c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a96e:	2b01      	cmp	r3, #1
 801a970:	d001      	beq.n	801a976 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a972:	1860      	adds	r0, r4, r1
 801a974:	bd10      	pop	{r4, pc}
 801a976:	8880      	ldrh	r0, [r0, #4]
 801a978:	4420      	add	r0, r4
 801a97a:	b200      	sxth	r0, r0
 801a97c:	1a80      	subs	r0, r0, r2
 801a97e:	3801      	subs	r0, #1
 801a980:	e7f8      	b.n	801a974 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a982:	8880      	ldrh	r0, [r0, #4]
 801a984:	4420      	add	r0, r4
 801a986:	b200      	sxth	r0, r0
 801a988:	1a40      	subs	r0, r0, r1
 801a98a:	e7f8      	b.n	801a97e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a98c:	18a0      	adds	r0, r4, r2
 801a98e:	e7f1      	b.n	801a974 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a990 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a990:	2b02      	cmp	r3, #2
 801a992:	b510      	push	{r4, lr}
 801a994:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a998:	d006      	beq.n	801a9a8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a99a:	2b03      	cmp	r3, #3
 801a99c:	d00a      	beq.n	801a9b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a99e:	2b01      	cmp	r3, #1
 801a9a0:	bf14      	ite	ne
 801a9a2:	18a0      	addne	r0, r4, r2
 801a9a4:	1860      	addeq	r0, r4, r1
 801a9a6:	bd10      	pop	{r4, pc}
 801a9a8:	88c0      	ldrh	r0, [r0, #6]
 801a9aa:	4420      	add	r0, r4
 801a9ac:	b200      	sxth	r0, r0
 801a9ae:	1a80      	subs	r0, r0, r2
 801a9b0:	3801      	subs	r0, #1
 801a9b2:	e7f8      	b.n	801a9a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a9b4:	88c0      	ldrh	r0, [r0, #6]
 801a9b6:	4420      	add	r0, r4
 801a9b8:	b200      	sxth	r0, r0
 801a9ba:	1a40      	subs	r0, r0, r1
 801a9bc:	e7f8      	b.n	801a9b0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a9c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a9c0:	4b01      	ldr	r3, [pc, #4]	; (801a9c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a9c2:	2200      	movs	r2, #0
 801a9c4:	601a      	str	r2, [r3, #0]
 801a9c6:	4770      	bx	lr
 801a9c8:	200098f4 	.word	0x200098f4

0801a9cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801a9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a9ce:	1e05      	subs	r5, r0, #0
 801a9d0:	f04f 0601 	mov.w	r6, #1
 801a9d4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a9d8:	bfba      	itte	lt
 801a9da:	f04f 37ff 	movlt.w	r7, #4294967295
 801a9de:	426d      	neglt	r5, r5
 801a9e0:	2701      	movge	r7, #1
 801a9e2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801a9e6:	f1be 0f00 	cmp.w	lr, #0
 801a9ea:	bfbc      	itt	lt
 801a9ec:	f1ce 0e00 	rsblt	lr, lr, #0
 801a9f0:	427f      	neglt	r7, r7
 801a9f2:	2c00      	cmp	r4, #0
 801a9f4:	fa4e f001 	asr.w	r0, lr, r1
 801a9f8:	fa06 f101 	lsl.w	r1, r6, r1
 801a9fc:	bfbc      	itt	lt
 801a9fe:	4264      	neglt	r4, r4
 801aa00:	427f      	neglt	r7, r7
 801aa02:	3901      	subs	r1, #1
 801aa04:	ea01 010e 	and.w	r1, r1, lr
 801aa08:	434d      	muls	r5, r1
 801aa0a:	f8dc 1000 	ldr.w	r1, [ip]
 801aa0e:	fb03 1300 	mla	r3, r3, r0, r1
 801aa12:	fb95 f1f4 	sdiv	r1, r5, r4
 801aa16:	fb04 5511 	mls	r5, r4, r1, r5
 801aa1a:	441d      	add	r5, r3
 801aa1c:	fb95 f3f4 	sdiv	r3, r5, r4
 801aa20:	4419      	add	r1, r3
 801aa22:	fb04 5413 	mls	r4, r4, r3, r5
 801aa26:	fb02 1000 	mla	r0, r2, r0, r1
 801aa2a:	f8cc 4000 	str.w	r4, [ip]
 801aa2e:	4378      	muls	r0, r7
 801aa30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801aa34 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801aa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa38:	4c24      	ldr	r4, [pc, #144]	; (801aacc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801aa3a:	b086      	sub	sp, #24
 801aa3c:	4605      	mov	r5, r0
 801aa3e:	6807      	ldr	r7, [r0, #0]
 801aa40:	69a3      	ldr	r3, [r4, #24]
 801aa42:	b92b      	cbnz	r3, 801aa50 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801aa44:	6840      	ldr	r0, [r0, #4]
 801aa46:	e9c5 7000 	strd	r7, r0, [r5]
 801aa4a:	b006      	add	sp, #24
 801aa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa50:	f04f 0802 	mov.w	r8, #2
 801aa54:	68a2      	ldr	r2, [r4, #8]
 801aa56:	ae06      	add	r6, sp, #24
 801aa58:	6820      	ldr	r0, [r4, #0]
 801aa5a:	fb93 f1f8 	sdiv	r1, r3, r8
 801aa5e:	440a      	add	r2, r1
 801aa60:	69e1      	ldr	r1, [r4, #28]
 801aa62:	f846 2d04 	str.w	r2, [r6, #-4]!
 801aa66:	9700      	str	r7, [sp, #0]
 801aa68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801aa6a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801aa6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801aa70:	f7ff ffac 	bl	801a9cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aa74:	69a3      	ldr	r3, [r4, #24]
 801aa76:	4607      	mov	r7, r0
 801aa78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801aa7a:	9301      	str	r3, [sp, #4]
 801aa7c:	686b      	ldr	r3, [r5, #4]
 801aa7e:	6a21      	ldr	r1, [r4, #32]
 801aa80:	9300      	str	r3, [sp, #0]
 801aa82:	9602      	str	r6, [sp, #8]
 801aa84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aa86:	6860      	ldr	r0, [r4, #4]
 801aa88:	f7ff ffa0 	bl	801a9cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aa8c:	69a2      	ldr	r2, [r4, #24]
 801aa8e:	6963      	ldr	r3, [r4, #20]
 801aa90:	4407      	add	r7, r0
 801aa92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aa94:	68e0      	ldr	r0, [r4, #12]
 801aa96:	fb92 f8f8 	sdiv	r8, r2, r8
 801aa9a:	4443      	add	r3, r8
 801aa9c:	9305      	str	r3, [sp, #20]
 801aa9e:	682b      	ldr	r3, [r5, #0]
 801aaa0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801aaa4:	9300      	str	r3, [sp, #0]
 801aaa6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801aaa8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801aaaa:	f7ff ff8f 	bl	801a9cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aaae:	69a3      	ldr	r3, [r4, #24]
 801aab0:	4680      	mov	r8, r0
 801aab2:	9602      	str	r6, [sp, #8]
 801aab4:	9301      	str	r3, [sp, #4]
 801aab6:	686b      	ldr	r3, [r5, #4]
 801aab8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801aaba:	9300      	str	r3, [sp, #0]
 801aabc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801aabe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801aac0:	6920      	ldr	r0, [r4, #16]
 801aac2:	f7ff ff83 	bl	801a9cc <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801aac6:	4440      	add	r0, r8
 801aac8:	e7bd      	b.n	801aa46 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801aaca:	bf00      	nop
 801aacc:	200098f8 	.word	0x200098f8

0801aad0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801aad0:	4b07      	ldr	r3, [pc, #28]	; (801aaf0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801aad2:	b510      	push	{r4, lr}
 801aad4:	781b      	ldrb	r3, [r3, #0]
 801aad6:	2b01      	cmp	r3, #1
 801aad8:	d108      	bne.n	801aaec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801aada:	4b06      	ldr	r3, [pc, #24]	; (801aaf4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801aadc:	880c      	ldrh	r4, [r1, #0]
 801aade:	881b      	ldrh	r3, [r3, #0]
 801aae0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801aae4:	3b01      	subs	r3, #1
 801aae6:	1b1b      	subs	r3, r3, r4
 801aae8:	8003      	strh	r3, [r0, #0]
 801aaea:	800a      	strh	r2, [r1, #0]
 801aaec:	bd10      	pop	{r4, pc}
 801aaee:	bf00      	nop
 801aaf0:	200098e2 	.word	0x200098e2
 801aaf4:	200098e6 	.word	0x200098e6

0801aaf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801aaf8:	4b0a      	ldr	r3, [pc, #40]	; (801ab24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801aafa:	b510      	push	{r4, lr}
 801aafc:	781b      	ldrb	r3, [r3, #0]
 801aafe:	2b01      	cmp	r3, #1
 801ab00:	d10e      	bne.n	801ab20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801ab02:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ab06:	8843      	ldrh	r3, [r0, #2]
 801ab08:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ab0c:	18ca      	adds	r2, r1, r3
 801ab0e:	4b06      	ldr	r3, [pc, #24]	; (801ab28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801ab10:	8044      	strh	r4, [r0, #2]
 801ab12:	881b      	ldrh	r3, [r3, #0]
 801ab14:	1a9b      	subs	r3, r3, r2
 801ab16:	8003      	strh	r3, [r0, #0]
 801ab18:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ab1c:	8081      	strh	r1, [r0, #4]
 801ab1e:	80c3      	strh	r3, [r0, #6]
 801ab20:	bd10      	pop	{r4, pc}
 801ab22:	bf00      	nop
 801ab24:	200098e2 	.word	0x200098e2
 801ab28:	200098de 	.word	0x200098de

0801ab2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801ab2c:	4b07      	ldr	r3, [pc, #28]	; (801ab4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801ab2e:	b510      	push	{r4, lr}
 801ab30:	781b      	ldrb	r3, [r3, #0]
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	d108      	bne.n	801ab48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ab36:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ab3a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ab3e:	8003      	strh	r3, [r0, #0]
 801ab40:	8893      	ldrh	r3, [r2, #4]
 801ab42:	3b01      	subs	r3, #1
 801ab44:	1b1b      	subs	r3, r3, r4
 801ab46:	800b      	strh	r3, [r1, #0]
 801ab48:	bd10      	pop	{r4, pc}
 801ab4a:	bf00      	nop
 801ab4c:	200098e2 	.word	0x200098e2

0801ab50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ab50:	4b08      	ldr	r3, [pc, #32]	; (801ab74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ab52:	b513      	push	{r0, r1, r4, lr}
 801ab54:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ab58:	2400      	movs	r4, #0
 801ab5a:	4b07      	ldr	r3, [pc, #28]	; (801ab78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801ab5c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ab60:	466a      	mov	r2, sp
 801ab62:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ab66:	9400      	str	r4, [sp, #0]
 801ab68:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ab6c:	f7ff ffde 	bl	801ab2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ab70:	b002      	add	sp, #8
 801ab72:	bd10      	pop	{r4, pc}
 801ab74:	200098de 	.word	0x200098de
 801ab78:	200098e0 	.word	0x200098e0

0801ab7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ab7c:	4b0a      	ldr	r3, [pc, #40]	; (801aba8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ab7e:	460a      	mov	r2, r1
 801ab80:	b510      	push	{r4, lr}
 801ab82:	781b      	ldrb	r3, [r3, #0]
 801ab84:	2b01      	cmp	r3, #1
 801ab86:	d10d      	bne.n	801aba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ab88:	8881      	ldrh	r1, [r0, #4]
 801ab8a:	8803      	ldrh	r3, [r0, #0]
 801ab8c:	440b      	add	r3, r1
 801ab8e:	4601      	mov	r1, r0
 801ab90:	3b01      	subs	r3, #1
 801ab92:	f821 3b02 	strh.w	r3, [r1], #2
 801ab96:	f7ff ffc9 	bl	801ab2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ab9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ab9e:	88c2      	ldrh	r2, [r0, #6]
 801aba0:	80c3      	strh	r3, [r0, #6]
 801aba2:	8082      	strh	r2, [r0, #4]
 801aba4:	bd10      	pop	{r4, pc}
 801aba6:	bf00      	nop
 801aba8:	200098e2 	.word	0x200098e2

0801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801abac:	4b09      	ldr	r3, [pc, #36]	; (801abd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801abae:	b507      	push	{r0, r1, r2, lr}
 801abb0:	2100      	movs	r1, #0
 801abb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abb6:	4b08      	ldr	r3, [pc, #32]	; (801abd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801abb8:	9100      	str	r1, [sp, #0]
 801abba:	4669      	mov	r1, sp
 801abbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801abc0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801abc4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801abc8:	f7ff ffd8 	bl	801ab7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abcc:	b003      	add	sp, #12
 801abce:	f85d fb04 	ldr.w	pc, [sp], #4
 801abd2:	bf00      	nop
 801abd4:	200098de 	.word	0x200098de
 801abd8:	200098e0 	.word	0x200098e0

0801abdc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801abdc:	4b03      	ldr	r3, [pc, #12]	; (801abec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801abde:	6818      	ldr	r0, [r3, #0]
 801abe0:	b110      	cbz	r0, 801abe8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801abe2:	6803      	ldr	r3, [r0, #0]
 801abe4:	699b      	ldr	r3, [r3, #24]
 801abe6:	4718      	bx	r3
 801abe8:	4770      	bx	lr
 801abea:	bf00      	nop
 801abec:	20009948 	.word	0x20009948

0801abf0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801abf0:	4770      	bx	lr
	...

0801abf4 <_ZN8touchgfx11Application4drawEv>:
 801abf4:	4b09      	ldr	r3, [pc, #36]	; (801ac1c <_ZN8touchgfx11Application4drawEv+0x28>)
 801abf6:	b507      	push	{r0, r1, r2, lr}
 801abf8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801abfc:	2100      	movs	r1, #0
 801abfe:	4b08      	ldr	r3, [pc, #32]	; (801ac20 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801ac00:	9100      	str	r1, [sp, #0]
 801ac02:	4669      	mov	r1, sp
 801ac04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ac08:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ac0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ac10:	6803      	ldr	r3, [r0, #0]
 801ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac14:	4798      	blx	r3
 801ac16:	b003      	add	sp, #12
 801ac18:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac1c:	200098de 	.word	0x200098de
 801ac20:	200098e0 	.word	0x200098e0

0801ac24 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801ac24:	4b03      	ldr	r3, [pc, #12]	; (801ac34 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801ac26:	6818      	ldr	r0, [r3, #0]
 801ac28:	b110      	cbz	r0, 801ac30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801ac2a:	6803      	ldr	r3, [r0, #0]
 801ac2c:	69db      	ldr	r3, [r3, #28]
 801ac2e:	4718      	bx	r3
 801ac30:	4770      	bx	lr
 801ac32:	bf00      	nop
 801ac34:	20009948 	.word	0x20009948

0801ac38 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ac38:	4b03      	ldr	r3, [pc, #12]	; (801ac48 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ac3a:	6818      	ldr	r0, [r3, #0]
 801ac3c:	b110      	cbz	r0, 801ac44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ac3e:	6803      	ldr	r3, [r0, #0]
 801ac40:	6a1b      	ldr	r3, [r3, #32]
 801ac42:	4718      	bx	r3
 801ac44:	4770      	bx	lr
 801ac46:	bf00      	nop
 801ac48:	20009948 	.word	0x20009948

0801ac4c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ac4c:	4b03      	ldr	r3, [pc, #12]	; (801ac5c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ac4e:	6818      	ldr	r0, [r3, #0]
 801ac50:	b110      	cbz	r0, 801ac58 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ac52:	6803      	ldr	r3, [r0, #0]
 801ac54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac56:	4718      	bx	r3
 801ac58:	4770      	bx	lr
 801ac5a:	bf00      	nop
 801ac5c:	20009948 	.word	0x20009948

0801ac60 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac64:	4d3a      	ldr	r5, [pc, #232]	; (801ad50 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801ac66:	4604      	mov	r4, r0
 801ac68:	6828      	ldr	r0, [r5, #0]
 801ac6a:	b140      	cbz	r0, 801ac7e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801ac6c:	7a03      	ldrb	r3, [r0, #8]
 801ac6e:	b933      	cbnz	r3, 801ac7e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801ac70:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801ac74:	6803      	ldr	r3, [r0, #0]
 801ac76:	689b      	ldr	r3, [r3, #8]
 801ac78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac7c:	4718      	bx	r3
 801ac7e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801ac82:	b97b      	cbnz	r3, 801aca4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ac84:	b170      	cbz	r0, 801aca4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ac86:	7a03      	ldrb	r3, [r0, #8]
 801ac88:	b163      	cbz	r3, 801aca4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ac8a:	4b32      	ldr	r3, [pc, #200]	; (801ad54 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801ac8c:	6818      	ldr	r0, [r3, #0]
 801ac8e:	b110      	cbz	r0, 801ac96 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801ac90:	6803      	ldr	r3, [r0, #0]
 801ac92:	691b      	ldr	r3, [r3, #16]
 801ac94:	4798      	blx	r3
 801ac96:	6828      	ldr	r0, [r5, #0]
 801ac98:	6803      	ldr	r3, [r0, #0]
 801ac9a:	68db      	ldr	r3, [r3, #12]
 801ac9c:	4798      	blx	r3
 801ac9e:	2301      	movs	r3, #1
 801aca0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801aca4:	2500      	movs	r5, #0
 801aca6:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801acaa:	42a8      	cmp	r0, r5
 801acac:	dd0c      	ble.n	801acc8 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801acae:	1963      	adds	r3, r4, r5
 801acb0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801acb4:	b132      	cbz	r2, 801acc4 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801acb6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801acba:	4413      	add	r3, r2
 801acbc:	6858      	ldr	r0, [r3, #4]
 801acbe:	6803      	ldr	r3, [r0, #0]
 801acc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801acc2:	4798      	blx	r3
 801acc4:	3501      	adds	r5, #1
 801acc6:	e7ee      	b.n	801aca6 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801acc8:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801accc:	3801      	subs	r0, #1
 801acce:	f04f 0c00 	mov.w	ip, #0
 801acd2:	3678      	adds	r6, #120	; 0x78
 801acd4:	1c43      	adds	r3, r0, #1
 801acd6:	d033      	beq.n	801ad40 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801acd8:	1823      	adds	r3, r4, r0
 801acda:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801acde:	bb6a      	cbnz	r2, 801ad3c <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801ace0:	b281      	uxth	r1, r0
 801ace2:	1d25      	adds	r5, r4, #4
 801ace4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801ace8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801acec:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801acf0:	4293      	cmp	r3, r2
 801acf2:	dc0a      	bgt.n	801ad0a <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801acf4:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801acf8:	4422      	add	r2, r4
 801acfa:	18b1      	adds	r1, r6, r2
 801acfc:	b289      	uxth	r1, r1
 801acfe:	428b      	cmp	r3, r1
 801ad00:	d919      	bls.n	801ad36 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801ad02:	7851      	ldrb	r1, [r2, #1]
 801ad04:	f802 1b01 	strb.w	r1, [r2], #1
 801ad08:	e7f7      	b.n	801acfa <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801ad0a:	682f      	ldr	r7, [r5, #0]
 801ad0c:	f105 0804 	add.w	r8, r5, #4
 801ad10:	45b9      	cmp	r9, r7
 801ad12:	d10d      	bne.n	801ad30 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801ad14:	4696      	mov	lr, r2
 801ad16:	f1be 0f1e 	cmp.w	lr, #30
 801ad1a:	dc06      	bgt.n	801ad2a <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801ad1c:	f10e 0e01 	add.w	lr, lr, #1
 801ad20:	686f      	ldr	r7, [r5, #4]
 801ad22:	4573      	cmp	r3, lr
 801ad24:	f845 7b04 	str.w	r7, [r5], #4
 801ad28:	dcf5      	bgt.n	801ad16 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801ad2a:	3b01      	subs	r3, #1
 801ad2c:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801ad30:	3201      	adds	r2, #1
 801ad32:	4645      	mov	r5, r8
 801ad34:	e7da      	b.n	801acec <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801ad36:	4423      	add	r3, r4
 801ad38:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801ad3c:	3801      	subs	r0, #1
 801ad3e:	e7c9      	b.n	801acd4 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801ad40:	4b04      	ldr	r3, [pc, #16]	; (801ad54 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801ad42:	6818      	ldr	r0, [r3, #0]
 801ad44:	b110      	cbz	r0, 801ad4c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801ad46:	6803      	ldr	r3, [r0, #0]
 801ad48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad4a:	e795      	b.n	801ac78 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad50:	2000994c 	.word	0x2000994c
 801ad54:	20009948 	.word	0x20009948

0801ad58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ad58:	b570      	push	{r4, r5, r6, lr}
 801ad5a:	4606      	mov	r6, r0
 801ad5c:	460c      	mov	r4, r1
 801ad5e:	b929      	cbnz	r1, 801ad6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ad60:	4b0c      	ldr	r3, [pc, #48]	; (801ad94 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ad62:	2164      	movs	r1, #100	; 0x64
 801ad64:	4a0c      	ldr	r2, [pc, #48]	; (801ad98 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ad66:	480d      	ldr	r0, [pc, #52]	; (801ad9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ad68:	f00a fae6 	bl	8025338 <__assert_func>
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	4d0c      	ldr	r5, [pc, #48]	; (801ada0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ad70:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ad74:	6828      	ldr	r0, [r5, #0]
 801ad76:	b110      	cbz	r0, 801ad7e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ad78:	6803      	ldr	r3, [r0, #0]
 801ad7a:	695b      	ldr	r3, [r3, #20]
 801ad7c:	4798      	blx	r3
 801ad7e:	602c      	str	r4, [r5, #0]
 801ad80:	4620      	mov	r0, r4
 801ad82:	6823      	ldr	r3, [r4, #0]
 801ad84:	68db      	ldr	r3, [r3, #12]
 801ad86:	4798      	blx	r3
 801ad88:	6833      	ldr	r3, [r6, #0]
 801ad8a:	4630      	mov	r0, r6
 801ad8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad92:	4718      	bx	r3
 801ad94:	0802829c 	.word	0x0802829c
 801ad98:	08028364 	.word	0x08028364
 801ad9c:	080282a6 	.word	0x080282a6
 801ada0:	20009948 	.word	0x20009948

0801ada4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801ada4:	b510      	push	{r4, lr}
 801ada6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801adaa:	888a      	ldrh	r2, [r1, #4]
 801adac:	f9b0 3000 	ldrsh.w	r3, [r0]
 801adb0:	4422      	add	r2, r4
 801adb2:	b212      	sxth	r2, r2
 801adb4:	4293      	cmp	r3, r2
 801adb6:	da15      	bge.n	801ade4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801adb8:	8882      	ldrh	r2, [r0, #4]
 801adba:	4413      	add	r3, r2
 801adbc:	b21b      	sxth	r3, r3
 801adbe:	429c      	cmp	r4, r3
 801adc0:	da10      	bge.n	801ade4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801adc2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801adc6:	88c9      	ldrh	r1, [r1, #6]
 801adc8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801adcc:	4419      	add	r1, r3
 801adce:	b209      	sxth	r1, r1
 801add0:	428a      	cmp	r2, r1
 801add2:	da07      	bge.n	801ade4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801add4:	88c0      	ldrh	r0, [r0, #6]
 801add6:	4410      	add	r0, r2
 801add8:	b200      	sxth	r0, r0
 801adda:	4283      	cmp	r3, r0
 801addc:	bfac      	ite	ge
 801adde:	2000      	movge	r0, #0
 801ade0:	2001      	movlt	r0, #1
 801ade2:	bd10      	pop	{r4, pc}
 801ade4:	2000      	movs	r0, #0
 801ade6:	e7fc      	b.n	801ade2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801ade8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801ade8:	b570      	push	{r4, r5, r6, lr}
 801adea:	f9b1 4000 	ldrsh.w	r4, [r1]
 801adee:	f9b0 5000 	ldrsh.w	r5, [r0]
 801adf2:	42ac      	cmp	r4, r5
 801adf4:	db18      	blt.n	801ae28 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801adf6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801adfa:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801adfe:	429a      	cmp	r2, r3
 801ae00:	db12      	blt.n	801ae28 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ae02:	8886      	ldrh	r6, [r0, #4]
 801ae04:	4435      	add	r5, r6
 801ae06:	888e      	ldrh	r6, [r1, #4]
 801ae08:	4434      	add	r4, r6
 801ae0a:	b22d      	sxth	r5, r5
 801ae0c:	b224      	sxth	r4, r4
 801ae0e:	42a5      	cmp	r5, r4
 801ae10:	db0a      	blt.n	801ae28 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ae12:	88c0      	ldrh	r0, [r0, #6]
 801ae14:	4418      	add	r0, r3
 801ae16:	88cb      	ldrh	r3, [r1, #6]
 801ae18:	441a      	add	r2, r3
 801ae1a:	b200      	sxth	r0, r0
 801ae1c:	b212      	sxth	r2, r2
 801ae1e:	4290      	cmp	r0, r2
 801ae20:	bfb4      	ite	lt
 801ae22:	2000      	movlt	r0, #0
 801ae24:	2001      	movge	r0, #1
 801ae26:	bd70      	pop	{r4, r5, r6, pc}
 801ae28:	2000      	movs	r0, #0
 801ae2a:	e7fc      	b.n	801ae26 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801ae2c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae2e:	4604      	mov	r4, r0
 801ae30:	4608      	mov	r0, r1
 801ae32:	460d      	mov	r5, r1
 801ae34:	f7fd fd5a 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801ae38:	b978      	cbnz	r0, 801ae5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801ae3a:	4620      	mov	r0, r4
 801ae3c:	f7fd fd56 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801ae40:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ae44:	b150      	cbz	r0, 801ae5c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ae46:	8026      	strh	r6, [r4, #0]
 801ae48:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ae4c:	8063      	strh	r3, [r4, #2]
 801ae4e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ae52:	80a3      	strh	r3, [r4, #4]
 801ae54:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ae58:	80e3      	strh	r3, [r4, #6]
 801ae5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae5c:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ae60:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ae64:	42b1      	cmp	r1, r6
 801ae66:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ae6a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ae6e:	460f      	mov	r7, r1
 801ae70:	88ed      	ldrh	r5, [r5, #6]
 801ae72:	bfa8      	it	ge
 801ae74:	4637      	movge	r7, r6
 801ae76:	4293      	cmp	r3, r2
 801ae78:	4618      	mov	r0, r3
 801ae7a:	4466      	add	r6, ip
 801ae7c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ae80:	bfa8      	it	ge
 801ae82:	4610      	movge	r0, r2
 801ae84:	442a      	add	r2, r5
 801ae86:	88e5      	ldrh	r5, [r4, #6]
 801ae88:	4461      	add	r1, ip
 801ae8a:	b236      	sxth	r6, r6
 801ae8c:	8027      	strh	r7, [r4, #0]
 801ae8e:	442b      	add	r3, r5
 801ae90:	b209      	sxth	r1, r1
 801ae92:	b212      	sxth	r2, r2
 801ae94:	8060      	strh	r0, [r4, #2]
 801ae96:	b21b      	sxth	r3, r3
 801ae98:	428e      	cmp	r6, r1
 801ae9a:	bfac      	ite	ge
 801ae9c:	ebc7 0106 	rsbge	r1, r7, r6
 801aea0:	ebc7 0101 	rsblt	r1, r7, r1
 801aea4:	429a      	cmp	r2, r3
 801aea6:	bfac      	ite	ge
 801aea8:	ebc0 0202 	rsbge	r2, r0, r2
 801aeac:	ebc0 0203 	rsblt	r2, r0, r3
 801aeb0:	80a1      	strh	r1, [r4, #4]
 801aeb2:	80e2      	strh	r2, [r4, #6]
 801aeb4:	e7d1      	b.n	801ae5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801aeb8 <_ZN8touchgfx11Application11getInstanceEv>:
 801aeb8:	4b01      	ldr	r3, [pc, #4]	; (801aec0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801aeba:	6818      	ldr	r0, [r3, #0]
 801aebc:	4770      	bx	lr
 801aebe:	bf00      	nop
 801aec0:	20009958 	.word	0x20009958

0801aec4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801aec4:	2300      	movs	r3, #0
 801aec6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801aeca:	30a8      	adds	r0, #168	; 0xa8
 801aecc:	f820 3c24 	strh.w	r3, [r0, #-36]
 801aed0:	f802 3b01 	strb.w	r3, [r2], #1
 801aed4:	4282      	cmp	r2, r0
 801aed6:	d1fb      	bne.n	801aed0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801aed8:	4770      	bx	lr

0801aeda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801aeda:	4603      	mov	r3, r0
 801aedc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801aee0:	2200      	movs	r2, #0
 801aee2:	801a      	strh	r2, [r3, #0]
 801aee4:	3308      	adds	r3, #8
 801aee6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801aeea:	f823 2c04 	strh.w	r2, [r3, #-4]
 801aeee:	f823 2c02 	strh.w	r2, [r3, #-2]
 801aef2:	428b      	cmp	r3, r1
 801aef4:	d1f5      	bne.n	801aee2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801aef6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801aefa:	4770      	bx	lr

0801aefc <_ZN8touchgfx11ApplicationC1Ev>:
 801aefc:	b570      	push	{r4, r5, r6, lr}
 801aefe:	4b16      	ldr	r3, [pc, #88]	; (801af58 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801af00:	2500      	movs	r5, #0
 801af02:	4604      	mov	r4, r0
 801af04:	30a8      	adds	r0, #168	; 0xa8
 801af06:	f840 3ca8 	str.w	r3, [r0, #-168]
 801af0a:	f820 5c24 	strh.w	r5, [r0, #-36]
 801af0e:	f7ff ffe4 	bl	801aeda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801af12:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801af16:	f7ff ffe0 	bl	801aeda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801af1a:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801af1e:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801af22:	490e      	ldr	r1, [pc, #56]	; (801af5c <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801af24:	480e      	ldr	r0, [pc, #56]	; (801af60 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801af26:	f00a f8d5 	bl	80250d4 <CRC_Lock>
 801af2a:	4e0e      	ldr	r6, [pc, #56]	; (801af64 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801af2c:	4b0e      	ldr	r3, [pc, #56]	; (801af68 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801af2e:	b158      	cbz	r0, 801af48 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801af30:	801d      	strh	r5, [r3, #0]
 801af32:	2300      	movs	r3, #0
 801af34:	4a0d      	ldr	r2, [pc, #52]	; (801af6c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801af36:	4620      	mov	r0, r4
 801af38:	6013      	str	r3, [r2, #0]
 801af3a:	4a0d      	ldr	r2, [pc, #52]	; (801af70 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801af3c:	6033      	str	r3, [r6, #0]
 801af3e:	6013      	str	r3, [r2, #0]
 801af40:	f7ff ffc0 	bl	801aec4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801af44:	4620      	mov	r0, r4
 801af46:	bd70      	pop	{r4, r5, r6, pc}
 801af48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801af4c:	2002      	movs	r0, #2
 801af4e:	801a      	strh	r2, [r3, #0]
 801af50:	6030      	str	r0, [r6, #0]
 801af52:	f000 ff27 	bl	801bda4 <_ZN8touchgfx6Screen4drawEv>
 801af56:	e7ec      	b.n	801af32 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801af58:	08028330 	.word	0x08028330
 801af5c:	b5e8b5cd 	.word	0xb5e8b5cd
 801af60:	f407a5c2 	.word	0xf407a5c2
 801af64:	20009948 	.word	0x20009948
 801af68:	20000070 	.word	0x20000070
 801af6c:	20009958 	.word	0x20009958
 801af70:	2000994c 	.word	0x2000994c

0801af74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801af74:	2300      	movs	r3, #0
 801af76:	8003      	strh	r3, [r0, #0]
 801af78:	8043      	strh	r3, [r0, #2]
 801af7a:	8083      	strh	r3, [r0, #4]
 801af7c:	80c3      	strh	r3, [r0, #6]
 801af7e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801af82:	4293      	cmp	r3, r2
 801af84:	b530      	push	{r4, r5, lr}
 801af86:	d912      	bls.n	801afae <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801af88:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801af8c:	3b01      	subs	r3, #1
 801af8e:	6825      	ldr	r5, [r4, #0]
 801af90:	b29b      	uxth	r3, r3
 801af92:	6005      	str	r5, [r0, #0]
 801af94:	4293      	cmp	r3, r2
 801af96:	6865      	ldr	r5, [r4, #4]
 801af98:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801af9c:	6045      	str	r5, [r0, #4]
 801af9e:	d906      	bls.n	801afae <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801afa0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801afa4:	681d      	ldr	r5, [r3, #0]
 801afa6:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801afaa:	685d      	ldr	r5, [r3, #4]
 801afac:	6065      	str	r5, [r4, #4]
 801afae:	bd30      	pop	{r4, r5, pc}

0801afb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801afb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801afb2:	466b      	mov	r3, sp
 801afb4:	4604      	mov	r4, r0
 801afb6:	e883 0006 	stmia.w	r3, {r1, r2}
 801afba:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801afbe:	2a07      	cmp	r2, #7
 801afc0:	d906      	bls.n	801afd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801afc2:	4b09      	ldr	r3, [pc, #36]	; (801afe8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801afc4:	f44f 7102 	mov.w	r1, #520	; 0x208
 801afc8:	4a08      	ldr	r2, [pc, #32]	; (801afec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801afca:	4809      	ldr	r0, [pc, #36]	; (801aff0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801afcc:	f00a f9b4 	bl	8025338 <__assert_func>
 801afd0:	1c51      	adds	r1, r2, #1
 801afd2:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801afd6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801afda:	cb03      	ldmia	r3!, {r0, r1}
 801afdc:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801afe0:	6069      	str	r1, [r5, #4]
 801afe2:	b003      	add	sp, #12
 801afe4:	bd30      	pop	{r4, r5, pc}
 801afe6:	bf00      	nop
 801afe8:	080282d0 	.word	0x080282d0
 801afec:	080283a8 	.word	0x080283a8
 801aff0:	080282ff 	.word	0x080282ff

0801aff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801aff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aff8:	b089      	sub	sp, #36	; 0x24
 801affa:	4606      	mov	r6, r0
 801affc:	466c      	mov	r4, sp
 801affe:	4620      	mov	r0, r4
 801b000:	e884 0006 	stmia.w	r4, {r1, r2}
 801b004:	f7fd fc72 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801b008:	bbb0      	cbnz	r0, 801b078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801b00a:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801b00e:	b1fd      	cbz	r5, 801b050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801b010:	3d01      	subs	r5, #1
 801b012:	af04      	add	r7, sp, #16
 801b014:	f04f 090a 	mov.w	r9, #10
 801b018:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801b01c:	ab02      	add	r3, sp, #8
 801b01e:	fa1f f885 	uxth.w	r8, r5
 801b022:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b026:	6851      	ldr	r1, [r2, #4]
 801b028:	c303      	stmia	r3!, {r0, r1}
 801b02a:	4621      	mov	r1, r4
 801b02c:	a802      	add	r0, sp, #8
 801b02e:	f7ff fedb 	bl	801ade8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b032:	bb08      	cbnz	r0, 801b078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801b034:	a902      	add	r1, sp, #8
 801b036:	4620      	mov	r0, r4
 801b038:	f7ff fed6 	bl	801ade8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b03c:	b1f8      	cbz	r0, 801b07e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801b03e:	4642      	mov	r2, r8
 801b040:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b044:	a806      	add	r0, sp, #24
 801b046:	f7ff ff95 	bl	801af74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b04a:	f115 35ff 	adds.w	r5, r5, #4294967295
 801b04e:	d2e3      	bcs.n	801b018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801b050:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801b054:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801b058:	2b08      	cmp	r3, #8
 801b05a:	d108      	bne.n	801b06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801b05c:	4629      	mov	r1, r5
 801b05e:	a806      	add	r0, sp, #24
 801b060:	2207      	movs	r2, #7
 801b062:	f7ff ff87 	bl	801af74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b066:	a906      	add	r1, sp, #24
 801b068:	4620      	mov	r0, r4
 801b06a:	f7ff fedf 	bl	801ae2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b06e:	4628      	mov	r0, r5
 801b070:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b074:	f7ff ff9c 	bl	801afb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b078:	b009      	add	sp, #36	; 0x24
 801b07a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b07e:	4621      	mov	r1, r4
 801b080:	a802      	add	r0, sp, #8
 801b082:	f7ff fe8f 	bl	801ada4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b086:	b150      	cbz	r0, 801b09e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801b088:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b08c:	a806      	add	r0, sp, #24
 801b08e:	4642      	mov	r2, r8
 801b090:	f7ff ff70 	bl	801af74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b094:	a902      	add	r1, sp, #8
 801b096:	4620      	mov	r0, r4
 801b098:	f7ff fec8 	bl	801ae2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b09c:	e7d5      	b.n	801b04a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b09e:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b0a2:	e887 0003 	stmia.w	r7, {r0, r1}
 801b0a6:	a902      	add	r1, sp, #8
 801b0a8:	4638      	mov	r0, r7
 801b0aa:	f7ff febf 	bl	801ae2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b0ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b0b2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b0b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b0ba:	fb13 f302 	smulbb	r3, r3, r2
 801b0be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b0c2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b0c6:	fb11 f102 	smulbb	r1, r1, r2
 801b0ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801b0ce:	fb09 f303 	mul.w	r3, r9, r3
 801b0d2:	fb12 1100 	smlabb	r1, r2, r0, r1
 801b0d6:	220b      	movs	r2, #11
 801b0d8:	434a      	muls	r2, r1
 801b0da:	4293      	cmp	r3, r2
 801b0dc:	dab5      	bge.n	801b04a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801b0de:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801b0e2:	a806      	add	r0, sp, #24
 801b0e4:	4642      	mov	r2, r8
 801b0e6:	f7ff ff45 	bl	801af74 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b0ea:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b0ee:	e884 0003 	stmia.w	r4, {r0, r1}
 801b0f2:	e7aa      	b.n	801b04a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801b0f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b0f4:	4b1d      	ldr	r3, [pc, #116]	; (801b16c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b0f6:	b530      	push	{r4, r5, lr}
 801b0f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0fc:	b085      	sub	sp, #20
 801b0fe:	4b1c      	ldr	r3, [pc, #112]	; (801b170 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b100:	460c      	mov	r4, r1
 801b102:	2100      	movs	r1, #0
 801b104:	4605      	mov	r5, r0
 801b106:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b10a:	6820      	ldr	r0, [r4, #0]
 801b10c:	9100      	str	r1, [sp, #0]
 801b10e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b112:	ab02      	add	r3, sp, #8
 801b114:	6861      	ldr	r1, [r4, #4]
 801b116:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b11a:	c303      	stmia	r3!, {r0, r1}
 801b11c:	4669      	mov	r1, sp
 801b11e:	a802      	add	r0, sp, #8
 801b120:	f7fd fba0 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801b124:	ab02      	add	r3, sp, #8
 801b126:	cb03      	ldmia	r3!, {r0, r1}
 801b128:	4b12      	ldr	r3, [pc, #72]	; (801b174 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b12a:	6020      	str	r0, [r4, #0]
 801b12c:	6818      	ldr	r0, [r3, #0]
 801b12e:	6061      	str	r1, [r4, #4]
 801b130:	b138      	cbz	r0, 801b142 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b132:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801b136:	b133      	cbz	r3, 801b146 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b138:	6821      	ldr	r1, [r4, #0]
 801b13a:	4628      	mov	r0, r5
 801b13c:	6862      	ldr	r2, [r4, #4]
 801b13e:	f7ff ff59 	bl	801aff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b142:	b005      	add	sp, #20
 801b144:	bd30      	pop	{r4, r5, pc}
 801b146:	6803      	ldr	r3, [r0, #0]
 801b148:	4621      	mov	r1, r4
 801b14a:	689b      	ldr	r3, [r3, #8]
 801b14c:	4798      	blx	r3
 801b14e:	4b0a      	ldr	r3, [pc, #40]	; (801b178 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b150:	6818      	ldr	r0, [r3, #0]
 801b152:	b118      	cbz	r0, 801b15c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b154:	6803      	ldr	r3, [r0, #0]
 801b156:	4621      	mov	r1, r4
 801b158:	689b      	ldr	r3, [r3, #8]
 801b15a:	4798      	blx	r3
 801b15c:	4b07      	ldr	r3, [pc, #28]	; (801b17c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b15e:	4621      	mov	r1, r4
 801b160:	6818      	ldr	r0, [r3, #0]
 801b162:	6803      	ldr	r3, [r0, #0]
 801b164:	695b      	ldr	r3, [r3, #20]
 801b166:	4798      	blx	r3
 801b168:	e7eb      	b.n	801b142 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b16a:	bf00      	nop
 801b16c:	200098de 	.word	0x200098de
 801b170:	200098e0 	.word	0x200098e0
 801b174:	20009948 	.word	0x20009948
 801b178:	20009944 	.word	0x20009944
 801b17c:	200098ec 	.word	0x200098ec

0801b180 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b184:	4604      	mov	r4, r0
 801b186:	b09b      	sub	sp, #108	; 0x6c
 801b188:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801b18c:	b129      	cbz	r1, 801b19a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b18e:	2300      	movs	r3, #0
 801b190:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b194:	b01b      	add	sp, #108	; 0x6c
 801b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b19a:	4baf      	ldr	r3, [pc, #700]	; (801b458 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	b33b      	cbz	r3, 801b1f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b1a0:	4dae      	ldr	r5, [pc, #696]	; (801b45c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801b1a2:	4628      	mov	r0, r5
 801b1a4:	f7fd fba2 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1a8:	4606      	mov	r6, r0
 801b1aa:	bb08      	cbnz	r0, 801b1f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b1ac:	4628      	mov	r0, r5
 801b1ae:	f7ff fca3 	bl	801aaf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b1b2:	6829      	ldr	r1, [r5, #0]
 801b1b4:	686a      	ldr	r2, [r5, #4]
 801b1b6:	4620      	mov	r0, r4
 801b1b8:	f7ff ff1c 	bl	801aff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b1bc:	802e      	strh	r6, [r5, #0]
 801b1be:	806e      	strh	r6, [r5, #2]
 801b1c0:	80ae      	strh	r6, [r5, #4]
 801b1c2:	80ee      	strh	r6, [r5, #6]
 801b1c4:	4fa6      	ldr	r7, [pc, #664]	; (801b460 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b1c6:	a809      	add	r0, sp, #36	; 0x24
 801b1c8:	f7ff fe87 	bl	801aeda <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b1cc:	883d      	ldrh	r5, [r7, #0]
 801b1ce:	462e      	mov	r6, r5
 801b1d0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b1d4:	42b3      	cmp	r3, r6
 801b1d6:	d910      	bls.n	801b1fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801b1d8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b1dc:	3601      	adds	r6, #1
 801b1de:	a809      	add	r0, sp, #36	; 0x24
 801b1e0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b1e4:	b2b6      	uxth	r6, r6
 801b1e6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b1ea:	f7ff fee1 	bl	801afb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b1ee:	e7ef      	b.n	801b1d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801b1f0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d1e5      	bne.n	801b1c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801b1f8:	e7cc      	b.n	801b194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b1fa:	462e      	mov	r6, r5
 801b1fc:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b200:	42b3      	cmp	r3, r6
 801b202:	d90b      	bls.n	801b21c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b204:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b208:	3601      	adds	r6, #1
 801b20a:	4620      	mov	r0, r4
 801b20c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b210:	b2b6      	uxth	r6, r6
 801b212:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b216:	f7ff feed 	bl	801aff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b21a:	e7ef      	b.n	801b1fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801b21c:	4e91      	ldr	r6, [pc, #580]	; (801b464 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b21e:	6833      	ldr	r3, [r6, #0]
 801b220:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b224:	2b01      	cmp	r3, #1
 801b226:	f040 8092 	bne.w	801b34e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801b22a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b22e:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b232:	f04f 0900 	mov.w	r9, #0
 801b236:	33aa      	adds	r3, #170	; 0xaa
 801b238:	42a8      	cmp	r0, r5
 801b23a:	f103 0308 	add.w	r3, r3, #8
 801b23e:	dd0a      	ble.n	801b256 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801b240:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b244:	3501      	adds	r5, #1
 801b246:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b24a:	440a      	add	r2, r1
 801b24c:	b212      	sxth	r2, r2
 801b24e:	4591      	cmp	r9, r2
 801b250:	bfb8      	it	lt
 801b252:	4691      	movlt	r9, r2
 801b254:	e7f0      	b.n	801b238 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801b256:	4b84      	ldr	r3, [pc, #528]	; (801b468 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b258:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801b470 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801b25c:	881d      	ldrh	r5, [r3, #0]
 801b25e:	2300      	movs	r3, #0
 801b260:	2d0f      	cmp	r5, #15
 801b262:	bf8c      	ite	hi
 801b264:	08ed      	lsrhi	r5, r5, #3
 801b266:	2501      	movls	r5, #1
 801b268:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b26c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b270:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b274:	6830      	ldr	r0, [r6, #0]
 801b276:	440b      	add	r3, r1
 801b278:	6802      	ldr	r2, [r0, #0]
 801b27a:	b21b      	sxth	r3, r3
 801b27c:	4599      	cmp	r9, r3
 801b27e:	dd49      	ble.n	801b314 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801b280:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801b284:	4798      	blx	r3
 801b286:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b28a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b28e:	4413      	add	r3, r2
 801b290:	b21b      	sxth	r3, r3
 801b292:	195a      	adds	r2, r3, r5
 801b294:	4290      	cmp	r0, r2
 801b296:	da07      	bge.n	801b2a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801b298:	4581      	cmp	r9, r0
 801b29a:	dd05      	ble.n	801b2a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801b29c:	4298      	cmp	r0, r3
 801b29e:	da33      	bge.n	801b308 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	dd31      	ble.n	801b308 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801b2a4:	4648      	mov	r0, r9
 801b2a6:	e004      	b.n	801b2b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801b2a8:	4298      	cmp	r0, r3
 801b2aa:	dbfb      	blt.n	801b2a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801b2ac:	4548      	cmp	r0, r9
 801b2ae:	bfa8      	it	ge
 801b2b0:	4648      	movge	r0, r9
 801b2b2:	f9b8 2000 	ldrsh.w	r2, [r8]
 801b2b6:	2100      	movs	r1, #0
 801b2b8:	1ac0      	subs	r0, r0, r3
 801b2ba:	f8b7 a000 	ldrh.w	sl, [r7]
 801b2be:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b2c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b2c6:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b2ca:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b2ce:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b2d2:	4553      	cmp	r3, sl
 801b2d4:	d9ca      	bls.n	801b26c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801b2d6:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b2da:	ab07      	add	r3, sp, #28
 801b2dc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b2e0:	6851      	ldr	r1, [r2, #4]
 801b2e2:	c303      	stmia	r3!, {r0, r1}
 801b2e4:	a807      	add	r0, sp, #28
 801b2e6:	a905      	add	r1, sp, #20
 801b2e8:	f7fd fabc 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801b2ec:	a807      	add	r0, sp, #28
 801b2ee:	f7fd fafd 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801b2f2:	b920      	cbnz	r0, 801b2fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801b2f4:	6823      	ldr	r3, [r4, #0]
 801b2f6:	a907      	add	r1, sp, #28
 801b2f8:	4620      	mov	r0, r4
 801b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2fc:	4798      	blx	r3
 801b2fe:	f10a 0a01 	add.w	sl, sl, #1
 801b302:	fa1f fa8a 	uxth.w	sl, sl
 801b306:	e7e2      	b.n	801b2ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801b308:	6830      	ldr	r0, [r6, #0]
 801b30a:	2101      	movs	r1, #1
 801b30c:	6803      	ldr	r3, [r0, #0]
 801b30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b310:	4798      	blx	r3
 801b312:	e7ab      	b.n	801b26c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801b314:	69d3      	ldr	r3, [r2, #28]
 801b316:	4798      	blx	r3
 801b318:	4b54      	ldr	r3, [pc, #336]	; (801b46c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b31a:	781b      	ldrb	r3, [r3, #0]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	f43f af39 	beq.w	801b194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b322:	2300      	movs	r3, #0
 801b324:	883d      	ldrh	r5, [r7, #0]
 801b326:	34ea      	adds	r4, #234	; 0xea
 801b328:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b32c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b330:	42ab      	cmp	r3, r5
 801b332:	f67f af2f 	bls.w	801b194 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b336:	ab1a      	add	r3, sp, #104	; 0x68
 801b338:	4620      	mov	r0, r4
 801b33a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b33e:	3501      	adds	r5, #1
 801b340:	3b44      	subs	r3, #68	; 0x44
 801b342:	b2ad      	uxth	r5, r5
 801b344:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b348:	f7ff fe32 	bl	801afb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b34c:	e7ee      	b.n	801b32c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801b34e:	2b02      	cmp	r3, #2
 801b350:	d16a      	bne.n	801b428 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801b352:	f8df a120 	ldr.w	sl, [pc, #288]	; 801b474 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801b356:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b35a:	42ab      	cmp	r3, r5
 801b35c:	d9dc      	bls.n	801b318 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801b35e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b362:	ab03      	add	r3, sp, #12
 801b364:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b368:	6851      	ldr	r1, [r2, #4]
 801b36a:	c303      	stmia	r3!, {r0, r1}
 801b36c:	f89a 3000 	ldrb.w	r3, [sl]
 801b370:	2b01      	cmp	r3, #1
 801b372:	d102      	bne.n	801b37a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801b374:	a803      	add	r0, sp, #12
 801b376:	f7ff fc19 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b37a:	a803      	add	r0, sp, #12
 801b37c:	f7fd fab6 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801b380:	2800      	cmp	r0, #0
 801b382:	d14a      	bne.n	801b41a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801b384:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b388:	f10d 0914 	add.w	r9, sp, #20
 801b38c:	f10d 081c 	add.w	r8, sp, #28
 801b390:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b394:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b398:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b39c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b3a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b3a8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801b3ac:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801b3b0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b3b4:	44dc      	add	ip, fp
 801b3b6:	6830      	ldr	r0, [r6, #0]
 801b3b8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b3bc:	ebac 0c02 	sub.w	ip, ip, r2
 801b3c0:	f8d0 e000 	ldr.w	lr, [r0]
 801b3c4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b3c8:	fa1f fc8c 	uxth.w	ip, ip
 801b3cc:	f8cd c000 	str.w	ip, [sp]
 801b3d0:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801b3d4:	47d8      	blx	fp
 801b3d6:	f89a 3000 	ldrb.w	r3, [sl]
 801b3da:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b3de:	2b01      	cmp	r3, #1
 801b3e0:	d11e      	bne.n	801b420 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801b3e2:	e899 0003 	ldmia.w	r9, {r0, r1}
 801b3e6:	e888 0003 	stmia.w	r8, {r0, r1}
 801b3ea:	4640      	mov	r0, r8
 801b3ec:	f7ff fb84 	bl	801aaf8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b3f0:	6823      	ldr	r3, [r4, #0]
 801b3f2:	4641      	mov	r1, r8
 801b3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3f6:	4620      	mov	r0, r4
 801b3f8:	4798      	blx	r3
 801b3fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b3fe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b402:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801b406:	4413      	add	r3, r2
 801b408:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b40c:	440a      	add	r2, r1
 801b40e:	b21b      	sxth	r3, r3
 801b410:	b212      	sxth	r2, r2
 801b412:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b416:	4293      	cmp	r3, r2
 801b418:	dbc6      	blt.n	801b3a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801b41a:	3501      	adds	r5, #1
 801b41c:	b2ad      	uxth	r5, r5
 801b41e:	e79a      	b.n	801b356 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801b420:	6823      	ldr	r3, [r4, #0]
 801b422:	4649      	mov	r1, r9
 801b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b426:	e7e6      	b.n	801b3f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801b428:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b42c:	42ab      	cmp	r3, r5
 801b42e:	f67f af73 	bls.w	801b318 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801b432:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b436:	ab07      	add	r3, sp, #28
 801b438:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b43c:	6851      	ldr	r1, [r2, #4]
 801b43e:	c303      	stmia	r3!, {r0, r1}
 801b440:	a807      	add	r0, sp, #28
 801b442:	f7fd fa53 	bl	80188ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801b446:	b920      	cbnz	r0, 801b452 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801b448:	6823      	ldr	r3, [r4, #0]
 801b44a:	a907      	add	r1, sp, #28
 801b44c:	4620      	mov	r0, r4
 801b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b450:	4798      	blx	r3
 801b452:	3501      	adds	r5, #1
 801b454:	b2ad      	uxth	r5, r5
 801b456:	e7e7      	b.n	801b428 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801b458:	20009944 	.word	0x20009944
 801b45c:	20009950 	.word	0x20009950
 801b460:	20000070 	.word	0x20000070
 801b464:	200098ec 	.word	0x200098ec
 801b468:	200098e0 	.word	0x200098e0
 801b46c:	200098e8 	.word	0x200098e8
 801b470:	200098de 	.word	0x200098de
 801b474:	200098e2 	.word	0x200098e2

0801b478 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b478:	4b03      	ldr	r3, [pc, #12]	; (801b488 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b47a:	2200      	movs	r2, #0
 801b47c:	801a      	strh	r2, [r3, #0]
 801b47e:	805a      	strh	r2, [r3, #2]
 801b480:	809a      	strh	r2, [r3, #4]
 801b482:	80da      	strh	r2, [r3, #6]
 801b484:	4770      	bx	lr
 801b486:	bf00      	nop
 801b488:	20009950 	.word	0x20009950

0801b48c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801b48c:	2000      	movs	r0, #0
 801b48e:	4770      	bx	lr

0801b490 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801b490:	2000      	movs	r0, #0
 801b492:	4770      	bx	lr

0801b494 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b494:	b508      	push	{r3, lr}
 801b496:	6803      	ldr	r3, [r0, #0]
 801b498:	68db      	ldr	r3, [r3, #12]
 801b49a:	4798      	blx	r3
 801b49c:	b128      	cbz	r0, 801b4aa <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b49e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801b4a2:	7a80      	ldrb	r0, [r0, #10]
 801b4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b4a8:	4318      	orrs	r0, r3
 801b4aa:	bd08      	pop	{r3, pc}

0801b4ac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801b4ac:	b40e      	push	{r1, r2, r3}
 801b4ae:	b533      	push	{r0, r1, r4, r5, lr}
 801b4b0:	ab05      	add	r3, sp, #20
 801b4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4b6:	9301      	str	r3, [sp, #4]
 801b4b8:	4b0a      	ldr	r3, [pc, #40]	; (801b4e4 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801b4ba:	685c      	ldr	r4, [r3, #4]
 801b4bc:	1061      	asrs	r1, r4, #1
 801b4be:	07e4      	lsls	r4, r4, #31
 801b4c0:	eb00 0501 	add.w	r5, r0, r1
 801b4c4:	bf46      	itte	mi
 801b4c6:	681b      	ldrmi	r3, [r3, #0]
 801b4c8:	5841      	ldrmi	r1, [r0, r1]
 801b4ca:	681c      	ldrpl	r4, [r3, #0]
 801b4cc:	4628      	mov	r0, r5
 801b4ce:	bf48      	it	mi
 801b4d0:	58cc      	ldrmi	r4, [r1, r3]
 801b4d2:	2100      	movs	r1, #0
 801b4d4:	9b01      	ldr	r3, [sp, #4]
 801b4d6:	47a0      	blx	r4
 801b4d8:	b002      	add	sp, #8
 801b4da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b4de:	b003      	add	sp, #12
 801b4e0:	4770      	bx	lr
 801b4e2:	bf00      	nop
 801b4e4:	20000058 	.word	0x20000058

0801b4e8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801b4e8:	b40c      	push	{r2, r3}
 801b4ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b4ec:	ab06      	add	r3, sp, #24
 801b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801b4f2:	9301      	str	r3, [sp, #4]
 801b4f4:	4b09      	ldr	r3, [pc, #36]	; (801b51c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801b4f6:	685d      	ldr	r5, [r3, #4]
 801b4f8:	106c      	asrs	r4, r5, #1
 801b4fa:	07ed      	lsls	r5, r5, #31
 801b4fc:	eb00 0604 	add.w	r6, r0, r4
 801b500:	bf45      	ittet	mi
 801b502:	681b      	ldrmi	r3, [r3, #0]
 801b504:	5900      	ldrmi	r0, [r0, r4]
 801b506:	681c      	ldrpl	r4, [r3, #0]
 801b508:	58c4      	ldrmi	r4, [r0, r3]
 801b50a:	4630      	mov	r0, r6
 801b50c:	9b01      	ldr	r3, [sp, #4]
 801b50e:	47a0      	blx	r4
 801b510:	b002      	add	sp, #8
 801b512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b516:	b002      	add	sp, #8
 801b518:	4770      	bx	lr
 801b51a:	bf00      	nop
 801b51c:	20000058 	.word	0x20000058

0801b520 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b520:	b40e      	push	{r1, r2, r3}
 801b522:	b530      	push	{r4, r5, lr}
 801b524:	b098      	sub	sp, #96	; 0x60
 801b526:	4604      	mov	r4, r0
 801b528:	ab1b      	add	r3, sp, #108	; 0x6c
 801b52a:	a802      	add	r0, sp, #8
 801b52c:	f853 5b04 	ldr.w	r5, [r3], #4
 801b530:	9301      	str	r3, [sp, #4]
 801b532:	f000 ffdd 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801b536:	6823      	ldr	r3, [r4, #0]
 801b538:	4620      	mov	r0, r4
 801b53a:	2401      	movs	r4, #1
 801b53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b53e:	4798      	blx	r3
 801b540:	9a01      	ldr	r2, [sp, #4]
 801b542:	4603      	mov	r3, r0
 801b544:	4629      	mov	r1, r5
 801b546:	a802      	add	r0, sp, #8
 801b548:	f000 ffef 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b54c:	a802      	add	r0, sp, #8
 801b54e:	f001 f825 	bl	801c59c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b552:	b2a3      	uxth	r3, r4
 801b554:	b138      	cbz	r0, 801b566 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b556:	280a      	cmp	r0, #10
 801b558:	a802      	add	r0, sp, #8
 801b55a:	bf04      	itt	eq
 801b55c:	3301      	addeq	r3, #1
 801b55e:	b21c      	sxtheq	r4, r3
 801b560:	f001 f81c 	bl	801c59c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b564:	e7f5      	b.n	801b552 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b566:	4618      	mov	r0, r3
 801b568:	b018      	add	sp, #96	; 0x60
 801b56a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b56e:	b003      	add	sp, #12
 801b570:	4770      	bx	lr
	...

0801b574 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b574:	b40e      	push	{r1, r2, r3}
 801b576:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b578:	b098      	sub	sp, #96	; 0x60
 801b57a:	4605      	mov	r5, r0
 801b57c:	4f25      	ldr	r7, [pc, #148]	; (801b614 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801b57e:	ab1d      	add	r3, sp, #116	; 0x74
 801b580:	a802      	add	r0, sp, #8
 801b582:	ae18      	add	r6, sp, #96	; 0x60
 801b584:	f853 4b04 	ldr.w	r4, [r3], #4
 801b588:	9300      	str	r3, [sp, #0]
 801b58a:	f000 ffb1 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801b58e:	682b      	ldr	r3, [r5, #0]
 801b590:	4628      	mov	r0, r5
 801b592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b594:	4798      	blx	r3
 801b596:	4621      	mov	r1, r4
 801b598:	2400      	movs	r4, #0
 801b59a:	4603      	mov	r3, r0
 801b59c:	9a00      	ldr	r2, [sp, #0]
 801b59e:	a802      	add	r0, sp, #8
 801b5a0:	f000 ffc3 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b5a4:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b5a8:	462a      	mov	r2, r5
 801b5aa:	4633      	mov	r3, r6
 801b5ac:	4621      	mov	r1, r4
 801b5ae:	a802      	add	r0, sp, #8
 801b5b0:	f001 f920 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b5b4:	b340      	cbz	r0, 801b608 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801b5b6:	280a      	cmp	r0, #10
 801b5b8:	d01f      	beq.n	801b5fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b5ba:	9901      	ldr	r1, [sp, #4]
 801b5bc:	b1e9      	cbz	r1, 801b5fa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801b5be:	7b4b      	ldrb	r3, [r1, #13]
 801b5c0:	f891 c008 	ldrb.w	ip, [r1, #8]
 801b5c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801b5c8:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801b5cc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801b5d0:	79c9      	ldrb	r1, [r1, #7]
 801b5d2:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801b5d6:	bf18      	it	ne
 801b5d8:	4638      	movne	r0, r7
 801b5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b5de:	bf08      	it	eq
 801b5e0:	2000      	moveq	r0, #0
 801b5e2:	88aa      	ldrh	r2, [r5, #4]
 801b5e4:	ea41 010e 	orr.w	r1, r1, lr
 801b5e8:	ea43 030c 	orr.w	r3, r3, ip
 801b5ec:	440a      	add	r2, r1
 801b5ee:	4303      	orrs	r3, r0
 801b5f0:	1ad3      	subs	r3, r2, r3
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	42a3      	cmp	r3, r4
 801b5f6:	bfc8      	it	gt
 801b5f8:	b21c      	sxthgt	r4, r3
 801b5fa:	4633      	mov	r3, r6
 801b5fc:	462a      	mov	r2, r5
 801b5fe:	2100      	movs	r1, #0
 801b600:	a802      	add	r0, sp, #8
 801b602:	f001 f8f7 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b606:	e7d5      	b.n	801b5b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801b608:	b2a0      	uxth	r0, r4
 801b60a:	b018      	add	sp, #96	; 0x60
 801b60c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b610:	b003      	add	sp, #12
 801b612:	4770      	bx	lr
 801b614:	fffffe00 	.word	0xfffffe00

0801b618 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b618:	b40e      	push	{r1, r2, r3}
 801b61a:	b570      	push	{r4, r5, r6, lr}
 801b61c:	b099      	sub	sp, #100	; 0x64
 801b61e:	4604      	mov	r4, r0
 801b620:	26ff      	movs	r6, #255	; 0xff
 801b622:	ab1d      	add	r3, sp, #116	; 0x74
 801b624:	a802      	add	r0, sp, #8
 801b626:	f853 5b04 	ldr.w	r5, [r3], #4
 801b62a:	9300      	str	r3, [sp, #0]
 801b62c:	f000 ff60 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801b630:	6823      	ldr	r3, [r4, #0]
 801b632:	4620      	mov	r0, r4
 801b634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b636:	4798      	blx	r3
 801b638:	4629      	mov	r1, r5
 801b63a:	4603      	mov	r3, r0
 801b63c:	9a00      	ldr	r2, [sp, #0]
 801b63e:	a802      	add	r0, sp, #8
 801b640:	ad18      	add	r5, sp, #96	; 0x60
 801b642:	f000 ff72 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b646:	2100      	movs	r1, #0
 801b648:	4622      	mov	r2, r4
 801b64a:	a802      	add	r0, sp, #8
 801b64c:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b650:	462b      	mov	r3, r5
 801b652:	f001 f8cf 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b656:	b190      	cbz	r0, 801b67e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801b658:	280a      	cmp	r0, #10
 801b65a:	d009      	beq.n	801b670 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801b65c:	9a01      	ldr	r2, [sp, #4]
 801b65e:	b13a      	cbz	r2, 801b670 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801b660:	7923      	ldrb	r3, [r4, #4]
 801b662:	7a12      	ldrb	r2, [r2, #8]
 801b664:	1a9b      	subs	r3, r3, r2
 801b666:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801b66a:	429e      	cmp	r6, r3
 801b66c:	bf28      	it	cs
 801b66e:	461e      	movcs	r6, r3
 801b670:	462b      	mov	r3, r5
 801b672:	4622      	mov	r2, r4
 801b674:	2100      	movs	r1, #0
 801b676:	a802      	add	r0, sp, #8
 801b678:	f001 f8bc 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b67c:	e7eb      	b.n	801b656 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b67e:	4630      	mov	r0, r6
 801b680:	b019      	add	sp, #100	; 0x64
 801b682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b686:	b003      	add	sp, #12
 801b688:	4770      	bx	lr

0801b68a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b68a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b68e:	b099      	sub	sp, #100	; 0x64
 801b690:	4606      	mov	r6, r0
 801b692:	4614      	mov	r4, r2
 801b694:	4688      	mov	r8, r1
 801b696:	a802      	add	r0, sp, #8
 801b698:	461d      	mov	r5, r3
 801b69a:	f04f 0b00 	mov.w	fp, #0
 801b69e:	f000 ff27 	bl	801c4f0 <_ZN8touchgfx12TextProviderC1Ev>
 801b6a2:	6833      	ldr	r3, [r6, #0]
 801b6a4:	4630      	mov	r0, r6
 801b6a6:	465f      	mov	r7, fp
 801b6a8:	46da      	mov	sl, fp
 801b6aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6ac:	46d9      	mov	r9, fp
 801b6ae:	4798      	blx	r3
 801b6b0:	462a      	mov	r2, r5
 801b6b2:	4603      	mov	r3, r0
 801b6b4:	4621      	mov	r1, r4
 801b6b6:	a802      	add	r0, sp, #8
 801b6b8:	f000 ff37 	bl	801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b6bc:	ab01      	add	r3, sp, #4
 801b6be:	4632      	mov	r2, r6
 801b6c0:	4641      	mov	r1, r8
 801b6c2:	a802      	add	r0, sp, #8
 801b6c4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b6c8:	f001 f894 	bl	801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b6cc:	4605      	mov	r5, r0
 801b6ce:	b108      	cbz	r0, 801b6d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801b6d0:	280a      	cmp	r0, #10
 801b6d2:	d10b      	bne.n	801b6ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801b6d4:	4557      	cmp	r7, sl
 801b6d6:	bf38      	it	cc
 801b6d8:	4657      	movcc	r7, sl
 801b6da:	f04f 0a00 	mov.w	sl, #0
 801b6de:	b91d      	cbnz	r5, 801b6e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801b6e0:	4638      	mov	r0, r7
 801b6e2:	b019      	add	sp, #100	; 0x64
 801b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6e8:	46ab      	mov	fp, r5
 801b6ea:	e7e7      	b.n	801b6bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801b6ec:	9a01      	ldr	r2, [sp, #4]
 801b6ee:	2a00      	cmp	r2, #0
 801b6f0:	d0fa      	beq.n	801b6e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801b6f2:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801b6f6:	4659      	mov	r1, fp
 801b6f8:	6833      	ldr	r3, [r6, #0]
 801b6fa:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801b6fe:	7a94      	ldrb	r4, [r2, #10]
 801b700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b702:	4304      	orrs	r4, r0
 801b704:	4630      	mov	r0, r6
 801b706:	8895      	ldrh	r5, [r2, #4]
 801b708:	4798      	blx	r3
 801b70a:	4420      	add	r0, r4
 801b70c:	4450      	add	r0, sl
 801b70e:	fa1f fa80 	uxth.w	sl, r0
 801b712:	e7e4      	b.n	801b6de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801b714 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b714:	b513      	push	{r0, r1, r4, lr}
 801b716:	1d01      	adds	r1, r0, #4
 801b718:	4603      	mov	r3, r0
 801b71a:	466a      	mov	r2, sp
 801b71c:	c903      	ldmia	r1, {r0, r1}
 801b71e:	e882 0003 	stmia.w	r2, {r0, r1}
 801b722:	2100      	movs	r1, #0
 801b724:	4618      	mov	r0, r3
 801b726:	9100      	str	r1, [sp, #0]
 801b728:	6819      	ldr	r1, [r3, #0]
 801b72a:	690c      	ldr	r4, [r1, #16]
 801b72c:	4611      	mov	r1, r2
 801b72e:	47a0      	blx	r4
 801b730:	b002      	add	sp, #8
 801b732:	bd10      	pop	{r4, pc}

0801b734 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b734:	b538      	push	{r3, r4, r5, lr}
 801b736:	680b      	ldr	r3, [r1, #0]
 801b738:	460c      	mov	r4, r1
 801b73a:	4605      	mov	r5, r0
 801b73c:	68db      	ldr	r3, [r3, #12]
 801b73e:	4798      	blx	r3
 801b740:	6823      	ldr	r3, [r4, #0]
 801b742:	4620      	mov	r0, r4
 801b744:	4629      	mov	r1, r5
 801b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b748:	4798      	blx	r3
 801b74a:	4628      	mov	r0, r5
 801b74c:	bd38      	pop	{r3, r4, r5, pc}

0801b74e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b74e:	b410      	push	{r4}
 801b750:	880a      	ldrh	r2, [r1, #0]
 801b752:	8884      	ldrh	r4, [r0, #4]
 801b754:	4422      	add	r2, r4
 801b756:	800a      	strh	r2, [r1, #0]
 801b758:	884a      	ldrh	r2, [r1, #2]
 801b75a:	88c4      	ldrh	r4, [r0, #6]
 801b75c:	4422      	add	r2, r4
 801b75e:	804a      	strh	r2, [r1, #2]
 801b760:	6940      	ldr	r0, [r0, #20]
 801b762:	b120      	cbz	r0, 801b76e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b764:	6803      	ldr	r3, [r0, #0]
 801b766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b76c:	4718      	bx	r3
 801b76e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b772:	4770      	bx	lr

0801b774 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b774:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b776:	460b      	mov	r3, r1
 801b778:	b085      	sub	sp, #20
 801b77a:	4604      	mov	r4, r0
 801b77c:	b901      	cbnz	r1, 801b780 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b77e:	b1fa      	cbz	r2, 801b7c0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801b780:	1d27      	adds	r7, r4, #4
 801b782:	466e      	mov	r6, sp
 801b784:	ad02      	add	r5, sp, #8
 801b786:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b78a:	e886 0003 	stmia.w	r6, {r0, r1}
 801b78e:	88e1      	ldrh	r1, [r4, #6]
 801b790:	4620      	mov	r0, r4
 801b792:	440a      	add	r2, r1
 801b794:	88a1      	ldrh	r1, [r4, #4]
 801b796:	4419      	add	r1, r3
 801b798:	6823      	ldr	r3, [r4, #0]
 801b79a:	b212      	sxth	r2, r2
 801b79c:	b209      	sxth	r1, r1
 801b79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7a0:	4798      	blx	r3
 801b7a2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b7a6:	e885 0003 	stmia.w	r5, {r0, r1}
 801b7aa:	6960      	ldr	r0, [r4, #20]
 801b7ac:	b150      	cbz	r0, 801b7c4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801b7ae:	6803      	ldr	r3, [r0, #0]
 801b7b0:	4631      	mov	r1, r6
 801b7b2:	691b      	ldr	r3, [r3, #16]
 801b7b4:	4798      	blx	r3
 801b7b6:	6960      	ldr	r0, [r4, #20]
 801b7b8:	6803      	ldr	r3, [r0, #0]
 801b7ba:	691b      	ldr	r3, [r3, #16]
 801b7bc:	4629      	mov	r1, r5
 801b7be:	4798      	blx	r3
 801b7c0:	b005      	add	sp, #20
 801b7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7c4:	f7ff fb78 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 801b7c8:	6803      	ldr	r3, [r0, #0]
 801b7ca:	4631      	mov	r1, r6
 801b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7ce:	4798      	blx	r3
 801b7d0:	f7ff fb72 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 801b7d4:	6803      	ldr	r3, [r0, #0]
 801b7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7d8:	e7f0      	b.n	801b7bc <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801b7da <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b7da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b7dc:	8882      	ldrh	r2, [r0, #4]
 801b7de:	4605      	mov	r5, r0
 801b7e0:	880b      	ldrh	r3, [r1, #0]
 801b7e2:	460c      	mov	r4, r1
 801b7e4:	4413      	add	r3, r2
 801b7e6:	800b      	strh	r3, [r1, #0]
 801b7e8:	884b      	ldrh	r3, [r1, #2]
 801b7ea:	88c2      	ldrh	r2, [r0, #6]
 801b7ec:	4413      	add	r3, r2
 801b7ee:	4602      	mov	r2, r0
 801b7f0:	804b      	strh	r3, [r1, #2]
 801b7f2:	466b      	mov	r3, sp
 801b7f4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b7f8:	6851      	ldr	r1, [r2, #4]
 801b7fa:	c303      	stmia	r3!, {r0, r1}
 801b7fc:	4621      	mov	r1, r4
 801b7fe:	4668      	mov	r0, sp
 801b800:	f7fd f830 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801b804:	466b      	mov	r3, sp
 801b806:	cb03      	ldmia	r3!, {r0, r1}
 801b808:	6020      	str	r0, [r4, #0]
 801b80a:	6061      	str	r1, [r4, #4]
 801b80c:	6968      	ldr	r0, [r5, #20]
 801b80e:	b128      	cbz	r0, 801b81c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b810:	6803      	ldr	r3, [r0, #0]
 801b812:	691b      	ldr	r3, [r3, #16]
 801b814:	4621      	mov	r1, r4
 801b816:	4798      	blx	r3
 801b818:	b003      	add	sp, #12
 801b81a:	bd30      	pop	{r4, r5, pc}
 801b81c:	f7ff fb4c 	bl	801aeb8 <_ZN8touchgfx11Application11getInstanceEv>
 801b820:	6803      	ldr	r3, [r0, #0]
 801b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b824:	e7f6      	b.n	801b814 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b826 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b826:	b570      	push	{r4, r5, r6, lr}
 801b828:	8882      	ldrh	r2, [r0, #4]
 801b82a:	460c      	mov	r4, r1
 801b82c:	880b      	ldrh	r3, [r1, #0]
 801b82e:	4605      	mov	r5, r0
 801b830:	4413      	add	r3, r2
 801b832:	800b      	strh	r3, [r1, #0]
 801b834:	884b      	ldrh	r3, [r1, #2]
 801b836:	88c2      	ldrh	r2, [r0, #6]
 801b838:	4413      	add	r3, r2
 801b83a:	804b      	strh	r3, [r1, #2]
 801b83c:	1d01      	adds	r1, r0, #4
 801b83e:	4620      	mov	r0, r4
 801b840:	f7fd f810 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801b844:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b848:	b153      	cbz	r3, 801b860 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801b84a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b84e:	b13b      	cbz	r3, 801b860 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801b850:	6968      	ldr	r0, [r5, #20]
 801b852:	b128      	cbz	r0, 801b860 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801b854:	6803      	ldr	r3, [r0, #0]
 801b856:	4621      	mov	r1, r4
 801b858:	6a1b      	ldr	r3, [r3, #32]
 801b85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b85e:	4718      	bx	r3
 801b860:	bd70      	pop	{r4, r5, r6, pc}

0801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b862:	b510      	push	{r4, lr}
 801b864:	2300      	movs	r3, #0
 801b866:	4604      	mov	r4, r0
 801b868:	4608      	mov	r0, r1
 801b86a:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b86e:	8023      	strh	r3, [r4, #0]
 801b870:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b874:	8063      	strh	r3, [r4, #2]
 801b876:	6803      	ldr	r3, [r0, #0]
 801b878:	80a1      	strh	r1, [r4, #4]
 801b87a:	4621      	mov	r1, r4
 801b87c:	80e2      	strh	r2, [r4, #6]
 801b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b880:	4798      	blx	r3
 801b882:	4620      	mov	r0, r4
 801b884:	bd10      	pop	{r4, pc}
	...

0801b888 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b888:	b530      	push	{r4, r5, lr}
 801b88a:	8083      	strh	r3, [r0, #4]
 801b88c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b890:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b894:	7183      	strb	r3, [r0, #6]
 801b896:	79c3      	ldrb	r3, [r0, #7]
 801b898:	6101      	str	r1, [r0, #16]
 801b89a:	f365 0306 	bfi	r3, r5, #0, #7
 801b89e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b8a2:	8282      	strh	r2, [r0, #20]
 801b8a4:	f365 13c7 	bfi	r3, r5, #7, #1
 801b8a8:	71c3      	strb	r3, [r0, #7]
 801b8aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b8ae:	7203      	strb	r3, [r0, #8]
 801b8b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b8b4:	7243      	strb	r3, [r0, #9]
 801b8b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b8ba:	8143      	strh	r3, [r0, #10]
 801b8bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b8c0:	8183      	strh	r3, [r0, #12]
 801b8c2:	4b01      	ldr	r3, [pc, #4]	; (801b8c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b8c4:	6003      	str	r3, [r0, #0]
 801b8c6:	bd30      	pop	{r4, r5, pc}
 801b8c8:	080284d0 	.word	0x080284d0

0801b8cc <_ZNK8touchgfx9ConstFont4findEt>:
 801b8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8ce:	8a84      	ldrh	r4, [r0, #20]
 801b8d0:	2500      	movs	r5, #0
 801b8d2:	260e      	movs	r6, #14
 801b8d4:	3c01      	subs	r4, #1
 801b8d6:	42a5      	cmp	r5, r4
 801b8d8:	dc0c      	bgt.n	801b8f4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801b8da:	192a      	adds	r2, r5, r4
 801b8dc:	6903      	ldr	r3, [r0, #16]
 801b8de:	1052      	asrs	r2, r2, #1
 801b8e0:	fb06 3302 	mla	r3, r6, r2, r3
 801b8e4:	889f      	ldrh	r7, [r3, #4]
 801b8e6:	428f      	cmp	r7, r1
 801b8e8:	d901      	bls.n	801b8ee <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801b8ea:	1e54      	subs	r4, r2, #1
 801b8ec:	e7f3      	b.n	801b8d6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b8ee:	d202      	bcs.n	801b8f6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801b8f0:	1c55      	adds	r5, r2, #1
 801b8f2:	e7f0      	b.n	801b8d6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b8fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8fc:	4605      	mov	r5, r0
 801b8fe:	4617      	mov	r7, r2
 801b900:	461e      	mov	r6, r3
 801b902:	f7ff ffe3 	bl	801b8cc <_ZNK8touchgfx9ConstFont4findEt>
 801b906:	b9e0      	cbnz	r0, 801b942 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801b908:	b911      	cbnz	r1, 801b910 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801b90a:	2400      	movs	r4, #0
 801b90c:	4620      	mov	r0, r4
 801b90e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b910:	290a      	cmp	r1, #10
 801b912:	d0fa      	beq.n	801b90a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b914:	682b      	ldr	r3, [r5, #0]
 801b916:	4628      	mov	r0, r5
 801b918:	691b      	ldr	r3, [r3, #16]
 801b91a:	4798      	blx	r3
 801b91c:	4601      	mov	r1, r0
 801b91e:	4628      	mov	r0, r5
 801b920:	f7ff ffd4 	bl	801b8cc <_ZNK8touchgfx9ConstFont4findEt>
 801b924:	4604      	mov	r4, r0
 801b926:	2800      	cmp	r0, #0
 801b928:	d0ef      	beq.n	801b90a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b92a:	682b      	ldr	r3, [r5, #0]
 801b92c:	4621      	mov	r1, r4
 801b92e:	4628      	mov	r0, r5
 801b930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b932:	4798      	blx	r3
 801b934:	6038      	str	r0, [r7, #0]
 801b936:	682b      	ldr	r3, [r5, #0]
 801b938:	4628      	mov	r0, r5
 801b93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b93c:	4798      	blx	r3
 801b93e:	7030      	strb	r0, [r6, #0]
 801b940:	e7e4      	b.n	801b90c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801b942:	4604      	mov	r4, r0
 801b944:	e7f1      	b.n	801b92a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801b946 <_ZN8touchgfx6memsetEPvhm>:
 801b946:	4402      	add	r2, r0
 801b948:	4290      	cmp	r0, r2
 801b94a:	d002      	beq.n	801b952 <_ZN8touchgfx6memsetEPvhm+0xc>
 801b94c:	f800 1b01 	strb.w	r1, [r0], #1
 801b950:	e7fa      	b.n	801b948 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b952:	4770      	bx	lr

0801b954 <_ZN8touchgfx10ClickEventD1Ev>:
 801b954:	4770      	bx	lr

0801b956 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801b956:	2000      	movs	r0, #0
 801b958:	4770      	bx	lr

0801b95a <_ZN8touchgfx9DragEventD1Ev>:
 801b95a:	4770      	bx	lr

0801b95c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801b95c:	2001      	movs	r0, #1
 801b95e:	4770      	bx	lr

0801b960 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b960:	2002      	movs	r0, #2
 801b962:	4770      	bx	lr

0801b964 <_ZN8touchgfx12GestureEventD1Ev>:
 801b964:	4770      	bx	lr

0801b966 <_ZN8touchgfx10ClickEventD0Ev>:
 801b966:	b510      	push	{r4, lr}
 801b968:	4604      	mov	r4, r0
 801b96a:	210c      	movs	r1, #12
 801b96c:	f009 fcb8 	bl	80252e0 <_ZdlPvj>
 801b970:	4620      	mov	r0, r4
 801b972:	bd10      	pop	{r4, pc}

0801b974 <_ZN8touchgfx9DragEventD0Ev>:
 801b974:	b510      	push	{r4, lr}
 801b976:	4604      	mov	r4, r0
 801b978:	2110      	movs	r1, #16
 801b97a:	f009 fcb1 	bl	80252e0 <_ZdlPvj>
 801b97e:	4620      	mov	r0, r4
 801b980:	bd10      	pop	{r4, pc}

0801b982 <_ZN8touchgfx12GestureEventD0Ev>:
 801b982:	b510      	push	{r4, lr}
 801b984:	4604      	mov	r4, r0
 801b986:	210c      	movs	r1, #12
 801b988:	f009 fcaa 	bl	80252e0 <_ZdlPvj>
 801b98c:	4620      	mov	r0, r4
 801b98e:	bd10      	pop	{r4, pc}

0801b990 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b990:	b530      	push	{r4, r5, lr}
 801b992:	460d      	mov	r5, r1
 801b994:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b996:	b087      	sub	sp, #28
 801b998:	4604      	mov	r4, r0
 801b99a:	b301      	cbz	r1, 801b9de <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b99c:	a801      	add	r0, sp, #4
 801b99e:	f7ff ff60 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9a2:	892a      	ldrh	r2, [r5, #8]
 801b9a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b9a8:	7928      	ldrb	r0, [r5, #4]
 801b9aa:	1ad2      	subs	r2, r2, r3
 801b9ac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b9ae:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b9b2:	441a      	add	r2, r3
 801b9b4:	896b      	ldrh	r3, [r5, #10]
 801b9b6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b9ba:	f88d 0010 	strb.w	r0, [sp, #16]
 801b9be:	1b5b      	subs	r3, r3, r5
 801b9c0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b9c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b9c4:	442b      	add	r3, r5
 801b9c6:	4d07      	ldr	r5, [pc, #28]	; (801b9e4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b9c8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b9cc:	a903      	add	r1, sp, #12
 801b9ce:	9503      	str	r5, [sp, #12]
 801b9d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b9d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b9d8:	6803      	ldr	r3, [r0, #0]
 801b9da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b9dc:	4798      	blx	r3
 801b9de:	b007      	add	sp, #28
 801b9e0:	bd30      	pop	{r4, r5, pc}
 801b9e2:	bf00      	nop
 801b9e4:	0802854c 	.word	0x0802854c

0801b9e8 <_ZNK8touchgfx4Rect9intersectEss>:
 801b9e8:	b510      	push	{r4, lr}
 801b9ea:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b9ee:	428b      	cmp	r3, r1
 801b9f0:	dc10      	bgt.n	801ba14 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b9f2:	8884      	ldrh	r4, [r0, #4]
 801b9f4:	4423      	add	r3, r4
 801b9f6:	b21b      	sxth	r3, r3
 801b9f8:	4299      	cmp	r1, r3
 801b9fa:	da0b      	bge.n	801ba14 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801b9fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ba00:	4293      	cmp	r3, r2
 801ba02:	dc07      	bgt.n	801ba14 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801ba04:	88c0      	ldrh	r0, [r0, #6]
 801ba06:	4418      	add	r0, r3
 801ba08:	b200      	sxth	r0, r0
 801ba0a:	4282      	cmp	r2, r0
 801ba0c:	bfac      	ite	ge
 801ba0e:	2000      	movge	r0, #0
 801ba10:	2001      	movlt	r0, #1
 801ba12:	bd10      	pop	{r4, pc}
 801ba14:	2000      	movs	r0, #0
 801ba16:	e7fc      	b.n	801ba12 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801ba18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801ba18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba1a:	460c      	mov	r4, r1
 801ba1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801ba1e:	b089      	sub	sp, #36	; 0x24
 801ba20:	4605      	mov	r5, r0
 801ba22:	2900      	cmp	r1, #0
 801ba24:	d054      	beq.n	801bad0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801ba26:	4668      	mov	r0, sp
 801ba28:	f7ff ff1b 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba2c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801ba2e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801ba30:	4668      	mov	r0, sp
 801ba32:	8922      	ldrh	r2, [r4, #8]
 801ba34:	88e1      	ldrh	r1, [r4, #6]
 801ba36:	443a      	add	r2, r7
 801ba38:	4431      	add	r1, r6
 801ba3a:	b212      	sxth	r2, r2
 801ba3c:	b209      	sxth	r1, r1
 801ba3e:	f7ff ffd3 	bl	801b9e8 <_ZNK8touchgfx4Rect9intersectEss>
 801ba42:	b1d0      	cbz	r0, 801ba7a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ba44:	89a2      	ldrh	r2, [r4, #12]
 801ba46:	4668      	mov	r0, sp
 801ba48:	8961      	ldrh	r1, [r4, #10]
 801ba4a:	443a      	add	r2, r7
 801ba4c:	4431      	add	r1, r6
 801ba4e:	b212      	sxth	r2, r2
 801ba50:	b209      	sxth	r1, r1
 801ba52:	f7ff ffc9 	bl	801b9e8 <_ZNK8touchgfx4Rect9intersectEss>
 801ba56:	4603      	mov	r3, r0
 801ba58:	b978      	cbnz	r0, 801ba7a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801ba5a:	4a1e      	ldr	r2, [pc, #120]	; (801bad4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801ba5c:	a904      	add	r1, sp, #16
 801ba5e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801ba60:	9204      	str	r2, [sp, #16]
 801ba62:	2202      	movs	r2, #2
 801ba64:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba68:	f88d 2014 	strb.w	r2, [sp, #20]
 801ba6c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ba70:	f8ad 301a 	strh.w	r3, [sp, #26]
 801ba74:	6803      	ldr	r3, [r0, #0]
 801ba76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba78:	4798      	blx	r3
 801ba7a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801ba7c:	a802      	add	r0, sp, #8
 801ba7e:	f7ff fef0 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba82:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ba86:	88e0      	ldrh	r0, [r4, #6]
 801ba88:	8961      	ldrh	r1, [r4, #10]
 801ba8a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801ba8e:	1a80      	subs	r0, r0, r2
 801ba90:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801ba94:	1a89      	subs	r1, r1, r2
 801ba96:	8923      	ldrh	r3, [r4, #8]
 801ba98:	4460      	add	r0, ip
 801ba9a:	89a2      	ldrh	r2, [r4, #12]
 801ba9c:	4461      	add	r1, ip
 801ba9e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801baa0:	eba3 030e 	sub.w	r3, r3, lr
 801baa4:	eba2 020e 	sub.w	r2, r2, lr
 801baa8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801baac:	7927      	ldrb	r7, [r4, #4]
 801baae:	4433      	add	r3, r6
 801bab0:	4432      	add	r2, r6
 801bab2:	4c09      	ldr	r4, [pc, #36]	; (801bad8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801bab4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801bab6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801baba:	a904      	add	r1, sp, #16
 801babc:	9404      	str	r4, [sp, #16]
 801babe:	f88d 7014 	strb.w	r7, [sp, #20]
 801bac2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bac6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801baca:	6803      	ldr	r3, [r0, #0]
 801bacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bace:	4798      	blx	r3
 801bad0:	b009      	add	sp, #36	; 0x24
 801bad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bad4:	08028524 	.word	0x08028524
 801bad8:	08028538 	.word	0x08028538

0801badc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae0:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801bae4:	b0a1      	sub	sp, #132	; 0x84
 801bae6:	4604      	mov	r4, r0
 801bae8:	460d      	mov	r5, r1
 801baea:	790b      	ldrb	r3, [r1, #4]
 801baec:	f1b9 0f00 	cmp.w	r9, #0
 801baf0:	d00f      	beq.n	801bb12 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	f040 80a2 	bne.w	801bc3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801baf8:	b021      	add	sp, #132	; 0x84
 801bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bafe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bb02:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bb06:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bb0a:	1d20      	adds	r0, r4, #4
 801bb0c:	f7fc fdf8 	bl	8018700 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bb10:	e094      	b.n	801bc3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d1f0      	bne.n	801baf8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bb16:	4b5f      	ldr	r3, [pc, #380]	; (801bc94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801bb1e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801bb22:	f1ba 0f03 	cmp.w	sl, #3
 801bb26:	ddea      	ble.n	801bafe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801bb28:	f1ba 0f0c 	cmp.w	sl, #12
 801bb2c:	f04f 0303 	mov.w	r3, #3
 801bb30:	f04f 0600 	mov.w	r6, #0
 801bb34:	4958      	ldr	r1, [pc, #352]	; (801bc98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801bb36:	bfd8      	it	le
 801bb38:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801bb3c:	960a      	str	r6, [sp, #40]	; 0x28
 801bb3e:	bfd8      	it	le
 801bb40:	fb92 f3f3 	sdivle	r3, r2, r3
 801bb44:	9301      	str	r3, [sp, #4]
 801bb46:	4b55      	ldr	r3, [pc, #340]	; (801bc9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801bb48:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb4c:	4b54      	ldr	r3, [pc, #336]	; (801bca0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801bb4e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801bb52:	2248      	movs	r2, #72	; 0x48
 801bb54:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb58:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801bb5c:	ab0e      	add	r3, sp, #56	; 0x38
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f009 fc68 	bl	8025434 <memcpy>
 801bb64:	f04f 32ff 	mov.w	r2, #4294967295
 801bb68:	f8cd a008 	str.w	sl, [sp, #8]
 801bb6c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801bb70:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bb74:	46b3      	mov	fp, r6
 801bb76:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb7a:	b29b      	uxth	r3, r3
 801bb7c:	9303      	str	r3, [sp, #12]
 801bb7e:	2300      	movs	r3, #0
 801bb80:	9a03      	ldr	r2, [sp, #12]
 801bb82:	88ef      	ldrh	r7, [r5, #6]
 801bb84:	a80a      	add	r0, sp, #40	; 0x28
 801bb86:	9309      	str	r3, [sp, #36]	; 0x24
 801bb88:	9b07      	ldr	r3, [sp, #28]
 801bb8a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801bb8e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801bb92:	fb13 f302 	smulbb	r3, r3, r2
 801bb96:	b29b      	uxth	r3, r3
 801bb98:	9304      	str	r3, [sp, #16]
 801bb9a:	9b07      	ldr	r3, [sp, #28]
 801bb9c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bba0:	685b      	ldr	r3, [r3, #4]
 801bba2:	fb13 f302 	smulbb	r3, r3, r2
 801bba6:	b29b      	uxth	r3, r3
 801bba8:	9305      	str	r3, [sp, #20]
 801bbaa:	9b04      	ldr	r3, [sp, #16]
 801bbac:	441f      	add	r7, r3
 801bbae:	9b05      	ldr	r3, [sp, #20]
 801bbb0:	4498      	add	r8, r3
 801bbb2:	b23f      	sxth	r7, r7
 801bbb4:	fa0f f888 	sxth.w	r8, r8
 801bbb8:	4639      	mov	r1, r7
 801bbba:	4642      	mov	r2, r8
 801bbbc:	f7ff ff14 	bl	801b9e8 <_ZNK8touchgfx4Rect9intersectEss>
 801bbc0:	b380      	cbz	r0, 801bc24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bbc2:	4639      	mov	r1, r7
 801bbc4:	ab09      	add	r3, sp, #36	; 0x24
 801bbc6:	4642      	mov	r2, r8
 801bbc8:	1d20      	adds	r0, r4, #4
 801bbca:	f7fc fd99 	bl	8018700 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801bbce:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bbd0:	b341      	cbz	r1, 801bc24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bbd2:	4549      	cmp	r1, r9
 801bbd4:	d026      	beq.n	801bc24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bbd6:	a80c      	add	r0, sp, #48	; 0x30
 801bbd8:	f7ff fe43 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bbdc:	2002      	movs	r0, #2
 801bbde:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801bbe2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801bbe6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bbea:	fb92 f2f0 	sdiv	r2, r2, r0
 801bbee:	440a      	add	r2, r1
 801bbf0:	1a99      	subs	r1, r3, r2
 801bbf2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801bbf6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801bbfa:	fb93 f3f0 	sdiv	r3, r3, r0
 801bbfe:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801bc02:	4403      	add	r3, r0
 801bc04:	1ad3      	subs	r3, r2, r3
 801bc06:	9a06      	ldr	r2, [sp, #24]
 801bc08:	435b      	muls	r3, r3
 801bc0a:	fb01 3301 	mla	r3, r1, r1, r3
 801bc0e:	4293      	cmp	r3, r2
 801bc10:	d208      	bcs.n	801bc24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801bc12:	9a04      	ldr	r2, [sp, #16]
 801bc14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801bc18:	86a2      	strh	r2, [r4, #52]	; 0x34
 801bc1a:	9a05      	ldr	r2, [sp, #20]
 801bc1c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801bc20:	86e2      	strh	r2, [r4, #54]	; 0x36
 801bc22:	9306      	str	r3, [sp, #24]
 801bc24:	f10b 0b02 	add.w	fp, fp, #2
 801bc28:	f1bb 0f08 	cmp.w	fp, #8
 801bc2c:	dda7      	ble.n	801bb7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801bc2e:	9b02      	ldr	r3, [sp, #8]
 801bc30:	3601      	adds	r6, #1
 801bc32:	4453      	add	r3, sl
 801bc34:	9302      	str	r3, [sp, #8]
 801bc36:	9b01      	ldr	r3, [sp, #4]
 801bc38:	42b3      	cmp	r3, r6
 801bc3a:	d199      	bne.n	801bb70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801bc3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bc3e:	2900      	cmp	r1, #0
 801bc40:	f43f af5a 	beq.w	801baf8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bc44:	a80c      	add	r0, sp, #48	; 0x30
 801bc46:	2600      	movs	r6, #0
 801bc48:	f7ff fe0b 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bc4c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801bc50:	88ea      	ldrh	r2, [r5, #6]
 801bc52:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801bc56:	1ad2      	subs	r2, r2, r3
 801bc58:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bc5a:	7929      	ldrb	r1, [r5, #4]
 801bc5c:	441a      	add	r2, r3
 801bc5e:	892b      	ldrh	r3, [r5, #8]
 801bc60:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801bc64:	a90e      	add	r1, sp, #56	; 0x38
 801bc66:	1a1b      	subs	r3, r3, r0
 801bc68:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801bc6a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801bc6e:	4403      	add	r3, r0
 801bc70:	480c      	ldr	r0, [pc, #48]	; (801bca4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801bc72:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801bc76:	900e      	str	r0, [sp, #56]	; 0x38
 801bc78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bc7a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801bc7e:	6803      	ldr	r3, [r0, #0]
 801bc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc82:	4798      	blx	r3
 801bc84:	792b      	ldrb	r3, [r5, #4]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	f43f af36 	beq.w	801baf8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bc8c:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801bc90:	e732      	b.n	801baf8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801bc92:	bf00      	nop
 801bc94:	200098ec 	.word	0x200098ec
 801bc98:	080269a0 	.word	0x080269a0
 801bc9c:	200098de 	.word	0x200098de
 801bca0:	200098e0 	.word	0x200098e0
 801bca4:	08028524 	.word	0x08028524

0801bca8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bcaa:	4604      	mov	r4, r0
 801bcac:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801bcb0:	3201      	adds	r2, #1
 801bcb2:	d112      	bne.n	801bcda <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801bcb4:	2500      	movs	r5, #0
 801bcb6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bcba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bcbe:	6803      	ldr	r3, [r0, #0]
 801bcc0:	9500      	str	r5, [sp, #0]
 801bcc2:	466d      	mov	r5, sp
 801bcc4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bcc8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bccc:	4629      	mov	r1, r5
 801bcce:	6a1b      	ldr	r3, [r3, #32]
 801bcd0:	4798      	blx	r3
 801bcd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bcd6:	e884 0003 	stmia.w	r4, {r0, r1}
 801bcda:	4620      	mov	r0, r4
 801bcdc:	b003      	add	sp, #12
 801bcde:	bd30      	pop	{r4, r5, pc}

0801bce0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801bce0:	b513      	push	{r0, r1, r4, lr}
 801bce2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801bce6:	4604      	mov	r4, r0
 801bce8:	3301      	adds	r3, #1
 801bcea:	d109      	bne.n	801bd00 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801bcec:	4601      	mov	r1, r0
 801bcee:	4668      	mov	r0, sp
 801bcf0:	f7ff fdb7 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bcf4:	f8bd 3000 	ldrh.w	r3, [sp]
 801bcf8:	8423      	strh	r3, [r4, #32]
 801bcfa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bcfe:	8463      	strh	r3, [r4, #34]	; 0x22
 801bd00:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801bd04:	b002      	add	sp, #8
 801bd06:	bd10      	pop	{r4, pc}

0801bd08 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801bd08:	b513      	push	{r0, r1, r4, lr}
 801bd0a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801bd0e:	4604      	mov	r4, r0
 801bd10:	3301      	adds	r3, #1
 801bd12:	d109      	bne.n	801bd28 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801bd14:	4601      	mov	r1, r0
 801bd16:	4668      	mov	r0, sp
 801bd18:	f7ff fda3 	bl	801b862 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bd1c:	f8bd 3000 	ldrh.w	r3, [sp]
 801bd20:	8423      	strh	r3, [r4, #32]
 801bd22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bd26:	8463      	strh	r3, [r4, #34]	; 0x22
 801bd28:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801bd2c:	b002      	add	sp, #8
 801bd2e:	bd10      	pop	{r4, pc}

0801bd30 <_ZN8touchgfx6ScreenC1Ev>:
 801bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd32:	4605      	mov	r5, r0
 801bd34:	4b17      	ldr	r3, [pc, #92]	; (801bd94 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801bd36:	2200      	movs	r2, #0
 801bd38:	4917      	ldr	r1, [pc, #92]	; (801bd98 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801bd3a:	f845 3b04 	str.w	r3, [r5], #4
 801bd3e:	2301      	movs	r3, #1
 801bd40:	8102      	strh	r2, [r0, #8]
 801bd42:	4604      	mov	r4, r0
 801bd44:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801bd48:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bd4c:	4b13      	ldr	r3, [pc, #76]	; (801bd9c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801bd4e:	8142      	strh	r2, [r0, #10]
 801bd50:	f9b3 7000 	ldrsh.w	r7, [r3]
 801bd54:	4b12      	ldr	r3, [pc, #72]	; (801bda0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801bd56:	8182      	strh	r2, [r0, #12]
 801bd58:	81c2      	strh	r2, [r0, #14]
 801bd5a:	8202      	strh	r2, [r0, #16]
 801bd5c:	8242      	strh	r2, [r0, #18]
 801bd5e:	8282      	strh	r2, [r0, #20]
 801bd60:	82c2      	strh	r2, [r0, #22]
 801bd62:	6202      	str	r2, [r0, #32]
 801bd64:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801bd68:	6342      	str	r2, [r0, #52]	; 0x34
 801bd6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bd6e:	6041      	str	r1, [r0, #4]
 801bd70:	4611      	mov	r1, r2
 801bd72:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801bd76:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801bd7a:	4628      	mov	r0, r5
 801bd7c:	f7f8 fbd3 	bl	8014526 <_ZN8touchgfx8Drawable5setXYEss>
 801bd80:	4639      	mov	r1, r7
 801bd82:	4628      	mov	r0, r5
 801bd84:	f7f8 fbed 	bl	8014562 <_ZN8touchgfx8Drawable8setWidthEs>
 801bd88:	4628      	mov	r0, r5
 801bd8a:	4631      	mov	r1, r6
 801bd8c:	f7f8 fbf8 	bl	8014580 <_ZN8touchgfx8Drawable9setHeightEs>
 801bd90:	4620      	mov	r0, r4
 801bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd94:	08028560 	.word	0x08028560
 801bd98:	08027704 	.word	0x08027704
 801bd9c:	200098de 	.word	0x200098de
 801bda0:	200098e0 	.word	0x200098e0

0801bda4 <_ZN8touchgfx6Screen4drawEv>:
 801bda4:	4b09      	ldr	r3, [pc, #36]	; (801bdcc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801bda6:	b507      	push	{r0, r1, r2, lr}
 801bda8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bdac:	2100      	movs	r1, #0
 801bdae:	4b08      	ldr	r3, [pc, #32]	; (801bdd0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801bdb0:	9100      	str	r1, [sp, #0]
 801bdb2:	4669      	mov	r1, sp
 801bdb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bdb8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bdbc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bdc0:	6803      	ldr	r3, [r0, #0]
 801bdc2:	689b      	ldr	r3, [r3, #8]
 801bdc4:	4798      	blx	r3
 801bdc6:	b003      	add	sp, #12
 801bdc8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bdcc:	200098de 	.word	0x200098de
 801bdd0:	200098e0 	.word	0x200098e0

0801bdd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801bdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bddc:	b089      	sub	sp, #36	; 0x24
 801bdde:	4680      	mov	r8, r0
 801bde0:	460c      	mov	r4, r1
 801bde2:	4615      	mov	r5, r2
 801bde4:	b16b      	cbz	r3, 801be02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bde6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bdea:	b153      	cbz	r3, 801be02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bdec:	4628      	mov	r0, r5
 801bdee:	f7ff ff5b 	bl	801bca8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bdf2:	4621      	mov	r1, r4
 801bdf4:	f7fe ffd6 	bl	801ada4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bdf8:	69eb      	ldr	r3, [r5, #28]
 801bdfa:	b928      	cbnz	r0, 801be08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801bdfc:	461d      	mov	r5, r3
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d1f4      	bne.n	801bdec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801be02:	b009      	add	sp, #36	; 0x24
 801be04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be08:	ae04      	add	r6, sp, #16
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d051      	beq.n	801beb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801be0e:	682b      	ldr	r3, [r5, #0]
 801be10:	4629      	mov	r1, r5
 801be12:	a802      	add	r0, sp, #8
 801be14:	68db      	ldr	r3, [r3, #12]
 801be16:	4798      	blx	r3
 801be18:	4628      	mov	r0, r5
 801be1a:	f7ff ff61 	bl	801bce0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801be1e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801be22:	4407      	add	r7, r0
 801be24:	4628      	mov	r0, r5
 801be26:	f7ff ff6f 	bl	801bd08 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801be2a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801be2e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801be32:	b23f      	sxth	r7, r7
 801be34:	4418      	add	r0, r3
 801be36:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801be3a:	4621      	mov	r1, r4
 801be3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be40:	f8ad 0012 	strh.w	r0, [sp, #18]
 801be44:	4630      	mov	r0, r6
 801be46:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be4a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801be4e:	f7fc fd09 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801be52:	4628      	mov	r0, r5
 801be54:	f7ff ff28 	bl	801bca8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801be58:	ab06      	add	r3, sp, #24
 801be5a:	4602      	mov	r2, r0
 801be5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801be60:	e883 0003 	stmia.w	r3, {r0, r1}
 801be64:	4611      	mov	r1, r2
 801be66:	4618      	mov	r0, r3
 801be68:	f7fc fcfc 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801be6c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801be70:	f9b4 1000 	ldrsh.w	r1, [r4]
 801be74:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801be78:	4299      	cmp	r1, r3
 801be7a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801be7e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801be82:	d10b      	bne.n	801be9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801be84:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801be88:	4552      	cmp	r2, sl
 801be8a:	d107      	bne.n	801be9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801be8c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801be90:	455a      	cmp	r2, fp
 801be92:	d103      	bne.n	801be9c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801be94:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801be98:	454a      	cmp	r2, r9
 801be9a:	d00a      	beq.n	801beb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801be9c:	f1bb 0f00 	cmp.w	fp, #0
 801bea0:	d002      	beq.n	801bea8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801bea2:	f1b9 0f00 	cmp.w	r9, #0
 801bea6:	d12e      	bne.n	801bf06 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801bea8:	69ea      	ldr	r2, [r5, #28]
 801beaa:	4621      	mov	r1, r4
 801beac:	4640      	mov	r0, r8
 801beae:	f7ff ff91 	bl	801bdd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801beb2:	4628      	mov	r0, r5
 801beb4:	f7ff fef8 	bl	801bca8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801beb8:	6861      	ldr	r1, [r4, #4]
 801beba:	4602      	mov	r2, r0
 801bebc:	4633      	mov	r3, r6
 801bebe:	6820      	ldr	r0, [r4, #0]
 801bec0:	c303      	stmia	r3!, {r0, r1}
 801bec2:	4611      	mov	r1, r2
 801bec4:	4630      	mov	r0, r6
 801bec6:	f7fc fccd 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801beca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d097      	beq.n	801be02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bed2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d093      	beq.n	801be02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801beda:	4628      	mov	r0, r5
 801bedc:	f7ff ff00 	bl	801bce0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bee0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801bee4:	1a18      	subs	r0, r3, r0
 801bee6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801beea:	4628      	mov	r0, r5
 801beec:	f7ff ff0c 	bl	801bd08 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bef0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801bef4:	4631      	mov	r1, r6
 801bef6:	1a18      	subs	r0, r3, r0
 801bef8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801befc:	4628      	mov	r0, r5
 801befe:	682b      	ldr	r3, [r5, #0]
 801bf00:	689b      	ldr	r3, [r3, #8]
 801bf02:	4798      	blx	r3
 801bf04:	e77d      	b.n	801be02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bf06:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801bf0a:	fa1f f08a 	uxth.w	r0, sl
 801bf0e:	4552      	cmp	r2, sl
 801bf10:	9000      	str	r0, [sp, #0]
 801bf12:	da12      	bge.n	801bf3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801bf14:	9301      	str	r3, [sp, #4]
 801bf16:	9b00      	ldr	r3, [sp, #0]
 801bf18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801bf1c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bf20:	1a9a      	subs	r2, r3, r2
 801bf22:	f8ad 1010 	strh.w	r1, [sp, #16]
 801bf26:	4631      	mov	r1, r6
 801bf28:	f8ad 0014 	strh.w	r0, [sp, #20]
 801bf2c:	4640      	mov	r0, r8
 801bf2e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801bf32:	69ea      	ldr	r2, [r5, #28]
 801bf34:	f7ff ff4e 	bl	801bdd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bf38:	9b01      	ldr	r3, [sp, #4]
 801bf3a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bf3e:	b29f      	uxth	r7, r3
 801bf40:	429a      	cmp	r2, r3
 801bf42:	da0d      	bge.n	801bf60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801bf44:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bf48:	1aba      	subs	r2, r7, r2
 801bf4a:	f8ad a012 	strh.w	sl, [sp, #18]
 801bf4e:	4631      	mov	r1, r6
 801bf50:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf54:	4640      	mov	r0, r8
 801bf56:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bf5a:	69ea      	ldr	r2, [r5, #28]
 801bf5c:	f7ff ff3a 	bl	801bdd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bf60:	8822      	ldrh	r2, [r4, #0]
 801bf62:	445f      	add	r7, fp
 801bf64:	88a3      	ldrh	r3, [r4, #4]
 801bf66:	b2bf      	uxth	r7, r7
 801bf68:	4413      	add	r3, r2
 801bf6a:	b23a      	sxth	r2, r7
 801bf6c:	b29b      	uxth	r3, r3
 801bf6e:	b219      	sxth	r1, r3
 801bf70:	4291      	cmp	r1, r2
 801bf72:	dd0d      	ble.n	801bf90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801bf74:	1bdb      	subs	r3, r3, r7
 801bf76:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bf7a:	f8ad a012 	strh.w	sl, [sp, #18]
 801bf7e:	4631      	mov	r1, r6
 801bf80:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bf84:	4640      	mov	r0, r8
 801bf86:	f8ad 9016 	strh.w	r9, [sp, #22]
 801bf8a:	69ea      	ldr	r2, [r5, #28]
 801bf8c:	f7ff ff22 	bl	801bdd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bf90:	88e2      	ldrh	r2, [r4, #6]
 801bf92:	8863      	ldrh	r3, [r4, #2]
 801bf94:	4413      	add	r3, r2
 801bf96:	9a00      	ldr	r2, [sp, #0]
 801bf98:	444a      	add	r2, r9
 801bf9a:	b29b      	uxth	r3, r3
 801bf9c:	fa1f f982 	uxth.w	r9, r2
 801bfa0:	b219      	sxth	r1, r3
 801bfa2:	fa0f f289 	sxth.w	r2, r9
 801bfa6:	428a      	cmp	r2, r1
 801bfa8:	da83      	bge.n	801beb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801bfaa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bfae:	eba3 0309 	sub.w	r3, r3, r9
 801bfb2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801bfb6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801bfba:	4631      	mov	r1, r6
 801bfbc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801bfc0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801bfc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bfc8:	69ea      	ldr	r2, [r5, #28]
 801bfca:	e76f      	b.n	801beac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801bfcc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfce:	2300      	movs	r3, #0
 801bfd0:	aa02      	add	r2, sp, #8
 801bfd2:	4604      	mov	r4, r0
 801bfd4:	3004      	adds	r0, #4
 801bfd6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801bfda:	460d      	mov	r5, r1
 801bfdc:	f7fc fd19 	bl	8018a12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bfe0:	9a01      	ldr	r2, [sp, #4]
 801bfe2:	b11a      	cbz	r2, 801bfec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801bfe4:	4629      	mov	r1, r5
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	f7ff fef4 	bl	801bdd4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bfec:	b003      	add	sp, #12
 801bfee:	bd30      	pop	{r4, r5, pc}

0801bff0 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bff2:	4602      	mov	r2, r0
 801bff4:	4604      	mov	r4, r0
 801bff6:	460d      	mov	r5, r1
 801bff8:	466b      	mov	r3, sp
 801bffa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bffe:	6851      	ldr	r1, [r2, #4]
 801c000:	c303      	stmia	r3!, {r0, r1}
 801c002:	4629      	mov	r1, r5
 801c004:	4668      	mov	r0, sp
 801c006:	f7fc fc2d 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801c00a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c00e:	4669      	mov	r1, sp
 801c010:	b123      	cbz	r3, 801c01c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801c012:	4620      	mov	r0, r4
 801c014:	f7ff ffda 	bl	801bfcc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c018:	b003      	add	sp, #12
 801c01a:	bd30      	pop	{r4, r5, pc}
 801c01c:	1d20      	adds	r0, r4, #4
 801c01e:	f7fc fcbf 	bl	80189a0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c022:	e7f9      	b.n	801c018 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801c024 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c024:	460b      	mov	r3, r1
 801c026:	680a      	ldr	r2, [r1, #0]
 801c028:	1d01      	adds	r1, r0, #4
 801c02a:	6952      	ldr	r2, [r2, #20]
 801c02c:	4618      	mov	r0, r3
 801c02e:	4710      	bx	r2

0801c030 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801c030:	f011 0f40 	tst.w	r1, #64	; 0x40
 801c034:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801c038:	4b03      	ldr	r3, [pc, #12]	; (801c048 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801c03a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c03e:	bf08      	it	eq
 801c040:	2300      	moveq	r3, #0
 801c042:	4308      	orrs	r0, r1
 801c044:	4318      	orrs	r0, r3
 801c046:	4770      	bx	lr
 801c048:	fffffe00 	.word	0xfffffe00

0801c04c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801c04c:	7b43      	ldrb	r3, [r0, #13]
 801c04e:	7201      	strb	r1, [r0, #8]
 801c050:	b289      	uxth	r1, r1
 801c052:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801c056:	05ca      	lsls	r2, r1, #23
 801c058:	bf48      	it	mi
 801c05a:	f043 0320 	orrmi.w	r3, r3, #32
 801c05e:	7343      	strb	r3, [r0, #13]
 801c060:	058b      	lsls	r3, r1, #22
 801c062:	bf42      	ittt	mi
 801c064:	7b43      	ldrbmi	r3, [r0, #13]
 801c066:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801c06a:	7343      	strbmi	r3, [r0, #13]
 801c06c:	4770      	bx	lr

0801c06e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c06e:	b530      	push	{r4, r5, lr}
 801c070:	2500      	movs	r5, #0
 801c072:	2401      	movs	r4, #1
 801c074:	6843      	ldr	r3, [r0, #4]
 801c076:	b913      	cbnz	r3, 801c07e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c078:	6803      	ldr	r3, [r0, #0]
 801c07a:	b1f3      	cbz	r3, 801c0ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c07c:	6043      	str	r3, [r0, #4]
 801c07e:	7c03      	ldrb	r3, [r0, #16]
 801c080:	b143      	cbz	r3, 801c094 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c082:	68c3      	ldr	r3, [r0, #12]
 801c084:	b12b      	cbz	r3, 801c092 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c086:	881a      	ldrh	r2, [r3, #0]
 801c088:	b11a      	cbz	r2, 801c092 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c08a:	1c9a      	adds	r2, r3, #2
 801c08c:	60c2      	str	r2, [r0, #12]
 801c08e:	8818      	ldrh	r0, [r3, #0]
 801c090:	bd30      	pop	{r4, r5, pc}
 801c092:	7405      	strb	r5, [r0, #16]
 801c094:	6843      	ldr	r3, [r0, #4]
 801c096:	8819      	ldrh	r1, [r3, #0]
 801c098:	b179      	cbz	r1, 801c0ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801c09a:	1c9a      	adds	r2, r3, #2
 801c09c:	2902      	cmp	r1, #2
 801c09e:	6042      	str	r2, [r0, #4]
 801c0a0:	d1f5      	bne.n	801c08e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c0a2:	6883      	ldr	r3, [r0, #8]
 801c0a4:	1d1a      	adds	r2, r3, #4
 801c0a6:	6082      	str	r2, [r0, #8]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	60c3      	str	r3, [r0, #12]
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d0e1      	beq.n	801c074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c0b0:	881b      	ldrh	r3, [r3, #0]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d0de      	beq.n	801c074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c0b6:	7404      	strb	r4, [r0, #16]
 801c0b8:	e7dc      	b.n	801c074 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c0ba:	2000      	movs	r0, #0
 801c0bc:	e7e8      	b.n	801c090 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c0be <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c0be:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0c0:	4605      	mov	r5, r0
 801c0c2:	4608      	mov	r0, r1
 801c0c4:	b1f1      	cbz	r1, 801c104 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c0c6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801c0ca:	460b      	mov	r3, r1
 801c0cc:	f101 0708 	add.w	r7, r1, #8
 801c0d0:	4622      	mov	r2, r4
 801c0d2:	6818      	ldr	r0, [r3, #0]
 801c0d4:	3308      	adds	r3, #8
 801c0d6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c0da:	4626      	mov	r6, r4
 801c0dc:	42bb      	cmp	r3, r7
 801c0de:	c603      	stmia	r6!, {r0, r1}
 801c0e0:	4634      	mov	r4, r6
 801c0e2:	d1f6      	bne.n	801c0d2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c0e4:	6818      	ldr	r0, [r3, #0]
 801c0e6:	6030      	str	r0, [r6, #0]
 801c0e8:	4610      	mov	r0, r2
 801c0ea:	889b      	ldrh	r3, [r3, #4]
 801c0ec:	80b3      	strh	r3, [r6, #4]
 801c0ee:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801c0f2:	015b      	lsls	r3, r3, #5
 801c0f4:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c0f8:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801c0fc:	430b      	orrs	r3, r1
 801c0fe:	425b      	negs	r3, r3
 801c100:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801c104:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c106 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c106:	b538      	push	{r3, r4, r5, lr}
 801c108:	460c      	mov	r4, r1
 801c10a:	6811      	ldr	r1, [r2, #0]
 801c10c:	4610      	mov	r0, r2
 801c10e:	68cd      	ldr	r5, [r1, #12]
 801c110:	4619      	mov	r1, r3
 801c112:	47a8      	blx	r5
 801c114:	2800      	cmp	r0, #0
 801c116:	bf08      	it	eq
 801c118:	4620      	moveq	r0, r4
 801c11a:	bd38      	pop	{r3, r4, r5, pc}

0801c11c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c11c:	b570      	push	{r4, r5, r6, lr}
 801c11e:	8810      	ldrh	r0, [r2, #0]
 801c120:	4298      	cmp	r0, r3
 801c122:	d817      	bhi.n	801c154 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c124:	1e48      	subs	r0, r1, #1
 801c126:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c12a:	4298      	cmp	r0, r3
 801c12c:	d312      	bcc.n	801c154 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c12e:	2400      	movs	r4, #0
 801c130:	428c      	cmp	r4, r1
 801c132:	d20f      	bcs.n	801c154 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c134:	1860      	adds	r0, r4, r1
 801c136:	1040      	asrs	r0, r0, #1
 801c138:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c13c:	0085      	lsls	r5, r0, #2
 801c13e:	42b3      	cmp	r3, r6
 801c140:	d902      	bls.n	801c148 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c142:	3001      	adds	r0, #1
 801c144:	b284      	uxth	r4, r0
 801c146:	e7f3      	b.n	801c130 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c148:	d102      	bne.n	801c150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801c14a:	442a      	add	r2, r5
 801c14c:	8850      	ldrh	r0, [r2, #2]
 801c14e:	bd70      	pop	{r4, r5, r6, pc}
 801c150:	b281      	uxth	r1, r0
 801c152:	e7ed      	b.n	801c130 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c154:	2000      	movs	r0, #0
 801c156:	e7fa      	b.n	801c14e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801c158 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801c158:	b510      	push	{r4, lr}
 801c15a:	8ac3      	ldrh	r3, [r0, #22]
 801c15c:	428b      	cmp	r3, r1
 801c15e:	d805      	bhi.n	801c16c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801c160:	4b07      	ldr	r3, [pc, #28]	; (801c180 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801c162:	21fd      	movs	r1, #253	; 0xfd
 801c164:	4a07      	ldr	r2, [pc, #28]	; (801c184 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801c166:	4808      	ldr	r0, [pc, #32]	; (801c188 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801c168:	f009 f8e6 	bl	8025338 <__assert_func>
 801c16c:	8a83      	ldrh	r3, [r0, #20]
 801c16e:	240a      	movs	r4, #10
 801c170:	4419      	add	r1, r3
 801c172:	fbb1 f3f4 	udiv	r3, r1, r4
 801c176:	fb04 1113 	mls	r1, r4, r3, r1
 801c17a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801c17e:	bd10      	pop	{r4, pc}
 801c180:	080285ad 	.word	0x080285ad
 801c184:	080289dc 	.word	0x080289dc
 801c188:	080285bb 	.word	0x080285bb

0801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801c18c:	b508      	push	{r3, lr}
 801c18e:	8ac3      	ldrh	r3, [r0, #22]
 801c190:	428b      	cmp	r3, r1
 801c192:	d805      	bhi.n	801c1a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801c194:	4b07      	ldr	r3, [pc, #28]	; (801c1b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801c196:	21d3      	movs	r1, #211	; 0xd3
 801c198:	4a07      	ldr	r2, [pc, #28]	; (801c1b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801c19a:	4808      	ldr	r0, [pc, #32]	; (801c1bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801c19c:	f009 f8cc 	bl	8025338 <__assert_func>
 801c1a0:	8a83      	ldrh	r3, [r0, #20]
 801c1a2:	220a      	movs	r2, #10
 801c1a4:	4419      	add	r1, r3
 801c1a6:	fbb1 f3f2 	udiv	r3, r1, r2
 801c1aa:	fb02 1113 	mls	r1, r2, r3, r1
 801c1ae:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801c1b2:	bd08      	pop	{r3, pc}
 801c1b4:	080285ad 	.word	0x080285ad
 801c1b8:	0802872c 	.word	0x0802872c
 801c1bc:	080285bb 	.word	0x080285bb

0801c1c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c4:	4604      	mov	r4, r0
 801c1c6:	4688      	mov	r8, r1
 801c1c8:	4615      	mov	r5, r2
 801c1ca:	b94a      	cbnz	r2, 801c1e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801c1cc:	4691      	mov	r9, r2
 801c1ce:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c1d2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801c1d6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c1da:	4648      	mov	r0, r9
 801c1dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1e0:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801c1e4:	8892      	ldrh	r2, [r2, #4]
 801c1e6:	462b      	mov	r3, r5
 801c1e8:	f105 0c08 	add.w	ip, r5, #8
 801c1ec:	46b3      	mov	fp, r6
 801c1ee:	6818      	ldr	r0, [r3, #0]
 801c1f0:	3308      	adds	r3, #8
 801c1f2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c1f6:	4637      	mov	r7, r6
 801c1f8:	4563      	cmp	r3, ip
 801c1fa:	c703      	stmia	r7!, {r0, r1}
 801c1fc:	463e      	mov	r6, r7
 801c1fe:	d1f6      	bne.n	801c1ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801c200:	6818      	ldr	r0, [r3, #0]
 801c202:	46d9      	mov	r9, fp
 801c204:	6038      	str	r0, [r7, #0]
 801c206:	889b      	ldrh	r3, [r3, #4]
 801c208:	80bb      	strh	r3, [r7, #4]
 801c20a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801c20e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801c212:	18d3      	adds	r3, r2, r3
 801c214:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801c218:	b298      	uxth	r0, r3
 801c21a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801c21e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801c222:	281d      	cmp	r0, #29
 801c224:	ea4a 0a01 	orr.w	sl, sl, r1
 801c228:	fa1f f68a 	uxth.w	r6, sl
 801c22c:	d842      	bhi.n	801c2b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801c22e:	2301      	movs	r3, #1
 801c230:	4950      	ldr	r1, [pc, #320]	; (801c374 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801c232:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801c236:	4083      	lsls	r3, r0
 801c238:	420b      	tst	r3, r1
 801c23a:	d114      	bne.n	801c266 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c23c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801c240:	d03c      	beq.n	801c2bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801c242:	fa1f fa8a 	uxth.w	sl, sl
 801c246:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801c24a:	4658      	mov	r0, fp
 801c24c:	eba1 010a 	sub.w	r1, r1, sl
 801c250:	b209      	sxth	r1, r1
 801c252:	f7ff fefb 	bl	801c04c <_ZN8touchgfx9GlyphNode6setTopEs>
 801c256:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801c25a:	1b86      	subs	r6, r0, r6
 801c25c:	eba6 0a0a 	sub.w	sl, r6, sl
 801c260:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801c264:	e7b9      	b.n	801c1da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c266:	2100      	movs	r1, #0
 801c268:	f104 001a 	add.w	r0, r4, #26
 801c26c:	f7ff ff8e 	bl	801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c270:	f640 6333 	movw	r3, #3635	; 0xe33
 801c274:	4601      	mov	r1, r0
 801c276:	4298      	cmp	r0, r3
 801c278:	d10a      	bne.n	801c290 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801c27a:	f8d8 3000 	ldr.w	r3, [r8]
 801c27e:	4640      	mov	r0, r8
 801c280:	68db      	ldr	r3, [r3, #12]
 801c282:	4798      	blx	r3
 801c284:	7b41      	ldrb	r1, [r0, #13]
 801c286:	7a00      	ldrb	r0, [r0, #8]
 801c288:	f7ff fed2 	bl	801c030 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c28c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801c290:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801c294:	4658      	mov	r0, fp
 801c296:	4431      	add	r1, r6
 801c298:	4451      	add	r1, sl
 801c29a:	b209      	sxth	r1, r1
 801c29c:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801c2a0:	f7ff fed4 	bl	801c04c <_ZN8touchgfx9GlyphNode6setTopEs>
 801c2a4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c2a8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c2ac:	1a9b      	subs	r3, r3, r2
 801c2ae:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c2b2:	e792      	b.n	801c1da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c2b4:	f640 631b 	movw	r3, #3611	; 0xe1b
 801c2b8:	429a      	cmp	r2, r3
 801c2ba:	d005      	beq.n	801c2c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801c2bc:	f022 0302 	bic.w	r3, r2, #2
 801c2c0:	f640 611d 	movw	r1, #3613	; 0xe1d
 801c2c4:	428b      	cmp	r3, r1
 801c2c6:	d119      	bne.n	801c2fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801c2c8:	1e53      	subs	r3, r2, #1
 801c2ca:	4629      	mov	r1, r5
 801c2cc:	4642      	mov	r2, r8
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	b29b      	uxth	r3, r3
 801c2d2:	f7ff ff18 	bl	801c106 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c2d6:	7b41      	ldrb	r1, [r0, #13]
 801c2d8:	7a00      	ldrb	r0, [r0, #8]
 801c2da:	f7ff fea9 	bl	801c030 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c2de:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801c2e2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801c2e6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c2ea:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801c2ee:	4313      	orrs	r3, r2
 801c2f0:	115a      	asrs	r2, r3, #5
 801c2f2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c2f6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c2fa:	e02e      	b.n	801c35a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c2fc:	4639      	mov	r1, r7
 801c2fe:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801c302:	f7ff fe95 	bl	801c030 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c306:	f640 6109 	movw	r1, #3593	; 0xe09
 801c30a:	f022 0310 	bic.w	r3, r2, #16
 801c30e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801c312:	428b      	cmp	r3, r1
 801c314:	d003      	beq.n	801c31e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801c316:	f640 6313 	movw	r3, #3603	; 0xe13
 801c31a:	429a      	cmp	r2, r3
 801c31c:	d127      	bne.n	801c36e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801c31e:	b27f      	sxtb	r7, r7
 801c320:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801c324:	4629      	mov	r1, r5
 801c326:	4620      	mov	r0, r4
 801c328:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801c32c:	431f      	orrs	r7, r3
 801c32e:	f640 6313 	movw	r3, #3603	; 0xe13
 801c332:	429a      	cmp	r2, r3
 801c334:	bf14      	ite	ne
 801c336:	f102 33ff 	addne.w	r3, r2, #4294967295
 801c33a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c33e:	4642      	mov	r2, r8
 801c340:	bf18      	it	ne
 801c342:	b29b      	uxthne	r3, r3
 801c344:	f7ff fedf 	bl	801c106 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c348:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801c34c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c350:	7a83      	ldrb	r3, [r0, #10]
 801c352:	4313      	orrs	r3, r2
 801c354:	1aff      	subs	r7, r7, r3
 801c356:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801c35a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c35e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801c362:	f7ff fe65 	bl	801c030 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c366:	1b80      	subs	r0, r0, r6
 801c368:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801c36c:	e735      	b.n	801c1da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c36e:	2300      	movs	r3, #0
 801c370:	e7c1      	b.n	801c2f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801c372:	bf00      	nop
 801c374:	3fc00079 	.word	0x3fc00079

0801c378 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c378:	3a01      	subs	r2, #1
 801c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c37e:	b292      	uxth	r2, r2
 801c380:	460c      	mov	r4, r1
 801c382:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c386:	42b2      	cmp	r2, r6
 801c388:	d018      	beq.n	801c3bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801c38a:	8b01      	ldrh	r1, [r0, #24]
 801c38c:	f834 5b02 	ldrh.w	r5, [r4], #2
 801c390:	4291      	cmp	r1, r2
 801c392:	d805      	bhi.n	801c3a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801c394:	4b13      	ldr	r3, [pc, #76]	; (801c3e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801c396:	21d3      	movs	r1, #211	; 0xd3
 801c398:	4a13      	ldr	r2, [pc, #76]	; (801c3e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801c39a:	4814      	ldr	r0, [pc, #80]	; (801c3ec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801c39c:	f008 ffcc 	bl	8025338 <__assert_func>
 801c3a0:	8ac1      	ldrh	r1, [r0, #22]
 801c3a2:	4411      	add	r1, r2
 801c3a4:	3a01      	subs	r2, #1
 801c3a6:	f001 0101 	and.w	r1, r1, #1
 801c3aa:	b292      	uxth	r2, r2
 801c3ac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c3b0:	8a49      	ldrh	r1, [r1, #18]
 801c3b2:	428d      	cmp	r5, r1
 801c3b4:	d0e7      	beq.n	801c386 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801c3b6:	2000      	movs	r0, #0
 801c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3bc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801c3c0:	2600      	movs	r6, #0
 801c3c2:	f100 051a 	add.w	r5, r0, #26
 801c3c6:	441f      	add	r7, r3
 801c3c8:	b2b1      	uxth	r1, r6
 801c3ca:	42b9      	cmp	r1, r7
 801c3cc:	da08      	bge.n	801c3e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801c3ce:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801c3d2:	4628      	mov	r0, r5
 801c3d4:	f7ff feda 	bl	801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c3d8:	3601      	adds	r6, #1
 801c3da:	4540      	cmp	r0, r8
 801c3dc:	d0f4      	beq.n	801c3c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801c3de:	e7ea      	b.n	801c3b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801c3e0:	2001      	movs	r0, #1
 801c3e2:	e7e9      	b.n	801c3b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801c3e4:	080285ad 	.word	0x080285ad
 801c3e8:	08028b3c 	.word	0x08028b3c
 801c3ec:	080285bb 	.word	0x080285bb

0801c3f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801c3f0:	b538      	push	{r3, r4, r5, lr}
 801c3f2:	8ac3      	ldrh	r3, [r0, #22]
 801c3f4:	428b      	cmp	r3, r1
 801c3f6:	d205      	bcs.n	801c404 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801c3f8:	4b08      	ldr	r3, [pc, #32]	; (801c41c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801c3fa:	21d8      	movs	r1, #216	; 0xd8
 801c3fc:	4a08      	ldr	r2, [pc, #32]	; (801c420 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801c3fe:	4809      	ldr	r0, [pc, #36]	; (801c424 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801c400:	f008 ff9a 	bl	8025338 <__assert_func>
 801c404:	8a82      	ldrh	r2, [r0, #20]
 801c406:	250a      	movs	r5, #10
 801c408:	1a5b      	subs	r3, r3, r1
 801c40a:	440a      	add	r2, r1
 801c40c:	82c3      	strh	r3, [r0, #22]
 801c40e:	fbb2 f4f5 	udiv	r4, r2, r5
 801c412:	fb05 2214 	mls	r2, r5, r4, r2
 801c416:	8282      	strh	r2, [r0, #20]
 801c418:	bd38      	pop	{r3, r4, r5, pc}
 801c41a:	bf00      	nop
 801c41c:	080285a1 	.word	0x080285a1
 801c420:	08028958 	.word	0x08028958
 801c424:	080285bb 	.word	0x080285bb

0801c428 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801c428:	b538      	push	{r3, r4, r5, lr}
 801c42a:	8ac3      	ldrh	r3, [r0, #22]
 801c42c:	2b09      	cmp	r3, #9
 801c42e:	d905      	bls.n	801c43c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801c430:	4b08      	ldr	r3, [pc, #32]	; (801c454 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801c432:	21f7      	movs	r1, #247	; 0xf7
 801c434:	4a08      	ldr	r2, [pc, #32]	; (801c458 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801c436:	4809      	ldr	r0, [pc, #36]	; (801c45c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801c438:	f008 ff7e 	bl	8025338 <__assert_func>
 801c43c:	8a82      	ldrh	r2, [r0, #20]
 801c43e:	250a      	movs	r5, #10
 801c440:	441a      	add	r2, r3
 801c442:	3301      	adds	r3, #1
 801c444:	fbb2 f4f5 	udiv	r4, r2, r5
 801c448:	fb05 2214 	mls	r2, r5, r4, r2
 801c44c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801c450:	82c3      	strh	r3, [r0, #22]
 801c452:	bd38      	pop	{r3, r4, r5, pc}
 801c454:	08028595 	.word	0x08028595
 801c458:	080288a9 	.word	0x080288a9
 801c45c:	080285bb 	.word	0x080285bb

0801c460 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c460:	b538      	push	{r3, r4, r5, lr}
 801c462:	4604      	mov	r4, r0
 801c464:	f100 051a 	add.w	r5, r0, #26
 801c468:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c46a:	2b0a      	cmp	r3, #10
 801c46c:	d01c      	beq.n	801c4a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801c46e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801c470:	b962      	cbnz	r2, 801c48c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801c472:	f104 051a 	add.w	r5, r4, #26
 801c476:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c478:	2b0a      	cmp	r3, #10
 801c47a:	d015      	beq.n	801c4a8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801c47c:	4620      	mov	r0, r4
 801c47e:	f7ff fdf6 	bl	801c06e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c482:	4601      	mov	r1, r0
 801c484:	4628      	mov	r0, r5
 801c486:	f7ff ffcf 	bl	801c428 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801c48a:	e7f4      	b.n	801c476 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801c48c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c48e:	3a01      	subs	r2, #1
 801c490:	4628      	mov	r0, r5
 801c492:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801c496:	3301      	adds	r3, #1
 801c498:	f003 0301 	and.w	r3, r3, #1
 801c49c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801c49e:	8722      	strh	r2, [r4, #56]	; 0x38
 801c4a0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801c4a2:	f7ff ffc1 	bl	801c428 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801c4a6:	e7df      	b.n	801c468 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801c4a8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c4ac <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	b510      	push	{r4, lr}
 801c4b0:	6043      	str	r3, [r0, #4]
 801c4b2:	4604      	mov	r4, r0
 801c4b4:	60c3      	str	r3, [r0, #12]
 801c4b6:	7403      	strb	r3, [r0, #16]
 801c4b8:	8603      	strh	r3, [r0, #48]	; 0x30
 801c4ba:	8303      	strh	r3, [r0, #24]
 801c4bc:	8703      	strh	r3, [r0, #56]	; 0x38
 801c4be:	f7ff ffcf 	bl	801c460 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c4c2:	4a0a      	ldr	r2, [pc, #40]	; (801c4ec <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801c4c4:	6813      	ldr	r3, [r2, #0]
 801c4c6:	4611      	mov	r1, r2
 801c4c8:	b913      	cbnz	r3, 801c4d0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801c4ca:	6852      	ldr	r2, [r2, #4]
 801c4cc:	07d0      	lsls	r0, r2, #31
 801c4ce:	d50b      	bpl.n	801c4e8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801c4d0:	6849      	ldr	r1, [r1, #4]
 801c4d2:	104a      	asrs	r2, r1, #1
 801c4d4:	07c9      	lsls	r1, r1, #31
 801c4d6:	eb04 0002 	add.w	r0, r4, r2
 801c4da:	bf48      	it	mi
 801c4dc:	58a2      	ldrmi	r2, [r4, r2]
 801c4de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4e2:	bf48      	it	mi
 801c4e4:	58d3      	ldrmi	r3, [r2, r3]
 801c4e6:	4718      	bx	r3
 801c4e8:	bd10      	pop	{r4, pc}
 801c4ea:	bf00      	nop
 801c4ec:	20008798 	.word	0x20008798

0801c4f0 <_ZN8touchgfx12TextProviderC1Ev>:
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	2201      	movs	r2, #1
 801c4f4:	b510      	push	{r4, lr}
 801c4f6:	4604      	mov	r4, r0
 801c4f8:	60c3      	str	r3, [r0, #12]
 801c4fa:	7403      	strb	r3, [r0, #16]
 801c4fc:	82c3      	strh	r3, [r0, #22]
 801c4fe:	8303      	strh	r3, [r0, #24]
 801c500:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c502:	8603      	strh	r3, [r0, #48]	; 0x30
 801c504:	86c3      	strh	r3, [r0, #54]	; 0x36
 801c506:	8703      	strh	r3, [r0, #56]	; 0x38
 801c508:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c50a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c50e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c512:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c516:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801c51a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801c51e:	e9c0 3300 	strd	r3, r3, [r0]
 801c522:	f7ff ffc3 	bl	801c4ac <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c526:	4620      	mov	r0, r4
 801c528:	bd10      	pop	{r4, pc}

0801c52a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801c52a:	b410      	push	{r4}
 801c52c:	6082      	str	r2, [r0, #8]
 801c52e:	6001      	str	r1, [r0, #0]
 801c530:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c532:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c536:	f7ff bfb9 	b.w	801c4ac <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801c53c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801c53c:	b508      	push	{r3, lr}
 801c53e:	88c2      	ldrh	r2, [r0, #6]
 801c540:	440a      	add	r2, r1
 801c542:	2a02      	cmp	r2, #2
 801c544:	dd05      	ble.n	801c552 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801c546:	4b06      	ldr	r3, [pc, #24]	; (801c560 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801c548:	21ec      	movs	r1, #236	; 0xec
 801c54a:	4a06      	ldr	r2, [pc, #24]	; (801c564 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801c54c:	4806      	ldr	r0, [pc, #24]	; (801c568 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801c54e:	f008 fef3 	bl	8025338 <__assert_func>
 801c552:	8883      	ldrh	r3, [r0, #4]
 801c554:	80c2      	strh	r2, [r0, #6]
 801c556:	1a59      	subs	r1, r3, r1
 801c558:	f001 0101 	and.w	r1, r1, #1
 801c55c:	8081      	strh	r1, [r0, #4]
 801c55e:	bd08      	pop	{r3, pc}
 801c560:	080285e7 	.word	0x080285e7
 801c564:	08028ab5 	.word	0x08028ab5
 801c568:	080285bb 	.word	0x080285bb

0801c56c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801c56c:	b508      	push	{r3, lr}
 801c56e:	88c3      	ldrh	r3, [r0, #6]
 801c570:	428b      	cmp	r3, r1
 801c572:	d805      	bhi.n	801c580 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801c574:	4b06      	ldr	r3, [pc, #24]	; (801c590 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801c576:	21fd      	movs	r1, #253	; 0xfd
 801c578:	4a06      	ldr	r2, [pc, #24]	; (801c594 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801c57a:	4807      	ldr	r0, [pc, #28]	; (801c598 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801c57c:	f008 fedc 	bl	8025338 <__assert_func>
 801c580:	8883      	ldrh	r3, [r0, #4]
 801c582:	4419      	add	r1, r3
 801c584:	f001 0101 	and.w	r1, r1, #1
 801c588:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801c58c:	bd08      	pop	{r3, pc}
 801c58e:	bf00      	nop
 801c590:	080285ad 	.word	0x080285ad
 801c594:	08028c0d 	.word	0x08028c0d
 801c598:	080285bb 	.word	0x080285bb

0801c59c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c59c:	b570      	push	{r4, r5, r6, lr}
 801c59e:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c5a0:	4604      	mov	r4, r0
 801c5a2:	b92a      	cbnz	r2, 801c5b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c5a4:	4b12      	ldr	r3, [pc, #72]	; (801c5f0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801c5a6:	21de      	movs	r1, #222	; 0xde
 801c5a8:	4a12      	ldr	r2, [pc, #72]	; (801c5f4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c5aa:	4813      	ldr	r0, [pc, #76]	; (801c5f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c5ac:	f008 fec4 	bl	8025338 <__assert_func>
 801c5b0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c5b2:	260a      	movs	r6, #10
 801c5b4:	3a01      	subs	r2, #1
 801c5b6:	3412      	adds	r4, #18
 801c5b8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c5bc:	3301      	adds	r3, #1
 801c5be:	8b4d      	ldrh	r5, [r1, #26]
 801c5c0:	8602      	strh	r2, [r0, #48]	; 0x30
 801c5c2:	fbb3 f1f6 	udiv	r1, r3, r6
 801c5c6:	fb06 3311 	mls	r3, r6, r1, r3
 801c5ca:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c5cc:	f7ff ff48 	bl	801c460 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c5d0:	88e3      	ldrh	r3, [r4, #6]
 801c5d2:	2101      	movs	r1, #1
 801c5d4:	2b02      	cmp	r3, #2
 801c5d6:	bf04      	itt	eq
 801c5d8:	2301      	moveq	r3, #1
 801c5da:	80e3      	strheq	r3, [r4, #6]
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f7ff ffad 	bl	801c53c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801c5e2:	4620      	mov	r0, r4
 801c5e4:	462a      	mov	r2, r5
 801c5e6:	2100      	movs	r1, #0
 801c5e8:	f7ff ffc0 	bl	801c56c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801c5ec:	4628      	mov	r0, r5
 801c5ee:	bd70      	pop	{r4, r5, r6, pc}
 801c5f0:	0802858c 	.word	0x0802858c
 801c5f4:	080287fe 	.word	0x080287fe
 801c5f8:	080285bb 	.word	0x080285bb

0801c5fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c5fc:	428a      	cmp	r2, r1
 801c5fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c602:	4604      	mov	r4, r0
 801c604:	460e      	mov	r6, r1
 801c606:	4615      	mov	r5, r2
 801c608:	469a      	mov	sl, r3
 801c60a:	d92b      	bls.n	801c664 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801c60c:	1a57      	subs	r7, r2, r1
 801c60e:	f04f 0800 	mov.w	r8, #0
 801c612:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801c616:	f04f 0b0a 	mov.w	fp, #10
 801c61a:	b2bf      	uxth	r7, r7
 801c61c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c61e:	b92b      	cbnz	r3, 801c62c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801c620:	4b24      	ldr	r3, [pc, #144]	; (801c6b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801c622:	21e6      	movs	r1, #230	; 0xe6
 801c624:	4a24      	ldr	r2, [pc, #144]	; (801c6b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801c626:	4825      	ldr	r0, [pc, #148]	; (801c6bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801c628:	f008 fe86 	bl	8025338 <__assert_func>
 801c62c:	3b01      	subs	r3, #1
 801c62e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c630:	2101      	movs	r1, #1
 801c632:	4648      	mov	r0, r9
 801c634:	b29b      	uxth	r3, r3
 801c636:	f108 0801 	add.w	r8, r8, #1
 801c63a:	441a      	add	r2, r3
 801c63c:	8623      	strh	r3, [r4, #48]	; 0x30
 801c63e:	fbb2 f3fb 	udiv	r3, r2, fp
 801c642:	fb0b 2313 	mls	r3, fp, r3, r2
 801c646:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c64a:	8b5a      	ldrh	r2, [r3, #26]
 801c64c:	9201      	str	r2, [sp, #4]
 801c64e:	f7ff ff75 	bl	801c53c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801c652:	9a01      	ldr	r2, [sp, #4]
 801c654:	2100      	movs	r1, #0
 801c656:	4648      	mov	r0, r9
 801c658:	f7ff ff88 	bl	801c56c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801c65c:	fa1f f388 	uxth.w	r3, r8
 801c660:	429f      	cmp	r7, r3
 801c662:	d8db      	bhi.n	801c61c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801c664:	f104 071a 	add.w	r7, r4, #26
 801c668:	4631      	mov	r1, r6
 801c66a:	260a      	movs	r6, #10
 801c66c:	4638      	mov	r0, r7
 801c66e:	f7ff febf 	bl	801c3f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801c672:	b1c5      	cbz	r5, 801c6a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c674:	3d01      	subs	r5, #1
 801c676:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c678:	b2ad      	uxth	r5, r5
 801c67a:	2b09      	cmp	r3, #9
 801c67c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801c680:	d903      	bls.n	801c68a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801c682:	4b0f      	ldr	r3, [pc, #60]	; (801c6c0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801c684:	21ec      	movs	r1, #236	; 0xec
 801c686:	4a0f      	ldr	r2, [pc, #60]	; (801c6c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801c688:	e7cd      	b.n	801c626 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801c68a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801c68c:	3301      	adds	r3, #1
 801c68e:	3109      	adds	r1, #9
 801c690:	8623      	strh	r3, [r4, #48]	; 0x30
 801c692:	fbb1 f0f6 	udiv	r0, r1, r6
 801c696:	fb06 1110 	mls	r1, r6, r0, r1
 801c69a:	4638      	mov	r0, r7
 801c69c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801c69e:	2100      	movs	r1, #0
 801c6a0:	f7ff fd5a 	bl	801c158 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c6a4:	e7e5      	b.n	801c672 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801c6a6:	4620      	mov	r0, r4
 801c6a8:	b003      	add	sp, #12
 801c6aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6ae:	f7ff bed7 	b.w	801c460 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c6b2:	bf00      	nop
 801c6b4:	0802858c 	.word	0x0802858c
 801c6b8:	08028682 	.word	0x08028682
 801c6bc:	080285bb 	.word	0x080285bb
 801c6c0:	080285e7 	.word	0x080285e7
 801c6c4:	080285fa 	.word	0x080285fa

0801c6c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c6c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6cc:	4605      	mov	r5, r0
 801c6ce:	4616      	mov	r6, r2
 801c6d0:	1c8c      	adds	r4, r1, #2
 801c6d2:	8809      	ldrh	r1, [r1, #0]
 801c6d4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c6d8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c6dc:	42b3      	cmp	r3, r6
 801c6de:	d124      	bne.n	801c72a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c6e0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c6e4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c6e8:	f001 070f 	and.w	r7, r1, #15
 801c6ec:	4652      	mov	r2, sl
 801c6ee:	f8cd 8000 	str.w	r8, [sp]
 801c6f2:	464b      	mov	r3, r9
 801c6f4:	4621      	mov	r1, r4
 801c6f6:	4628      	mov	r0, r5
 801c6f8:	f7ff fe3e 	bl	801c378 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c6fc:	4683      	mov	fp, r0
 801c6fe:	b168      	cbz	r0, 801c71c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c700:	eb0a 0109 	add.w	r1, sl, r9
 801c704:	463a      	mov	r2, r7
 801c706:	4628      	mov	r0, r5
 801c708:	4441      	add	r1, r8
 801c70a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c70e:	4649      	mov	r1, r9
 801c710:	f7ff ff74 	bl	801c5fc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c714:	4658      	mov	r0, fp
 801c716:	b003      	add	sp, #12
 801c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c71c:	eb07 010a 	add.w	r1, r7, sl
 801c720:	4449      	add	r1, r9
 801c722:	4441      	add	r1, r8
 801c724:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c728:	e7d2      	b.n	801c6d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c72a:	f04f 0b00 	mov.w	fp, #0
 801c72e:	e7f1      	b.n	801c714 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c730 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c734:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c736:	4604      	mov	r4, r0
 801c738:	260b      	movs	r6, #11
 801c73a:	f100 091a 	add.w	r9, r0, #26
 801c73e:	886f      	ldrh	r7, [r5, #2]
 801c740:	087f      	lsrs	r7, r7, #1
 801c742:	3e01      	subs	r6, #1
 801c744:	d013      	beq.n	801c76e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801c746:	2100      	movs	r1, #0
 801c748:	4648      	mov	r0, r9
 801c74a:	f7ff fd1f 	bl	801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c74e:	462a      	mov	r2, r5
 801c750:	4680      	mov	r8, r0
 801c752:	4603      	mov	r3, r0
 801c754:	4639      	mov	r1, r7
 801c756:	4620      	mov	r0, r4
 801c758:	f7ff fce0 	bl	801c11c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c75c:	b138      	cbz	r0, 801c76e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801c75e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c762:	4642      	mov	r2, r8
 801c764:	4620      	mov	r0, r4
 801c766:	f7ff ffaf 	bl	801c6c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c76a:	2800      	cmp	r0, #0
 801c76c:	d1e9      	bne.n	801c742 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801c76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801c774:	4b1e      	ldr	r3, [pc, #120]	; (801c7f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801c776:	b570      	push	{r4, r5, r6, lr}
 801c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c77c:	4604      	mov	r4, r0
 801c77e:	f003 0501 	and.w	r5, r3, #1
 801c782:	b902      	cbnz	r2, 801c786 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801c784:	b165      	cbz	r5, 801c7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801c786:	105b      	asrs	r3, r3, #1
 801c788:	f104 061a 	add.w	r6, r4, #26
 801c78c:	18e0      	adds	r0, r4, r3
 801c78e:	b10d      	cbz	r5, 801c794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801c790:	58e3      	ldr	r3, [r4, r3]
 801c792:	589a      	ldr	r2, [r3, r2]
 801c794:	4790      	blx	r2
 801c796:	2100      	movs	r1, #0
 801c798:	4602      	mov	r2, r0
 801c79a:	4630      	mov	r0, r6
 801c79c:	f7ff fcdc 	bl	801c158 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c7a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c7a2:	b303      	cbz	r3, 801c7e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801c7a4:	f104 051a 	add.w	r5, r4, #26
 801c7a8:	2100      	movs	r1, #0
 801c7aa:	4628      	mov	r0, r5
 801c7ac:	f7ff fcee 	bl	801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c7b0:	b1c8      	cbz	r0, 801c7e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801c7b2:	4620      	mov	r0, r4
 801c7b4:	f7ff ffbc 	bl	801c730 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801c7b8:	2101      	movs	r1, #1
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	f7ff fce6 	bl	801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c7c0:	f640 133f 	movw	r3, #2367	; 0x93f
 801c7c4:	4606      	mov	r6, r0
 801c7c6:	4298      	cmp	r0, r3
 801c7c8:	d10d      	bne.n	801c7e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	4628      	mov	r0, r5
 801c7ce:	f7ff fcdd 	bl	801c18c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c7d2:	2101      	movs	r1, #1
 801c7d4:	4602      	mov	r2, r0
 801c7d6:	4628      	mov	r0, r5
 801c7d8:	f7ff fcbe 	bl	801c158 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c7dc:	4632      	mov	r2, r6
 801c7de:	2100      	movs	r1, #0
 801c7e0:	4628      	mov	r0, r5
 801c7e2:	f7ff fcb9 	bl	801c158 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7ec:	f7ff bed6 	b.w	801c59c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c7f0:	200087a0 	.word	0x200087a0

0801c7f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7f6:	4617      	mov	r7, r2
 801c7f8:	461e      	mov	r6, r3
 801c7fa:	4605      	mov	r5, r0
 801c7fc:	f7ff ffba 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c800:	683b      	ldr	r3, [r7, #0]
 801c802:	4604      	mov	r4, r0
 801c804:	4601      	mov	r1, r0
 801c806:	4638      	mov	r0, r7
 801c808:	68db      	ldr	r3, [r3, #12]
 801c80a:	4798      	blx	r3
 801c80c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c810:	4602      	mov	r2, r0
 801c812:	6030      	str	r0, [r6, #0]
 801c814:	b29b      	uxth	r3, r3
 801c816:	2b7f      	cmp	r3, #127	; 0x7f
 801c818:	d813      	bhi.n	801c842 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801c81a:	4639      	mov	r1, r7
 801c81c:	4628      	mov	r0, r5
 801c81e:	f7ff fccf 	bl	801c1c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c822:	6030      	str	r0, [r6, #0]
 801c824:	6833      	ldr	r3, [r6, #0]
 801c826:	b143      	cbz	r3, 801c83a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c828:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801c82c:	7a9b      	ldrb	r3, [r3, #10]
 801c82e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c832:	4313      	orrs	r3, r2
 801c834:	bf0c      	ite	eq
 801c836:	2301      	moveq	r3, #1
 801c838:	2300      	movne	r3, #0
 801c83a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c83e:	4620      	mov	r0, r4
 801c840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c842:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c846:	2b00      	cmp	r3, #0
 801c848:	d0ec      	beq.n	801c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c84a:	f640 1302 	movw	r3, #2306	; 0x902
 801c84e:	429c      	cmp	r4, r3
 801c850:	d1e8      	bne.n	801c824 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c852:	4601      	mov	r1, r0
 801c854:	4628      	mov	r0, r5
 801c856:	f7ff fc32 	bl	801c0be <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c85a:	e7e2      	b.n	801c822 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801c85c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c860:	4617      	mov	r7, r2
 801c862:	461e      	mov	r6, r3
 801c864:	4605      	mov	r5, r0
 801c866:	f7ff ff85 	bl	801c774 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c86a:	683b      	ldr	r3, [r7, #0]
 801c86c:	4604      	mov	r4, r0
 801c86e:	4601      	mov	r1, r0
 801c870:	4638      	mov	r0, r7
 801c872:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c87a:	47c0      	blx	r8
 801c87c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c880:	4602      	mov	r2, r0
 801c882:	6030      	str	r0, [r6, #0]
 801c884:	b29b      	uxth	r3, r3
 801c886:	2b7f      	cmp	r3, #127	; 0x7f
 801c888:	d814      	bhi.n	801c8b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801c88a:	4639      	mov	r1, r7
 801c88c:	4628      	mov	r0, r5
 801c88e:	f7ff fc97 	bl	801c1c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c892:	6030      	str	r0, [r6, #0]
 801c894:	6833      	ldr	r3, [r6, #0]
 801c896:	b143      	cbz	r3, 801c8aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c898:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801c89c:	7a9b      	ldrb	r3, [r3, #10]
 801c89e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c8a2:	4313      	orrs	r3, r2
 801c8a4:	bf0c      	ite	eq
 801c8a6:	2301      	moveq	r3, #1
 801c8a8:	2300      	movne	r3, #0
 801c8aa:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c8ae:	4620      	mov	r0, r4
 801c8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8b4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d0eb      	beq.n	801c894 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c8bc:	f640 1302 	movw	r3, #2306	; 0x902
 801c8c0:	429c      	cmp	r4, r3
 801c8c2:	d1e7      	bne.n	801c894 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c8c4:	4601      	mov	r1, r0
 801c8c6:	4628      	mov	r0, r5
 801c8c8:	f7ff fbf9 	bl	801c0be <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c8cc:	e7e1      	b.n	801c892 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801c8ce <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c8ce:	4602      	mov	r2, r0
 801c8d0:	b148      	cbz	r0, 801c8e6 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	b298      	uxth	r0, r3
 801c8d6:	3301      	adds	r3, #1
 801c8d8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c8dc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c8e0:	2900      	cmp	r1, #0
 801c8e2:	d1f7      	bne.n	801c8d4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c8e4:	4770      	bx	lr
 801c8e6:	4770      	bx	lr

0801c8e8 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801c8e8:	b140      	cbz	r0, 801c8fc <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801c8ea:	4602      	mov	r2, r0
 801c8ec:	1a13      	subs	r3, r2, r0
 801c8ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c8f2:	b29b      	uxth	r3, r3
 801c8f4:	2900      	cmp	r1, #0
 801c8f6:	d1f9      	bne.n	801c8ec <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	4770      	bx	lr
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	e7fb      	b.n	801c8f8 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801c900 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c900:	b530      	push	{r4, r5, lr}
 801c902:	4604      	mov	r4, r0
 801c904:	b159      	cbz	r1, 801c91e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c906:	b148      	cbz	r0, 801c91c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c908:	2300      	movs	r3, #0
 801c90a:	b298      	uxth	r0, r3
 801c90c:	4282      	cmp	r2, r0
 801c90e:	d905      	bls.n	801c91c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c910:	5ccd      	ldrb	r5, [r1, r3]
 801c912:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c916:	3301      	adds	r3, #1
 801c918:	2d00      	cmp	r5, #0
 801c91a:	d1f6      	bne.n	801c90a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c91c:	bd30      	pop	{r4, r5, pc}
 801c91e:	4608      	mov	r0, r1
 801c920:	e7fc      	b.n	801c91c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c922 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801c922:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c924:	468c      	mov	ip, r1
 801c926:	b08b      	sub	sp, #44	; 0x2c
 801c928:	2100      	movs	r1, #0
 801c92a:	ae01      	add	r6, sp, #4
 801c92c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c930:	211f      	movs	r1, #31
 801c932:	fbb0 f7f3 	udiv	r7, r0, r3
 801c936:	fb03 0517 	mls	r5, r3, r7, r0
 801c93a:	4638      	mov	r0, r7
 801c93c:	b2ec      	uxtb	r4, r5
 801c93e:	2d09      	cmp	r5, #9
 801c940:	bfd4      	ite	le
 801c942:	3430      	addle	r4, #48	; 0x30
 801c944:	3457      	addgt	r4, #87	; 0x57
 801c946:	b2e4      	uxtb	r4, r4
 801c948:	558c      	strb	r4, [r1, r6]
 801c94a:	1e4c      	subs	r4, r1, #1
 801c94c:	b92f      	cbnz	r7, 801c95a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801c94e:	4431      	add	r1, r6
 801c950:	4660      	mov	r0, ip
 801c952:	f7ff ffd5 	bl	801c900 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c956:	b00b      	add	sp, #44	; 0x2c
 801c958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c95a:	4621      	mov	r1, r4
 801c95c:	e7e9      	b.n	801c932 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801c95e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c95e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c960:	4607      	mov	r7, r0
 801c962:	b08b      	sub	sp, #44	; 0x2c
 801c964:	4608      	mov	r0, r1
 801c966:	b341      	cbz	r1, 801c9ba <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c968:	1e99      	subs	r1, r3, #2
 801c96a:	290e      	cmp	r1, #14
 801c96c:	d825      	bhi.n	801c9ba <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c96e:	2100      	movs	r1, #0
 801c970:	463c      	mov	r4, r7
 801c972:	261f      	movs	r6, #31
 801c974:	f10d 0c04 	add.w	ip, sp, #4
 801c978:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c97c:	1e71      	subs	r1, r6, #1
 801c97e:	fb94 fef3 	sdiv	lr, r4, r3
 801c982:	fb03 441e 	mls	r4, r3, lr, r4
 801c986:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c98a:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c98e:	b2ec      	uxtb	r4, r5
 801c990:	2d09      	cmp	r5, #9
 801c992:	bfd4      	ite	le
 801c994:	3430      	addle	r4, #48	; 0x30
 801c996:	3457      	addgt	r4, #87	; 0x57
 801c998:	b2e4      	uxtb	r4, r4
 801c99a:	f80c 4006 	strb.w	r4, [ip, r6]
 801c99e:	4674      	mov	r4, lr
 801c9a0:	b96c      	cbnz	r4, 801c9be <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c9a2:	2f00      	cmp	r7, #0
 801c9a4:	da05      	bge.n	801c9b2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c9a6:	ab0a      	add	r3, sp, #40	; 0x28
 801c9a8:	4419      	add	r1, r3
 801c9aa:	232d      	movs	r3, #45	; 0x2d
 801c9ac:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c9b0:	1eb1      	subs	r1, r6, #2
 801c9b2:	3101      	adds	r1, #1
 801c9b4:	4461      	add	r1, ip
 801c9b6:	f7ff ffa3 	bl	801c900 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c9ba:	b00b      	add	sp, #44	; 0x2c
 801c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9be:	460e      	mov	r6, r1
 801c9c0:	e7dc      	b.n	801c97c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c9c2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801c9c2:	b510      	push	{r4, lr}
 801c9c4:	b158      	cbz	r0, 801c9de <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c9c6:	1e82      	subs	r2, r0, #2
 801c9c8:	210a      	movs	r1, #10
 801c9ca:	2000      	movs	r0, #0
 801c9cc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c9d0:	3b30      	subs	r3, #48	; 0x30
 801c9d2:	b29c      	uxth	r4, r3
 801c9d4:	2c09      	cmp	r4, #9
 801c9d6:	d802      	bhi.n	801c9de <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c9d8:	fb01 3000 	mla	r0, r1, r0, r3
 801c9dc:	e7f6      	b.n	801c9cc <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801c9de:	bd10      	pop	{r4, pc}

0801c9e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801c9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9e4:	b085      	sub	sp, #20
 801c9e6:	f8d0 8000 	ldr.w	r8, [r0]
 801c9ea:	468a      	mov	sl, r1
 801c9ec:	461c      	mov	r4, r3
 801c9ee:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c9f2:	4681      	mov	r9, r0
 801c9f4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c9f8:	4640      	mov	r0, r8
 801c9fa:	9203      	str	r2, [sp, #12]
 801c9fc:	9102      	str	r1, [sp, #8]
 801c9fe:	9301      	str	r3, [sp, #4]
 801ca00:	f7ff ff65 	bl	801c8ce <_ZN8touchgfx7Unicode6strlenEPKt>
 801ca04:	9a03      	ldr	r2, [sp, #12]
 801ca06:	f1ba 0f00 	cmp.w	sl, #0
 801ca0a:	bf0c      	ite	eq
 801ca0c:	4684      	moveq	ip, r0
 801ca0e:	f100 0c01 	addne.w	ip, r0, #1
 801ca12:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801ca16:	8812      	ldrh	r2, [r2, #0]
 801ca18:	fa1f fc8c 	uxth.w	ip, ip
 801ca1c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ca1e:	2a69      	cmp	r2, #105	; 0x69
 801ca20:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ca22:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801ca24:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801ca28:	d004      	beq.n	801ca34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ca2a:	d844      	bhi.n	801cab6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801ca2c:	2a58      	cmp	r2, #88	; 0x58
 801ca2e:	d001      	beq.n	801ca34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ca30:	2a64      	cmp	r2, #100	; 0x64
 801ca32:	d14b      	bne.n	801cacc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801ca34:	b1a4      	cbz	r4, 801ca60 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801ca36:	b956      	cbnz	r6, 801ca4e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801ca38:	2801      	cmp	r0, #1
 801ca3a:	d108      	bne.n	801ca4e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801ca3c:	f8b8 2000 	ldrh.w	r2, [r8]
 801ca40:	2a30      	cmp	r2, #48	; 0x30
 801ca42:	bf02      	ittt	eq
 801ca44:	f108 0202 	addeq.w	r2, r8, #2
 801ca48:	4630      	moveq	r0, r6
 801ca4a:	f8c9 2000 	streq.w	r2, [r9]
 801ca4e:	45b4      	cmp	ip, r6
 801ca50:	da3e      	bge.n	801cad0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801ca52:	b2b6      	uxth	r6, r6
 801ca54:	eba6 040c 	sub.w	r4, r6, ip
 801ca58:	46b4      	mov	ip, r6
 801ca5a:	b2a4      	uxth	r4, r4
 801ca5c:	f04f 0b00 	mov.w	fp, #0
 801ca60:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801ca64:	3a01      	subs	r2, #1
 801ca66:	b169      	cbz	r1, 801ca84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801ca68:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ca6a:	458c      	cmp	ip, r1
 801ca6c:	da09      	bge.n	801ca82 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801ca6e:	eba1 010c 	sub.w	r1, r1, ip
 801ca72:	b289      	uxth	r1, r1
 801ca74:	b933      	cbnz	r3, 801ca84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801ca76:	f1bb 0f00 	cmp.w	fp, #0
 801ca7a:	d02b      	beq.n	801cad4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801ca7c:	b350      	cbz	r0, 801cad4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801ca7e:	440c      	add	r4, r1
 801ca80:	b2a4      	uxth	r4, r4
 801ca82:	2100      	movs	r1, #0
 801ca84:	682b      	ldr	r3, [r5, #0]
 801ca86:	4293      	cmp	r3, r2
 801ca88:	da07      	bge.n	801ca9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801ca8a:	f1ba 0f00 	cmp.w	sl, #0
 801ca8e:	d004      	beq.n	801ca9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801ca90:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801ca94:	682b      	ldr	r3, [r5, #0]
 801ca96:	3301      	adds	r3, #1
 801ca98:	602b      	str	r3, [r5, #0]
 801ca9a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801ca9e:	b354      	cbz	r4, 801caf6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801caa0:	682e      	ldr	r6, [r5, #0]
 801caa2:	3c01      	subs	r4, #1
 801caa4:	42b2      	cmp	r2, r6
 801caa6:	b2a4      	uxth	r4, r4
 801caa8:	dd25      	ble.n	801caf6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801caaa:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801caae:	682b      	ldr	r3, [r5, #0]
 801cab0:	3301      	adds	r3, #1
 801cab2:	602b      	str	r3, [r5, #0]
 801cab4:	e7f3      	b.n	801ca9e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801cab6:	2a73      	cmp	r2, #115	; 0x73
 801cab8:	d003      	beq.n	801cac2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801caba:	2a78      	cmp	r2, #120	; 0x78
 801cabc:	d0ba      	beq.n	801ca34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801cabe:	2a6f      	cmp	r2, #111	; 0x6f
 801cac0:	e7b7      	b.n	801ca32 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801cac2:	2c00      	cmp	r4, #0
 801cac4:	d0cc      	beq.n	801ca60 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801cac6:	42b0      	cmp	r0, r6
 801cac8:	dd00      	ble.n	801cacc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801caca:	b2b0      	uxth	r0, r6
 801cacc:	2400      	movs	r4, #0
 801cace:	e7c7      	b.n	801ca60 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801cad0:	2400      	movs	r4, #0
 801cad2:	e7c3      	b.n	801ca5c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801cad4:	2900      	cmp	r1, #0
 801cad6:	d0d5      	beq.n	801ca84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801cad8:	f04f 0c20 	mov.w	ip, #32
 801cadc:	682e      	ldr	r6, [r5, #0]
 801cade:	2900      	cmp	r1, #0
 801cae0:	d0d0      	beq.n	801ca84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801cae2:	3901      	subs	r1, #1
 801cae4:	4296      	cmp	r6, r2
 801cae6:	b289      	uxth	r1, r1
 801cae8:	dacb      	bge.n	801ca82 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801caea:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801caee:	682b      	ldr	r3, [r5, #0]
 801caf0:	3301      	adds	r3, #1
 801caf2:	602b      	str	r3, [r5, #0]
 801caf4:	e7f2      	b.n	801cadc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801caf6:	b198      	cbz	r0, 801cb20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801caf8:	f8d9 3000 	ldr.w	r3, [r9]
 801cafc:	881c      	ldrh	r4, [r3, #0]
 801cafe:	b17c      	cbz	r4, 801cb20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801cb00:	682c      	ldr	r4, [r5, #0]
 801cb02:	3801      	subs	r0, #1
 801cb04:	42a2      	cmp	r2, r4
 801cb06:	b280      	uxth	r0, r0
 801cb08:	dd0a      	ble.n	801cb20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801cb0a:	1c9c      	adds	r4, r3, #2
 801cb0c:	f8c9 4000 	str.w	r4, [r9]
 801cb10:	881c      	ldrh	r4, [r3, #0]
 801cb12:	682b      	ldr	r3, [r5, #0]
 801cb14:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801cb18:	682b      	ldr	r3, [r5, #0]
 801cb1a:	3301      	adds	r3, #1
 801cb1c:	602b      	str	r3, [r5, #0]
 801cb1e:	e7ea      	b.n	801caf6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801cb20:	2620      	movs	r6, #32
 801cb22:	b151      	cbz	r1, 801cb3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801cb24:	6828      	ldr	r0, [r5, #0]
 801cb26:	3901      	subs	r1, #1
 801cb28:	4282      	cmp	r2, r0
 801cb2a:	b289      	uxth	r1, r1
 801cb2c:	dd05      	ble.n	801cb3a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801cb2e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801cb32:	682b      	ldr	r3, [r5, #0]
 801cb34:	3301      	adds	r3, #1
 801cb36:	602b      	str	r3, [r5, #0]
 801cb38:	e7f3      	b.n	801cb22 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801cb3a:	b005      	add	sp, #20
 801cb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801cb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cb46:	4604      	mov	r4, r0
 801cb48:	f04f 0801 	mov.w	r8, #1
 801cb4c:	2000      	movs	r0, #0
 801cb4e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801cb52:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801cb56:	8008      	strh	r0, [r1, #0]
 801cb58:	7010      	strb	r0, [r2, #0]
 801cb5a:	7018      	strb	r0, [r3, #0]
 801cb5c:	f88c 0000 	strb.w	r0, [ip]
 801cb60:	f88e 0000 	strb.w	r0, [lr]
 801cb64:	7030      	strb	r0, [r6, #0]
 801cb66:	6820      	ldr	r0, [r4, #0]
 801cb68:	8800      	ldrh	r0, [r0, #0]
 801cb6a:	b190      	cbz	r0, 801cb92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801cb6c:	282b      	cmp	r0, #43	; 0x2b
 801cb6e:	d001      	beq.n	801cb74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801cb70:	2820      	cmp	r0, #32
 801cb72:	d104      	bne.n	801cb7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801cb74:	8008      	strh	r0, [r1, #0]
 801cb76:	6820      	ldr	r0, [r4, #0]
 801cb78:	3002      	adds	r0, #2
 801cb7a:	6020      	str	r0, [r4, #0]
 801cb7c:	e7f3      	b.n	801cb66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801cb7e:	282d      	cmp	r0, #45	; 0x2d
 801cb80:	d102      	bne.n	801cb88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801cb82:	f882 8000 	strb.w	r8, [r2]
 801cb86:	e7f6      	b.n	801cb76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801cb88:	2823      	cmp	r0, #35	; 0x23
 801cb8a:	d102      	bne.n	801cb92 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801cb8c:	f883 8000 	strb.w	r8, [r3]
 801cb90:	e7f1      	b.n	801cb76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801cb92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cb96:	2b09      	cmp	r3, #9
 801cb98:	d901      	bls.n	801cb9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801cb9a:	282a      	cmp	r0, #42	; 0x2a
 801cb9c:	d114      	bne.n	801cbc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801cb9e:	2201      	movs	r2, #1
 801cba0:	f88e 2000 	strb.w	r2, [lr]
 801cba4:	6823      	ldr	r3, [r4, #0]
 801cba6:	8819      	ldrh	r1, [r3, #0]
 801cba8:	2930      	cmp	r1, #48	; 0x30
 801cbaa:	bf02      	ittt	eq
 801cbac:	3302      	addeq	r3, #2
 801cbae:	6023      	streq	r3, [r4, #0]
 801cbb0:	f88c 2000 	strbeq.w	r2, [ip]
 801cbb4:	6820      	ldr	r0, [r4, #0]
 801cbb6:	8803      	ldrh	r3, [r0, #0]
 801cbb8:	2b2a      	cmp	r3, #42	; 0x2a
 801cbba:	d11e      	bne.n	801cbfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801cbbc:	f04f 33ff 	mov.w	r3, #4294967295
 801cbc0:	603b      	str	r3, [r7, #0]
 801cbc2:	6823      	ldr	r3, [r4, #0]
 801cbc4:	3302      	adds	r3, #2
 801cbc6:	6023      	str	r3, [r4, #0]
 801cbc8:	6823      	ldr	r3, [r4, #0]
 801cbca:	881b      	ldrh	r3, [r3, #0]
 801cbcc:	2b2e      	cmp	r3, #46	; 0x2e
 801cbce:	d112      	bne.n	801cbf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801cbd0:	2301      	movs	r3, #1
 801cbd2:	7033      	strb	r3, [r6, #0]
 801cbd4:	6823      	ldr	r3, [r4, #0]
 801cbd6:	1c98      	adds	r0, r3, #2
 801cbd8:	6020      	str	r0, [r4, #0]
 801cbda:	885b      	ldrh	r3, [r3, #2]
 801cbdc:	2b2a      	cmp	r3, #42	; 0x2a
 801cbde:	d117      	bne.n	801cc10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801cbe0:	f04f 33ff 	mov.w	r3, #4294967295
 801cbe4:	602b      	str	r3, [r5, #0]
 801cbe6:	6823      	ldr	r3, [r4, #0]
 801cbe8:	3302      	adds	r3, #2
 801cbea:	6023      	str	r3, [r4, #0]
 801cbec:	682b      	ldr	r3, [r5, #0]
 801cbee:	2b06      	cmp	r3, #6
 801cbf0:	bfa8      	it	ge
 801cbf2:	2306      	movge	r3, #6
 801cbf4:	602b      	str	r3, [r5, #0]
 801cbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbfa:	f7ff fee2 	bl	801c9c2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801cbfe:	6038      	str	r0, [r7, #0]
 801cc00:	6823      	ldr	r3, [r4, #0]
 801cc02:	881a      	ldrh	r2, [r3, #0]
 801cc04:	3a30      	subs	r2, #48	; 0x30
 801cc06:	2a09      	cmp	r2, #9
 801cc08:	d8de      	bhi.n	801cbc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801cc0a:	3302      	adds	r3, #2
 801cc0c:	6023      	str	r3, [r4, #0]
 801cc0e:	e7f7      	b.n	801cc00 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801cc10:	f7ff fed7 	bl	801c9c2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801cc14:	6028      	str	r0, [r5, #0]
 801cc16:	6823      	ldr	r3, [r4, #0]
 801cc18:	881a      	ldrh	r2, [r3, #0]
 801cc1a:	3a30      	subs	r2, #48	; 0x30
 801cc1c:	2a09      	cmp	r2, #9
 801cc1e:	d8e5      	bhi.n	801cbec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801cc20:	3302      	adds	r3, #2
 801cc22:	6023      	str	r3, [r4, #0]
 801cc24:	e7f7      	b.n	801cc16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801cc26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801cc26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc2a:	b0a2      	sub	sp, #136	; 0x88
 801cc2c:	2500      	movs	r5, #0
 801cc2e:	4606      	mov	r6, r0
 801cc30:	460f      	mov	r7, r1
 801cc32:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801cc36:	9209      	str	r2, [sp, #36]	; 0x24
 801cc38:	4629      	mov	r1, r5
 801cc3a:	2242      	movs	r2, #66	; 0x42
 801cc3c:	4640      	mov	r0, r8
 801cc3e:	461c      	mov	r4, r3
 801cc40:	950d      	str	r5, [sp, #52]	; 0x34
 801cc42:	f7fe fe80 	bl	801b946 <_ZN8touchgfx6memsetEPvhm>
 801cc46:	b30e      	cbz	r6, 801cc8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801cc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc4a:	b1f3      	cbz	r3, 801cc8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801cc4c:	f107 3aff 	add.w	sl, r7, #4294967295
 801cc50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc54:	8812      	ldrh	r2, [r2, #0]
 801cc56:	2a00      	cmp	r2, #0
 801cc58:	f000 80b3 	beq.w	801cdc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801cc5c:	459a      	cmp	sl, r3
 801cc5e:	f340 80b0 	ble.w	801cdc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801cc62:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cc66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc68:	f8b9 2000 	ldrh.w	r2, [r9]
 801cc6c:	2a00      	cmp	r2, #0
 801cc6e:	d0ef      	beq.n	801cc50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801cc70:	2a25      	cmp	r2, #37	; 0x25
 801cc72:	f000 80aa 	beq.w	801cdca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801cc76:	459a      	cmp	sl, r3
 801cc78:	ddea      	ble.n	801cc50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801cc7a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801cc7e:	f109 0202 	add.w	r2, r9, #2
 801cc82:	3301      	adds	r3, #1
 801cc84:	9209      	str	r2, [sp, #36]	; 0x24
 801cc86:	930d      	str	r3, [sp, #52]	; 0x34
 801cc88:	e7eb      	b.n	801cc62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801cc8a:	8033      	strh	r3, [r6, #0]
 801cc8c:	4630      	mov	r0, r6
 801cc8e:	b022      	add	sp, #136	; 0x88
 801cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc94:	3b63      	subs	r3, #99	; 0x63
 801cc96:	2b01      	cmp	r3, #1
 801cc98:	f200 80df 	bhi.w	801ce5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801cc9c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801cca0:	8813      	ldrh	r3, [r2, #0]
 801cca2:	2b69      	cmp	r3, #105	; 0x69
 801cca4:	d058      	beq.n	801cd58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801cca6:	d81b      	bhi.n	801cce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801cca8:	2b63      	cmp	r3, #99	; 0x63
 801ccaa:	d02e      	beq.n	801cd0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801ccac:	2b64      	cmp	r3, #100	; 0x64
 801ccae:	d053      	beq.n	801cd58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ccb0:	2b58      	cmp	r3, #88	; 0x58
 801ccb2:	d06f      	beq.n	801cd94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801ccb4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801ccb8:	46a1      	mov	r9, r4
 801ccba:	e02d      	b.n	801cd18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ccbc:	2b73      	cmp	r3, #115	; 0x73
 801ccbe:	d0ed      	beq.n	801cc9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ccc0:	d803      	bhi.n	801ccca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801ccc2:	2b6f      	cmp	r3, #111	; 0x6f
 801ccc4:	f040 80c9 	bne.w	801ce5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ccc8:	e7e8      	b.n	801cc9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ccca:	2b75      	cmp	r3, #117	; 0x75
 801cccc:	d0e6      	beq.n	801cc9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ccce:	2b78      	cmp	r3, #120	; 0x78
 801ccd0:	e7f8      	b.n	801ccc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801ccd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccd4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ccd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccda:	3302      	adds	r3, #2
 801ccdc:	9309      	str	r3, [sp, #36]	; 0x24
 801ccde:	e7b7      	b.n	801cc50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801cce0:	2b73      	cmp	r3, #115	; 0x73
 801cce2:	d034      	beq.n	801cd4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801cce4:	d807      	bhi.n	801ccf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801cce6:	2b6f      	cmp	r3, #111	; 0x6f
 801cce8:	d1e4      	bne.n	801ccb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ccea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccec:	f104 0904 	add.w	r9, r4, #4
 801ccf0:	2308      	movs	r3, #8
 801ccf2:	1aba      	subs	r2, r7, r2
 801ccf4:	e048      	b.n	801cd88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ccf6:	2b75      	cmp	r3, #117	; 0x75
 801ccf8:	d041      	beq.n	801cd7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801ccfa:	2b78      	cmp	r3, #120	; 0x78
 801ccfc:	d1da      	bne.n	801ccb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ccfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd00:	f104 0904 	add.w	r9, r4, #4
 801cd04:	2310      	movs	r3, #16
 801cd06:	1aba      	subs	r2, r7, r2
 801cd08:	e03e      	b.n	801cd88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801cd0a:	7823      	ldrb	r3, [r4, #0]
 801cd0c:	f104 0904 	add.w	r9, r4, #4
 801cd10:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801cd14:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801cd18:	aa0d      	add	r2, sp, #52	; 0x34
 801cd1a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801cd1e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801cd22:	a810      	add	r0, sp, #64	; 0x40
 801cd24:	9205      	str	r2, [sp, #20]
 801cd26:	464c      	mov	r4, r9
 801cd28:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801cd2c:	9204      	str	r2, [sp, #16]
 801cd2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cd30:	9203      	str	r2, [sp, #12]
 801cd32:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801cd36:	9202      	str	r2, [sp, #8]
 801cd38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd3a:	9201      	str	r2, [sp, #4]
 801cd3c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801cd40:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801cd44:	9200      	str	r2, [sp, #0]
 801cd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd48:	f7ff fe4a 	bl	801c9e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801cd4c:	e7c4      	b.n	801ccd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801cd4e:	f104 0904 	add.w	r9, r4, #4
 801cd52:	6823      	ldr	r3, [r4, #0]
 801cd54:	9310      	str	r3, [sp, #64]	; 0x40
 801cd56:	e7df      	b.n	801cd18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801cd58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd5a:	230a      	movs	r3, #10
 801cd5c:	4641      	mov	r1, r8
 801cd5e:	6820      	ldr	r0, [r4, #0]
 801cd60:	1aba      	subs	r2, r7, r2
 801cd62:	f104 0904 	add.w	r9, r4, #4
 801cd66:	b292      	uxth	r2, r2
 801cd68:	f7ff fdf9 	bl	801c95e <_ZN8touchgfx7Unicode4itoaElPtti>
 801cd6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801cd70:	2b2d      	cmp	r3, #45	; 0x2d
 801cd72:	d1d1      	bne.n	801cd18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801cd74:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cd78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd7a:	3302      	adds	r3, #2
 801cd7c:	e7ea      	b.n	801cd54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801cd7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd80:	f104 0904 	add.w	r9, r4, #4
 801cd84:	230a      	movs	r3, #10
 801cd86:	1aba      	subs	r2, r7, r2
 801cd88:	b292      	uxth	r2, r2
 801cd8a:	4641      	mov	r1, r8
 801cd8c:	6820      	ldr	r0, [r4, #0]
 801cd8e:	f7ff fdc8 	bl	801c922 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801cd92:	e7c1      	b.n	801cd18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801cd94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cd96:	2310      	movs	r3, #16
 801cd98:	4641      	mov	r1, r8
 801cd9a:	6820      	ldr	r0, [r4, #0]
 801cd9c:	1aba      	subs	r2, r7, r2
 801cd9e:	f104 0904 	add.w	r9, r4, #4
 801cda2:	b292      	uxth	r2, r2
 801cda4:	f7ff fdbd 	bl	801c922 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801cda8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801cdac:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d0b1      	beq.n	801cd18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801cdb4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801cdb8:	2919      	cmp	r1, #25
 801cdba:	d8f7      	bhi.n	801cdac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801cdbc:	3b20      	subs	r3, #32
 801cdbe:	8013      	strh	r3, [r2, #0]
 801cdc0:	e7f4      	b.n	801cdac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801cdc8:	e760      	b.n	801cc8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801cdca:	459a      	cmp	sl, r3
 801cdcc:	f77f af40 	ble.w	801cc50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801cdd0:	f109 0302 	add.w	r3, r9, #2
 801cdd4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801cdd8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801cddc:	a809      	add	r0, sp, #36	; 0x24
 801cdde:	9309      	str	r3, [sp, #36]	; 0x24
 801cde0:	ab0f      	add	r3, sp, #60	; 0x3c
 801cde2:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801cde6:	9304      	str	r3, [sp, #16]
 801cde8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801cdec:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801cdf0:	9303      	str	r3, [sp, #12]
 801cdf2:	ab0e      	add	r3, sp, #56	; 0x38
 801cdf4:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801cdf8:	9302      	str	r3, [sp, #8]
 801cdfa:	ab0c      	add	r3, sp, #48	; 0x30
 801cdfc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801ce00:	9301      	str	r3, [sp, #4]
 801ce02:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ce06:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801ce0a:	9300      	str	r3, [sp, #0]
 801ce0c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ce10:	950e      	str	r5, [sp, #56]	; 0x38
 801ce12:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801ce16:	950f      	str	r5, [sp, #60]	; 0x3c
 801ce18:	f7ff fe92 	bl	801cb40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801ce1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	bfbf      	itttt	lt
 801ce24:	6823      	ldrlt	r3, [r4, #0]
 801ce26:	3404      	addlt	r4, #4
 801ce28:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ce2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ce2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	bfbf      	itttt	lt
 801ce34:	6823      	ldrlt	r3, [r4, #0]
 801ce36:	3404      	addlt	r4, #4
 801ce38:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ce3c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ce3e:	8813      	ldrh	r3, [r2, #0]
 801ce40:	2b69      	cmp	r3, #105	; 0x69
 801ce42:	f43f af2b 	beq.w	801cc9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ce46:	f63f af39 	bhi.w	801ccbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801ce4a:	2b58      	cmp	r3, #88	; 0x58
 801ce4c:	f43f af26 	beq.w	801cc9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ce50:	f63f af20 	bhi.w	801cc94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801ce54:	2b25      	cmp	r3, #37	; 0x25
 801ce56:	f43f af3c 	beq.w	801ccd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801ce5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce5c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ce60:	f8b9 2000 	ldrh.w	r2, [r9]
 801ce64:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ce68:	3301      	adds	r3, #1
 801ce6a:	930d      	str	r3, [sp, #52]	; 0x34
 801ce6c:	e734      	b.n	801ccd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801ce70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ce70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce72:	4605      	mov	r5, r0
 801ce74:	b0a1      	sub	sp, #132	; 0x84
 801ce76:	4610      	mov	r0, r2
 801ce78:	460e      	mov	r6, r1
 801ce7a:	4614      	mov	r4, r2
 801ce7c:	461f      	mov	r7, r3
 801ce7e:	f7ff fd33 	bl	801c8e8 <_ZN8touchgfx7Unicode6strlenEPKc>
 801ce82:	283f      	cmp	r0, #63	; 0x3f
 801ce84:	d906      	bls.n	801ce94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801ce86:	4b0a      	ldr	r3, [pc, #40]	; (801ceb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801ce88:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801ce8c:	4a09      	ldr	r2, [pc, #36]	; (801ceb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801ce8e:	480a      	ldr	r0, [pc, #40]	; (801ceb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801ce90:	f008 fa52 	bl	8025338 <__assert_func>
 801ce94:	4621      	mov	r1, r4
 801ce96:	2240      	movs	r2, #64	; 0x40
 801ce98:	4668      	mov	r0, sp
 801ce9a:	f7ff fd31 	bl	801c900 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ce9e:	463b      	mov	r3, r7
 801cea0:	466a      	mov	r2, sp
 801cea2:	4631      	mov	r1, r6
 801cea4:	4628      	mov	r0, r5
 801cea6:	f7ff febe 	bl	801cc26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801ceaa:	b021      	add	sp, #132	; 0x84
 801ceac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ceae:	bf00      	nop
 801ceb0:	08028ce5 	.word	0x08028ce5
 801ceb4:	08028d28 	.word	0x08028d28
 801ceb8:	08028d02 	.word	0x08028d02

0801cebc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801cebc:	b40c      	push	{r2, r3}
 801cebe:	b507      	push	{r0, r1, r2, lr}
 801cec0:	ab04      	add	r3, sp, #16
 801cec2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cec6:	9301      	str	r3, [sp, #4]
 801cec8:	f7ff ffd2 	bl	801ce70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801cecc:	b003      	add	sp, #12
 801cece:	f85d eb04 	ldr.w	lr, [sp], #4
 801ced2:	b002      	add	sp, #8
 801ced4:	4770      	bx	lr
	...

0801ced8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ced8:	4b01      	ldr	r3, [pc, #4]	; (801cee0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ceda:	6018      	str	r0, [r3, #0]
 801cedc:	4770      	bx	lr
 801cede:	bf00      	nop
 801cee0:	2000996c 	.word	0x2000996c

0801cee4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cee4:	4b07      	ldr	r3, [pc, #28]	; (801cf04 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801cee6:	881a      	ldrh	r2, [r3, #0]
 801cee8:	4282      	cmp	r2, r0
 801ceea:	d809      	bhi.n	801cf00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801ceec:	4b06      	ldr	r3, [pc, #24]	; (801cf08 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801ceee:	881b      	ldrh	r3, [r3, #0]
 801cef0:	4413      	add	r3, r2
 801cef2:	4298      	cmp	r0, r3
 801cef4:	da04      	bge.n	801cf00 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801cef6:	4b05      	ldr	r3, [pc, #20]	; (801cf0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801cefe:	4770      	bx	lr
 801cf00:	2000      	movs	r0, #0
 801cf02:	4770      	bx	lr
 801cf04:	2000998c 	.word	0x2000998c
 801cf08:	20009990 	.word	0x20009990
 801cf0c:	20009970 	.word	0x20009970

0801cf10 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf14:	4d26      	ldr	r5, [pc, #152]	; (801cfb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801cf16:	682b      	ldr	r3, [r5, #0]
 801cf18:	2b00      	cmp	r3, #0
 801cf1a:	d046      	beq.n	801cfaa <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801cf1c:	4a25      	ldr	r2, [pc, #148]	; (801cfb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801cf1e:	4f26      	ldr	r7, [pc, #152]	; (801cfb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801cf20:	8810      	ldrh	r0, [r2, #0]
 801cf22:	883c      	ldrh	r4, [r7, #0]
 801cf24:	4e25      	ldr	r6, [pc, #148]	; (801cfbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801cf26:	4420      	add	r0, r4
 801cf28:	1c42      	adds	r2, r0, #1
 801cf2a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801cf2e:	f022 0201 	bic.w	r2, r2, #1
 801cf32:	0412      	lsls	r2, r2, #16
 801cf34:	0c12      	lsrs	r2, r2, #16
 801cf36:	0051      	lsls	r1, r2, #1
 801cf38:	220e      	movs	r2, #14
 801cf3a:	eb08 0e01 	add.w	lr, r8, r1
 801cf3e:	fb02 fc04 	mul.w	ip, r2, r4
 801cf42:	eb03 0208 	add.w	r2, r3, r8
 801cf46:	4c1e      	ldr	r4, [pc, #120]	; (801cfc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801cf48:	6022      	str	r2, [r4, #0]
 801cf4a:	eb03 020e 	add.w	r2, r3, lr
 801cf4e:	44e6      	add	lr, ip
 801cf50:	6032      	str	r2, [r6, #0]
 801cf52:	4473      	add	r3, lr
 801cf54:	4a1b      	ldr	r2, [pc, #108]	; (801cfc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801cf56:	6013      	str	r3, [r2, #0]
 801cf58:	2300      	movs	r3, #0
 801cf5a:	4a1b      	ldr	r2, [pc, #108]	; (801cfc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801cf5c:	8013      	strh	r3, [r2, #0]
 801cf5e:	4a1b      	ldr	r2, [pc, #108]	; (801cfcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801cf60:	6812      	ldr	r2, [r2, #0]
 801cf62:	eba2 0208 	sub.w	r2, r2, r8
 801cf66:	1a52      	subs	r2, r2, r1
 801cf68:	4919      	ldr	r1, [pc, #100]	; (801cfd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801cf6a:	eba2 020c 	sub.w	r2, r2, ip
 801cf6e:	469c      	mov	ip, r3
 801cf70:	600a      	str	r2, [r1, #0]
 801cf72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cf76:	4a17      	ldr	r2, [pc, #92]	; (801cfd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801cf78:	8013      	strh	r3, [r2, #0]
 801cf7a:	4283      	cmp	r3, r0
 801cf7c:	d10d      	bne.n	801cf9a <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801cf7e:	883d      	ldrh	r5, [r7, #0]
 801cf80:	2300      	movs	r3, #0
 801cf82:	6830      	ldr	r0, [r6, #0]
 801cf84:	240e      	movs	r4, #14
 801cf86:	429d      	cmp	r5, r3
 801cf88:	d90f      	bls.n	801cfaa <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801cf8a:	fb04 0203 	mla	r2, r4, r3, r0
 801cf8e:	3301      	adds	r3, #1
 801cf90:	7b11      	ldrb	r1, [r2, #12]
 801cf92:	f36f 1145 	bfc	r1, #5, #1
 801cf96:	7311      	strb	r1, [r2, #12]
 801cf98:	e7f5      	b.n	801cf86 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801cf9a:	682a      	ldr	r2, [r5, #0]
 801cf9c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801cfa0:	6822      	ldr	r2, [r4, #0]
 801cfa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801cfa6:	3301      	adds	r3, #1
 801cfa8:	e7e7      	b.n	801cf7a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801cfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfae:	bf00      	nop
 801cfb0:	20009970 	.word	0x20009970
 801cfb4:	2000998c 	.word	0x2000998c
 801cfb8:	20009990 	.word	0x20009990
 801cfbc:	20009974 	.word	0x20009974
 801cfc0:	20009984 	.word	0x20009984
 801cfc4:	2000997c 	.word	0x2000997c
 801cfc8:	2000998e 	.word	0x2000998e
 801cfcc:	20009978 	.word	0x20009978
 801cfd0:	20009988 	.word	0x20009988
 801cfd4:	20009980 	.word	0x20009980

0801cfd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cfd8:	4b10      	ldr	r3, [pc, #64]	; (801d01c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801cfda:	b510      	push	{r4, lr}
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	b9db      	cbnz	r3, 801d018 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cfe0:	b1d1      	cbz	r1, 801d018 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cfe2:	4b0f      	ldr	r3, [pc, #60]	; (801d020 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801cfe4:	240e      	movs	r4, #14
 801cfe6:	801a      	strh	r2, [r3, #0]
 801cfe8:	b292      	uxth	r2, r2
 801cfea:	4b0e      	ldr	r3, [pc, #56]	; (801d024 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801cfec:	881b      	ldrh	r3, [r3, #0]
 801cfee:	4413      	add	r3, r2
 801cff0:	4362      	muls	r2, r4
 801cff2:	2406      	movs	r4, #6
 801cff4:	fb04 2203 	mla	r2, r4, r3, r2
 801cff8:	428a      	cmp	r2, r1
 801cffa:	d305      	bcc.n	801d008 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801cffc:	4b0a      	ldr	r3, [pc, #40]	; (801d028 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801cffe:	2137      	movs	r1, #55	; 0x37
 801d000:	4a0a      	ldr	r2, [pc, #40]	; (801d02c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801d002:	480b      	ldr	r0, [pc, #44]	; (801d030 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801d004:	f008 f998 	bl	8025338 <__assert_func>
 801d008:	4b0a      	ldr	r3, [pc, #40]	; (801d034 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801d00a:	6019      	str	r1, [r3, #0]
 801d00c:	4b0a      	ldr	r3, [pc, #40]	; (801d038 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801d00e:	6018      	str	r0, [r3, #0]
 801d010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d014:	f7ff bf7c 	b.w	801cf10 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d018:	bd10      	pop	{r4, pc}
 801d01a:	bf00      	nop
 801d01c:	2000997c 	.word	0x2000997c
 801d020:	20009990 	.word	0x20009990
 801d024:	2000998c 	.word	0x2000998c
 801d028:	08028e0a 	.word	0x08028e0a
 801d02c:	08028e63 	.word	0x08028e63
 801d030:	08028de5 	.word	0x08028de5
 801d034:	20009978 	.word	0x20009978
 801d038:	20009970 	.word	0x20009970

0801d03c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d03c:	b470      	push	{r4, r5, r6}
 801d03e:	4c07      	ldr	r4, [pc, #28]	; (801d05c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d040:	4605      	mov	r5, r0
 801d042:	4610      	mov	r0, r2
 801d044:	9a03      	ldr	r2, [sp, #12]
 801d046:	6826      	ldr	r6, [r4, #0]
 801d048:	b936      	cbnz	r6, 801d058 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d04a:	6025      	str	r5, [r4, #0]
 801d04c:	4c04      	ldr	r4, [pc, #16]	; (801d060 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d04e:	8021      	strh	r1, [r4, #0]
 801d050:	4619      	mov	r1, r3
 801d052:	bc70      	pop	{r4, r5, r6}
 801d054:	f7ff bfc0 	b.w	801cfd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d058:	bc70      	pop	{r4, r5, r6}
 801d05a:	4770      	bx	lr
 801d05c:	20009994 	.word	0x20009994
 801d060:	2000998c 	.word	0x2000998c

0801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d064:	b508      	push	{r3, lr}
 801d066:	4b14      	ldr	r3, [pc, #80]	; (801d0b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d068:	6819      	ldr	r1, [r3, #0]
 801d06a:	b931      	cbnz	r1, 801d07a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801d06c:	4b13      	ldr	r3, [pc, #76]	; (801d0bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d06e:	f240 21e6 	movw	r1, #742	; 0x2e6
 801d072:	4a13      	ldr	r2, [pc, #76]	; (801d0c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d074:	4813      	ldr	r0, [pc, #76]	; (801d0c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d076:	f008 f95f 	bl	8025338 <__assert_func>
 801d07a:	4a13      	ldr	r2, [pc, #76]	; (801d0c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d07c:	8803      	ldrh	r3, [r0, #0]
 801d07e:	8812      	ldrh	r2, [r2, #0]
 801d080:	4293      	cmp	r3, r2
 801d082:	d204      	bcs.n	801d08e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801d084:	2214      	movs	r2, #20
 801d086:	fb02 1303 	mla	r3, r2, r3, r1
 801d08a:	8918      	ldrh	r0, [r3, #8]
 801d08c:	bd08      	pop	{r3, pc}
 801d08e:	490f      	ldr	r1, [pc, #60]	; (801d0cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801d090:	8809      	ldrh	r1, [r1, #0]
 801d092:	4411      	add	r1, r2
 801d094:	428b      	cmp	r3, r1
 801d096:	da06      	bge.n	801d0a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801d098:	1a9b      	subs	r3, r3, r2
 801d09a:	4a0d      	ldr	r2, [pc, #52]	; (801d0d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801d09c:	210e      	movs	r1, #14
 801d09e:	6812      	ldr	r2, [r2, #0]
 801d0a0:	fb01 2303 	mla	r3, r1, r3, r2
 801d0a4:	e7f1      	b.n	801d08a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801d0a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d0aa:	4293      	cmp	r3, r2
 801d0ac:	bf0a      	itet	eq
 801d0ae:	4b09      	ldreq	r3, [pc, #36]	; (801d0d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801d0b0:	2000      	movne	r0, #0
 801d0b2:	8818      	ldrheq	r0, [r3, #0]
 801d0b4:	e7ea      	b.n	801d08c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801d0b6:	bf00      	nop
 801d0b8:	20009994 	.word	0x20009994
 801d0bc:	08028144 	.word	0x08028144
 801d0c0:	08028f10 	.word	0x08028f10
 801d0c4:	08028de5 	.word	0x08028de5
 801d0c8:	2000998c 	.word	0x2000998c
 801d0cc:	20009990 	.word	0x20009990
 801d0d0:	20009974 	.word	0x20009974
 801d0d4:	200098de 	.word	0x200098de

0801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d0d8:	b508      	push	{r3, lr}
 801d0da:	4b14      	ldr	r3, [pc, #80]	; (801d12c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d0dc:	6819      	ldr	r1, [r3, #0]
 801d0de:	b931      	cbnz	r1, 801d0ee <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d0e0:	4b13      	ldr	r3, [pc, #76]	; (801d130 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d0e2:	f240 21fa 	movw	r1, #762	; 0x2fa
 801d0e6:	4a13      	ldr	r2, [pc, #76]	; (801d134 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d0e8:	4813      	ldr	r0, [pc, #76]	; (801d138 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d0ea:	f008 f925 	bl	8025338 <__assert_func>
 801d0ee:	4a13      	ldr	r2, [pc, #76]	; (801d13c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d0f0:	8803      	ldrh	r3, [r0, #0]
 801d0f2:	8812      	ldrh	r2, [r2, #0]
 801d0f4:	4293      	cmp	r3, r2
 801d0f6:	d204      	bcs.n	801d102 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d0f8:	2214      	movs	r2, #20
 801d0fa:	fb02 1303 	mla	r3, r2, r3, r1
 801d0fe:	8958      	ldrh	r0, [r3, #10]
 801d100:	bd08      	pop	{r3, pc}
 801d102:	490f      	ldr	r1, [pc, #60]	; (801d140 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d104:	8809      	ldrh	r1, [r1, #0]
 801d106:	4411      	add	r1, r2
 801d108:	428b      	cmp	r3, r1
 801d10a:	da06      	bge.n	801d11a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801d10c:	1a9b      	subs	r3, r3, r2
 801d10e:	4a0d      	ldr	r2, [pc, #52]	; (801d144 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d110:	210e      	movs	r1, #14
 801d112:	6812      	ldr	r2, [r2, #0]
 801d114:	fb01 2303 	mla	r3, r1, r3, r2
 801d118:	e7f1      	b.n	801d0fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d11a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d11e:	4293      	cmp	r3, r2
 801d120:	bf0a      	itet	eq
 801d122:	4b09      	ldreq	r3, [pc, #36]	; (801d148 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801d124:	2000      	movne	r0, #0
 801d126:	8818      	ldrheq	r0, [r3, #0]
 801d128:	e7ea      	b.n	801d100 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801d12a:	bf00      	nop
 801d12c:	20009994 	.word	0x20009994
 801d130:	08028144 	.word	0x08028144
 801d134:	08028f3c 	.word	0x08028f3c
 801d138:	08028de5 	.word	0x08028de5
 801d13c:	2000998c 	.word	0x2000998c
 801d140:	20009990 	.word	0x20009990
 801d144:	20009974 	.word	0x20009974
 801d148:	200098e0 	.word	0x200098e0

0801d14c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d14c:	4b23      	ldr	r3, [pc, #140]	; (801d1dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d14e:	b510      	push	{r4, lr}
 801d150:	681c      	ldr	r4, [r3, #0]
 801d152:	b934      	cbnz	r4, 801d162 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801d154:	4b22      	ldr	r3, [pc, #136]	; (801d1e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d156:	f240 310e 	movw	r1, #782	; 0x30e
 801d15a:	4a22      	ldr	r2, [pc, #136]	; (801d1e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d15c:	4822      	ldr	r0, [pc, #136]	; (801d1e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d15e:	f008 f8eb 	bl	8025338 <__assert_func>
 801d162:	4a22      	ldr	r2, [pc, #136]	; (801d1ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d164:	880b      	ldrh	r3, [r1, #0]
 801d166:	8812      	ldrh	r2, [r2, #0]
 801d168:	4293      	cmp	r3, r2
 801d16a:	d211      	bcs.n	801d190 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801d16c:	2214      	movs	r2, #20
 801d16e:	fb02 4303 	mla	r3, r2, r3, r4
 801d172:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d176:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d17a:	8a1a      	ldrh	r2, [r3, #16]
 801d17c:	8a5b      	ldrh	r3, [r3, #18]
 801d17e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d182:	8004      	strh	r4, [r0, #0]
 801d184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d188:	8041      	strh	r1, [r0, #2]
 801d18a:	8082      	strh	r2, [r0, #4]
 801d18c:	80c3      	strh	r3, [r0, #6]
 801d18e:	e00e      	b.n	801d1ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d190:	4917      	ldr	r1, [pc, #92]	; (801d1f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801d192:	8809      	ldrh	r1, [r1, #0]
 801d194:	4411      	add	r1, r2
 801d196:	428b      	cmp	r3, r1
 801d198:	da0a      	bge.n	801d1b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801d19a:	1a9b      	subs	r3, r3, r2
 801d19c:	4a15      	ldr	r2, [pc, #84]	; (801d1f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801d19e:	210e      	movs	r1, #14
 801d1a0:	6812      	ldr	r2, [r2, #0]
 801d1a2:	fb01 2303 	mla	r3, r1, r3, r2
 801d1a6:	681a      	ldr	r2, [r3, #0]
 801d1a8:	6002      	str	r2, [r0, #0]
 801d1aa:	685a      	ldr	r2, [r3, #4]
 801d1ac:	6042      	str	r2, [r0, #4]
 801d1ae:	bd10      	pop	{r4, pc}
 801d1b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d1b4:	4293      	cmp	r3, r2
 801d1b6:	d10b      	bne.n	801d1d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801d1b8:	4b0f      	ldr	r3, [pc, #60]	; (801d1f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801d1ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d1be:	4b0f      	ldr	r3, [pc, #60]	; (801d1fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801d1c0:	8081      	strh	r1, [r0, #4]
 801d1c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	80c2      	strh	r2, [r0, #6]
 801d1ca:	8003      	strh	r3, [r0, #0]
 801d1cc:	8043      	strh	r3, [r0, #2]
 801d1ce:	e7ee      	b.n	801d1ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801d1d0:	2300      	movs	r3, #0
 801d1d2:	8003      	strh	r3, [r0, #0]
 801d1d4:	8043      	strh	r3, [r0, #2]
 801d1d6:	8083      	strh	r3, [r0, #4]
 801d1d8:	e7d8      	b.n	801d18c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801d1da:	bf00      	nop
 801d1dc:	20009994 	.word	0x20009994
 801d1e0:	08028144 	.word	0x08028144
 801d1e4:	08028ea9 	.word	0x08028ea9
 801d1e8:	08028de5 	.word	0x08028de5
 801d1ec:	2000998c 	.word	0x2000998c
 801d1f0:	20009990 	.word	0x20009990
 801d1f4:	20009974 	.word	0x20009974
 801d1f8:	200098de 	.word	0x200098de
 801d1fc:	200098e0 	.word	0x200098e0

0801d200 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d200:	4b18      	ldr	r3, [pc, #96]	; (801d264 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	b34b      	cbz	r3, 801d25a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d206:	4a18      	ldr	r2, [pc, #96]	; (801d268 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d208:	8800      	ldrh	r0, [r0, #0]
 801d20a:	8812      	ldrh	r2, [r2, #0]
 801d20c:	4290      	cmp	r0, r2
 801d20e:	d211      	bcs.n	801d234 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801d210:	2214      	movs	r2, #20
 801d212:	fb02 3300 	mla	r3, r2, r0, r3
 801d216:	8a1a      	ldrh	r2, [r3, #16]
 801d218:	8919      	ldrh	r1, [r3, #8]
 801d21a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d21e:	428a      	cmp	r2, r1
 801d220:	db1d      	blt.n	801d25e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d222:	8a58      	ldrh	r0, [r3, #18]
 801d224:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d228:	895b      	ldrh	r3, [r3, #10]
 801d22a:	4298      	cmp	r0, r3
 801d22c:	bfac      	ite	ge
 801d22e:	2000      	movge	r0, #0
 801d230:	2001      	movlt	r0, #1
 801d232:	4770      	bx	lr
 801d234:	4b0d      	ldr	r3, [pc, #52]	; (801d26c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d236:	881b      	ldrh	r3, [r3, #0]
 801d238:	4413      	add	r3, r2
 801d23a:	4298      	cmp	r0, r3
 801d23c:	da0d      	bge.n	801d25a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d23e:	4b0c      	ldr	r3, [pc, #48]	; (801d270 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801d240:	1a80      	subs	r0, r0, r2
 801d242:	220e      	movs	r2, #14
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	fb02 3300 	mla	r3, r2, r0, r3
 801d24a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d24e:	891a      	ldrh	r2, [r3, #8]
 801d250:	4291      	cmp	r1, r2
 801d252:	db04      	blt.n	801d25e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d254:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d258:	e7e6      	b.n	801d228 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801d25a:	2000      	movs	r0, #0
 801d25c:	4770      	bx	lr
 801d25e:	2001      	movs	r0, #1
 801d260:	4770      	bx	lr
 801d262:	bf00      	nop
 801d264:	20009994 	.word	0x20009994
 801d268:	2000998c 	.word	0x2000998c
 801d26c:	20009990 	.word	0x20009990
 801d270:	20009974 	.word	0x20009974

0801d274 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d274:	b508      	push	{r3, lr}
 801d276:	4b12      	ldr	r3, [pc, #72]	; (801d2c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d278:	6819      	ldr	r1, [r3, #0]
 801d27a:	b931      	cbnz	r1, 801d28a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d27c:	4b11      	ldr	r3, [pc, #68]	; (801d2c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d27e:	f240 3132 	movw	r1, #818	; 0x332
 801d282:	4a11      	ldr	r2, [pc, #68]	; (801d2c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d284:	4811      	ldr	r0, [pc, #68]	; (801d2cc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d286:	f008 f857 	bl	8025338 <__assert_func>
 801d28a:	8803      	ldrh	r3, [r0, #0]
 801d28c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d290:	4293      	cmp	r3, r2
 801d292:	d012      	beq.n	801d2ba <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d294:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d298:	4293      	cmp	r3, r2
 801d29a:	d103      	bne.n	801d2a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801d29c:	4b0c      	ldr	r3, [pc, #48]	; (801d2d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d2a2:	bd08      	pop	{r3, pc}
 801d2a4:	4a0b      	ldr	r2, [pc, #44]	; (801d2d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801d2a6:	6812      	ldr	r2, [r2, #0]
 801d2a8:	b11a      	cbz	r2, 801d2b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801d2aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d2ae:	2800      	cmp	r0, #0
 801d2b0:	d1f7      	bne.n	801d2a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d2b2:	2214      	movs	r2, #20
 801d2b4:	4353      	muls	r3, r2
 801d2b6:	58c8      	ldr	r0, [r1, r3]
 801d2b8:	e7f3      	b.n	801d2a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d2ba:	2000      	movs	r0, #0
 801d2bc:	e7f1      	b.n	801d2a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801d2be:	bf00      	nop
 801d2c0:	20009994 	.word	0x20009994
 801d2c4:	08028144 	.word	0x08028144
 801d2c8:	08028edf 	.word	0x08028edf
 801d2cc:	08028de5 	.word	0x08028de5
 801d2d0:	200098ec 	.word	0x200098ec
 801d2d4:	20009970 	.word	0x20009970

0801d2d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d2d8:	8802      	ldrh	r2, [r0, #0]
 801d2da:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d2de:	429a      	cmp	r2, r3
 801d2e0:	d840      	bhi.n	801d364 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d2e2:	4b21      	ldr	r3, [pc, #132]	; (801d368 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801d2e4:	881b      	ldrh	r3, [r3, #0]
 801d2e6:	429a      	cmp	r2, r3
 801d2e8:	d220      	bcs.n	801d32c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801d2ea:	4b20      	ldr	r3, [pc, #128]	; (801d36c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d2ec:	6819      	ldr	r1, [r3, #0]
 801d2ee:	2314      	movs	r3, #20
 801d2f0:	fb03 1302 	mla	r3, r3, r2, r1
 801d2f4:	6858      	ldr	r0, [r3, #4]
 801d2f6:	2800      	cmp	r0, #0
 801d2f8:	d035      	beq.n	801d366 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d2fa:	491d      	ldr	r1, [pc, #116]	; (801d370 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d2fc:	6809      	ldr	r1, [r1, #0]
 801d2fe:	2900      	cmp	r1, #0
 801d300:	d031      	beq.n	801d366 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d302:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d306:	b371      	cbz	r1, 801d366 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d308:	895a      	ldrh	r2, [r3, #10]
 801d30a:	8918      	ldrh	r0, [r3, #8]
 801d30c:	4350      	muls	r0, r2
 801d30e:	7c5a      	ldrb	r2, [r3, #17]
 801d310:	7cdb      	ldrb	r3, [r3, #19]
 801d312:	0952      	lsrs	r2, r2, #5
 801d314:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d318:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d31c:	2b0b      	cmp	r3, #11
 801d31e:	bf18      	it	ne
 801d320:	0040      	lslne	r0, r0, #1
 801d322:	3003      	adds	r0, #3
 801d324:	f020 0003 	bic.w	r0, r0, #3
 801d328:	4408      	add	r0, r1
 801d32a:	4770      	bx	lr
 801d32c:	4911      	ldr	r1, [pc, #68]	; (801d374 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d32e:	8809      	ldrh	r1, [r1, #0]
 801d330:	4419      	add	r1, r3
 801d332:	428a      	cmp	r2, r1
 801d334:	da16      	bge.n	801d364 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d336:	4910      	ldr	r1, [pc, #64]	; (801d378 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d338:	1ad3      	subs	r3, r2, r3
 801d33a:	200e      	movs	r0, #14
 801d33c:	6809      	ldr	r1, [r1, #0]
 801d33e:	fb00 1303 	mla	r3, r0, r3, r1
 801d342:	7b19      	ldrb	r1, [r3, #12]
 801d344:	f001 011f 	and.w	r1, r1, #31
 801d348:	290b      	cmp	r1, #11
 801d34a:	d10b      	bne.n	801d364 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d34c:	8919      	ldrh	r1, [r3, #8]
 801d34e:	8958      	ldrh	r0, [r3, #10]
 801d350:	4b07      	ldr	r3, [pc, #28]	; (801d370 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d352:	4348      	muls	r0, r1
 801d354:	6819      	ldr	r1, [r3, #0]
 801d356:	3003      	adds	r0, #3
 801d358:	f020 0303 	bic.w	r3, r0, #3
 801d35c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d360:	4418      	add	r0, r3
 801d362:	4770      	bx	lr
 801d364:	2000      	movs	r0, #0
 801d366:	4770      	bx	lr
 801d368:	2000998c 	.word	0x2000998c
 801d36c:	20009994 	.word	0x20009994
 801d370:	20009970 	.word	0x20009970
 801d374:	20009990 	.word	0x20009990
 801d378:	20009974 	.word	0x20009974

0801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d37c:	4b19      	ldr	r3, [pc, #100]	; (801d3e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d37e:	6819      	ldr	r1, [r3, #0]
 801d380:	8803      	ldrh	r3, [r0, #0]
 801d382:	b1e9      	cbz	r1, 801d3c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d384:	4a18      	ldr	r2, [pc, #96]	; (801d3e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d386:	8812      	ldrh	r2, [r2, #0]
 801d388:	429a      	cmp	r2, r3
 801d38a:	d90a      	bls.n	801d3a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d38c:	2214      	movs	r2, #20
 801d38e:	fb02 1303 	mla	r3, r2, r3, r1
 801d392:	7c58      	ldrb	r0, [r3, #17]
 801d394:	0942      	lsrs	r2, r0, #5
 801d396:	7cd8      	ldrb	r0, [r3, #19]
 801d398:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d39c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d3a0:	4770      	bx	lr
 801d3a2:	4912      	ldr	r1, [pc, #72]	; (801d3ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801d3a4:	8809      	ldrh	r1, [r1, #0]
 801d3a6:	4411      	add	r1, r2
 801d3a8:	428b      	cmp	r3, r1
 801d3aa:	da09      	bge.n	801d3c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d3ac:	1a9b      	subs	r3, r3, r2
 801d3ae:	4a10      	ldr	r2, [pc, #64]	; (801d3f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d3b0:	210e      	movs	r1, #14
 801d3b2:	6812      	ldr	r2, [r2, #0]
 801d3b4:	fb01 2303 	mla	r3, r1, r3, r2
 801d3b8:	7b18      	ldrb	r0, [r3, #12]
 801d3ba:	f000 001f 	and.w	r0, r0, #31
 801d3be:	4770      	bx	lr
 801d3c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d3c4:	4293      	cmp	r3, r2
 801d3c6:	d10a      	bne.n	801d3de <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801d3c8:	4b0a      	ldr	r3, [pc, #40]	; (801d3f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d3d0:	b10a      	cbz	r2, 801d3d6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d3d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d3d4:	b900      	cbnz	r0, 801d3d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801d3d6:	6898      	ldr	r0, [r3, #8]
 801d3d8:	6803      	ldr	r3, [r0, #0]
 801d3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3dc:	4718      	bx	r3
 801d3de:	2000      	movs	r0, #0
 801d3e0:	4770      	bx	lr
 801d3e2:	bf00      	nop
 801d3e4:	20009994 	.word	0x20009994
 801d3e8:	2000998c 	.word	0x2000998c
 801d3ec:	20009990 	.word	0x20009990
 801d3f0:	20009974 	.word	0x20009974
 801d3f4:	200098ec 	.word	0x200098ec

0801d3f8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801d3f8:	2018      	movs	r0, #24
 801d3fa:	4770      	bx	lr

0801d3fc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801d3fc:	2001      	movs	r0, #1
 801d3fe:	4770      	bx	lr

0801d400 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801d400:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d404:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801d408:	4770      	bx	lr

0801d40a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801d40a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801d40e:	4770      	bx	lr

0801d410 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801d410:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801d414:	4770      	bx	lr

0801d416 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801d416:	b2c8      	uxtb	r0, r1
 801d418:	4770      	bx	lr

0801d41a <_ZN8touchgfx8LCD24bpp4initEv>:
 801d41a:	4770      	bx	lr

0801d41c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d420:	b085      	sub	sp, #20
 801d422:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801d424:	9203      	str	r2, [sp, #12]
 801d426:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d42a:	6878      	ldr	r0, [r7, #4]
 801d42c:	9201      	str	r2, [sp, #4]
 801d42e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801d430:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801d434:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801d438:	fa1f fc84 	uxth.w	ip, r4
 801d43c:	43e4      	mvns	r4, r4
 801d43e:	9100      	str	r1, [sp, #0]
 801d440:	b2e4      	uxtb	r4, r4
 801d442:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801d446:	fb00 2505 	mla	r5, r0, r5, r2
 801d44a:	683a      	ldr	r2, [r7, #0]
 801d44c:	6877      	ldr	r7, [r6, #4]
 801d44e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d452:	3704      	adds	r7, #4
 801d454:	4415      	add	r5, r2
 801d456:	6832      	ldr	r2, [r6, #0]
 801d458:	9202      	str	r2, [sp, #8]
 801d45a:	9a00      	ldr	r2, [sp, #0]
 801d45c:	2a00      	cmp	r2, #0
 801d45e:	dc03      	bgt.n	801d468 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801d460:	9a03      	ldr	r2, [sp, #12]
 801d462:	2a00      	cmp	r2, #0
 801d464:	f340 8116 	ble.w	801d694 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d46a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d46e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d470:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d474:	2b00      	cmp	r3, #0
 801d476:	dd0f      	ble.n	801d498 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801d478:	1406      	asrs	r6, r0, #16
 801d47a:	d406      	bmi.n	801d48a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d47c:	4546      	cmp	r6, r8
 801d47e:	da04      	bge.n	801d48a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d480:	1416      	asrs	r6, r2, #16
 801d482:	d402      	bmi.n	801d48a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d484:	9901      	ldr	r1, [sp, #4]
 801d486:	428e      	cmp	r6, r1
 801d488:	db07      	blt.n	801d49a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801d48a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d48c:	3b01      	subs	r3, #1
 801d48e:	3503      	adds	r5, #3
 801d490:	4408      	add	r0, r1
 801d492:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d494:	440a      	add	r2, r1
 801d496:	e7ed      	b.n	801d474 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801d498:	d011      	beq.n	801d4be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801d49a:	1e5e      	subs	r6, r3, #1
 801d49c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d49e:	fb01 0e06 	mla	lr, r1, r6, r0
 801d4a2:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d4a6:	d548      	bpl.n	801d53a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801d4a8:	4699      	mov	r9, r3
 801d4aa:	462e      	mov	r6, r5
 801d4ac:	f1b9 0f00 	cmp.w	r9, #0
 801d4b0:	f300 809e 	bgt.w	801d5f0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801d4b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4bc:	441d      	add	r5, r3
 801d4be:	9b00      	ldr	r3, [sp, #0]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	f340 80e7 	ble.w	801d694 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d4c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4d4:	eef0 6a62 	vmov.f32	s13, s5
 801d4d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4e4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801d4e8:	eef0 6a43 	vmov.f32	s13, s6
 801d4ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4f0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801d4f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d500:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d504:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d508:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d50c:	ee12 2a90 	vmov	r2, s5
 801d510:	eef0 2a47 	vmov.f32	s5, s14
 801d514:	fb92 f3f3 	sdiv	r3, r2, r3
 801d518:	ee13 2a10 	vmov	r2, s6
 801d51c:	9311      	str	r3, [sp, #68]	; 0x44
 801d51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d520:	eeb0 3a67 	vmov.f32	s6, s15
 801d524:	fb92 f3f3 	sdiv	r3, r2, r3
 801d528:	9312      	str	r3, [sp, #72]	; 0x48
 801d52a:	9b00      	ldr	r3, [sp, #0]
 801d52c:	9a03      	ldr	r2, [sp, #12]
 801d52e:	3b01      	subs	r3, #1
 801d530:	9300      	str	r3, [sp, #0]
 801d532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d534:	bf08      	it	eq
 801d536:	4613      	moveq	r3, r2
 801d538:	e78f      	b.n	801d45a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801d53a:	45c6      	cmp	lr, r8
 801d53c:	dab4      	bge.n	801d4a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d53e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d540:	fb01 2606 	mla	r6, r1, r6, r2
 801d544:	1436      	asrs	r6, r6, #16
 801d546:	d4af      	bmi.n	801d4a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d548:	9901      	ldr	r1, [sp, #4]
 801d54a:	428e      	cmp	r6, r1
 801d54c:	daac      	bge.n	801d4a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801d54e:	1cee      	adds	r6, r5, #3
 801d550:	4699      	mov	r9, r3
 801d552:	f1b9 0f00 	cmp.w	r9, #0
 801d556:	f106 0603 	add.w	r6, r6, #3
 801d55a:	ddab      	ble.n	801d4b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801d55c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801d560:	9902      	ldr	r1, [sp, #8]
 801d562:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801d566:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801d56a:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d56e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d570:	fb1b fb04 	smulbb	fp, fp, r4
 801d574:	f109 39ff 	add.w	r9, r9, #4294967295
 801d578:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d57c:	4408      	add	r0, r1
 801d57e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d580:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d584:	440a      	add	r2, r1
 801d586:	eb07 0a0e 	add.w	sl, r7, lr
 801d58a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d58e:	fb0e be0c 	mla	lr, lr, ip, fp
 801d592:	fa1f fe8e 	uxth.w	lr, lr
 801d596:	f10e 0b01 	add.w	fp, lr, #1
 801d59a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d59e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801d5a2:	fb1b fb04 	smulbb	fp, fp, r4
 801d5a6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d5aa:	f806 ec06 	strb.w	lr, [r6, #-6]
 801d5ae:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d5b2:	fb0e be0c 	mla	lr, lr, ip, fp
 801d5b6:	fa1f fe8e 	uxth.w	lr, lr
 801d5ba:	f10e 0b01 	add.w	fp, lr, #1
 801d5be:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d5c2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d5c6:	f806 ec05 	strb.w	lr, [r6, #-5]
 801d5ca:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d5ce:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801d5d2:	fb1a fa04 	smulbb	sl, sl, r4
 801d5d6:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d5da:	fa1f fe8e 	uxth.w	lr, lr
 801d5de:	f10e 0a01 	add.w	sl, lr, #1
 801d5e2:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d5e6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d5ea:	f806 ec04 	strb.w	lr, [r6, #-4]
 801d5ee:	e7b0      	b.n	801d552 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801d5f0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d5f4:	d446      	bmi.n	801d684 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d5f6:	45c2      	cmp	sl, r8
 801d5f8:	da44      	bge.n	801d684 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d5fa:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801d5fe:	d441      	bmi.n	801d684 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d600:	9901      	ldr	r1, [sp, #4]
 801d602:	458e      	cmp	lr, r1
 801d604:	da3e      	bge.n	801d684 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801d606:	9902      	ldr	r1, [sp, #8]
 801d608:	f896 b000 	ldrb.w	fp, [r6]
 801d60c:	fb08 1e0e 	mla	lr, r8, lr, r1
 801d610:	fb1b fb04 	smulbb	fp, fp, r4
 801d614:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801d618:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d61c:	eb07 0a0e 	add.w	sl, r7, lr
 801d620:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d624:	fb0e be0c 	mla	lr, lr, ip, fp
 801d628:	fa1f fe8e 	uxth.w	lr, lr
 801d62c:	f10e 0b01 	add.w	fp, lr, #1
 801d630:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d634:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d638:	fb1b fb04 	smulbb	fp, fp, r4
 801d63c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d640:	f886 e000 	strb.w	lr, [r6]
 801d644:	f89a e001 	ldrb.w	lr, [sl, #1]
 801d648:	fb0e be0c 	mla	lr, lr, ip, fp
 801d64c:	fa1f fe8e 	uxth.w	lr, lr
 801d650:	f10e 0b01 	add.w	fp, lr, #1
 801d654:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d658:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d65c:	f886 e001 	strb.w	lr, [r6, #1]
 801d660:	f89a e002 	ldrb.w	lr, [sl, #2]
 801d664:	f896 a002 	ldrb.w	sl, [r6, #2]
 801d668:	fb1a fa04 	smulbb	sl, sl, r4
 801d66c:	fb0e ae0c 	mla	lr, lr, ip, sl
 801d670:	fa1f fe8e 	uxth.w	lr, lr
 801d674:	f10e 0a01 	add.w	sl, lr, #1
 801d678:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801d67c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d680:	f886 e002 	strb.w	lr, [r6, #2]
 801d684:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d686:	3603      	adds	r6, #3
 801d688:	f109 39ff 	add.w	r9, r9, #4294967295
 801d68c:	4408      	add	r0, r1
 801d68e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d690:	440a      	add	r2, r1
 801d692:	e70b      	b.n	801d4ac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801d694:	b005      	add	sp, #20
 801d696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d69a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d69a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d69e:	b085      	sub	sp, #20
 801d6a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d6a4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d6a6:	9203      	str	r2, [sp, #12]
 801d6a8:	6870      	ldr	r0, [r6, #4]
 801d6aa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801d6ac:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d6b0:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801d6b4:	9101      	str	r1, [sp, #4]
 801d6b6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d6ba:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801d6be:	fb00 2404 	mla	r4, r0, r4, r2
 801d6c2:	6832      	ldr	r2, [r6, #0]
 801d6c4:	686e      	ldr	r6, [r5, #4]
 801d6c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d6ca:	3604      	adds	r6, #4
 801d6cc:	4414      	add	r4, r2
 801d6ce:	682a      	ldr	r2, [r5, #0]
 801d6d0:	9202      	str	r2, [sp, #8]
 801d6d2:	9a01      	ldr	r2, [sp, #4]
 801d6d4:	2a00      	cmp	r2, #0
 801d6d6:	dc03      	bgt.n	801d6e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801d6d8:	9a03      	ldr	r2, [sp, #12]
 801d6da:	2a00      	cmp	r2, #0
 801d6dc:	f340 80b2 	ble.w	801d844 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d6e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d6e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d6e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d6e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	dd0c      	ble.n	801d70a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d6f0:	1405      	asrs	r5, r0, #16
 801d6f2:	d405      	bmi.n	801d700 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d6f4:	4575      	cmp	r5, lr
 801d6f6:	da03      	bge.n	801d700 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d6f8:	1415      	asrs	r5, r2, #16
 801d6fa:	d401      	bmi.n	801d700 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801d6fc:	4545      	cmp	r5, r8
 801d6fe:	db05      	blt.n	801d70c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d700:	4460      	add	r0, ip
 801d702:	443a      	add	r2, r7
 801d704:	3b01      	subs	r3, #1
 801d706:	3403      	adds	r4, #3
 801d708:	e7f0      	b.n	801d6ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801d70a:	d03d      	beq.n	801d788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801d70c:	1e5d      	subs	r5, r3, #1
 801d70e:	fb0c 0905 	mla	r9, ip, r5, r0
 801d712:	ea5f 4929 	movs.w	r9, r9, asr #16
 801d716:	d42c      	bmi.n	801d772 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d718:	45f1      	cmp	r9, lr
 801d71a:	da2a      	bge.n	801d772 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d71c:	fb07 2505 	mla	r5, r7, r5, r2
 801d720:	142d      	asrs	r5, r5, #16
 801d722:	d426      	bmi.n	801d772 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d724:	4545      	cmp	r5, r8
 801d726:	da24      	bge.n	801d772 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d728:	1ce5      	adds	r5, r4, #3
 801d72a:	469a      	mov	sl, r3
 801d72c:	f1ba 0f00 	cmp.w	sl, #0
 801d730:	f105 0503 	add.w	r5, r5, #3
 801d734:	dd23      	ble.n	801d77e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d736:	ea4f 4922 	mov.w	r9, r2, asr #16
 801d73a:	9902      	ldr	r1, [sp, #8]
 801d73c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801d740:	443a      	add	r2, r7
 801d742:	fb0e 1909 	mla	r9, lr, r9, r1
 801d746:	4460      	add	r0, ip
 801d748:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d74c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801d750:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d754:	eb06 0b09 	add.w	fp, r6, r9
 801d758:	f816 9009 	ldrb.w	r9, [r6, r9]
 801d75c:	f805 9c06 	strb.w	r9, [r5, #-6]
 801d760:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801d764:	f805 9c05 	strb.w	r9, [r5, #-5]
 801d768:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d76c:	f805 9c04 	strb.w	r9, [r5, #-4]
 801d770:	e7dc      	b.n	801d72c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d772:	2500      	movs	r5, #0
 801d774:	eba3 0905 	sub.w	r9, r3, r5
 801d778:	f1b9 0f00 	cmp.w	r9, #0
 801d77c:	dc3c      	bgt.n	801d7f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801d77e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d786:	441c      	add	r4, r3
 801d788:	9b01      	ldr	r3, [sp, #4]
 801d78a:	2b00      	cmp	r3, #0
 801d78c:	dd5a      	ble.n	801d844 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801d78e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d794:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d798:	eeb0 6a62 	vmov.f32	s12, s5
 801d79c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d7a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d7a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7a8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d7ac:	eeb0 6a43 	vmov.f32	s12, s6
 801d7b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d7b4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d7b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d7bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d7c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d7c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d7c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d7cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d7d0:	ee12 2a90 	vmov	r2, s5
 801d7d4:	eef0 2a47 	vmov.f32	s5, s14
 801d7d8:	fb92 fcf3 	sdiv	ip, r2, r3
 801d7dc:	ee13 2a10 	vmov	r2, s6
 801d7e0:	eeb0 3a67 	vmov.f32	s6, s15
 801d7e4:	fb92 f7f3 	sdiv	r7, r2, r3
 801d7e8:	9b01      	ldr	r3, [sp, #4]
 801d7ea:	9a03      	ldr	r2, [sp, #12]
 801d7ec:	3b01      	subs	r3, #1
 801d7ee:	9301      	str	r3, [sp, #4]
 801d7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d7f2:	bf08      	it	eq
 801d7f4:	4613      	moveq	r3, r2
 801d7f6:	e76c      	b.n	801d6d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801d7f8:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801d7fc:	d41e      	bmi.n	801d83c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d7fe:	45f2      	cmp	sl, lr
 801d800:	da1c      	bge.n	801d83c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d802:	ea5f 4922 	movs.w	r9, r2, asr #16
 801d806:	d419      	bmi.n	801d83c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d808:	45c1      	cmp	r9, r8
 801d80a:	da17      	bge.n	801d83c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801d80c:	9902      	ldr	r1, [sp, #8]
 801d80e:	fb0e 1909 	mla	r9, lr, r9, r1
 801d812:	f819 900a 	ldrb.w	r9, [r9, sl]
 801d816:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d81a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801d81e:	eb06 0a09 	add.w	sl, r6, r9
 801d822:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801d826:	f804 b009 	strb.w	fp, [r4, r9]
 801d82a:	44a1      	add	r9, r4
 801d82c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801d830:	f889 b001 	strb.w	fp, [r9, #1]
 801d834:	f89a a002 	ldrb.w	sl, [sl, #2]
 801d838:	f889 a002 	strb.w	sl, [r9, #2]
 801d83c:	4460      	add	r0, ip
 801d83e:	443a      	add	r2, r7
 801d840:	3501      	adds	r5, #1
 801d842:	e797      	b.n	801d774 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801d844:	b005      	add	sp, #20
 801d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d84a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d84a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d84e:	b087      	sub	sp, #28
 801d850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d854:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801d856:	9204      	str	r2, [sp, #16]
 801d858:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801d85c:	6870      	ldr	r0, [r6, #4]
 801d85e:	9205      	str	r2, [sp, #20]
 801d860:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801d862:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801d866:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801d86a:	9101      	str	r1, [sp, #4]
 801d86c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d870:	fb00 2505 	mla	r5, r0, r5, r2
 801d874:	6832      	ldr	r2, [r6, #0]
 801d876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d87a:	4415      	add	r5, r2
 801d87c:	6822      	ldr	r2, [r4, #0]
 801d87e:	9202      	str	r2, [sp, #8]
 801d880:	6862      	ldr	r2, [r4, #4]
 801d882:	3204      	adds	r2, #4
 801d884:	9203      	str	r2, [sp, #12]
 801d886:	9a01      	ldr	r2, [sp, #4]
 801d888:	2a00      	cmp	r2, #0
 801d88a:	dc03      	bgt.n	801d894 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801d88c:	9a04      	ldr	r2, [sp, #16]
 801d88e:	2a00      	cmp	r2, #0
 801d890:	f340 8124 	ble.w	801dadc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d894:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d896:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d89a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d89c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	dd0e      	ble.n	801d8c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d8a4:	1422      	asrs	r2, r4, #16
 801d8a6:	d405      	bmi.n	801d8b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d8a8:	4572      	cmp	r2, lr
 801d8aa:	da03      	bge.n	801d8b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d8ac:	1402      	asrs	r2, r0, #16
 801d8ae:	d401      	bmi.n	801d8b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d8b0:	4542      	cmp	r2, r8
 801d8b2:	db07      	blt.n	801d8c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d8b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d8b6:	3b01      	subs	r3, #1
 801d8b8:	3503      	adds	r5, #3
 801d8ba:	4414      	add	r4, r2
 801d8bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d8be:	4410      	add	r0, r2
 801d8c0:	e7ee      	b.n	801d8a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801d8c2:	d010      	beq.n	801d8e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801d8c4:	1e5a      	subs	r2, r3, #1
 801d8c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d8c8:	fb06 4602 	mla	r6, r6, r2, r4
 801d8cc:	1436      	asrs	r6, r6, #16
 801d8ce:	d546      	bpl.n	801d95e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801d8d0:	4699      	mov	r9, r3
 801d8d2:	462f      	mov	r7, r5
 801d8d4:	f1b9 0f00 	cmp.w	r9, #0
 801d8d8:	f300 80a5 	bgt.w	801da26 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801d8dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d8e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8e4:	441d      	add	r5, r3
 801d8e6:	9b01      	ldr	r3, [sp, #4]
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	f340 80f7 	ble.w	801dadc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801d8ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d8f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d8f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d8f8:	eeb0 6a62 	vmov.f32	s12, s5
 801d8fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d900:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d904:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d908:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d90c:	eeb0 6a43 	vmov.f32	s12, s6
 801d910:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d914:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d918:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d91c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d920:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d924:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d928:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d92c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d930:	ee12 2a90 	vmov	r2, s5
 801d934:	eef0 2a47 	vmov.f32	s5, s14
 801d938:	fb92 f3f3 	sdiv	r3, r2, r3
 801d93c:	ee13 2a10 	vmov	r2, s6
 801d940:	9313      	str	r3, [sp, #76]	; 0x4c
 801d942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d944:	eeb0 3a67 	vmov.f32	s6, s15
 801d948:	fb92 f3f3 	sdiv	r3, r2, r3
 801d94c:	9314      	str	r3, [sp, #80]	; 0x50
 801d94e:	9b01      	ldr	r3, [sp, #4]
 801d950:	9a04      	ldr	r2, [sp, #16]
 801d952:	3b01      	subs	r3, #1
 801d954:	9301      	str	r3, [sp, #4]
 801d956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d958:	bf08      	it	eq
 801d95a:	4613      	moveq	r3, r2
 801d95c:	e793      	b.n	801d886 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801d95e:	4576      	cmp	r6, lr
 801d960:	dab6      	bge.n	801d8d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d962:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d964:	fb06 0202 	mla	r2, r6, r2, r0
 801d968:	1412      	asrs	r2, r2, #16
 801d96a:	d4b1      	bmi.n	801d8d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d96c:	4542      	cmp	r2, r8
 801d96e:	daaf      	bge.n	801d8d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801d970:	1cef      	adds	r7, r5, #3
 801d972:	4699      	mov	r9, r3
 801d974:	f1b9 0f00 	cmp.w	r9, #0
 801d978:	ddb0      	ble.n	801d8dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d97a:	9902      	ldr	r1, [sp, #8]
 801d97c:	1402      	asrs	r2, r0, #16
 801d97e:	1426      	asrs	r6, r4, #16
 801d980:	fb0e 1202 	mla	r2, lr, r2, r1
 801d984:	9903      	ldr	r1, [sp, #12]
 801d986:	5d92      	ldrb	r2, [r2, r6]
 801d988:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801d98c:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801d990:	d041      	beq.n	801da16 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801d992:	9a05      	ldr	r2, [sp, #20]
 801d994:	fa5f fb86 	uxtb.w	fp, r6
 801d998:	fb02 fc0c 	mul.w	ip, r2, ip
 801d99c:	f10c 0201 	add.w	r2, ip, #1
 801d9a0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801d9a4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801d9a8:	1212      	asrs	r2, r2, #8
 801d9aa:	fa1f fa82 	uxth.w	sl, r2
 801d9ae:	43d2      	mvns	r2, r2
 801d9b0:	fb1b fb0a 	smulbb	fp, fp, sl
 801d9b4:	b2d2      	uxtb	r2, r2
 801d9b6:	fb0c bc02 	mla	ip, ip, r2, fp
 801d9ba:	fa1f fc8c 	uxth.w	ip, ip
 801d9be:	f10c 0b01 	add.w	fp, ip, #1
 801d9c2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d9c6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d9ca:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d9ce:	fb1b fb0a 	smulbb	fp, fp, sl
 801d9d2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d9d6:	fb16 fa0a 	smulbb	sl, r6, sl
 801d9da:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d9de:	f807 cc03 	strb.w	ip, [r7, #-3]
 801d9e2:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801d9e6:	fb06 aa02 	mla	sl, r6, r2, sl
 801d9ea:	fb0c bc02 	mla	ip, ip, r2, fp
 801d9ee:	fa1f fa8a 	uxth.w	sl, sl
 801d9f2:	fa1f fc8c 	uxth.w	ip, ip
 801d9f6:	f10a 0601 	add.w	r6, sl, #1
 801d9fa:	f10c 0b01 	add.w	fp, ip, #1
 801d9fe:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801da02:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801da06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801da0a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801da0e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801da12:	f807 cc02 	strb.w	ip, [r7, #-2]
 801da16:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801da18:	3703      	adds	r7, #3
 801da1a:	f109 39ff 	add.w	r9, r9, #4294967295
 801da1e:	4414      	add	r4, r2
 801da20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801da22:	4410      	add	r0, r2
 801da24:	e7a6      	b.n	801d974 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801da26:	1426      	asrs	r6, r4, #16
 801da28:	d450      	bmi.n	801dacc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801da2a:	4576      	cmp	r6, lr
 801da2c:	da4e      	bge.n	801dacc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801da2e:	1402      	asrs	r2, r0, #16
 801da30:	d44c      	bmi.n	801dacc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801da32:	4542      	cmp	r2, r8
 801da34:	da4a      	bge.n	801dacc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801da36:	9902      	ldr	r1, [sp, #8]
 801da38:	fb0e 1202 	mla	r2, lr, r2, r1
 801da3c:	9903      	ldr	r1, [sp, #12]
 801da3e:	5d92      	ldrb	r2, [r2, r6]
 801da40:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801da44:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801da48:	d040      	beq.n	801dacc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801da4a:	9a05      	ldr	r2, [sp, #20]
 801da4c:	fa5f fb86 	uxtb.w	fp, r6
 801da50:	fb02 fc0c 	mul.w	ip, r2, ip
 801da54:	f10c 0201 	add.w	r2, ip, #1
 801da58:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801da5c:	f897 c000 	ldrb.w	ip, [r7]
 801da60:	1212      	asrs	r2, r2, #8
 801da62:	fa1f fa82 	uxth.w	sl, r2
 801da66:	43d2      	mvns	r2, r2
 801da68:	fb1b fb0a 	smulbb	fp, fp, sl
 801da6c:	b2d2      	uxtb	r2, r2
 801da6e:	fb0c bc02 	mla	ip, ip, r2, fp
 801da72:	fa1f fc8c 	uxth.w	ip, ip
 801da76:	f10c 0b01 	add.w	fp, ip, #1
 801da7a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801da7e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801da82:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801da86:	fb1b fb0a 	smulbb	fp, fp, sl
 801da8a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801da8e:	fb16 fa0a 	smulbb	sl, r6, sl
 801da92:	78be      	ldrb	r6, [r7, #2]
 801da94:	f887 c000 	strb.w	ip, [r7]
 801da98:	f897 c001 	ldrb.w	ip, [r7, #1]
 801da9c:	fb06 aa02 	mla	sl, r6, r2, sl
 801daa0:	fb0c bc02 	mla	ip, ip, r2, fp
 801daa4:	fa1f fa8a 	uxth.w	sl, sl
 801daa8:	fa1f fc8c 	uxth.w	ip, ip
 801daac:	f10a 0601 	add.w	r6, sl, #1
 801dab0:	f10c 0b01 	add.w	fp, ip, #1
 801dab4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801dab8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801dabc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dac0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dac4:	f887 a002 	strb.w	sl, [r7, #2]
 801dac8:	f887 c001 	strb.w	ip, [r7, #1]
 801dacc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dace:	3703      	adds	r7, #3
 801dad0:	f109 39ff 	add.w	r9, r9, #4294967295
 801dad4:	4414      	add	r4, r2
 801dad6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dad8:	4410      	add	r0, r2
 801dada:	e6fb      	b.n	801d8d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801dadc:	b007      	add	sp, #28
 801dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dae2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae6:	b085      	sub	sp, #20
 801dae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801daee:	9203      	str	r2, [sp, #12]
 801daf0:	6870      	ldr	r0, [r6, #4]
 801daf2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801daf4:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801daf8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801dafc:	9100      	str	r1, [sp, #0]
 801dafe:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801db02:	fb00 2404 	mla	r4, r0, r4, r2
 801db06:	6832      	ldr	r2, [r6, #0]
 801db08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db0c:	4414      	add	r4, r2
 801db0e:	682a      	ldr	r2, [r5, #0]
 801db10:	9201      	str	r2, [sp, #4]
 801db12:	686a      	ldr	r2, [r5, #4]
 801db14:	3204      	adds	r2, #4
 801db16:	9202      	str	r2, [sp, #8]
 801db18:	9a00      	ldr	r2, [sp, #0]
 801db1a:	2a00      	cmp	r2, #0
 801db1c:	dc03      	bgt.n	801db26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801db1e:	9a03      	ldr	r2, [sp, #12]
 801db20:	2a00      	cmp	r2, #0
 801db22:	f340 8131 	ble.w	801dd88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801db26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801db28:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801db2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db2e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db32:	2b00      	cmp	r3, #0
 801db34:	dd0e      	ble.n	801db54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801db36:	1405      	asrs	r5, r0, #16
 801db38:	d405      	bmi.n	801db46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801db3a:	4575      	cmp	r5, lr
 801db3c:	da03      	bge.n	801db46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801db3e:	1415      	asrs	r5, r2, #16
 801db40:	d401      	bmi.n	801db46 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801db42:	4545      	cmp	r5, r8
 801db44:	db07      	blt.n	801db56 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801db46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801db48:	3b01      	subs	r3, #1
 801db4a:	3403      	adds	r4, #3
 801db4c:	4428      	add	r0, r5
 801db4e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801db50:	442a      	add	r2, r5
 801db52:	e7ee      	b.n	801db32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801db54:	d06f      	beq.n	801dc36 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801db56:	1e5d      	subs	r5, r3, #1
 801db58:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801db5a:	fb06 0605 	mla	r6, r6, r5, r0
 801db5e:	1436      	asrs	r6, r6, #16
 801db60:	d460      	bmi.n	801dc24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801db62:	4576      	cmp	r6, lr
 801db64:	da5e      	bge.n	801dc24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801db66:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801db68:	fb06 2505 	mla	r5, r6, r5, r2
 801db6c:	142d      	asrs	r5, r5, #16
 801db6e:	d459      	bmi.n	801dc24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801db70:	4545      	cmp	r5, r8
 801db72:	da57      	bge.n	801dc24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801db74:	1ce5      	adds	r5, r4, #3
 801db76:	469a      	mov	sl, r3
 801db78:	f1ba 0f00 	cmp.w	sl, #0
 801db7c:	dd56      	ble.n	801dc2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801db7e:	9901      	ldr	r1, [sp, #4]
 801db80:	1416      	asrs	r6, r2, #16
 801db82:	1407      	asrs	r7, r0, #16
 801db84:	fb0e 1606 	mla	r6, lr, r6, r1
 801db88:	9902      	ldr	r1, [sp, #8]
 801db8a:	5df6      	ldrb	r6, [r6, r7]
 801db8c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801db90:	0e37      	lsrs	r7, r6, #24
 801db92:	2fff      	cmp	r7, #255	; 0xff
 801db94:	f000 80ef 	beq.w	801dd76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801db98:	fa5f fc87 	uxtb.w	ip, r7
 801db9c:	b3d7      	cbz	r7, 801dc14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801db9e:	fa1f f78c 	uxth.w	r7, ip
 801dba2:	ea6f 0c0c 	mvn.w	ip, ip
 801dba6:	fa5f fb86 	uxtb.w	fp, r6
 801dbaa:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801dbae:	fa5f fc8c 	uxtb.w	ip, ip
 801dbb2:	fb1b fb07 	smulbb	fp, fp, r7
 801dbb6:	fb09 b90c 	mla	r9, r9, ip, fp
 801dbba:	fa1f f989 	uxth.w	r9, r9
 801dbbe:	f109 0b01 	add.w	fp, r9, #1
 801dbc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbc6:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801dbca:	fb1b fb0c 	smulbb	fp, fp, ip
 801dbce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbd2:	f805 9c03 	strb.w	r9, [r5, #-3]
 801dbd6:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801dbda:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801dbde:	fb09 b907 	mla	r9, r9, r7, fp
 801dbe2:	fa1f f989 	uxth.w	r9, r9
 801dbe6:	f109 0b01 	add.w	fp, r9, #1
 801dbea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dbee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dbf2:	f805 9c02 	strb.w	r9, [r5, #-2]
 801dbf6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801dbfa:	fb19 fc0c 	smulbb	ip, r9, ip
 801dbfe:	fb06 c607 	mla	r6, r6, r7, ip
 801dc02:	b2b6      	uxth	r6, r6
 801dc04:	f106 0c01 	add.w	ip, r6, #1
 801dc08:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801dc0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dc10:	f805 cc01 	strb.w	ip, [r5, #-1]
 801dc14:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dc16:	3503      	adds	r5, #3
 801dc18:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dc1c:	4408      	add	r0, r1
 801dc1e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dc20:	440a      	add	r2, r1
 801dc22:	e7a9      	b.n	801db78 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801dc24:	2600      	movs	r6, #0
 801dc26:	1b9d      	subs	r5, r3, r6
 801dc28:	2d00      	cmp	r5, #0
 801dc2a:	dc40      	bgt.n	801dcae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801dc2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc34:	441c      	add	r4, r3
 801dc36:	9b00      	ldr	r3, [sp, #0]
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	f340 80a5 	ble.w	801dd88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801dc3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc48:	eeb0 6a62 	vmov.f32	s12, s5
 801dc4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc58:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dc5c:	eeb0 6a43 	vmov.f32	s12, s6
 801dc60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc64:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dc68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc80:	ee12 2a90 	vmov	r2, s5
 801dc84:	eef0 2a47 	vmov.f32	s5, s14
 801dc88:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc8c:	ee13 2a10 	vmov	r2, s6
 801dc90:	9311      	str	r3, [sp, #68]	; 0x44
 801dc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dc94:	eeb0 3a67 	vmov.f32	s6, s15
 801dc98:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc9c:	9312      	str	r3, [sp, #72]	; 0x48
 801dc9e:	9b00      	ldr	r3, [sp, #0]
 801dca0:	9a03      	ldr	r2, [sp, #12]
 801dca2:	3b01      	subs	r3, #1
 801dca4:	9300      	str	r3, [sp, #0]
 801dca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dca8:	bf08      	it	eq
 801dcaa:	4613      	moveq	r3, r2
 801dcac:	e734      	b.n	801db18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801dcae:	1407      	asrs	r7, r0, #16
 801dcb0:	d450      	bmi.n	801dd54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dcb2:	4577      	cmp	r7, lr
 801dcb4:	da4e      	bge.n	801dd54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dcb6:	1415      	asrs	r5, r2, #16
 801dcb8:	d44c      	bmi.n	801dd54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dcba:	4545      	cmp	r5, r8
 801dcbc:	da4a      	bge.n	801dd54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dcbe:	9901      	ldr	r1, [sp, #4]
 801dcc0:	fb0e 1505 	mla	r5, lr, r5, r1
 801dcc4:	9902      	ldr	r1, [sp, #8]
 801dcc6:	5ded      	ldrb	r5, [r5, r7]
 801dcc8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801dccc:	0e2f      	lsrs	r7, r5, #24
 801dcce:	2fff      	cmp	r7, #255	; 0xff
 801dcd0:	d046      	beq.n	801dd60 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801dcd2:	fa5f f987 	uxtb.w	r9, r7
 801dcd6:	b3ef      	cbz	r7, 801dd54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dcd8:	fa1f fc89 	uxth.w	ip, r9
 801dcdc:	ea6f 0909 	mvn.w	r9, r9
 801dce0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801dce4:	fa5f fb85 	uxtb.w	fp, r5
 801dce8:	f814 a007 	ldrb.w	sl, [r4, r7]
 801dcec:	fa5f f989 	uxtb.w	r9, r9
 801dcf0:	fb1b fb0c 	smulbb	fp, fp, ip
 801dcf4:	fb0a ba09 	mla	sl, sl, r9, fp
 801dcf8:	fa1f fa8a 	uxth.w	sl, sl
 801dcfc:	f10a 0b01 	add.w	fp, sl, #1
 801dd00:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801dd04:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dd08:	f804 a007 	strb.w	sl, [r4, r7]
 801dd0c:	4427      	add	r7, r4
 801dd0e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801dd12:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801dd16:	f897 b001 	ldrb.w	fp, [r7, #1]
 801dd1a:	fb1b fb09 	smulbb	fp, fp, r9
 801dd1e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801dd22:	fa1f fa8a 	uxth.w	sl, sl
 801dd26:	f10a 0b01 	add.w	fp, sl, #1
 801dd2a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801dd2e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801dd32:	f887 a001 	strb.w	sl, [r7, #1]
 801dd36:	f897 a002 	ldrb.w	sl, [r7, #2]
 801dd3a:	fb1a f909 	smulbb	r9, sl, r9
 801dd3e:	fb05 950c 	mla	r5, r5, ip, r9
 801dd42:	b2ad      	uxth	r5, r5
 801dd44:	f105 0901 	add.w	r9, r5, #1
 801dd48:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801dd4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dd50:	f887 9002 	strb.w	r9, [r7, #2]
 801dd54:	9911      	ldr	r1, [sp, #68]	; 0x44
 801dd56:	3601      	adds	r6, #1
 801dd58:	4408      	add	r0, r1
 801dd5a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dd5c:	440a      	add	r2, r1
 801dd5e:	e762      	b.n	801dc26 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801dd60:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801dd64:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801dd68:	55e5      	strb	r5, [r4, r7]
 801dd6a:	4427      	add	r7, r4
 801dd6c:	0c2d      	lsrs	r5, r5, #16
 801dd6e:	f887 c001 	strb.w	ip, [r7, #1]
 801dd72:	70bd      	strb	r5, [r7, #2]
 801dd74:	e7ee      	b.n	801dd54 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801dd76:	0a37      	lsrs	r7, r6, #8
 801dd78:	f805 6c03 	strb.w	r6, [r5, #-3]
 801dd7c:	0c36      	lsrs	r6, r6, #16
 801dd7e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801dd82:	f805 6c01 	strb.w	r6, [r5, #-1]
 801dd86:	e745      	b.n	801dc14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801dd88:	b005      	add	sp, #20
 801dd8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dd8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dd8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dd94:	9201      	str	r2, [sp, #4]
 801dd96:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801dd9a:	6870      	ldr	r0, [r6, #4]
 801dd9c:	9200      	str	r2, [sp, #0]
 801dd9e:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801dda2:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801dda6:	fa1f fc85 	uxth.w	ip, r5
 801ddaa:	43ed      	mvns	r5, r5
 801ddac:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ddb0:	b2ed      	uxtb	r5, r5
 801ddb2:	fb00 2404 	mla	r4, r0, r4, r2
 801ddb6:	6832      	ldr	r2, [r6, #0]
 801ddb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ddbc:	4414      	add	r4, r2
 801ddbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ddc0:	f8d2 8000 	ldr.w	r8, [r2]
 801ddc4:	2900      	cmp	r1, #0
 801ddc6:	dc03      	bgt.n	801ddd0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801ddc8:	9a01      	ldr	r2, [sp, #4]
 801ddca:	2a00      	cmp	r2, #0
 801ddcc:	f340 8104 	ble.w	801dfd8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801ddd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddd2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ddd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ddd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	dd0f      	ble.n	801de00 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801dde0:	1406      	asrs	r6, r0, #16
 801dde2:	d406      	bmi.n	801ddf2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dde4:	4576      	cmp	r6, lr
 801dde6:	da04      	bge.n	801ddf2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dde8:	1416      	asrs	r6, r2, #16
 801ddea:	d402      	bmi.n	801ddf2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801ddec:	9f00      	ldr	r7, [sp, #0]
 801ddee:	42be      	cmp	r6, r7
 801ddf0:	db07      	blt.n	801de02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801ddf2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ddf4:	3b01      	subs	r3, #1
 801ddf6:	3403      	adds	r4, #3
 801ddf8:	4430      	add	r0, r6
 801ddfa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ddfc:	4432      	add	r2, r6
 801ddfe:	e7ed      	b.n	801dddc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801de00:	d05f      	beq.n	801dec2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801de02:	1e5e      	subs	r6, r3, #1
 801de04:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801de06:	fb07 0706 	mla	r7, r7, r6, r0
 801de0a:	143f      	asrs	r7, r7, #16
 801de0c:	d450      	bmi.n	801deb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801de0e:	4577      	cmp	r7, lr
 801de10:	da4e      	bge.n	801deb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801de12:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801de14:	fb07 2606 	mla	r6, r7, r6, r2
 801de18:	1436      	asrs	r6, r6, #16
 801de1a:	d449      	bmi.n	801deb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801de1c:	9f00      	ldr	r7, [sp, #0]
 801de1e:	42be      	cmp	r6, r7
 801de20:	da46      	bge.n	801deb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801de22:	1ce6      	adds	r6, r4, #3
 801de24:	4699      	mov	r9, r3
 801de26:	f1b9 0f00 	cmp.w	r9, #0
 801de2a:	f106 0603 	add.w	r6, r6, #3
 801de2e:	dd43      	ble.n	801deb8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801de30:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801de34:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801de38:	1417      	asrs	r7, r2, #16
 801de3a:	f109 39ff 	add.w	r9, r9, #4294967295
 801de3e:	fb1b fb05 	smulbb	fp, fp, r5
 801de42:	fb0e a707 	mla	r7, lr, r7, sl
 801de46:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801de4a:	eb08 0a07 	add.w	sl, r8, r7
 801de4e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801de52:	fb07 b70c 	mla	r7, r7, ip, fp
 801de56:	b2bf      	uxth	r7, r7
 801de58:	f107 0b01 	add.w	fp, r7, #1
 801de5c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801de60:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801de64:	fb1b fb05 	smulbb	fp, fp, r5
 801de68:	123f      	asrs	r7, r7, #8
 801de6a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801de6e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801de72:	fb07 b70c 	mla	r7, r7, ip, fp
 801de76:	b2bf      	uxth	r7, r7
 801de78:	f107 0b01 	add.w	fp, r7, #1
 801de7c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801de80:	123f      	asrs	r7, r7, #8
 801de82:	f806 7c05 	strb.w	r7, [r6, #-5]
 801de86:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801de8a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801de8e:	fb1a fa05 	smulbb	sl, sl, r5
 801de92:	fb07 a70c 	mla	r7, r7, ip, sl
 801de96:	b2bf      	uxth	r7, r7
 801de98:	f107 0a01 	add.w	sl, r7, #1
 801de9c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801dea0:	123f      	asrs	r7, r7, #8
 801dea2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801dea6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dea8:	4438      	add	r0, r7
 801deaa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801deac:	443a      	add	r2, r7
 801deae:	e7ba      	b.n	801de26 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801deb0:	2700      	movs	r7, #0
 801deb2:	1bde      	subs	r6, r3, r7
 801deb4:	2e00      	cmp	r6, #0
 801deb6:	dc3f      	bgt.n	801df38 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801deb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801debc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dec0:	441c      	add	r4, r3
 801dec2:	2900      	cmp	r1, #0
 801dec4:	f340 8088 	ble.w	801dfd8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801dec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801decc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dece:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ded2:	3901      	subs	r1, #1
 801ded4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ded8:	eef0 6a62 	vmov.f32	s13, s5
 801dedc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dee0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dee4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dee8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801deec:	eef0 6a43 	vmov.f32	s13, s6
 801def0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801def4:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801def8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801defc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df10:	ee12 2a90 	vmov	r2, s5
 801df14:	eef0 2a47 	vmov.f32	s5, s14
 801df18:	fb92 f3f3 	sdiv	r3, r2, r3
 801df1c:	ee13 2a10 	vmov	r2, s6
 801df20:	930f      	str	r3, [sp, #60]	; 0x3c
 801df22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df24:	eeb0 3a67 	vmov.f32	s6, s15
 801df28:	fb92 f3f3 	sdiv	r3, r2, r3
 801df2c:	9a01      	ldr	r2, [sp, #4]
 801df2e:	9310      	str	r3, [sp, #64]	; 0x40
 801df30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801df32:	bf08      	it	eq
 801df34:	4613      	moveq	r3, r2
 801df36:	e745      	b.n	801ddc4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801df38:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801df3c:	d446      	bmi.n	801dfcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801df3e:	45f2      	cmp	sl, lr
 801df40:	da44      	bge.n	801dfcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801df42:	ea5f 4922 	movs.w	r9, r2, asr #16
 801df46:	d441      	bmi.n	801dfcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801df48:	9e00      	ldr	r6, [sp, #0]
 801df4a:	45b1      	cmp	r9, r6
 801df4c:	da3e      	bge.n	801dfcc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801df4e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801df52:	fb0e a909 	mla	r9, lr, r9, sl
 801df56:	f814 b006 	ldrb.w	fp, [r4, r6]
 801df5a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801df5e:	fb1b fb05 	smulbb	fp, fp, r5
 801df62:	eb08 0a09 	add.w	sl, r8, r9
 801df66:	f818 9009 	ldrb.w	r9, [r8, r9]
 801df6a:	fb09 b90c 	mla	r9, r9, ip, fp
 801df6e:	fa1f f989 	uxth.w	r9, r9
 801df72:	f109 0b01 	add.w	fp, r9, #1
 801df76:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801df7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df7e:	f804 9006 	strb.w	r9, [r4, r6]
 801df82:	4426      	add	r6, r4
 801df84:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801df88:	f896 b001 	ldrb.w	fp, [r6, #1]
 801df8c:	fb1b fb05 	smulbb	fp, fp, r5
 801df90:	fb09 b90c 	mla	r9, r9, ip, fp
 801df94:	fa1f f989 	uxth.w	r9, r9
 801df98:	f109 0b01 	add.w	fp, r9, #1
 801df9c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dfa0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dfa4:	f886 9001 	strb.w	r9, [r6, #1]
 801dfa8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801dfac:	f896 a002 	ldrb.w	sl, [r6, #2]
 801dfb0:	fb1a fa05 	smulbb	sl, sl, r5
 801dfb4:	fb09 a90c 	mla	r9, r9, ip, sl
 801dfb8:	fa1f f989 	uxth.w	r9, r9
 801dfbc:	f109 0a01 	add.w	sl, r9, #1
 801dfc0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801dfc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dfc8:	f886 9002 	strb.w	r9, [r6, #2]
 801dfcc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dfce:	3701      	adds	r7, #1
 801dfd0:	4430      	add	r0, r6
 801dfd2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dfd4:	4432      	add	r2, r6
 801dfd6:	e76c      	b.n	801deb2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801dfd8:	b003      	add	sp, #12
 801dfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dfde <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801dfde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfe2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dfe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dfe8:	9201      	str	r2, [sp, #4]
 801dfea:	6868      	ldr	r0, [r5, #4]
 801dfec:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801dff0:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801dff4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801dff8:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801dffc:	fb00 2404 	mla	r4, r0, r4, r2
 801e000:	682a      	ldr	r2, [r5, #0]
 801e002:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e006:	4414      	add	r4, r2
 801e008:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e00a:	f8d2 9000 	ldr.w	r9, [r2]
 801e00e:	2900      	cmp	r1, #0
 801e010:	dc03      	bgt.n	801e01a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e012:	9a01      	ldr	r2, [sp, #4]
 801e014:	2a00      	cmp	r2, #0
 801e016:	f340 80a8 	ble.w	801e16a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e01a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e01c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e022:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e026:	2b00      	cmp	r3, #0
 801e028:	dd0c      	ble.n	801e044 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e02a:	1405      	asrs	r5, r0, #16
 801e02c:	d405      	bmi.n	801e03a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e02e:	4565      	cmp	r5, ip
 801e030:	da03      	bge.n	801e03a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e032:	1415      	asrs	r5, r2, #16
 801e034:	d401      	bmi.n	801e03a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e036:	4575      	cmp	r5, lr
 801e038:	db05      	blt.n	801e046 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801e03a:	4438      	add	r0, r7
 801e03c:	4432      	add	r2, r6
 801e03e:	3b01      	subs	r3, #1
 801e040:	3403      	adds	r4, #3
 801e042:	e7f0      	b.n	801e026 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e044:	d03a      	beq.n	801e0bc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e046:	1e5d      	subs	r5, r3, #1
 801e048:	fb07 0805 	mla	r8, r7, r5, r0
 801e04c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801e050:	d429      	bmi.n	801e0a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e052:	45e0      	cmp	r8, ip
 801e054:	da27      	bge.n	801e0a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e056:	fb06 2505 	mla	r5, r6, r5, r2
 801e05a:	142d      	asrs	r5, r5, #16
 801e05c:	d423      	bmi.n	801e0a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e05e:	4575      	cmp	r5, lr
 801e060:	da21      	bge.n	801e0a6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801e062:	f104 0803 	add.w	r8, r4, #3
 801e066:	469a      	mov	sl, r3
 801e068:	f1ba 0f00 	cmp.w	sl, #0
 801e06c:	f108 0803 	add.w	r8, r8, #3
 801e070:	dd1f      	ble.n	801e0b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801e072:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801e076:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e07a:	1415      	asrs	r5, r2, #16
 801e07c:	4438      	add	r0, r7
 801e07e:	4432      	add	r2, r6
 801e080:	fb0c b505 	mla	r5, ip, r5, fp
 801e084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e088:	eb09 0b05 	add.w	fp, r9, r5
 801e08c:	f819 5005 	ldrb.w	r5, [r9, r5]
 801e090:	f808 5c06 	strb.w	r5, [r8, #-6]
 801e094:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801e098:	f808 5c05 	strb.w	r5, [r8, #-5]
 801e09c:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801e0a0:	f808 5c04 	strb.w	r5, [r8, #-4]
 801e0a4:	e7e0      	b.n	801e068 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e0a6:	2500      	movs	r5, #0
 801e0a8:	eba3 0805 	sub.w	r8, r3, r5
 801e0ac:	f1b8 0f00 	cmp.w	r8, #0
 801e0b0:	dc38      	bgt.n	801e124 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801e0b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0ba:	441c      	add	r4, r3
 801e0bc:	2900      	cmp	r1, #0
 801e0be:	dd54      	ble.n	801e16a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801e0c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0ca:	3901      	subs	r1, #1
 801e0cc:	eeb0 6a62 	vmov.f32	s12, s5
 801e0d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e0d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0dc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e0e0:	eeb0 6a43 	vmov.f32	s12, s6
 801e0e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0e8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e0ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e0f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e0f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e0f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e100:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e104:	ee12 2a90 	vmov	r2, s5
 801e108:	eef0 2a47 	vmov.f32	s5, s14
 801e10c:	fb92 f7f3 	sdiv	r7, r2, r3
 801e110:	ee13 2a10 	vmov	r2, s6
 801e114:	eeb0 3a67 	vmov.f32	s6, s15
 801e118:	fb92 f6f3 	sdiv	r6, r2, r3
 801e11c:	9a01      	ldr	r2, [sp, #4]
 801e11e:	bf08      	it	eq
 801e120:	4613      	moveq	r3, r2
 801e122:	e774      	b.n	801e00e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e124:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801e128:	d41b      	bmi.n	801e162 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e12a:	45e2      	cmp	sl, ip
 801e12c:	da19      	bge.n	801e162 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e12e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e132:	d416      	bmi.n	801e162 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e134:	45f0      	cmp	r8, lr
 801e136:	da14      	bge.n	801e162 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801e138:	fb0c a808 	mla	r8, ip, r8, sl
 801e13c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e140:	f819 b008 	ldrb.w	fp, [r9, r8]
 801e144:	eb09 0a08 	add.w	sl, r9, r8
 801e148:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801e14c:	f804 b008 	strb.w	fp, [r4, r8]
 801e150:	44a0      	add	r8, r4
 801e152:	f89a b001 	ldrb.w	fp, [sl, #1]
 801e156:	f888 b001 	strb.w	fp, [r8, #1]
 801e15a:	f89a a002 	ldrb.w	sl, [sl, #2]
 801e15e:	f888 a002 	strb.w	sl, [r8, #2]
 801e162:	4438      	add	r0, r7
 801e164:	4432      	add	r2, r6
 801e166:	3501      	adds	r5, #1
 801e168:	e79e      	b.n	801e0a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801e16a:	b003      	add	sp, #12
 801e16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e170 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e174:	b085      	sub	sp, #20
 801e176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e17a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e17c:	9202      	str	r2, [sp, #8]
 801e17e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e182:	6860      	ldr	r0, [r4, #4]
 801e184:	9203      	str	r2, [sp, #12]
 801e186:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e18a:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801e18e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e192:	fb00 2505 	mla	r5, r0, r5, r2
 801e196:	6822      	ldr	r2, [r4, #0]
 801e198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e19c:	4415      	add	r5, r2
 801e19e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e1a0:	6812      	ldr	r2, [r2, #0]
 801e1a2:	9201      	str	r2, [sp, #4]
 801e1a4:	2900      	cmp	r1, #0
 801e1a6:	dc03      	bgt.n	801e1b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e1a8:	9a02      	ldr	r2, [sp, #8]
 801e1aa:	2a00      	cmp	r2, #0
 801e1ac:	f340 811c 	ble.w	801e3e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e1b2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e1b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e1b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	dd0e      	ble.n	801e1de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e1c0:	1422      	asrs	r2, r4, #16
 801e1c2:	d405      	bmi.n	801e1d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e1c4:	4572      	cmp	r2, lr
 801e1c6:	da03      	bge.n	801e1d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e1c8:	1402      	asrs	r2, r0, #16
 801e1ca:	d401      	bmi.n	801e1d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801e1cc:	4542      	cmp	r2, r8
 801e1ce:	db07      	blt.n	801e1e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801e1d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1d2:	3b01      	subs	r3, #1
 801e1d4:	3503      	adds	r5, #3
 801e1d6:	4414      	add	r4, r2
 801e1d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1da:	4410      	add	r0, r2
 801e1dc:	e7ee      	b.n	801e1bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801e1de:	d072      	beq.n	801e2c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801e1e0:	1e5a      	subs	r2, r3, #1
 801e1e2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e1e4:	fb06 4602 	mla	r6, r6, r2, r4
 801e1e8:	1436      	asrs	r6, r6, #16
 801e1ea:	d461      	bmi.n	801e2b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e1ec:	4576      	cmp	r6, lr
 801e1ee:	da5f      	bge.n	801e2b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e1f0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e1f2:	fb06 0202 	mla	r2, r6, r2, r0
 801e1f6:	1412      	asrs	r2, r2, #16
 801e1f8:	d45a      	bmi.n	801e2b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e1fa:	4542      	cmp	r2, r8
 801e1fc:	da58      	bge.n	801e2b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801e1fe:	1cef      	adds	r7, r5, #3
 801e200:	4699      	mov	r9, r3
 801e202:	f1b9 0f00 	cmp.w	r9, #0
 801e206:	dd59      	ble.n	801e2bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801e208:	1426      	asrs	r6, r4, #16
 801e20a:	1402      	asrs	r2, r0, #16
 801e20c:	fb0e 6202 	mla	r2, lr, r2, r6
 801e210:	9e01      	ldr	r6, [sp, #4]
 801e212:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801e216:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801e21a:	d041      	beq.n	801e2a0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801e21c:	9a03      	ldr	r2, [sp, #12]
 801e21e:	fa5f fb86 	uxtb.w	fp, r6
 801e222:	fb02 fc0c 	mul.w	ip, r2, ip
 801e226:	f10c 0201 	add.w	r2, ip, #1
 801e22a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801e22e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801e232:	1212      	asrs	r2, r2, #8
 801e234:	fa1f fa82 	uxth.w	sl, r2
 801e238:	43d2      	mvns	r2, r2
 801e23a:	fb1b fb0a 	smulbb	fp, fp, sl
 801e23e:	b2d2      	uxtb	r2, r2
 801e240:	fb0c bc02 	mla	ip, ip, r2, fp
 801e244:	fa1f fc8c 	uxth.w	ip, ip
 801e248:	f10c 0b01 	add.w	fp, ip, #1
 801e24c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e250:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801e254:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801e258:	fb1b fb0a 	smulbb	fp, fp, sl
 801e25c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e260:	fb16 fa0a 	smulbb	sl, r6, sl
 801e264:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801e268:	f807 cc03 	strb.w	ip, [r7, #-3]
 801e26c:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801e270:	fb06 aa02 	mla	sl, r6, r2, sl
 801e274:	fb0c bc02 	mla	ip, ip, r2, fp
 801e278:	fa1f fa8a 	uxth.w	sl, sl
 801e27c:	fa1f fc8c 	uxth.w	ip, ip
 801e280:	f10a 0601 	add.w	r6, sl, #1
 801e284:	f10c 0b01 	add.w	fp, ip, #1
 801e288:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801e28c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e290:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e294:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e298:	f807 ac01 	strb.w	sl, [r7, #-1]
 801e29c:	f807 cc02 	strb.w	ip, [r7, #-2]
 801e2a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e2a2:	3703      	adds	r7, #3
 801e2a4:	f109 39ff 	add.w	r9, r9, #4294967295
 801e2a8:	4414      	add	r4, r2
 801e2aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2ac:	4410      	add	r0, r2
 801e2ae:	e7a8      	b.n	801e202 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e2b0:	f04f 0c00 	mov.w	ip, #0
 801e2b4:	eba3 020c 	sub.w	r2, r3, ip
 801e2b8:	2a00      	cmp	r2, #0
 801e2ba:	dc3d      	bgt.n	801e338 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801e2bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e2c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e2c4:	441d      	add	r5, r3
 801e2c6:	2900      	cmp	r1, #0
 801e2c8:	f340 808e 	ble.w	801e3e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e2cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2d6:	3901      	subs	r1, #1
 801e2d8:	eeb0 6a62 	vmov.f32	s12, s5
 801e2dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e2e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2e8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e2ec:	eeb0 6a43 	vmov.f32	s12, s6
 801e2f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2f4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e2f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e300:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e304:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e308:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e30c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e310:	ee12 2a90 	vmov	r2, s5
 801e314:	eef0 2a47 	vmov.f32	s5, s14
 801e318:	fb92 f3f3 	sdiv	r3, r2, r3
 801e31c:	ee13 2a10 	vmov	r2, s6
 801e320:	9311      	str	r3, [sp, #68]	; 0x44
 801e322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e324:	eeb0 3a67 	vmov.f32	s6, s15
 801e328:	fb92 f3f3 	sdiv	r3, r2, r3
 801e32c:	9a02      	ldr	r2, [sp, #8]
 801e32e:	9312      	str	r3, [sp, #72]	; 0x48
 801e330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e332:	bf08      	it	eq
 801e334:	4613      	moveq	r3, r2
 801e336:	e735      	b.n	801e1a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801e338:	1426      	asrs	r6, r4, #16
 801e33a:	d44e      	bmi.n	801e3da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e33c:	4576      	cmp	r6, lr
 801e33e:	da4c      	bge.n	801e3da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e340:	1402      	asrs	r2, r0, #16
 801e342:	d44a      	bmi.n	801e3da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e344:	4542      	cmp	r2, r8
 801e346:	da48      	bge.n	801e3da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e348:	fb0e 6202 	mla	r2, lr, r2, r6
 801e34c:	9e01      	ldr	r6, [sp, #4]
 801e34e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e352:	0e3a      	lsrs	r2, r7, #24
 801e354:	d041      	beq.n	801e3da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801e356:	9e03      	ldr	r6, [sp, #12]
 801e358:	fa5f fb87 	uxtb.w	fp, r7
 801e35c:	4372      	muls	r2, r6
 801e35e:	1c56      	adds	r6, r2, #1
 801e360:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e364:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801e368:	1212      	asrs	r2, r2, #8
 801e36a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801e36e:	fa1f fa82 	uxth.w	sl, r2
 801e372:	43d2      	mvns	r2, r2
 801e374:	fb1b fb0a 	smulbb	fp, fp, sl
 801e378:	b2d2      	uxtb	r2, r2
 801e37a:	fb09 b902 	mla	r9, r9, r2, fp
 801e37e:	fa1f f989 	uxth.w	r9, r9
 801e382:	f109 0b01 	add.w	fp, r9, #1
 801e386:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e38a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e38e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e392:	fb1b fb0a 	smulbb	fp, fp, sl
 801e396:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e39a:	fb17 fa0a 	smulbb	sl, r7, sl
 801e39e:	f805 9006 	strb.w	r9, [r5, r6]
 801e3a2:	442e      	add	r6, r5
 801e3a4:	78b7      	ldrb	r7, [r6, #2]
 801e3a6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e3aa:	fb07 aa02 	mla	sl, r7, r2, sl
 801e3ae:	fb09 b902 	mla	r9, r9, r2, fp
 801e3b2:	fa1f fa8a 	uxth.w	sl, sl
 801e3b6:	fa1f f989 	uxth.w	r9, r9
 801e3ba:	f10a 0701 	add.w	r7, sl, #1
 801e3be:	f109 0b01 	add.w	fp, r9, #1
 801e3c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e3c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801e3ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e3ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e3d2:	f886 a002 	strb.w	sl, [r6, #2]
 801e3d6:	f886 9001 	strb.w	r9, [r6, #1]
 801e3da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e3dc:	f10c 0c01 	add.w	ip, ip, #1
 801e3e0:	4414      	add	r4, r2
 801e3e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e3e4:	4410      	add	r0, r2
 801e3e6:	e765      	b.n	801e2b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801e3e8:	b005      	add	sp, #20
 801e3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e3ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3f2:	b085      	sub	sp, #20
 801e3f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e3fa:	9203      	str	r2, [sp, #12]
 801e3fc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e400:	6860      	ldr	r0, [r4, #4]
 801e402:	9201      	str	r2, [sp, #4]
 801e404:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e408:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801e40c:	fb00 2505 	mla	r5, r0, r5, r2
 801e410:	6822      	ldr	r2, [r4, #0]
 801e412:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e416:	4415      	add	r5, r2
 801e418:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e41a:	6812      	ldr	r2, [r2, #0]
 801e41c:	9202      	str	r2, [sp, #8]
 801e41e:	2900      	cmp	r1, #0
 801e420:	dc03      	bgt.n	801e42a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801e422:	9a03      	ldr	r2, [sp, #12]
 801e424:	2a00      	cmp	r2, #0
 801e426:	f340 8122 	ble.w	801e66e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e42a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e42c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e430:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e432:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e436:	2b00      	cmp	r3, #0
 801e438:	dd0f      	ble.n	801e45a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e43a:	1422      	asrs	r2, r4, #16
 801e43c:	d406      	bmi.n	801e44c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e43e:	4572      	cmp	r2, lr
 801e440:	da04      	bge.n	801e44c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e442:	1402      	asrs	r2, r0, #16
 801e444:	d402      	bmi.n	801e44c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801e446:	9e01      	ldr	r6, [sp, #4]
 801e448:	42b2      	cmp	r2, r6
 801e44a:	db07      	blt.n	801e45c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e44c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e44e:	3b01      	subs	r3, #1
 801e450:	3503      	adds	r5, #3
 801e452:	4414      	add	r4, r2
 801e454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e456:	4410      	add	r0, r2
 801e458:	e7ed      	b.n	801e436 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801e45a:	d06e      	beq.n	801e53a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801e45c:	1e5a      	subs	r2, r3, #1
 801e45e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801e460:	fb06 4602 	mla	r6, r6, r2, r4
 801e464:	1436      	asrs	r6, r6, #16
 801e466:	d45d      	bmi.n	801e524 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e468:	4576      	cmp	r6, lr
 801e46a:	da5b      	bge.n	801e524 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e46c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e46e:	fb06 0202 	mla	r2, r6, r2, r0
 801e472:	1412      	asrs	r2, r2, #16
 801e474:	d456      	bmi.n	801e524 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e476:	9e01      	ldr	r6, [sp, #4]
 801e478:	42b2      	cmp	r2, r6
 801e47a:	da53      	bge.n	801e524 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801e47c:	1cee      	adds	r6, r5, #3
 801e47e:	469a      	mov	sl, r3
 801e480:	f1ba 0f00 	cmp.w	sl, #0
 801e484:	dd54      	ble.n	801e530 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e486:	1427      	asrs	r7, r4, #16
 801e488:	1402      	asrs	r2, r0, #16
 801e48a:	fb0e 7202 	mla	r2, lr, r2, r7
 801e48e:	9f02      	ldr	r7, [sp, #8]
 801e490:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801e494:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801e498:	d03c      	beq.n	801e514 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e49a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e49e:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e4a2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e4a6:	fa5f f28c 	uxtb.w	r2, ip
 801e4aa:	b2ff      	uxtb	r7, r7
 801e4ac:	f000 80d8 	beq.w	801e660 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801e4b0:	fa1f f882 	uxth.w	r8, r2
 801e4b4:	43d2      	mvns	r2, r2
 801e4b6:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e4ba:	fb17 f708 	smulbb	r7, r7, r8
 801e4be:	b2d2      	uxtb	r2, r2
 801e4c0:	fb19 f908 	smulbb	r9, r9, r8
 801e4c4:	fb0c 7702 	mla	r7, ip, r2, r7
 801e4c8:	fb1b f808 	smulbb	r8, fp, r8
 801e4cc:	b2bf      	uxth	r7, r7
 801e4ce:	f107 0c01 	add.w	ip, r7, #1
 801e4d2:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e4d6:	123f      	asrs	r7, r7, #8
 801e4d8:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e4dc:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801e4e0:	fb07 9902 	mla	r9, r7, r2, r9
 801e4e4:	fa1f f989 	uxth.w	r9, r9
 801e4e8:	f109 0701 	add.w	r7, r9, #1
 801e4ec:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801e4f0:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e4f4:	fb07 8802 	mla	r8, r7, r2, r8
 801e4f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e4fc:	fa1f f888 	uxth.w	r8, r8
 801e500:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e504:	f108 0201 	add.w	r2, r8, #1
 801e508:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e50c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e510:	f806 8c01 	strb.w	r8, [r6, #-1]
 801e514:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e516:	3603      	adds	r6, #3
 801e518:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e51c:	4414      	add	r4, r2
 801e51e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e520:	4410      	add	r0, r2
 801e522:	e7ad      	b.n	801e480 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801e524:	f04f 0c00 	mov.w	ip, #0
 801e528:	eba3 020c 	sub.w	r2, r3, ip
 801e52c:	2a00      	cmp	r2, #0
 801e52e:	dc3d      	bgt.n	801e5ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801e530:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e538:	441d      	add	r5, r3
 801e53a:	2900      	cmp	r1, #0
 801e53c:	f340 8097 	ble.w	801e66e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e540:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e546:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e54a:	3901      	subs	r1, #1
 801e54c:	eeb0 6a62 	vmov.f32	s12, s5
 801e550:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e554:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e558:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e55c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e560:	eeb0 6a43 	vmov.f32	s12, s6
 801e564:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e568:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e56c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e570:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e574:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e578:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e57c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e580:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e584:	ee12 2a90 	vmov	r2, s5
 801e588:	eef0 2a47 	vmov.f32	s5, s14
 801e58c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e590:	ee13 2a10 	vmov	r2, s6
 801e594:	9311      	str	r3, [sp, #68]	; 0x44
 801e596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e598:	eeb0 3a67 	vmov.f32	s6, s15
 801e59c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5a0:	9a03      	ldr	r2, [sp, #12]
 801e5a2:	9312      	str	r3, [sp, #72]	; 0x48
 801e5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5a6:	bf08      	it	eq
 801e5a8:	4613      	moveq	r3, r2
 801e5aa:	e738      	b.n	801e41e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801e5ac:	1426      	asrs	r6, r4, #16
 801e5ae:	d448      	bmi.n	801e642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e5b0:	4576      	cmp	r6, lr
 801e5b2:	da46      	bge.n	801e642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e5b4:	1402      	asrs	r2, r0, #16
 801e5b6:	d444      	bmi.n	801e642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e5b8:	9f01      	ldr	r7, [sp, #4]
 801e5ba:	42ba      	cmp	r2, r7
 801e5bc:	da41      	bge.n	801e642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e5be:	fb0e 6202 	mla	r2, lr, r2, r6
 801e5c2:	9e02      	ldr	r6, [sp, #8]
 801e5c4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801e5c8:	0e3a      	lsrs	r2, r7, #24
 801e5ca:	d03a      	beq.n	801e642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e5cc:	2aff      	cmp	r2, #255	; 0xff
 801e5ce:	b2d6      	uxtb	r6, r2
 801e5d0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801e5d4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801e5d8:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801e5dc:	b2ff      	uxtb	r7, r7
 801e5de:	d037      	beq.n	801e650 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801e5e0:	fa1f f986 	uxth.w	r9, r6
 801e5e4:	4462      	add	r2, ip
 801e5e6:	43f6      	mvns	r6, r6
 801e5e8:	f815 8002 	ldrb.w	r8, [r5, r2]
 801e5ec:	fb17 f709 	smulbb	r7, r7, r9
 801e5f0:	fb1a fa09 	smulbb	sl, sl, r9
 801e5f4:	b2f6      	uxtb	r6, r6
 801e5f6:	fb1b f909 	smulbb	r9, fp, r9
 801e5fa:	fb08 7706 	mla	r7, r8, r6, r7
 801e5fe:	b2bf      	uxth	r7, r7
 801e600:	f107 0801 	add.w	r8, r7, #1
 801e604:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801e608:	123f      	asrs	r7, r7, #8
 801e60a:	54af      	strb	r7, [r5, r2]
 801e60c:	442a      	add	r2, r5
 801e60e:	7857      	ldrb	r7, [r2, #1]
 801e610:	fb07 aa06 	mla	sl, r7, r6, sl
 801e614:	fa1f fa8a 	uxth.w	sl, sl
 801e618:	f10a 0701 	add.w	r7, sl, #1
 801e61c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e620:	7897      	ldrb	r7, [r2, #2]
 801e622:	fb07 9906 	mla	r9, r7, r6, r9
 801e626:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e62a:	fa1f f989 	uxth.w	r9, r9
 801e62e:	f882 a001 	strb.w	sl, [r2, #1]
 801e632:	f109 0601 	add.w	r6, r9, #1
 801e636:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e63a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e63e:	f882 9002 	strb.w	r9, [r2, #2]
 801e642:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e644:	f10c 0c01 	add.w	ip, ip, #1
 801e648:	4414      	add	r4, r2
 801e64a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e64c:	4410      	add	r0, r2
 801e64e:	e76b      	b.n	801e528 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801e650:	4462      	add	r2, ip
 801e652:	54af      	strb	r7, [r5, r2]
 801e654:	442a      	add	r2, r5
 801e656:	f882 a001 	strb.w	sl, [r2, #1]
 801e65a:	f882 b002 	strb.w	fp, [r2, #2]
 801e65e:	e7f0      	b.n	801e642 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801e660:	f806 7c03 	strb.w	r7, [r6, #-3]
 801e664:	f806 9c02 	strb.w	r9, [r6, #-2]
 801e668:	f806 bc01 	strb.w	fp, [r6, #-1]
 801e66c:	e752      	b.n	801e514 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801e66e:	b005      	add	sp, #20
 801e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e674 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e678:	b087      	sub	sp, #28
 801e67a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e67e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e680:	9204      	str	r2, [sp, #16]
 801e682:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801e686:	6860      	ldr	r0, [r4, #4]
 801e688:	9205      	str	r2, [sp, #20]
 801e68a:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801e68e:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801e692:	9101      	str	r1, [sp, #4]
 801e694:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e698:	fb00 2505 	mla	r5, r0, r5, r2
 801e69c:	6822      	ldr	r2, [r4, #0]
 801e69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6a2:	4415      	add	r5, r2
 801e6a4:	f10e 0201 	add.w	r2, lr, #1
 801e6a8:	f022 0201 	bic.w	r2, r2, #1
 801e6ac:	9202      	str	r2, [sp, #8]
 801e6ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e6b0:	6812      	ldr	r2, [r2, #0]
 801e6b2:	9203      	str	r2, [sp, #12]
 801e6b4:	9a01      	ldr	r2, [sp, #4]
 801e6b6:	2a00      	cmp	r2, #0
 801e6b8:	dc03      	bgt.n	801e6c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801e6ba:	9a04      	ldr	r2, [sp, #16]
 801e6bc:	2a00      	cmp	r2, #0
 801e6be:	f340 8132 	ble.w	801e926 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e6c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e6c4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e6c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e6ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	dd0e      	ble.n	801e6f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e6d2:	1422      	asrs	r2, r4, #16
 801e6d4:	d405      	bmi.n	801e6e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e6d6:	4596      	cmp	lr, r2
 801e6d8:	dd03      	ble.n	801e6e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e6da:	1402      	asrs	r2, r0, #16
 801e6dc:	d401      	bmi.n	801e6e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e6de:	4542      	cmp	r2, r8
 801e6e0:	db07      	blt.n	801e6f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801e6e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e6e4:	3b01      	subs	r3, #1
 801e6e6:	3503      	adds	r5, #3
 801e6e8:	4414      	add	r4, r2
 801e6ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e6ec:	4410      	add	r0, r2
 801e6ee:	e7ee      	b.n	801e6ce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801e6f0:	d010      	beq.n	801e714 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801e6f2:	1e5a      	subs	r2, r3, #1
 801e6f4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e6f6:	fb06 4602 	mla	r6, r6, r2, r4
 801e6fa:	1436      	asrs	r6, r6, #16
 801e6fc:	d546      	bpl.n	801e78c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801e6fe:	4699      	mov	r9, r3
 801e700:	462e      	mov	r6, r5
 801e702:	f1b9 0f00 	cmp.w	r9, #0
 801e706:	f300 80ac 	bgt.w	801e862 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801e70a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e70e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e712:	441d      	add	r5, r3
 801e714:	9b01      	ldr	r3, [sp, #4]
 801e716:	2b00      	cmp	r3, #0
 801e718:	f340 8105 	ble.w	801e926 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801e71c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e720:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e722:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e726:	eeb0 6a62 	vmov.f32	s12, s5
 801e72a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e72e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e732:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e736:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e73a:	eeb0 6a43 	vmov.f32	s12, s6
 801e73e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e742:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e746:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e74a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e74e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e752:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e756:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e75a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e75e:	ee12 2a90 	vmov	r2, s5
 801e762:	eef0 2a47 	vmov.f32	s5, s14
 801e766:	fb92 f3f3 	sdiv	r3, r2, r3
 801e76a:	ee13 2a10 	vmov	r2, s6
 801e76e:	9313      	str	r3, [sp, #76]	; 0x4c
 801e770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e772:	eeb0 3a67 	vmov.f32	s6, s15
 801e776:	fb92 f3f3 	sdiv	r3, r2, r3
 801e77a:	9314      	str	r3, [sp, #80]	; 0x50
 801e77c:	9b01      	ldr	r3, [sp, #4]
 801e77e:	9a04      	ldr	r2, [sp, #16]
 801e780:	3b01      	subs	r3, #1
 801e782:	9301      	str	r3, [sp, #4]
 801e784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e786:	bf08      	it	eq
 801e788:	4613      	moveq	r3, r2
 801e78a:	e793      	b.n	801e6b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801e78c:	45b6      	cmp	lr, r6
 801e78e:	ddb6      	ble.n	801e6fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e790:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e792:	fb06 0202 	mla	r2, r6, r2, r0
 801e796:	1412      	asrs	r2, r2, #16
 801e798:	d4b1      	bmi.n	801e6fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e79a:	4542      	cmp	r2, r8
 801e79c:	daaf      	bge.n	801e6fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801e79e:	1cee      	adds	r6, r5, #3
 801e7a0:	4699      	mov	r9, r3
 801e7a2:	f1b9 0f00 	cmp.w	r9, #0
 801e7a6:	ddb0      	ble.n	801e70a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801e7a8:	1422      	asrs	r2, r4, #16
 801e7aa:	9902      	ldr	r1, [sp, #8]
 801e7ac:	1407      	asrs	r7, r0, #16
 801e7ae:	fb01 2707 	mla	r7, r1, r7, r2
 801e7b2:	9903      	ldr	r1, [sp, #12]
 801e7b4:	087a      	lsrs	r2, r7, #1
 801e7b6:	5c8a      	ldrb	r2, [r1, r2]
 801e7b8:	07f9      	lsls	r1, r7, #31
 801e7ba:	bf54      	ite	pl
 801e7bc:	f002 020f 	andpl.w	r2, r2, #15
 801e7c0:	1112      	asrmi	r2, r2, #4
 801e7c2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e7c6:	b2d2      	uxtb	r2, r2
 801e7c8:	2a00      	cmp	r2, #0
 801e7ca:	d042      	beq.n	801e852 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801e7cc:	4957      	ldr	r1, [pc, #348]	; (801e92c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e7ce:	680f      	ldr	r7, [r1, #0]
 801e7d0:	9905      	ldr	r1, [sp, #20]
 801e7d2:	fa5f fb87 	uxtb.w	fp, r7
 801e7d6:	434a      	muls	r2, r1
 801e7d8:	f102 0c01 	add.w	ip, r2, #1
 801e7dc:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e7e0:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801e7e4:	1212      	asrs	r2, r2, #8
 801e7e6:	fa1f fa82 	uxth.w	sl, r2
 801e7ea:	43d2      	mvns	r2, r2
 801e7ec:	fb1b fb0a 	smulbb	fp, fp, sl
 801e7f0:	b2d2      	uxtb	r2, r2
 801e7f2:	fb0c bc02 	mla	ip, ip, r2, fp
 801e7f6:	fa1f fc8c 	uxth.w	ip, ip
 801e7fa:	f10c 0b01 	add.w	fp, ip, #1
 801e7fe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e802:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e806:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e80a:	fb1b fb0a 	smulbb	fp, fp, sl
 801e80e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e812:	fb17 fa0a 	smulbb	sl, r7, sl
 801e816:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801e81a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801e81e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801e822:	fb07 aa02 	mla	sl, r7, r2, sl
 801e826:	fb0c bc02 	mla	ip, ip, r2, fp
 801e82a:	fa1f fa8a 	uxth.w	sl, sl
 801e82e:	fa1f fc8c 	uxth.w	ip, ip
 801e832:	f10a 0701 	add.w	r7, sl, #1
 801e836:	f10c 0b01 	add.w	fp, ip, #1
 801e83a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e83e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e842:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e846:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e84a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801e84e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801e852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e854:	3603      	adds	r6, #3
 801e856:	f109 39ff 	add.w	r9, r9, #4294967295
 801e85a:	4414      	add	r4, r2
 801e85c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e85e:	4410      	add	r0, r2
 801e860:	e79f      	b.n	801e7a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801e862:	1422      	asrs	r2, r4, #16
 801e864:	d457      	bmi.n	801e916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e866:	4596      	cmp	lr, r2
 801e868:	dd55      	ble.n	801e916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e86a:	1407      	asrs	r7, r0, #16
 801e86c:	d453      	bmi.n	801e916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e86e:	4547      	cmp	r7, r8
 801e870:	da51      	bge.n	801e916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e872:	9902      	ldr	r1, [sp, #8]
 801e874:	fb07 2701 	mla	r7, r7, r1, r2
 801e878:	9903      	ldr	r1, [sp, #12]
 801e87a:	087a      	lsrs	r2, r7, #1
 801e87c:	07ff      	lsls	r7, r7, #31
 801e87e:	5c8a      	ldrb	r2, [r1, r2]
 801e880:	bf54      	ite	pl
 801e882:	f002 020f 	andpl.w	r2, r2, #15
 801e886:	1112      	asrmi	r2, r2, #4
 801e888:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e88c:	b2d2      	uxtb	r2, r2
 801e88e:	2a00      	cmp	r2, #0
 801e890:	d041      	beq.n	801e916 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801e892:	4926      	ldr	r1, [pc, #152]	; (801e92c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801e894:	680f      	ldr	r7, [r1, #0]
 801e896:	9905      	ldr	r1, [sp, #20]
 801e898:	fa5f fb87 	uxtb.w	fp, r7
 801e89c:	434a      	muls	r2, r1
 801e89e:	f102 0c01 	add.w	ip, r2, #1
 801e8a2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801e8a6:	f896 c000 	ldrb.w	ip, [r6]
 801e8aa:	1212      	asrs	r2, r2, #8
 801e8ac:	fa1f fa82 	uxth.w	sl, r2
 801e8b0:	43d2      	mvns	r2, r2
 801e8b2:	fb1b fb0a 	smulbb	fp, fp, sl
 801e8b6:	b2d2      	uxtb	r2, r2
 801e8b8:	fb0c bc02 	mla	ip, ip, r2, fp
 801e8bc:	fa1f fc8c 	uxth.w	ip, ip
 801e8c0:	f10c 0b01 	add.w	fp, ip, #1
 801e8c4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e8c8:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801e8cc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e8d0:	fb1b fb0a 	smulbb	fp, fp, sl
 801e8d4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e8d8:	fb17 fa0a 	smulbb	sl, r7, sl
 801e8dc:	78b7      	ldrb	r7, [r6, #2]
 801e8de:	f886 c000 	strb.w	ip, [r6]
 801e8e2:	f896 c001 	ldrb.w	ip, [r6, #1]
 801e8e6:	fb07 aa02 	mla	sl, r7, r2, sl
 801e8ea:	fb0c bc02 	mla	ip, ip, r2, fp
 801e8ee:	fa1f fa8a 	uxth.w	sl, sl
 801e8f2:	fa1f fc8c 	uxth.w	ip, ip
 801e8f6:	f10a 0701 	add.w	r7, sl, #1
 801e8fa:	f10c 0b01 	add.w	fp, ip, #1
 801e8fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e902:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801e906:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e90a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e90e:	f886 a002 	strb.w	sl, [r6, #2]
 801e912:	f886 c001 	strb.w	ip, [r6, #1]
 801e916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e918:	3603      	adds	r6, #3
 801e91a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e91e:	4414      	add	r4, r2
 801e920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e922:	4410      	add	r0, r2
 801e924:	e6ed      	b.n	801e702 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801e926:	b007      	add	sp, #28
 801e928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e92c:	200098f4 	.word	0x200098f4

0801e930 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e934:	b087      	sub	sp, #28
 801e936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e93a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e93c:	9205      	str	r2, [sp, #20]
 801e93e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801e942:	6860      	ldr	r0, [r4, #4]
 801e944:	9202      	str	r2, [sp, #8]
 801e946:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801e94a:	9101      	str	r1, [sp, #4]
 801e94c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801e950:	fb00 2606 	mla	r6, r0, r6, r2
 801e954:	6822      	ldr	r2, [r4, #0]
 801e956:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e95a:	4416      	add	r6, r2
 801e95c:	f108 0201 	add.w	r2, r8, #1
 801e960:	f022 0201 	bic.w	r2, r2, #1
 801e964:	9203      	str	r2, [sp, #12]
 801e966:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801e968:	6812      	ldr	r2, [r2, #0]
 801e96a:	9204      	str	r2, [sp, #16]
 801e96c:	9a01      	ldr	r2, [sp, #4]
 801e96e:	2a00      	cmp	r2, #0
 801e970:	dc03      	bgt.n	801e97a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801e972:	9a05      	ldr	r2, [sp, #20]
 801e974:	2a00      	cmp	r2, #0
 801e976:	f340 813a 	ble.w	801ebee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801e97a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e97c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801e980:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e982:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801e986:	2b00      	cmp	r3, #0
 801e988:	dd0f      	ble.n	801e9aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e98a:	142a      	asrs	r2, r5, #16
 801e98c:	d406      	bmi.n	801e99c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e98e:	4590      	cmp	r8, r2
 801e990:	dd04      	ble.n	801e99c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e992:	1422      	asrs	r2, r4, #16
 801e994:	d402      	bmi.n	801e99c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801e996:	9802      	ldr	r0, [sp, #8]
 801e998:	4282      	cmp	r2, r0
 801e99a:	db07      	blt.n	801e9ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801e99c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e99e:	3b01      	subs	r3, #1
 801e9a0:	3603      	adds	r6, #3
 801e9a2:	4415      	add	r5, r2
 801e9a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e9a6:	4414      	add	r4, r2
 801e9a8:	e7ed      	b.n	801e986 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801e9aa:	d073      	beq.n	801ea94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801e9ac:	1e5a      	subs	r2, r3, #1
 801e9ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e9b0:	fb00 5002 	mla	r0, r0, r2, r5
 801e9b4:	1400      	asrs	r0, r0, #16
 801e9b6:	d464      	bmi.n	801ea82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e9b8:	4580      	cmp	r8, r0
 801e9ba:	dd62      	ble.n	801ea82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e9bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e9be:	fb00 4202 	mla	r2, r0, r2, r4
 801e9c2:	1412      	asrs	r2, r2, #16
 801e9c4:	d45d      	bmi.n	801ea82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e9c6:	9802      	ldr	r0, [sp, #8]
 801e9c8:	4282      	cmp	r2, r0
 801e9ca:	da5a      	bge.n	801ea82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801e9cc:	1cf0      	adds	r0, r6, #3
 801e9ce:	469a      	mov	sl, r3
 801e9d0:	f1ba 0f00 	cmp.w	sl, #0
 801e9d4:	dd59      	ble.n	801ea8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801e9d6:	142a      	asrs	r2, r5, #16
 801e9d8:	9903      	ldr	r1, [sp, #12]
 801e9da:	1427      	asrs	r7, r4, #16
 801e9dc:	fb01 2707 	mla	r7, r1, r7, r2
 801e9e0:	9904      	ldr	r1, [sp, #16]
 801e9e2:	087a      	lsrs	r2, r7, #1
 801e9e4:	5c8a      	ldrb	r2, [r1, r2]
 801e9e6:	07f9      	lsls	r1, r7, #31
 801e9e8:	bf54      	ite	pl
 801e9ea:	f002 020f 	andpl.w	r2, r2, #15
 801e9ee:	1112      	asrmi	r2, r2, #4
 801e9f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e9f4:	b2d2      	uxtb	r2, r2
 801e9f6:	2a00      	cmp	r2, #0
 801e9f8:	d03b      	beq.n	801ea72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801e9fa:	497e      	ldr	r1, [pc, #504]	; (801ebf4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801e9fc:	2aff      	cmp	r2, #255	; 0xff
 801e9fe:	680f      	ldr	r7, [r1, #0]
 801ea00:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ea04:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ea08:	b2ff      	uxtb	r7, r7
 801ea0a:	f000 80e9 	beq.w	801ebe0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801ea0e:	fa1f fe82 	uxth.w	lr, r2
 801ea12:	43d2      	mvns	r2, r2
 801ea14:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801ea18:	fb17 f70e 	smulbb	r7, r7, lr
 801ea1c:	b2d2      	uxtb	r2, r2
 801ea1e:	fb19 f90e 	smulbb	r9, r9, lr
 801ea22:	fb0c 7702 	mla	r7, ip, r2, r7
 801ea26:	fb1b fe0e 	smulbb	lr, fp, lr
 801ea2a:	b2bf      	uxth	r7, r7
 801ea2c:	f107 0c01 	add.w	ip, r7, #1
 801ea30:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801ea34:	123f      	asrs	r7, r7, #8
 801ea36:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ea3a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801ea3e:	fb07 9902 	mla	r9, r7, r2, r9
 801ea42:	fa1f f989 	uxth.w	r9, r9
 801ea46:	f109 0701 	add.w	r7, r9, #1
 801ea4a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ea4e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801ea52:	fb07 ee02 	mla	lr, r7, r2, lr
 801ea56:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ea5a:	fa1f fe8e 	uxth.w	lr, lr
 801ea5e:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ea62:	f10e 0201 	add.w	r2, lr, #1
 801ea66:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ea6a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ea6e:	f800 ec01 	strb.w	lr, [r0, #-1]
 801ea72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ea74:	3003      	adds	r0, #3
 801ea76:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ea7a:	4415      	add	r5, r2
 801ea7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ea7e:	4414      	add	r4, r2
 801ea80:	e7a6      	b.n	801e9d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ea82:	2700      	movs	r7, #0
 801ea84:	1bda      	subs	r2, r3, r7
 801ea86:	2a00      	cmp	r2, #0
 801ea88:	dc40      	bgt.n	801eb0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801ea8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea92:	441e      	add	r6, r3
 801ea94:	9b01      	ldr	r3, [sp, #4]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	f340 80a9 	ble.w	801ebee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801ea9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eaa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eaa2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaa6:	eeb0 6a62 	vmov.f32	s12, s5
 801eaaa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eaae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eab2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eab6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eaba:	eeb0 6a43 	vmov.f32	s12, s6
 801eabe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eac2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801eac6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eaca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eace:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ead2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ead6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eada:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eade:	ee12 2a90 	vmov	r2, s5
 801eae2:	eef0 2a47 	vmov.f32	s5, s14
 801eae6:	fb92 f3f3 	sdiv	r3, r2, r3
 801eaea:	ee13 2a10 	vmov	r2, s6
 801eaee:	9313      	str	r3, [sp, #76]	; 0x4c
 801eaf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eaf2:	eeb0 3a67 	vmov.f32	s6, s15
 801eaf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801eafa:	9314      	str	r3, [sp, #80]	; 0x50
 801eafc:	9b01      	ldr	r3, [sp, #4]
 801eafe:	9a05      	ldr	r2, [sp, #20]
 801eb00:	3b01      	subs	r3, #1
 801eb02:	9301      	str	r3, [sp, #4]
 801eb04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb06:	bf08      	it	eq
 801eb08:	4613      	moveq	r3, r2
 801eb0a:	e72f      	b.n	801e96c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801eb0c:	142a      	asrs	r2, r5, #16
 801eb0e:	d458      	bmi.n	801ebc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801eb10:	4590      	cmp	r8, r2
 801eb12:	dd56      	ble.n	801ebc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801eb14:	1420      	asrs	r0, r4, #16
 801eb16:	d454      	bmi.n	801ebc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801eb18:	9902      	ldr	r1, [sp, #8]
 801eb1a:	4288      	cmp	r0, r1
 801eb1c:	da51      	bge.n	801ebc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801eb1e:	9903      	ldr	r1, [sp, #12]
 801eb20:	fb00 2001 	mla	r0, r0, r1, r2
 801eb24:	9904      	ldr	r1, [sp, #16]
 801eb26:	0842      	lsrs	r2, r0, #1
 801eb28:	07c0      	lsls	r0, r0, #31
 801eb2a:	5c8a      	ldrb	r2, [r1, r2]
 801eb2c:	bf54      	ite	pl
 801eb2e:	f002 020f 	andpl.w	r2, r2, #15
 801eb32:	1112      	asrmi	r2, r2, #4
 801eb34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801eb38:	b2d2      	uxtb	r2, r2
 801eb3a:	2a00      	cmp	r2, #0
 801eb3c:	d041      	beq.n	801ebc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801eb3e:	492d      	ldr	r1, [pc, #180]	; (801ebf4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801eb40:	2aff      	cmp	r2, #255	; 0xff
 801eb42:	6808      	ldr	r0, [r1, #0]
 801eb44:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801eb48:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801eb4c:	fa5f fc80 	uxtb.w	ip, r0
 801eb50:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801eb54:	d03b      	beq.n	801ebce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801eb56:	fa1f f982 	uxth.w	r9, r2
 801eb5a:	4438      	add	r0, r7
 801eb5c:	43d2      	mvns	r2, r2
 801eb5e:	f816 e000 	ldrb.w	lr, [r6, r0]
 801eb62:	fb1c fc09 	smulbb	ip, ip, r9
 801eb66:	fb1a fa09 	smulbb	sl, sl, r9
 801eb6a:	b2d2      	uxtb	r2, r2
 801eb6c:	fb1b f909 	smulbb	r9, fp, r9
 801eb70:	fb0e cc02 	mla	ip, lr, r2, ip
 801eb74:	fa1f fc8c 	uxth.w	ip, ip
 801eb78:	f10c 0e01 	add.w	lr, ip, #1
 801eb7c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801eb80:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eb84:	f806 c000 	strb.w	ip, [r6, r0]
 801eb88:	4430      	add	r0, r6
 801eb8a:	f890 c001 	ldrb.w	ip, [r0, #1]
 801eb8e:	fb0c aa02 	mla	sl, ip, r2, sl
 801eb92:	fa1f fa8a 	uxth.w	sl, sl
 801eb96:	f10a 0c01 	add.w	ip, sl, #1
 801eb9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eb9e:	f890 c002 	ldrb.w	ip, [r0, #2]
 801eba2:	fb0c 9902 	mla	r9, ip, r2, r9
 801eba6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ebaa:	fa1f f989 	uxth.w	r9, r9
 801ebae:	f880 a001 	strb.w	sl, [r0, #1]
 801ebb2:	f109 0201 	add.w	r2, r9, #1
 801ebb6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801ebba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ebbe:	f880 9002 	strb.w	r9, [r0, #2]
 801ebc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ebc4:	3701      	adds	r7, #1
 801ebc6:	4415      	add	r5, r2
 801ebc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ebca:	4414      	add	r4, r2
 801ebcc:	e75a      	b.n	801ea84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801ebce:	4438      	add	r0, r7
 801ebd0:	f806 c000 	strb.w	ip, [r6, r0]
 801ebd4:	4430      	add	r0, r6
 801ebd6:	f880 a001 	strb.w	sl, [r0, #1]
 801ebda:	f880 b002 	strb.w	fp, [r0, #2]
 801ebde:	e7f0      	b.n	801ebc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ebe0:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ebe4:	f800 9c02 	strb.w	r9, [r0, #-2]
 801ebe8:	f800 bc01 	strb.w	fp, [r0, #-1]
 801ebec:	e741      	b.n	801ea72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801ebee:	b007      	add	sp, #28
 801ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebf4:	200098f4 	.word	0x200098f4

0801ebf8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801ebf8:	4770      	bx	lr

0801ebfa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801ebfa:	4770      	bx	lr

0801ebfc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801ebfc:	4770      	bx	lr

0801ebfe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801ebfe:	4770      	bx	lr

0801ec00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ec00:	4770      	bx	lr

0801ec02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ec02:	4770      	bx	lr

0801ec04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ec04:	4770      	bx	lr

0801ec06 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ec06:	4770      	bx	lr

0801ec08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ec08:	4770      	bx	lr

0801ec0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ec0a:	4770      	bx	lr

0801ec0c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ec0c:	4770      	bx	lr

0801ec0e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ec0e:	4770      	bx	lr

0801ec10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801ec10:	4770      	bx	lr

0801ec12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801ec12:	4770      	bx	lr

0801ec14 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801ec14:	4770      	bx	lr

0801ec16 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801ec16:	4770      	bx	lr

0801ec18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801ec18:	4770      	bx	lr

0801ec1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801ec1a:	4770      	bx	lr

0801ec1c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801ec1c:	4770      	bx	lr

0801ec1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801ec1e:	4770      	bx	lr

0801ec20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801ec20:	2bff      	cmp	r3, #255	; 0xff
 801ec22:	b508      	push	{r3, lr}
 801ec24:	d04f      	beq.n	801ecc6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801ec26:	2a2c      	cmp	r2, #44	; 0x2c
 801ec28:	d032      	beq.n	801ec90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801ec2a:	d80f      	bhi.n	801ec4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801ec2c:	2a08      	cmp	r2, #8
 801ec2e:	d046      	beq.n	801ecbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ec30:	d805      	bhi.n	801ec3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801ec32:	2a04      	cmp	r2, #4
 801ec34:	d041      	beq.n	801ecba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801ec36:	2a05      	cmp	r2, #5
 801ec38:	d03d      	beq.n	801ecb6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801ec3a:	2000      	movs	r0, #0
 801ec3c:	e027      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ec3e:	2a0a      	cmp	r2, #10
 801ec40:	d03d      	beq.n	801ecbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801ec42:	d301      	bcc.n	801ec48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ec44:	2a0b      	cmp	r2, #11
 801ec46:	d1f8      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ec48:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ec4a:	e020      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ec4c:	2a30      	cmp	r2, #48	; 0x30
 801ec4e:	d038      	beq.n	801ecc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ec50:	d808      	bhi.n	801ec64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801ec52:	2a2e      	cmp	r2, #46	; 0x2e
 801ec54:	684b      	ldr	r3, [r1, #4]
 801ec56:	d029      	beq.n	801ecac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801ec58:	d90b      	bls.n	801ec72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801ec5a:	781b      	ldrb	r3, [r3, #0]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d1ec      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ec60:	6a00      	ldr	r0, [r0, #32]
 801ec62:	e014      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ec64:	2a32      	cmp	r2, #50	; 0x32
 801ec66:	d02c      	beq.n	801ecc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801ec68:	d301      	bcc.n	801ec6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801ec6a:	2a33      	cmp	r2, #51	; 0x33
 801ec6c:	d1e5      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ec6e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801ec70:	e00d      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ec72:	781b      	ldrb	r3, [r3, #0]
 801ec74:	2b01      	cmp	r3, #1
 801ec76:	d009      	beq.n	801ec8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801ec78:	d3f2      	bcc.n	801ec60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801ec7a:	2b02      	cmp	r3, #2
 801ec7c:	d1dd      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ec7e:	4b39      	ldr	r3, [pc, #228]	; (801ed64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ec80:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801ec84:	4a38      	ldr	r2, [pc, #224]	; (801ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ec86:	4839      	ldr	r0, [pc, #228]	; (801ed6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801ec88:	f006 fb56 	bl	8025338 <__assert_func>
 801ec8c:	6900      	ldr	r0, [r0, #16]
 801ec8e:	bd08      	pop	{r3, pc}
 801ec90:	684b      	ldr	r3, [r1, #4]
 801ec92:	781b      	ldrb	r3, [r3, #0]
 801ec94:	2b01      	cmp	r3, #1
 801ec96:	d007      	beq.n	801eca8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801ec98:	d30b      	bcc.n	801ecb2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801ec9a:	2b02      	cmp	r3, #2
 801ec9c:	d1cd      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ec9e:	4b31      	ldr	r3, [pc, #196]	; (801ed64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801eca0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801eca4:	4a30      	ldr	r2, [pc, #192]	; (801ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801eca6:	e7ee      	b.n	801ec86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801eca8:	6880      	ldr	r0, [r0, #8]
 801ecaa:	e7f0      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecac:	781b      	ldrb	r3, [r3, #0]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d1c3      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ecb2:	6980      	ldr	r0, [r0, #24]
 801ecb4:	e7eb      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecb6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ecb8:	e7e9      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ecbc:	e7e7      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ecc0:	e7e5      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecc2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ecc4:	e7e3      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecc6:	2a2c      	cmp	r2, #44	; 0x2c
 801ecc8:	d030      	beq.n	801ed2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801ecca:	d80f      	bhi.n	801ecec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801eccc:	2a08      	cmp	r2, #8
 801ecce:	d044      	beq.n	801ed5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ecd0:	d805      	bhi.n	801ecde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ecd2:	2a04      	cmp	r2, #4
 801ecd4:	d03f      	beq.n	801ed56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801ecd6:	2a05      	cmp	r2, #5
 801ecd8:	d1af      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ecda:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801ecdc:	e7d7      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecde:	2a0a      	cmp	r2, #10
 801ece0:	d03b      	beq.n	801ed5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ece2:	d301      	bcc.n	801ece8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ece4:	2a0b      	cmp	r2, #11
 801ece6:	d1a8      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ece8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801ecea:	e7d0      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ecec:	2a30      	cmp	r2, #48	; 0x30
 801ecee:	d036      	beq.n	801ed5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ecf0:	d808      	bhi.n	801ed04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801ecf2:	2a2e      	cmp	r2, #46	; 0x2e
 801ecf4:	684b      	ldr	r3, [r1, #4]
 801ecf6:	d028      	beq.n	801ed4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801ecf8:	d90b      	bls.n	801ed12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801ecfa:	781b      	ldrb	r3, [r3, #0]
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d19c      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed00:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ed02:	e7c4      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed04:	2a32      	cmp	r2, #50	; 0x32
 801ed06:	d02a      	beq.n	801ed5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ed08:	d301      	bcc.n	801ed0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801ed0a:	2a33      	cmp	r2, #51	; 0x33
 801ed0c:	d195      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed0e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ed10:	e7bd      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed12:	781b      	ldrb	r3, [r3, #0]
 801ed14:	2b01      	cmp	r3, #1
 801ed16:	d007      	beq.n	801ed28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801ed18:	d3f2      	bcc.n	801ed00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801ed1a:	2b02      	cmp	r3, #2
 801ed1c:	d18d      	bne.n	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed1e:	4b11      	ldr	r3, [pc, #68]	; (801ed64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ed20:	f240 31e1 	movw	r1, #993	; 0x3e1
 801ed24:	4a10      	ldr	r2, [pc, #64]	; (801ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ed26:	e7ae      	b.n	801ec86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ed28:	6940      	ldr	r0, [r0, #20]
 801ed2a:	e7b0      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed2c:	684b      	ldr	r3, [r1, #4]
 801ed2e:	781b      	ldrb	r3, [r3, #0]
 801ed30:	2b01      	cmp	r3, #1
 801ed32:	d008      	beq.n	801ed46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801ed34:	d30d      	bcc.n	801ed52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ed36:	2b02      	cmp	r3, #2
 801ed38:	f47f af7f 	bne.w	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed3c:	4b09      	ldr	r3, [pc, #36]	; (801ed64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ed3e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801ed42:	4a09      	ldr	r2, [pc, #36]	; (801ed68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ed44:	e79f      	b.n	801ec86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ed46:	68c0      	ldr	r0, [r0, #12]
 801ed48:	e7a1      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed4a:	781b      	ldrb	r3, [r3, #0]
 801ed4c:	2b00      	cmp	r3, #0
 801ed4e:	f47f af74 	bne.w	801ec3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ed52:	69c0      	ldr	r0, [r0, #28]
 801ed54:	e79b      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed56:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801ed58:	e799      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed5a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ed5c:	e797      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed5e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ed60:	e795      	b.n	801ec8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ed62:	bf00      	nop
 801ed64:	080290f8 	.word	0x080290f8
 801ed68:	080298ab 	.word	0x080298ab
 801ed6c:	08029144 	.word	0x08029144

0801ed70 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801ed70:	b508      	push	{r3, lr}
 801ed72:	4b06      	ldr	r3, [pc, #24]	; (801ed8c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801ed74:	8818      	ldrh	r0, [r3, #0]
 801ed76:	b928      	cbnz	r0, 801ed84 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801ed78:	4b05      	ldr	r3, [pc, #20]	; (801ed90 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ed7a:	21d7      	movs	r1, #215	; 0xd7
 801ed7c:	4a05      	ldr	r2, [pc, #20]	; (801ed94 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801ed7e:	4806      	ldr	r0, [pc, #24]	; (801ed98 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801ed80:	f006 fada 	bl	8025338 <__assert_func>
 801ed84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ed88:	b280      	uxth	r0, r0
 801ed8a:	bd08      	pop	{r3, pc}
 801ed8c:	200098e4 	.word	0x200098e4
 801ed90:	08029393 	.word	0x08029393
 801ed94:	08029870 	.word	0x08029870
 801ed98:	080293d5 	.word	0x080293d5

0801ed9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ed9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda0:	4616      	mov	r6, r2
 801eda2:	b087      	sub	sp, #28
 801eda4:	461f      	mov	r7, r3
 801eda6:	b33b      	cbz	r3, 801edf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801eda8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801edac:	b323      	cbz	r3, 801edf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801edae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801edb2:	b30b      	cbz	r3, 801edf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801edb4:	6808      	ldr	r0, [r1, #0]
 801edb6:	ab04      	add	r3, sp, #16
 801edb8:	6849      	ldr	r1, [r1, #4]
 801edba:	4c5a      	ldr	r4, [pc, #360]	; (801ef24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801edbc:	c303      	stmia	r3!, {r0, r1}
 801edbe:	a804      	add	r0, sp, #16
 801edc0:	f7fb fef4 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801edc4:	6820      	ldr	r0, [r4, #0]
 801edc6:	6803      	ldr	r3, [r0, #0]
 801edc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801edca:	4798      	blx	r3
 801edcc:	2fff      	cmp	r7, #255	; 0xff
 801edce:	4623      	mov	r3, r4
 801edd0:	d015      	beq.n	801edfe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801edd2:	f010 0f08 	tst.w	r0, #8
 801edd6:	d015      	beq.n	801ee04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801edd8:	6818      	ldr	r0, [r3, #0]
 801edda:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801edde:	6801      	ldr	r1, [r0, #0]
 801ede0:	9401      	str	r4, [sp, #4]
 801ede2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801ede6:	9702      	str	r7, [sp, #8]
 801ede8:	9400      	str	r4, [sp, #0]
 801edea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801edee:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801edf0:	4631      	mov	r1, r6
 801edf2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801edf6:	47a0      	blx	r4
 801edf8:	b007      	add	sp, #28
 801edfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edfe:	f010 0f02 	tst.w	r0, #2
 801ee02:	e7e8      	b.n	801edd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801ee04:	6818      	ldr	r0, [r3, #0]
 801ee06:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801ee0a:	6803      	ldr	r3, [r0, #0]
 801ee0c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801ee10:	6a1b      	ldr	r3, [r3, #32]
 801ee12:	4798      	blx	r3
 801ee14:	4944      	ldr	r1, [pc, #272]	; (801ef28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801ee16:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801ee1a:	2fff      	cmp	r7, #255	; 0xff
 801ee1c:	f8b1 c000 	ldrh.w	ip, [r1]
 801ee20:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801ee24:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ee28:	4688      	mov	r8, r1
 801ee2a:	fb0c 2303 	mla	r3, ip, r3, r2
 801ee2e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801ee32:	b2f2      	uxtb	r2, r6
 801ee34:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801ee38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee3c:	4418      	add	r0, r3
 801ee3e:	d112      	bne.n	801ee66 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801ee40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ee44:	2100      	movs	r1, #0
 801ee46:	42a9      	cmp	r1, r5
 801ee48:	da66      	bge.n	801ef18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801ee4a:	4603      	mov	r3, r0
 801ee4c:	2700      	movs	r7, #0
 801ee4e:	42a7      	cmp	r7, r4
 801ee50:	f103 0303 	add.w	r3, r3, #3
 801ee54:	da57      	bge.n	801ef06 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801ee56:	f803 2c03 	strb.w	r2, [r3, #-3]
 801ee5a:	3701      	adds	r7, #1
 801ee5c:	f803 ec02 	strb.w	lr, [r3, #-2]
 801ee60:	f803 cc01 	strb.w	ip, [r3, #-1]
 801ee64:	e7f3      	b.n	801ee4e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801ee66:	b2bb      	uxth	r3, r7
 801ee68:	f04f 0800 	mov.w	r8, #0
 801ee6c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ee70:	fb0c fc03 	mul.w	ip, ip, r3
 801ee74:	fb0e fe03 	mul.w	lr, lr, r3
 801ee78:	435a      	muls	r2, r3
 801ee7a:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801ee7e:	460f      	mov	r7, r1
 801ee80:	b29b      	uxth	r3, r3
 801ee82:	45a8      	cmp	r8, r5
 801ee84:	da48      	bge.n	801ef18 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801ee86:	4601      	mov	r1, r0
 801ee88:	f04f 0a00 	mov.w	sl, #0
 801ee8c:	45a2      	cmp	sl, r4
 801ee8e:	f101 0103 	add.w	r1, r1, #3
 801ee92:	da2f      	bge.n	801eef4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801ee94:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801ee98:	f10a 0a01 	add.w	sl, sl, #1
 801ee9c:	fb19 f903 	smulbb	r9, r9, r3
 801eea0:	4491      	add	r9, r2
 801eea2:	fa1f f989 	uxth.w	r9, r9
 801eea6:	f109 0b01 	add.w	fp, r9, #1
 801eeaa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eeae:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eeb2:	f801 9c03 	strb.w	r9, [r1, #-3]
 801eeb6:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801eeba:	fb19 f903 	smulbb	r9, r9, r3
 801eebe:	44f1      	add	r9, lr
 801eec0:	fa1f f989 	uxth.w	r9, r9
 801eec4:	f109 0b01 	add.w	fp, r9, #1
 801eec8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eecc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eed0:	f801 9c02 	strb.w	r9, [r1, #-2]
 801eed4:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801eed8:	fb19 f903 	smulbb	r9, r9, r3
 801eedc:	44e1      	add	r9, ip
 801eede:	fa1f f989 	uxth.w	r9, r9
 801eee2:	f109 0b01 	add.w	fp, r9, #1
 801eee6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801eeea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801eeee:	f801 9c01 	strb.w	r9, [r1, #-1]
 801eef2:	e7cb      	b.n	801ee8c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801eef4:	8839      	ldrh	r1, [r7, #0]
 801eef6:	f108 0801 	add.w	r8, r8, #1
 801eefa:	1b09      	subs	r1, r1, r4
 801eefc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ef00:	4431      	add	r1, r6
 801ef02:	4408      	add	r0, r1
 801ef04:	e7bd      	b.n	801ee82 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801ef06:	f8b8 3000 	ldrh.w	r3, [r8]
 801ef0a:	3101      	adds	r1, #1
 801ef0c:	1b1b      	subs	r3, r3, r4
 801ef0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef12:	4433      	add	r3, r6
 801ef14:	4418      	add	r0, r3
 801ef16:	e796      	b.n	801ee46 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801ef18:	4b02      	ldr	r3, [pc, #8]	; (801ef24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801ef1a:	6818      	ldr	r0, [r3, #0]
 801ef1c:	6803      	ldr	r3, [r0, #0]
 801ef1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef20:	4798      	blx	r3
 801ef22:	e769      	b.n	801edf8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801ef24:	200098ec 	.word	0x200098ec
 801ef28:	200098e4 	.word	0x200098e4

0801ef2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef30:	b08d      	sub	sp, #52	; 0x34
 801ef32:	460c      	mov	r4, r1
 801ef34:	4617      	mov	r7, r2
 801ef36:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801ef3a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801ef3e:	2e00      	cmp	r6, #0
 801ef40:	d04a      	beq.n	801efd8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801ef42:	6810      	ldr	r0, [r2, #0]
 801ef44:	ad08      	add	r5, sp, #32
 801ef46:	6851      	ldr	r1, [r2, #4]
 801ef48:	c503      	stmia	r5!, {r0, r1}
 801ef4a:	6818      	ldr	r0, [r3, #0]
 801ef4c:	ad0a      	add	r5, sp, #40	; 0x28
 801ef4e:	6859      	ldr	r1, [r3, #4]
 801ef50:	c503      	stmia	r5!, {r0, r1}
 801ef52:	a808      	add	r0, sp, #32
 801ef54:	f7fb fe2a 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef58:	4639      	mov	r1, r7
 801ef5a:	a80a      	add	r0, sp, #40	; 0x28
 801ef5c:	4f59      	ldr	r7, [pc, #356]	; (801f0c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801ef5e:	f7fb fe0d 	bl	801ab7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef62:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801ef66:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801ef6a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801ef6e:	6838      	ldr	r0, [r7, #0]
 801ef70:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ef74:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801ef78:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801ef7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ef80:	440c      	add	r4, r1
 801ef82:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801ef86:	440a      	add	r2, r1
 801ef88:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801ef8c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ef90:	4413      	add	r3, r2
 801ef92:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801ef96:	6803      	ldr	r3, [r0, #0]
 801ef98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ef9a:	4798      	blx	r3
 801ef9c:	2eff      	cmp	r6, #255	; 0xff
 801ef9e:	f000 8089 	beq.w	801f0b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801efa2:	0743      	lsls	r3, r0, #29
 801efa4:	d405      	bmi.n	801efb2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801efa6:	f1b9 0f00 	cmp.w	r9, #0
 801efaa:	d018      	beq.n	801efde <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801efac:	f010 0f10 	tst.w	r0, #16
 801efb0:	d015      	beq.n	801efde <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801efb2:	6838      	ldr	r0, [r7, #0]
 801efb4:	b2ad      	uxth	r5, r5
 801efb6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801efba:	6801      	ldr	r1, [r0, #0]
 801efbc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801efc0:	9500      	str	r5, [sp, #0]
 801efc2:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801efc6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801efca:	9602      	str	r6, [sp, #8]
 801efcc:	fa1f f688 	uxth.w	r6, r8
 801efd0:	9601      	str	r6, [sp, #4]
 801efd2:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801efd4:	4621      	mov	r1, r4
 801efd6:	47a8      	blx	r5
 801efd8:	b00d      	add	sp, #52	; 0x34
 801efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efde:	6838      	ldr	r0, [r7, #0]
 801efe0:	6803      	ldr	r3, [r0, #0]
 801efe2:	6a1b      	ldr	r3, [r3, #32]
 801efe4:	4798      	blx	r3
 801efe6:	4a38      	ldr	r2, [pc, #224]	; (801f0c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801efe8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801efec:	2eff      	cmp	r6, #255	; 0xff
 801efee:	8813      	ldrh	r3, [r2, #0]
 801eff0:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801eff4:	fb0c 1303 	mla	r3, ip, r3, r1
 801eff8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801effc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f000:	4418      	add	r0, r3
 801f002:	d032      	beq.n	801f06a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801f004:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801f008:	f04f 0c00 	mov.w	ip, #0
 801f00c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801f010:	9306      	str	r3, [sp, #24]
 801f012:	45c4      	cmp	ip, r8
 801f014:	da49      	bge.n	801f0aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f016:	4686      	mov	lr, r0
 801f018:	46a1      	mov	r9, r4
 801f01a:	eba9 0304 	sub.w	r3, r9, r4
 801f01e:	428b      	cmp	r3, r1
 801f020:	da13      	bge.n	801f04a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801f022:	f819 3b01 	ldrb.w	r3, [r9], #1
 801f026:	f89e b000 	ldrb.w	fp, [lr]
 801f02a:	9307      	str	r3, [sp, #28]
 801f02c:	9b06      	ldr	r3, [sp, #24]
 801f02e:	fb1b fb03 	smulbb	fp, fp, r3
 801f032:	9b07      	ldr	r3, [sp, #28]
 801f034:	fb03 b306 	mla	r3, r3, r6, fp
 801f038:	b29b      	uxth	r3, r3
 801f03a:	f103 0b01 	add.w	fp, r3, #1
 801f03e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801f042:	121b      	asrs	r3, r3, #8
 801f044:	f80e 3b01 	strb.w	r3, [lr], #1
 801f048:	e7e7      	b.n	801f01a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801f04a:	8813      	ldrh	r3, [r2, #0]
 801f04c:	f10c 0c01 	add.w	ip, ip, #1
 801f050:	1b5b      	subs	r3, r3, r5
 801f052:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f056:	4453      	add	r3, sl
 801f058:	4418      	add	r0, r3
 801f05a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f05e:	1b5b      	subs	r3, r3, r5
 801f060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f064:	4453      	add	r3, sl
 801f066:	441c      	add	r4, r3
 801f068:	e7d3      	b.n	801f012 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801f06a:	2600      	movs	r6, #0
 801f06c:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801f070:	4546      	cmp	r6, r8
 801f072:	da1a      	bge.n	801f0aa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801f074:	f100 3eff 	add.w	lr, r0, #4294967295
 801f078:	4623      	mov	r3, r4
 801f07a:	eba3 0904 	sub.w	r9, r3, r4
 801f07e:	4589      	cmp	r9, r1
 801f080:	da04      	bge.n	801f08c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801f082:	f813 9b01 	ldrb.w	r9, [r3], #1
 801f086:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801f08a:	e7f6      	b.n	801f07a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801f08c:	8813      	ldrh	r3, [r2, #0]
 801f08e:	3601      	adds	r6, #1
 801f090:	1b5b      	subs	r3, r3, r5
 801f092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f096:	4463      	add	r3, ip
 801f098:	4418      	add	r0, r3
 801f09a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f09e:	1b5b      	subs	r3, r3, r5
 801f0a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f0a4:	4463      	add	r3, ip
 801f0a6:	441c      	add	r4, r3
 801f0a8:	e7e2      	b.n	801f070 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801f0aa:	6838      	ldr	r0, [r7, #0]
 801f0ac:	6803      	ldr	r3, [r0, #0]
 801f0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0b0:	4798      	blx	r3
 801f0b2:	e791      	b.n	801efd8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f0b4:	f1b9 0f00 	cmp.w	r9, #0
 801f0b8:	f47f af78 	bne.w	801efac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801f0bc:	f010 0f01 	tst.w	r0, #1
 801f0c0:	e776      	b.n	801efb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801f0c2:	bf00      	nop
 801f0c4:	200098ec 	.word	0x200098ec
 801f0c8:	200098e4 	.word	0x200098e4

0801f0cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f0cc:	b510      	push	{r4, lr}
 801f0ce:	4604      	mov	r4, r0
 801f0d0:	2104      	movs	r1, #4
 801f0d2:	f006 f905 	bl	80252e0 <_ZdlPvj>
 801f0d6:	4620      	mov	r0, r4
 801f0d8:	bd10      	pop	{r4, pc}

0801f0da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f0da:	b510      	push	{r4, lr}
 801f0dc:	4604      	mov	r4, r0
 801f0de:	2104      	movs	r1, #4
 801f0e0:	f006 f8fe 	bl	80252e0 <_ZdlPvj>
 801f0e4:	4620      	mov	r0, r4
 801f0e6:	bd10      	pop	{r4, pc}

0801f0e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f0e8:	b510      	push	{r4, lr}
 801f0ea:	4604      	mov	r4, r0
 801f0ec:	2104      	movs	r1, #4
 801f0ee:	f006 f8f7 	bl	80252e0 <_ZdlPvj>
 801f0f2:	4620      	mov	r0, r4
 801f0f4:	bd10      	pop	{r4, pc}

0801f0f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f0f6:	b510      	push	{r4, lr}
 801f0f8:	4604      	mov	r4, r0
 801f0fa:	2104      	movs	r1, #4
 801f0fc:	f006 f8f0 	bl	80252e0 <_ZdlPvj>
 801f100:	4620      	mov	r0, r4
 801f102:	bd10      	pop	{r4, pc}

0801f104 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f104:	b510      	push	{r4, lr}
 801f106:	4604      	mov	r4, r0
 801f108:	2104      	movs	r1, #4
 801f10a:	f006 f8e9 	bl	80252e0 <_ZdlPvj>
 801f10e:	4620      	mov	r0, r4
 801f110:	bd10      	pop	{r4, pc}

0801f112 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f112:	b510      	push	{r4, lr}
 801f114:	4604      	mov	r4, r0
 801f116:	2104      	movs	r1, #4
 801f118:	f006 f8e2 	bl	80252e0 <_ZdlPvj>
 801f11c:	4620      	mov	r0, r4
 801f11e:	bd10      	pop	{r4, pc}

0801f120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f120:	b510      	push	{r4, lr}
 801f122:	4604      	mov	r4, r0
 801f124:	2104      	movs	r1, #4
 801f126:	f006 f8db 	bl	80252e0 <_ZdlPvj>
 801f12a:	4620      	mov	r0, r4
 801f12c:	bd10      	pop	{r4, pc}

0801f12e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f12e:	b510      	push	{r4, lr}
 801f130:	4604      	mov	r4, r0
 801f132:	2104      	movs	r1, #4
 801f134:	f006 f8d4 	bl	80252e0 <_ZdlPvj>
 801f138:	4620      	mov	r0, r4
 801f13a:	bd10      	pop	{r4, pc}

0801f13c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f13c:	b510      	push	{r4, lr}
 801f13e:	4604      	mov	r4, r0
 801f140:	2104      	movs	r1, #4
 801f142:	f006 f8cd 	bl	80252e0 <_ZdlPvj>
 801f146:	4620      	mov	r0, r4
 801f148:	bd10      	pop	{r4, pc}

0801f14a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f14a:	b510      	push	{r4, lr}
 801f14c:	4604      	mov	r4, r0
 801f14e:	2104      	movs	r1, #4
 801f150:	f006 f8c6 	bl	80252e0 <_ZdlPvj>
 801f154:	4620      	mov	r0, r4
 801f156:	bd10      	pop	{r4, pc}

0801f158 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f158:	b510      	push	{r4, lr}
 801f15a:	4604      	mov	r4, r0
 801f15c:	2104      	movs	r1, #4
 801f15e:	f006 f8bf 	bl	80252e0 <_ZdlPvj>
 801f162:	4620      	mov	r0, r4
 801f164:	bd10      	pop	{r4, pc}

0801f166 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f166:	b510      	push	{r4, lr}
 801f168:	4604      	mov	r4, r0
 801f16a:	2104      	movs	r1, #4
 801f16c:	f006 f8b8 	bl	80252e0 <_ZdlPvj>
 801f170:	4620      	mov	r0, r4
 801f172:	bd10      	pop	{r4, pc}

0801f174 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f174:	b510      	push	{r4, lr}
 801f176:	4604      	mov	r4, r0
 801f178:	2104      	movs	r1, #4
 801f17a:	f006 f8b1 	bl	80252e0 <_ZdlPvj>
 801f17e:	4620      	mov	r0, r4
 801f180:	bd10      	pop	{r4, pc}

0801f182 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f182:	b510      	push	{r4, lr}
 801f184:	4604      	mov	r4, r0
 801f186:	2104      	movs	r1, #4
 801f188:	f006 f8aa 	bl	80252e0 <_ZdlPvj>
 801f18c:	4620      	mov	r0, r4
 801f18e:	bd10      	pop	{r4, pc}

0801f190 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f190:	b510      	push	{r4, lr}
 801f192:	4604      	mov	r4, r0
 801f194:	2104      	movs	r1, #4
 801f196:	f006 f8a3 	bl	80252e0 <_ZdlPvj>
 801f19a:	4620      	mov	r0, r4
 801f19c:	bd10      	pop	{r4, pc}

0801f19e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f19e:	b510      	push	{r4, lr}
 801f1a0:	4604      	mov	r4, r0
 801f1a2:	2104      	movs	r1, #4
 801f1a4:	f006 f89c 	bl	80252e0 <_ZdlPvj>
 801f1a8:	4620      	mov	r0, r4
 801f1aa:	bd10      	pop	{r4, pc}

0801f1ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f1ac:	b510      	push	{r4, lr}
 801f1ae:	4604      	mov	r4, r0
 801f1b0:	2104      	movs	r1, #4
 801f1b2:	f006 f895 	bl	80252e0 <_ZdlPvj>
 801f1b6:	4620      	mov	r0, r4
 801f1b8:	bd10      	pop	{r4, pc}

0801f1ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f1ba:	b510      	push	{r4, lr}
 801f1bc:	4604      	mov	r4, r0
 801f1be:	2104      	movs	r1, #4
 801f1c0:	f006 f88e 	bl	80252e0 <_ZdlPvj>
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	bd10      	pop	{r4, pc}

0801f1c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f1c8:	b510      	push	{r4, lr}
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	2104      	movs	r1, #4
 801f1ce:	f006 f887 	bl	80252e0 <_ZdlPvj>
 801f1d2:	4620      	mov	r0, r4
 801f1d4:	bd10      	pop	{r4, pc}

0801f1d6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f1d6:	b510      	push	{r4, lr}
 801f1d8:	4604      	mov	r4, r0
 801f1da:	2104      	movs	r1, #4
 801f1dc:	f006 f880 	bl	80252e0 <_ZdlPvj>
 801f1e0:	4620      	mov	r0, r4
 801f1e2:	bd10      	pop	{r4, pc}

0801f1e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1e8:	4d9e      	ldr	r5, [pc, #632]	; (801f464 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801f1ea:	4690      	mov	r8, r2
 801f1ec:	b08f      	sub	sp, #60	; 0x3c
 801f1ee:	4604      	mov	r4, r0
 801f1f0:	682a      	ldr	r2, [r5, #0]
 801f1f2:	4689      	mov	r9, r1
 801f1f4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f1f8:	2a02      	cmp	r2, #2
 801f1fa:	d106      	bne.n	801f20a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801f1fc:	4b9a      	ldr	r3, [pc, #616]	; (801f468 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801f1fe:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801f202:	4a9a      	ldr	r2, [pc, #616]	; (801f46c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f204:	489a      	ldr	r0, [pc, #616]	; (801f470 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801f206:	f006 f897 	bl	8025338 <__assert_func>
 801f20a:	ae0e      	add	r6, sp, #56	; 0x38
 801f20c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801f210:	4630      	mov	r0, r6
 801f212:	f7fe f8b3 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f216:	6823      	ldr	r3, [r4, #0]
 801f218:	4607      	mov	r7, r0
 801f21a:	4620      	mov	r0, r4
 801f21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f21e:	4798      	blx	r3
 801f220:	4287      	cmp	r7, r0
 801f222:	d004      	beq.n	801f22e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801f224:	4b93      	ldr	r3, [pc, #588]	; (801f474 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801f226:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801f22a:	4a90      	ldr	r2, [pc, #576]	; (801f46c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f22c:	e7ea      	b.n	801f204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f22e:	4630      	mov	r0, r6
 801f230:	f7fe f820 	bl	801d274 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f234:	4607      	mov	r7, r0
 801f236:	b920      	cbnz	r0, 801f242 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801f238:	4b8f      	ldr	r3, [pc, #572]	; (801f478 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801f23a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801f23e:	4a8b      	ldr	r2, [pc, #556]	; (801f46c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f240:	e7e0      	b.n	801f204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f242:	f8d8 0000 	ldr.w	r0, [r8]
 801f246:	ab06      	add	r3, sp, #24
 801f248:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f24c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801f250:	c303      	stmia	r3!, {r0, r1}
 801f252:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f256:	ab08      	add	r3, sp, #32
 801f258:	f8d9 0000 	ldr.w	r0, [r9]
 801f25c:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801f260:	c303      	stmia	r3!, {r0, r1}
 801f262:	4630      	mov	r0, r6
 801f264:	f7fd fefe 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f268:	4680      	mov	r8, r0
 801f26a:	4630      	mov	r0, r6
 801f26c:	4e83      	ldr	r6, [pc, #524]	; (801f47c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801f26e:	f7fd ff33 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f272:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801f276:	f10d 0920 	add.w	r9, sp, #32
 801f27a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801f27e:	a806      	add	r0, sp, #24
 801f280:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801f284:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801f288:	f7fb fc90 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f28c:	4648      	mov	r0, r9
 801f28e:	f7fb fc8d 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f292:	a80a      	add	r0, sp, #40	; 0x28
 801f294:	f7fb fc8a 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f298:	4b79      	ldr	r3, [pc, #484]	; (801f480 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801f29a:	2100      	movs	r1, #0
 801f29c:	f9b6 2000 	ldrsh.w	r2, [r6]
 801f2a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f2a4:	4648      	mov	r0, r9
 801f2a6:	910c      	str	r1, [sp, #48]	; 0x30
 801f2a8:	a90c      	add	r1, sp, #48	; 0x30
 801f2aa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801f2ae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f2b2:	f7f9 fad7 	bl	8018864 <_ZN8touchgfx4RectaNERKS0_>
 801f2b6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801f2ba:	9602      	str	r6, [sp, #8]
 801f2bc:	f1bc 0f00 	cmp.w	ip, #0
 801f2c0:	f000 80a4 	beq.w	801f40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f2c4:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801f2c8:	2e00      	cmp	r6, #0
 801f2ca:	f000 809f 	beq.w	801f40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f2ce:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801f2d2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801f2d6:	4288      	cmp	r0, r1
 801f2d8:	db36      	blt.n	801f348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f2da:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801f2de:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f2e2:	429a      	cmp	r2, r3
 801f2e4:	db30      	blt.n	801f348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f2e6:	4460      	add	r0, ip
 801f2e8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801f2ec:	4461      	add	r1, ip
 801f2ee:	b200      	sxth	r0, r0
 801f2f0:	b209      	sxth	r1, r1
 801f2f2:	4288      	cmp	r0, r1
 801f2f4:	dc28      	bgt.n	801f348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f2f6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801f2fa:	4432      	add	r2, r6
 801f2fc:	440b      	add	r3, r1
 801f2fe:	b212      	sxth	r2, r2
 801f300:	b21b      	sxth	r3, r3
 801f302:	429a      	cmp	r2, r3
 801f304:	dc20      	bgt.n	801f348 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f306:	6823      	ldr	r3, [r4, #0]
 801f308:	4620      	mov	r0, r4
 801f30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f30c:	4798      	blx	r3
 801f30e:	4682      	mov	sl, r0
 801f310:	6828      	ldr	r0, [r5, #0]
 801f312:	6803      	ldr	r3, [r0, #0]
 801f314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f316:	4798      	blx	r3
 801f318:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801f31c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f320:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801f324:	9303      	str	r3, [sp, #12]
 801f326:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f32a:	1a9b      	subs	r3, r3, r2
 801f32c:	b29b      	uxth	r3, r3
 801f32e:	b21c      	sxth	r4, r3
 801f330:	2c00      	cmp	r4, #0
 801f332:	dc0e      	bgt.n	801f352 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801f334:	b134      	cbz	r4, 801f344 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801f336:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f33a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f33e:	4413      	add	r3, r2
 801f340:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801f344:	463c      	mov	r4, r7
 801f346:	e00b      	b.n	801f360 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801f348:	4b4e      	ldr	r3, [pc, #312]	; (801f484 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801f34a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f34e:	4a47      	ldr	r2, [pc, #284]	; (801f46c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801f350:	e758      	b.n	801f204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f352:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f356:	ebab 0303 	sub.w	r3, fp, r3
 801f35a:	443c      	add	r4, r7
 801f35c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f360:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f364:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f368:	1a9b      	subs	r3, r3, r2
 801f36a:	b29b      	uxth	r3, r3
 801f36c:	b219      	sxth	r1, r3
 801f36e:	2900      	cmp	r1, #0
 801f370:	dd50      	ble.n	801f414 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801f372:	9a03      	ldr	r2, [sp, #12]
 801f374:	fb02 4401 	mla	r4, r2, r1, r4
 801f378:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801f37c:	1ad3      	subs	r3, r2, r3
 801f37e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f382:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801f386:	f1bc 0f00 	cmp.w	ip, #0
 801f38a:	dd3f      	ble.n	801f40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f38c:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f390:	2e00      	cmp	r6, #0
 801f392:	dd3b      	ble.n	801f40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f394:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801f398:	2203      	movs	r2, #3
 801f39a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801f39e:	fb0a f801 	mul.w	r8, sl, r1
 801f3a2:	fb13 8802 	smlabb	r8, r3, r2, r8
 801f3a6:	9a02      	ldr	r2, [sp, #8]
 801f3a8:	4480      	add	r8, r0
 801f3aa:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801f3ae:	8812      	ldrh	r2, [r2, #0]
 801f3b0:	4584      	cmp	ip, r0
 801f3b2:	eba2 0303 	sub.w	r3, r2, r3
 801f3b6:	bfa8      	it	ge
 801f3b8:	4684      	movge	ip, r0
 801f3ba:	459c      	cmp	ip, r3
 801f3bc:	bfa8      	it	ge
 801f3be:	469c      	movge	ip, r3
 801f3c0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801f3c4:	429e      	cmp	r6, r3
 801f3c6:	bfa8      	it	ge
 801f3c8:	461e      	movge	r6, r3
 801f3ca:	4b2d      	ldr	r3, [pc, #180]	; (801f480 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801f3cc:	881b      	ldrh	r3, [r3, #0]
 801f3ce:	1a59      	subs	r1, r3, r1
 801f3d0:	4633      	mov	r3, r6
 801f3d2:	428e      	cmp	r6, r1
 801f3d4:	bfa8      	it	ge
 801f3d6:	460b      	movge	r3, r1
 801f3d8:	4562      	cmp	r2, ip
 801f3da:	9302      	str	r3, [sp, #8]
 801f3dc:	d12d      	bne.n	801f43a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801f3de:	455a      	cmp	r2, fp
 801f3e0:	d12b      	bne.n	801f43a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801f3e2:	6828      	ldr	r0, [r5, #0]
 801f3e4:	6803      	ldr	r3, [r0, #0]
 801f3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f3e8:	4798      	blx	r3
 801f3ea:	07c3      	lsls	r3, r0, #31
 801f3ec:	d51b      	bpl.n	801f426 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801f3ee:	6828      	ldr	r0, [r5, #0]
 801f3f0:	9b02      	ldr	r3, [sp, #8]
 801f3f2:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801f3f6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801f3fa:	6803      	ldr	r3, [r0, #0]
 801f3fc:	f8cd b000 	str.w	fp, [sp]
 801f400:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801f402:	4623      	mov	r3, r4
 801f404:	e899 0006 	ldmia.w	r9, {r1, r2}
 801f408:	47a8      	blx	r5
 801f40a:	4607      	mov	r7, r0
 801f40c:	4638      	mov	r0, r7
 801f40e:	b00f      	add	sp, #60	; 0x3c
 801f410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f414:	bf1f      	itttt	ne
 801f416:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801f41a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801f41e:	189b      	addne	r3, r3, r2
 801f420:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801f424:	e7ad      	b.n	801f382 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801f426:	6828      	ldr	r0, [r5, #0]
 801f428:	4642      	mov	r2, r8
 801f42a:	4621      	mov	r1, r4
 801f42c:	6803      	ldr	r3, [r0, #0]
 801f42e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801f430:	9b02      	ldr	r3, [sp, #8]
 801f432:	fb03 f30a 	mul.w	r3, r3, sl
 801f436:	47a8      	blx	r5
 801f438:	e7e8      	b.n	801f40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f43a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801f43e:	f04f 0900 	mov.w	r9, #0
 801f442:	9b02      	ldr	r3, [sp, #8]
 801f444:	454b      	cmp	r3, r9
 801f446:	dde1      	ble.n	801f40c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801f448:	6828      	ldr	r0, [r5, #0]
 801f44a:	4642      	mov	r2, r8
 801f44c:	4621      	mov	r1, r4
 801f44e:	44d0      	add	r8, sl
 801f450:	6803      	ldr	r3, [r0, #0]
 801f452:	f109 0901 	add.w	r9, r9, #1
 801f456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f458:	461e      	mov	r6, r3
 801f45a:	465b      	mov	r3, fp
 801f45c:	47b0      	blx	r6
 801f45e:	9b03      	ldr	r3, [sp, #12]
 801f460:	441c      	add	r4, r3
 801f462:	e7ee      	b.n	801f442 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801f464:	200098ec 	.word	0x200098ec
 801f468:	08029176 	.word	0x08029176
 801f46c:	08029955 	.word	0x08029955
 801f470:	08029144 	.word	0x08029144
 801f474:	0802922a 	.word	0x0802922a
 801f478:	0802927f 	.word	0x0802927f
 801f47c:	200098e4 	.word	0x200098e4
 801f480:	200098e6 	.word	0x200098e6
 801f484:	080292bd 	.word	0x080292bd

0801f488 <_ZN8touchgfx8LCD24bppC1Ev>:
 801f488:	4a0b      	ldr	r2, [pc, #44]	; (801f4b8 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801f48a:	6002      	str	r2, [r0, #0]
 801f48c:	2200      	movs	r2, #0
 801f48e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801f492:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801f496:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f49a:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801f49e:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801f4a2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801f4a6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801f4aa:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801f4ae:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801f4b2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801f4b6:	4770      	bx	lr
 801f4b8:	080295a0 	.word	0x080295a0

0801f4bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4c0:	b093      	sub	sp, #76	; 0x4c
 801f4c2:	880c      	ldrh	r4, [r1, #0]
 801f4c4:	4605      	mov	r5, r0
 801f4c6:	460f      	mov	r7, r1
 801f4c8:	4691      	mov	r9, r2
 801f4ca:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801f4ce:	b12c      	cbz	r4, 801f4dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801f4d0:	4b71      	ldr	r3, [pc, #452]	; (801f698 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f4d2:	2167      	movs	r1, #103	; 0x67
 801f4d4:	4a71      	ldr	r2, [pc, #452]	; (801f69c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801f4d6:	4872      	ldr	r0, [pc, #456]	; (801f6a0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801f4d8:	f005 ff2e 	bl	8025338 <__assert_func>
 801f4dc:	6810      	ldr	r0, [r2, #0]
 801f4de:	ae0e      	add	r6, sp, #56	; 0x38
 801f4e0:	6851      	ldr	r1, [r2, #4]
 801f4e2:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801f6a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801f4e6:	c603      	stmia	r6!, {r0, r1}
 801f4e8:	6818      	ldr	r0, [r3, #0]
 801f4ea:	ae10      	add	r6, sp, #64	; 0x40
 801f4ec:	6859      	ldr	r1, [r3, #4]
 801f4ee:	c603      	stmia	r6!, {r0, r1}
 801f4f0:	a80e      	add	r0, sp, #56	; 0x38
 801f4f2:	f7fb fb5b 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f4f6:	4649      	mov	r1, r9
 801f4f8:	a810      	add	r0, sp, #64	; 0x40
 801f4fa:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801f6a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801f4fe:	f7fb fb3d 	bl	801ab7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f502:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f506:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801f50a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801f50e:	f8d9 0000 	ldr.w	r0, [r9]
 801f512:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f516:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801f51a:	440d      	add	r5, r1
 801f51c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801f520:	440a      	add	r2, r1
 801f522:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801f526:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f52a:	4413      	add	r3, r2
 801f52c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801f530:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801f534:	930b      	str	r3, [sp, #44]	; 0x2c
 801f536:	6803      	ldr	r3, [r0, #0]
 801f538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f53c:	4798      	blx	r3
 801f53e:	2801      	cmp	r0, #1
 801f540:	d11e      	bne.n	801f580 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801f542:	220b      	movs	r2, #11
 801f544:	9008      	str	r0, [sp, #32]
 801f546:	b2b6      	uxth	r6, r6
 801f548:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801f54c:	9207      	str	r2, [sp, #28]
 801f54e:	4629      	mov	r1, r5
 801f550:	f8ba 2000 	ldrh.w	r2, [sl]
 801f554:	f8cd 8010 	str.w	r8, [sp, #16]
 801f558:	9601      	str	r6, [sp, #4]
 801f55a:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801f55e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801f562:	9203      	str	r2, [sp, #12]
 801f564:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f568:	9202      	str	r2, [sp, #8]
 801f56a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801f56e:	9200      	str	r2, [sp, #0]
 801f570:	463a      	mov	r2, r7
 801f572:	f8d9 0000 	ldr.w	r0, [r9]
 801f576:	f7f9 fdc3 	bl	8019100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f57a:	b013      	add	sp, #76	; 0x4c
 801f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f580:	f8d9 0000 	ldr.w	r0, [r9]
 801f584:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801f588:	6803      	ldr	r3, [r0, #0]
 801f58a:	6a1b      	ldr	r3, [r3, #32]
 801f58c:	4798      	blx	r3
 801f58e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801f592:	f8ba 3000 	ldrh.w	r3, [sl]
 801f596:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801f59a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801f59e:	fb01 2303 	mla	r3, r1, r3, r2
 801f5a2:	4621      	mov	r1, r4
 801f5a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5a8:	4418      	add	r0, r3
 801f5aa:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801f5ae:	930c      	str	r3, [sp, #48]	; 0x30
 801f5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5b2:	4299      	cmp	r1, r3
 801f5b4:	da6a      	bge.n	801f68c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801f5b6:	1cc2      	adds	r2, r0, #3
 801f5b8:	46aa      	mov	sl, r5
 801f5ba:	ebaa 0305 	sub.w	r3, sl, r5
 801f5be:	429e      	cmp	r6, r3
 801f5c0:	dd55      	ble.n	801f66e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801f5c2:	2404      	movs	r4, #4
 801f5c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801f5c8:	fb14 4303 	smlabb	r3, r4, r3, r4
 801f5cc:	eb07 0e03 	add.w	lr, r7, r3
 801f5d0:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801f5d4:	b184      	cbz	r4, 801f5f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f5d6:	2cff      	cmp	r4, #255	; 0xff
 801f5d8:	f817 b003 	ldrb.w	fp, [r7, r3]
 801f5dc:	d10e      	bne.n	801f5fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f5de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f5e2:	d10b      	bne.n	801f5fc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801f5e4:	f802 bc03 	strb.w	fp, [r2, #-3]
 801f5e8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801f5ec:	f802 3c02 	strb.w	r3, [r2, #-2]
 801f5f0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801f5f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f5f8:	3203      	adds	r2, #3
 801f5fa:	e7de      	b.n	801f5ba <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801f5fc:	fb08 f404 	mul.w	r4, r8, r4
 801f600:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801f604:	1c63      	adds	r3, r4, #1
 801f606:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801f60a:	121b      	asrs	r3, r3, #8
 801f60c:	b29c      	uxth	r4, r3
 801f60e:	43db      	mvns	r3, r3
 801f610:	fb1b fb04 	smulbb	fp, fp, r4
 801f614:	b2db      	uxtb	r3, r3
 801f616:	fb0c bc03 	mla	ip, ip, r3, fp
 801f61a:	fa1f fc8c 	uxth.w	ip, ip
 801f61e:	f10c 0b01 	add.w	fp, ip, #1
 801f622:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f626:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801f62a:	fb1b fb03 	smulbb	fp, fp, r3
 801f62e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f632:	f802 cc03 	strb.w	ip, [r2, #-3]
 801f636:	f89e c001 	ldrb.w	ip, [lr, #1]
 801f63a:	fb0c bc04 	mla	ip, ip, r4, fp
 801f63e:	fa1f fc8c 	uxth.w	ip, ip
 801f642:	f10c 0b01 	add.w	fp, ip, #1
 801f646:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f64a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f64e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801f652:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801f656:	f89e e002 	ldrb.w	lr, [lr, #2]
 801f65a:	fb1c f303 	smulbb	r3, ip, r3
 801f65e:	fb0e 3304 	mla	r3, lr, r4, r3
 801f662:	b29b      	uxth	r3, r3
 801f664:	1c5c      	adds	r4, r3, #1
 801f666:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f66a:	121b      	asrs	r3, r3, #8
 801f66c:	e7c2      	b.n	801f5f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801f66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f670:	3101      	adds	r1, #1
 801f672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f674:	881b      	ldrh	r3, [r3, #0]
 801f676:	1b9b      	subs	r3, r3, r6
 801f678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f67c:	4413      	add	r3, r2
 801f67e:	4418      	add	r0, r3
 801f680:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801f684:	1b9b      	subs	r3, r3, r6
 801f686:	444b      	add	r3, r9
 801f688:	441d      	add	r5, r3
 801f68a:	e791      	b.n	801f5b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801f68c:	4b05      	ldr	r3, [pc, #20]	; (801f6a4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801f68e:	6818      	ldr	r0, [r3, #0]
 801f690:	6803      	ldr	r3, [r0, #0]
 801f692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f694:	4798      	blx	r3
 801f696:	e770      	b.n	801f57a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801f698:	080290a8 	.word	0x080290a8
 801f69c:	08029777 	.word	0x08029777
 801f6a0:	08029144 	.word	0x08029144
 801f6a4:	200098ec 	.word	0x200098ec
 801f6a8:	200098e4 	.word	0x200098e4

0801f6ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6b0:	4614      	mov	r4, r2
 801f6b2:	880a      	ldrh	r2, [r1, #0]
 801f6b4:	b091      	sub	sp, #68	; 0x44
 801f6b6:	4680      	mov	r8, r0
 801f6b8:	2a01      	cmp	r2, #1
 801f6ba:	460e      	mov	r6, r1
 801f6bc:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801f6c0:	d005      	beq.n	801f6ce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801f6c2:	4b6d      	ldr	r3, [pc, #436]	; (801f878 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801f6c4:	21b5      	movs	r1, #181	; 0xb5
 801f6c6:	4a6d      	ldr	r2, [pc, #436]	; (801f87c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801f6c8:	486d      	ldr	r0, [pc, #436]	; (801f880 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801f6ca:	f005 fe35 	bl	8025338 <__assert_func>
 801f6ce:	6820      	ldr	r0, [r4, #0]
 801f6d0:	ad0c      	add	r5, sp, #48	; 0x30
 801f6d2:	6861      	ldr	r1, [r4, #4]
 801f6d4:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801f884 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801f6d8:	c503      	stmia	r5!, {r0, r1}
 801f6da:	6818      	ldr	r0, [r3, #0]
 801f6dc:	ad0e      	add	r5, sp, #56	; 0x38
 801f6de:	6859      	ldr	r1, [r3, #4]
 801f6e0:	c503      	stmia	r5!, {r0, r1}
 801f6e2:	a80c      	add	r0, sp, #48	; 0x30
 801f6e4:	f7fb fa62 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f6e8:	4621      	mov	r1, r4
 801f6ea:	a80e      	add	r0, sp, #56	; 0x38
 801f6ec:	f7fb fa46 	bl	801ab7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f6f0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f6f4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801f6f8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801f6fc:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801f700:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f704:	eb08 0401 	add.w	r4, r8, r1
 801f708:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801f70c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801f888 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801f710:	440a      	add	r2, r1
 801f712:	f8d8 0000 	ldr.w	r0, [r8]
 801f716:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801f71a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801f71e:	4413      	add	r3, r2
 801f720:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801f724:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801f728:	930a      	str	r3, [sp, #40]	; 0x28
 801f72a:	6803      	ldr	r3, [r0, #0]
 801f72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f730:	4798      	blx	r3
 801f732:	2801      	cmp	r0, #1
 801f734:	d11e      	bne.n	801f774 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801f736:	220b      	movs	r2, #11
 801f738:	9008      	str	r0, [sp, #32]
 801f73a:	b2ad      	uxth	r5, r5
 801f73c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801f740:	9207      	str	r2, [sp, #28]
 801f742:	4621      	mov	r1, r4
 801f744:	f8b9 2000 	ldrh.w	r2, [r9]
 801f748:	9501      	str	r5, [sp, #4]
 801f74a:	9206      	str	r2, [sp, #24]
 801f74c:	2200      	movs	r2, #0
 801f74e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801f752:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801f756:	9203      	str	r2, [sp, #12]
 801f758:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f75c:	9202      	str	r2, [sp, #8]
 801f75e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801f762:	9200      	str	r2, [sp, #0]
 801f764:	4632      	mov	r2, r6
 801f766:	f8d8 0000 	ldr.w	r0, [r8]
 801f76a:	f7f9 fcc9 	bl	8019100 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f76e:	b011      	add	sp, #68	; 0x44
 801f770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f774:	f8d8 0000 	ldr.w	r0, [r8]
 801f778:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801f77c:	6803      	ldr	r3, [r0, #0]
 801f77e:	6a1b      	ldr	r3, [r3, #32]
 801f780:	4798      	blx	r3
 801f782:	f8b9 3000 	ldrh.w	r3, [r9]
 801f786:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801f78a:	f04f 0e00 	mov.w	lr, #0
 801f78e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801f792:	fa1f f987 	uxth.w	r9, r7
 801f796:	fb01 2303 	mla	r3, r1, r3, r2
 801f79a:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801f79e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7a2:	b289      	uxth	r1, r1
 801f7a4:	4418      	add	r0, r3
 801f7a6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f7aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7ae:	459e      	cmp	lr, r3
 801f7b0:	da5c      	bge.n	801f86c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801f7b2:	1cc3      	adds	r3, r0, #3
 801f7b4:	46a2      	mov	sl, r4
 801f7b6:	ebaa 0204 	sub.w	r2, sl, r4
 801f7ba:	4295      	cmp	r5, r2
 801f7bc:	dd46      	ble.n	801f84c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801f7be:	f04f 0c03 	mov.w	ip, #3
 801f7c2:	f04f 0b04 	mov.w	fp, #4
 801f7c6:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801f7ca:	2fff      	cmp	r7, #255	; 0xff
 801f7cc:	fb1c b202 	smlabb	r2, ip, r2, fp
 801f7d0:	eb06 0c02 	add.w	ip, r6, r2
 801f7d4:	f816 b002 	ldrb.w	fp, [r6, r2]
 801f7d8:	d02f      	beq.n	801f83a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801f7da:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801f7de:	fb12 f201 	smulbb	r2, r2, r1
 801f7e2:	fb0b 2209 	mla	r2, fp, r9, r2
 801f7e6:	b292      	uxth	r2, r2
 801f7e8:	f102 0b01 	add.w	fp, r2, #1
 801f7ec:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f7f0:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801f7f4:	fb1b fb01 	smulbb	fp, fp, r1
 801f7f8:	1212      	asrs	r2, r2, #8
 801f7fa:	f803 2c03 	strb.w	r2, [r3, #-3]
 801f7fe:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f802:	fb02 b209 	mla	r2, r2, r9, fp
 801f806:	b292      	uxth	r2, r2
 801f808:	f102 0b01 	add.w	fp, r2, #1
 801f80c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801f810:	1212      	asrs	r2, r2, #8
 801f812:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f816:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f81a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801f81e:	fb1c fc01 	smulbb	ip, ip, r1
 801f822:	fb02 c209 	mla	r2, r2, r9, ip
 801f826:	b292      	uxth	r2, r2
 801f828:	f102 0c01 	add.w	ip, r2, #1
 801f82c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f830:	1212      	asrs	r2, r2, #8
 801f832:	f803 2c01 	strb.w	r2, [r3, #-1]
 801f836:	3303      	adds	r3, #3
 801f838:	e7bd      	b.n	801f7b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801f83a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801f83e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f842:	f803 2c02 	strb.w	r2, [r3, #-2]
 801f846:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801f84a:	e7f2      	b.n	801f832 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801f84c:	4b0d      	ldr	r3, [pc, #52]	; (801f884 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801f84e:	f10e 0e01 	add.w	lr, lr, #1
 801f852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f854:	881b      	ldrh	r3, [r3, #0]
 801f856:	1b5b      	subs	r3, r3, r5
 801f858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f85c:	4413      	add	r3, r2
 801f85e:	4418      	add	r0, r3
 801f860:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f864:	1b5b      	subs	r3, r3, r5
 801f866:	4443      	add	r3, r8
 801f868:	441c      	add	r4, r3
 801f86a:	e79f      	b.n	801f7ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801f86c:	4b06      	ldr	r3, [pc, #24]	; (801f888 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801f86e:	6818      	ldr	r0, [r3, #0]
 801f870:	6803      	ldr	r3, [r0, #0]
 801f872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f874:	4798      	blx	r3
 801f876:	e77a      	b.n	801f76e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801f878:	08028fb4 	.word	0x08028fb4
 801f87c:	0802966a 	.word	0x0802966a
 801f880:	08029144 	.word	0x08029144
 801f884:	200098e4 	.word	0x200098e4
 801f888:	200098ec 	.word	0x200098ec

0801f88c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801f88c:	b570      	push	{r4, r5, r6, lr}
 801f88e:	780d      	ldrb	r5, [r1, #0]
 801f890:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801f894:	2d01      	cmp	r5, #1
 801f896:	d00d      	beq.n	801f8b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801f898:	d307      	bcc.n	801f8aa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801f89a:	2d02      	cmp	r5, #2
 801f89c:	d10f      	bne.n	801f8be <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801f89e:	4b08      	ldr	r3, [pc, #32]	; (801f8c0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801f8a0:	215a      	movs	r1, #90	; 0x5a
 801f8a2:	4a08      	ldr	r2, [pc, #32]	; (801f8c4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801f8a4:	4808      	ldr	r0, [pc, #32]	; (801f8c8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801f8a6:	f005 fd47 	bl	8025338 <__assert_func>
 801f8aa:	9404      	str	r4, [sp, #16]
 801f8ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f8b0:	f7ff be04 	b.w	801f4bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801f8b4:	9404      	str	r4, [sp, #16]
 801f8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f8ba:	f7ff bef7 	b.w	801f6ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801f8be:	bd70      	pop	{r4, r5, r6, pc}
 801f8c0:	08028f69 	.word	0x08028f69
 801f8c4:	080295e8 	.word	0x080295e8
 801f8c8:	08029144 	.word	0x08029144

0801f8cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8d0:	b08b      	sub	sp, #44	; 0x2c
 801f8d2:	460c      	mov	r4, r1
 801f8d4:	4680      	mov	r8, r0
 801f8d6:	469a      	mov	sl, r3
 801f8d8:	6808      	ldr	r0, [r1, #0]
 801f8da:	ab06      	add	r3, sp, #24
 801f8dc:	6849      	ldr	r1, [r1, #4]
 801f8de:	c303      	stmia	r3!, {r0, r1}
 801f8e0:	6810      	ldr	r0, [r2, #0]
 801f8e2:	ab08      	add	r3, sp, #32
 801f8e4:	6851      	ldr	r1, [r2, #4]
 801f8e6:	c303      	stmia	r3!, {r0, r1}
 801f8e8:	a806      	add	r0, sp, #24
 801f8ea:	f7fb f95f 	bl	801abac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8ee:	4621      	mov	r1, r4
 801f8f0:	a808      	add	r0, sp, #32
 801f8f2:	4c61      	ldr	r4, [pc, #388]	; (801fa78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801f8f4:	f7fb f942 	bl	801ab7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f8f8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f8fc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f900:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f904:	6820      	ldr	r0, [r4, #0]
 801f906:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f90a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801f90e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801f912:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801f916:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f91a:	440a      	add	r2, r1
 801f91c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f920:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f924:	4413      	add	r3, r2
 801f926:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f92a:	6803      	ldr	r3, [r0, #0]
 801f92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f92e:	4798      	blx	r3
 801f930:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f934:	d118      	bne.n	801f968 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f936:	f010 0f20 	tst.w	r0, #32
 801f93a:	6820      	ldr	r0, [r4, #0]
 801f93c:	d017      	beq.n	801f96e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f93e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f942:	b2bf      	uxth	r7, r7
 801f944:	6801      	ldr	r1, [r0, #0]
 801f946:	9402      	str	r4, [sp, #8]
 801f948:	fa1f f489 	uxth.w	r4, r9
 801f94c:	f8cd a00c 	str.w	sl, [sp, #12]
 801f950:	9401      	str	r4, [sp, #4]
 801f952:	9700      	str	r7, [sp, #0]
 801f954:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f958:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801f95a:	4641      	mov	r1, r8
 801f95c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f960:	47a0      	blx	r4
 801f962:	b00b      	add	sp, #44	; 0x2c
 801f964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f968:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f96c:	e7e5      	b.n	801f93a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801f96e:	6803      	ldr	r3, [r0, #0]
 801f970:	6a1b      	ldr	r3, [r3, #32]
 801f972:	4798      	blx	r3
 801f974:	4b41      	ldr	r3, [pc, #260]	; (801fa7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801f976:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f97a:	f04f 0c00 	mov.w	ip, #0
 801f97e:	881a      	ldrh	r2, [r3, #0]
 801f980:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f984:	fb04 1202 	mla	r2, r4, r2, r1
 801f988:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f98c:	4410      	add	r0, r2
 801f98e:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801f992:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801f996:	0092      	lsls	r2, r2, #2
 801f998:	9105      	str	r1, [sp, #20]
 801f99a:	9204      	str	r2, [sp, #16]
 801f99c:	45cc      	cmp	ip, r9
 801f99e:	da65      	bge.n	801fa6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801f9a0:	1cc4      	adds	r4, r0, #3
 801f9a2:	f108 0504 	add.w	r5, r8, #4
 801f9a6:	f04f 0e00 	mov.w	lr, #0
 801f9aa:	45be      	cmp	lr, r7
 801f9ac:	da4d      	bge.n	801fa4a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801f9ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801f9b2:	b181      	cbz	r1, 801f9d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f9b4:	29ff      	cmp	r1, #255	; 0xff
 801f9b6:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801f9ba:	d111      	bne.n	801f9e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f9bc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f9c0:	d10e      	bne.n	801f9e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801f9c2:	f804 bc03 	strb.w	fp, [r4, #-3]
 801f9c6:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801f9ca:	f804 2c02 	strb.w	r2, [r4, #-2]
 801f9ce:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801f9d2:	f804 2c01 	strb.w	r2, [r4, #-1]
 801f9d6:	f10e 0e01 	add.w	lr, lr, #1
 801f9da:	3403      	adds	r4, #3
 801f9dc:	3504      	adds	r5, #4
 801f9de:	e7e4      	b.n	801f9aa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801f9e0:	fb0a f101 	mul.w	r1, sl, r1
 801f9e4:	1c4a      	adds	r2, r1, #1
 801f9e6:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801f9ea:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801f9ee:	1212      	asrs	r2, r2, #8
 801f9f0:	b296      	uxth	r6, r2
 801f9f2:	43d2      	mvns	r2, r2
 801f9f4:	fb1b fb06 	smulbb	fp, fp, r6
 801f9f8:	b2d2      	uxtb	r2, r2
 801f9fa:	fb01 b102 	mla	r1, r1, r2, fp
 801f9fe:	b289      	uxth	r1, r1
 801fa00:	f101 0b01 	add.w	fp, r1, #1
 801fa04:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801fa08:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801fa0c:	fb1b fb02 	smulbb	fp, fp, r2
 801fa10:	1209      	asrs	r1, r1, #8
 801fa12:	f804 1c03 	strb.w	r1, [r4, #-3]
 801fa16:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801fa1a:	fb01 b106 	mla	r1, r1, r6, fp
 801fa1e:	b289      	uxth	r1, r1
 801fa20:	f101 0b01 	add.w	fp, r1, #1
 801fa24:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801fa28:	1209      	asrs	r1, r1, #8
 801fa2a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801fa2e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fa32:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801fa36:	fb11 f202 	smulbb	r2, r1, r2
 801fa3a:	fb0b 2206 	mla	r2, fp, r6, r2
 801fa3e:	b292      	uxth	r2, r2
 801fa40:	1c56      	adds	r6, r2, #1
 801fa42:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801fa46:	1212      	asrs	r2, r2, #8
 801fa48:	e7c3      	b.n	801f9d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801fa4a:	881a      	ldrh	r2, [r3, #0]
 801fa4c:	f10c 0c01 	add.w	ip, ip, #1
 801fa50:	9905      	ldr	r1, [sp, #20]
 801fa52:	1bd2      	subs	r2, r2, r7
 801fa54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa58:	440a      	add	r2, r1
 801fa5a:	9904      	ldr	r1, [sp, #16]
 801fa5c:	4410      	add	r0, r2
 801fa5e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801fa62:	1bd2      	subs	r2, r2, r7
 801fa64:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801fa68:	4490      	add	r8, r2
 801fa6a:	e797      	b.n	801f99c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801fa6c:	4b02      	ldr	r3, [pc, #8]	; (801fa78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801fa6e:	6818      	ldr	r0, [r3, #0]
 801fa70:	6803      	ldr	r3, [r0, #0]
 801fa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa74:	4798      	blx	r3
 801fa76:	e774      	b.n	801f962 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801fa78:	200098ec 	.word	0x200098ec
 801fa7c:	200098e4 	.word	0x200098e4

0801fa80 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801fa80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fa84:	b085      	sub	sp, #20
 801fa86:	4606      	mov	r6, r0
 801fa88:	460c      	mov	r4, r1
 801fa8a:	4691      	mov	r9, r2
 801fa8c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801fa90:	4698      	mov	r8, r3
 801fa92:	b385      	cbz	r5, 801faf6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801fa94:	4608      	mov	r0, r1
 801fa96:	f7fd fae5 	bl	801d064 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801fa9a:	4607      	mov	r7, r0
 801fa9c:	4620      	mov	r0, r4
 801fa9e:	f7fd fb1b 	bl	801d0d8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801faa2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801faa6:	4620      	mov	r0, r4
 801faa8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801faac:	f8ad 800a 	strh.w	r8, [sp, #10]
 801fab0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801fab4:	f7fd fc62 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fab8:	2801      	cmp	r0, #1
 801faba:	d00f      	beq.n	801fadc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801fabc:	4620      	mov	r0, r4
 801fabe:	f7fd fc5d 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fac2:	2802      	cmp	r0, #2
 801fac4:	d00a      	beq.n	801fadc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801fac6:	4620      	mov	r0, r4
 801fac8:	f7fd fc58 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801facc:	280b      	cmp	r0, #11
 801face:	d005      	beq.n	801fadc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801fad0:	4b1b      	ldr	r3, [pc, #108]	; (801fb40 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801fad2:	2142      	movs	r1, #66	; 0x42
 801fad4:	4a1b      	ldr	r2, [pc, #108]	; (801fb44 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801fad6:	481c      	ldr	r0, [pc, #112]	; (801fb48 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801fad8:	f005 fc2e 	bl	8025338 <__assert_func>
 801fadc:	4620      	mov	r0, r4
 801fade:	f7fd fc4d 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fae2:	2802      	cmp	r0, #2
 801fae4:	4620      	mov	r0, r4
 801fae6:	d109      	bne.n	801fafc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801fae8:	f7fd fbc4 	bl	801d274 <_ZNK8touchgfx6Bitmap7getDataEv>
 801faec:	462b      	mov	r3, r5
 801faee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801faf0:	a902      	add	r1, sp, #8
 801faf2:	f7ff feeb 	bl	801f8cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801faf6:	b005      	add	sp, #20
 801faf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fafc:	f7fd fc3e 	bl	801d37c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801fb00:	280b      	cmp	r0, #11
 801fb02:	d10e      	bne.n	801fb22 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801fb04:	4620      	mov	r0, r4
 801fb06:	f7fd fbb5 	bl	801d274 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fb0a:	4606      	mov	r6, r0
 801fb0c:	4620      	mov	r0, r4
 801fb0e:	f7fd fbe3 	bl	801d2d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801fb12:	9500      	str	r5, [sp, #0]
 801fb14:	4601      	mov	r1, r0
 801fb16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb18:	aa02      	add	r2, sp, #8
 801fb1a:	4630      	mov	r0, r6
 801fb1c:	f7ff feb6 	bl	801f88c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801fb20:	e7e9      	b.n	801faf6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801fb22:	6833      	ldr	r3, [r6, #0]
 801fb24:	4620      	mov	r0, r4
 801fb26:	691f      	ldr	r7, [r3, #16]
 801fb28:	f7fd fba4 	bl	801d274 <_ZNK8touchgfx6Bitmap7getDataEv>
 801fb2c:	2300      	movs	r3, #0
 801fb2e:	4601      	mov	r1, r0
 801fb30:	aa02      	add	r2, sp, #8
 801fb32:	4630      	mov	r0, r6
 801fb34:	e9cd 5300 	strd	r5, r3, [sp]
 801fb38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fb3a:	47b8      	blx	r7
 801fb3c:	e7db      	b.n	801faf6 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801fb3e:	bf00      	nop
 801fb40:	08029002 	.word	0x08029002
 801fb44:	080296f3 	.word	0x080296f3
 801fb48:	08029144 	.word	0x08029144

0801fb4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801fb4c:	b570      	push	{r4, r5, r6, lr}
 801fb4e:	9d04      	ldr	r5, [sp, #16]
 801fb50:	460c      	mov	r4, r1
 801fb52:	4619      	mov	r1, r3
 801fb54:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801fb58:	2a0c      	cmp	r2, #12
 801fb5a:	d826      	bhi.n	801fbaa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801fb5c:	e8df f002 	tbb	[pc, r2]
 801fb60:	200e1407 	.word	0x200e1407
 801fb64:	20202020 	.word	0x20202020
 801fb68:	20202020 	.word	0x20202020
 801fb6c:	20          	.byte	0x20
 801fb6d:	00          	.byte	0x00
 801fb6e:	4b0f      	ldr	r3, [pc, #60]	; (801fbac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801fb70:	f240 117f 	movw	r1, #383	; 0x17f
 801fb74:	4a0e      	ldr	r2, [pc, #56]	; (801fbb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801fb76:	480f      	ldr	r0, [pc, #60]	; (801fbb4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801fb78:	f005 fbde 	bl	8025338 <__assert_func>
 801fb7c:	462a      	mov	r2, r5
 801fb7e:	4620      	mov	r0, r4
 801fb80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb84:	f7ff bea2 	b.w	801f8cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801fb88:	6802      	ldr	r2, [r0, #0]
 801fb8a:	2600      	movs	r6, #0
 801fb8c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801fb90:	6916      	ldr	r6, [r2, #16]
 801fb92:	462b      	mov	r3, r5
 801fb94:	460a      	mov	r2, r1
 801fb96:	4621      	mov	r1, r4
 801fb98:	46b4      	mov	ip, r6
 801fb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb9e:	4760      	bx	ip
 801fba0:	4b05      	ldr	r3, [pc, #20]	; (801fbb8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801fba2:	f240 1191 	movw	r1, #401	; 0x191
 801fba6:	4a02      	ldr	r2, [pc, #8]	; (801fbb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801fba8:	e7e5      	b.n	801fb76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801fbaa:	bd70      	pop	{r4, r5, r6, pc}
 801fbac:	0802931d 	.word	0x0802931d
 801fbb0:	080299db 	.word	0x080299db
 801fbb4:	08029144 	.word	0x08029144
 801fbb8:	0802935e 	.word	0x0802935e

0801fbbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801fbbc:	b158      	cbz	r0, 801fbd6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801fbbe:	2902      	cmp	r1, #2
 801fbc0:	d00f      	beq.n	801fbe2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801fbc2:	2903      	cmp	r1, #3
 801fbc4:	d010      	beq.n	801fbe8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801fbc6:	2901      	cmp	r1, #1
 801fbc8:	d101      	bne.n	801fbce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fbca:	2001      	movs	r0, #1
 801fbcc:	4770      	bx	lr
 801fbce:	4b08      	ldr	r3, [pc, #32]	; (801fbf0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801fbd0:	8819      	ldrh	r1, [r3, #0]
 801fbd2:	4248      	negs	r0, r1
 801fbd4:	4770      	bx	lr
 801fbd6:	2902      	cmp	r1, #2
 801fbd8:	d006      	beq.n	801fbe8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801fbda:	2903      	cmp	r1, #3
 801fbdc:	d0f7      	beq.n	801fbce <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801fbde:	2901      	cmp	r1, #1
 801fbe0:	d1f3      	bne.n	801fbca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801fbe2:	4b03      	ldr	r3, [pc, #12]	; (801fbf0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801fbe4:	8818      	ldrh	r0, [r3, #0]
 801fbe6:	4770      	bx	lr
 801fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 801fbec:	4770      	bx	lr
 801fbee:	bf00      	nop
 801fbf0:	200098e4 	.word	0x200098e4

0801fbf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801fbf4:	b170      	cbz	r0, 801fc14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801fbf6:	2902      	cmp	r1, #2
 801fbf8:	d012      	beq.n	801fc20 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801fbfa:	2903      	cmp	r1, #3
 801fbfc:	d006      	beq.n	801fc0c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801fbfe:	2901      	cmp	r1, #1
 801fc00:	d001      	beq.n	801fc06 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801fc02:	2001      	movs	r0, #1
 801fc04:	4770      	bx	lr
 801fc06:	4b08      	ldr	r3, [pc, #32]	; (801fc28 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801fc08:	8818      	ldrh	r0, [r3, #0]
 801fc0a:	4770      	bx	lr
 801fc0c:	4b06      	ldr	r3, [pc, #24]	; (801fc28 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801fc0e:	8818      	ldrh	r0, [r3, #0]
 801fc10:	4240      	negs	r0, r0
 801fc12:	4770      	bx	lr
 801fc14:	2902      	cmp	r1, #2
 801fc16:	d0f9      	beq.n	801fc0c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801fc18:	2903      	cmp	r1, #3
 801fc1a:	d0f2      	beq.n	801fc02 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801fc1c:	2901      	cmp	r1, #1
 801fc1e:	d1f2      	bne.n	801fc06 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801fc20:	f04f 30ff 	mov.w	r0, #4294967295
 801fc24:	4770      	bx	lr
 801fc26:	bf00      	nop
 801fc28:	200098e4 	.word	0x200098e4

0801fc2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801fc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc30:	b095      	sub	sp, #84	; 0x54
 801fc32:	9109      	str	r1, [sp, #36]	; 0x24
 801fc34:	a910      	add	r1, sp, #64	; 0x40
 801fc36:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801fc3a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801fc3e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801fc42:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801fc46:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801fc4a:	e881 000c 	stmia.w	r1, {r2, r3}
 801fc4e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801fc52:	9306      	str	r3, [sp, #24]
 801fc54:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801fc58:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801fc5c:	930e      	str	r3, [sp, #56]	; 0x38
 801fc5e:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801fc62:	798f      	ldrb	r7, [r1, #6]
 801fc64:	930a      	str	r3, [sp, #40]	; 0x28
 801fc66:	7b4b      	ldrb	r3, [r1, #13]
 801fc68:	0158      	lsls	r0, r3, #5
 801fc6a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801fc6e:	4338      	orrs	r0, r7
 801fc70:	9008      	str	r0, [sp, #32]
 801fc72:	f000 8174 	beq.w	801ff5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801fc76:	011b      	lsls	r3, r3, #4
 801fc78:	79c8      	ldrb	r0, [r1, #7]
 801fc7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fc7e:	4303      	orrs	r3, r0
 801fc80:	9307      	str	r3, [sp, #28]
 801fc82:	f000 816c 	beq.w	801ff5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801fc86:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801fc8a:	b29b      	uxth	r3, r3
 801fc8c:	2e00      	cmp	r6, #0
 801fc8e:	f000 8112 	beq.w	801feb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801fc92:	1af6      	subs	r6, r6, r3
 801fc94:	b2b6      	uxth	r6, r6
 801fc96:	0433      	lsls	r3, r6, #16
 801fc98:	d502      	bpl.n	801fca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801fc9a:	1bad      	subs	r5, r5, r6
 801fc9c:	2600      	movs	r6, #0
 801fc9e:	b22d      	sxth	r5, r5
 801fca0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801fca4:	a810      	add	r0, sp, #64	; 0x40
 801fca6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801fcaa:	428d      	cmp	r5, r1
 801fcac:	b28b      	uxth	r3, r1
 801fcae:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801fcb2:	bfbf      	itttt	lt
 801fcb4:	18f6      	addlt	r6, r6, r3
 801fcb6:	1b75      	sublt	r5, r6, r5
 801fcb8:	b2ae      	uxthlt	r6, r5
 801fcba:	460d      	movlt	r5, r1
 801fcbc:	8891      	ldrh	r1, [r2, #4]
 801fcbe:	440b      	add	r3, r1
 801fcc0:	4629      	mov	r1, r5
 801fcc2:	b21b      	sxth	r3, r3
 801fcc4:	930d      	str	r3, [sp, #52]	; 0x34
 801fcc6:	88d3      	ldrh	r3, [r2, #6]
 801fcc8:	9a06      	ldr	r2, [sp, #24]
 801fcca:	449a      	add	sl, r3
 801fccc:	fa0f f38a 	sxth.w	r3, sl
 801fcd0:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801fcd4:	930c      	str	r3, [sp, #48]	; 0x30
 801fcd6:	4bb8      	ldr	r3, [pc, #736]	; (801ffb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801fcd8:	f893 b000 	ldrb.w	fp, [r3]
 801fcdc:	f10b 3cff 	add.w	ip, fp, #4294967295
 801fce0:	f1dc 0300 	rsbs	r3, ip, #0
 801fce4:	eb43 030c 	adc.w	r3, r3, ip
 801fce8:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcea:	464b      	mov	r3, r9
 801fcec:	f7fa fe38 	bl	801a960 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801fcf0:	4629      	mov	r1, r5
 801fcf2:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801fcf6:	464b      	mov	r3, r9
 801fcf8:	9a06      	ldr	r2, [sp, #24]
 801fcfa:	a810      	add	r0, sp, #64	; 0x40
 801fcfc:	f7fa fe48 	bl	801a990 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801fd00:	a914      	add	r1, sp, #80	; 0x50
 801fd02:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801fd06:	a813      	add	r0, sp, #76	; 0x4c
 801fd08:	f7fa ff22 	bl	801ab50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801fd0c:	f1b9 0f00 	cmp.w	r9, #0
 801fd10:	f040 80d4 	bne.w	801febc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801fd14:	f1bb 0f01 	cmp.w	fp, #1
 801fd18:	f040 80d8 	bne.w	801fecc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801fd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	f040 8122 	bne.w	801ff68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801fd24:	4ba5      	ldr	r3, [pc, #660]	; (801ffbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801fd26:	6818      	ldr	r0, [r3, #0]
 801fd28:	6803      	ldr	r3, [r0, #0]
 801fd2a:	6a1b      	ldr	r3, [r3, #32]
 801fd2c:	4798      	blx	r3
 801fd2e:	4aa4      	ldr	r2, [pc, #656]	; (801ffc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801fd30:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801fd34:	8811      	ldrh	r1, [r2, #0]
 801fd36:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801fd3a:	fb01 2303 	mla	r3, r1, r3, r2
 801fd3e:	2201      	movs	r2, #1
 801fd40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fd44:	4590      	cmp	r8, r2
 801fd46:	4403      	add	r3, r0
 801fd48:	9307      	str	r3, [sp, #28]
 801fd4a:	fa02 f308 	lsl.w	r3, r2, r8
 801fd4e:	f103 33ff 	add.w	r3, r3, #4294967295
 801fd52:	b2db      	uxtb	r3, r3
 801fd54:	930f      	str	r3, [sp, #60]	; 0x3c
 801fd56:	f000 8109 	beq.w	801ff6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801fd5a:	f1b8 0f02 	cmp.w	r8, #2
 801fd5e:	f000 813e 	beq.w	801ffde <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801fd62:	f1b8 0f04 	cmp.w	r8, #4
 801fd66:	f000 8132 	beq.w	801ffce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801fd6a:	b906      	cbnz	r6, 801fd6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801fd6c:	b174      	cbz	r4, 801fd8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801fd6e:	fb17 6304 	smlabb	r3, r7, r4, r6
 801fd72:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fd74:	ebaa 0a04 	sub.w	sl, sl, r4
 801fd78:	fb13 f308 	smulbb	r3, r3, r8
 801fd7c:	fa1f fa8a 	uxth.w	sl, sl
 801fd80:	b29b      	uxth	r3, r3
 801fd82:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801fd86:	f003 0407 	and.w	r4, r3, #7
 801fd8a:	9124      	str	r1, [sp, #144]	; 0x90
 801fd8c:	4649      	mov	r1, r9
 801fd8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fd90:	f7ff ff14 	bl	801fbbc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801fd94:	4649      	mov	r1, r9
 801fd96:	4683      	mov	fp, r0
 801fd98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fd9a:	f7ff ff2b 	bl	801fbf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801fd9e:	9906      	ldr	r1, [sp, #24]
 801fda0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fda2:	1bad      	subs	r5, r5, r6
 801fda4:	1a5b      	subs	r3, r3, r1
 801fda6:	459a      	cmp	sl, r3
 801fda8:	bfa8      	it	ge
 801fdaa:	469a      	movge	sl, r3
 801fdac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fdae:	1b5d      	subs	r5, r3, r5
 801fdb0:	9b08      	ldr	r3, [sp, #32]
 801fdb2:	429d      	cmp	r5, r3
 801fdb4:	bfd4      	ite	le
 801fdb6:	ebc6 0605 	rsble	r6, r6, r5
 801fdba:	ebc6 0603 	rsbgt	r6, r6, r3
 801fdbe:	1bbf      	subs	r7, r7, r6
 801fdc0:	fb0b 0016 	mls	r0, fp, r6, r0
 801fdc4:	fb08 f307 	mul.w	r3, r8, r7
 801fdc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fdcc:	9308      	str	r3, [sp, #32]
 801fdce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdd0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801fdd4:	930b      	str	r3, [sp, #44]	; 0x2c
 801fdd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fddc:	930c      	str	r3, [sp, #48]	; 0x30
 801fdde:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fde0:	b2db      	uxtb	r3, r3
 801fde2:	930d      	str	r3, [sp, #52]	; 0x34
 801fde4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fde6:	7819      	ldrb	r1, [r3, #0]
 801fde8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801fdec:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801fdf0:	4121      	asrs	r1, r4
 801fdf2:	9306      	str	r3, [sp, #24]
 801fdf4:	fb03 0b0b 	mla	fp, r3, fp, r0
 801fdf8:	b2c9      	uxtb	r1, r1
 801fdfa:	f1ba 0f00 	cmp.w	sl, #0
 801fdfe:	f340 80d1 	ble.w	801ffa4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801fe02:	46b6      	mov	lr, r6
 801fe04:	9807      	ldr	r0, [sp, #28]
 801fe06:	f1be 0f00 	cmp.w	lr, #0
 801fe0a:	f340 80b8 	ble.w	801ff7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801fe0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe10:	400b      	ands	r3, r1
 801fe12:	d03e      	beq.n	801fe92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801fe14:	fb13 f302 	smulbb	r3, r3, r2
 801fe18:	2bfe      	cmp	r3, #254	; 0xfe
 801fe1a:	dd03      	ble.n	801fe24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801fe1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fe1e:	2dff      	cmp	r5, #255	; 0xff
 801fe20:	f000 80a6 	beq.w	801ff70 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801fe24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fe26:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fe28:	fb15 f303 	smulbb	r3, r5, r3
 801fe2c:	b29b      	uxth	r3, r3
 801fe2e:	1c5d      	adds	r5, r3, #1
 801fe30:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801fe34:	7805      	ldrb	r5, [r0, #0]
 801fe36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fe3a:	fa1f fc83 	uxth.w	ip, r3
 801fe3e:	43db      	mvns	r3, r3
 801fe40:	fb17 f90c 	smulbb	r9, r7, ip
 801fe44:	b2db      	uxtb	r3, r3
 801fe46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fe48:	fb05 9503 	mla	r5, r5, r3, r9
 801fe4c:	b2ad      	uxth	r5, r5
 801fe4e:	f105 0901 	add.w	r9, r5, #1
 801fe52:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fe56:	fb17 f90c 	smulbb	r9, r7, ip
 801fe5a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fe5c:	122d      	asrs	r5, r5, #8
 801fe5e:	fb17 fc0c 	smulbb	ip, r7, ip
 801fe62:	7005      	strb	r5, [r0, #0]
 801fe64:	7845      	ldrb	r5, [r0, #1]
 801fe66:	fb05 9503 	mla	r5, r5, r3, r9
 801fe6a:	b2ad      	uxth	r5, r5
 801fe6c:	f105 0901 	add.w	r9, r5, #1
 801fe70:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801fe74:	122d      	asrs	r5, r5, #8
 801fe76:	7045      	strb	r5, [r0, #1]
 801fe78:	7885      	ldrb	r5, [r0, #2]
 801fe7a:	fb05 cc03 	mla	ip, r5, r3, ip
 801fe7e:	fa1f fc8c 	uxth.w	ip, ip
 801fe82:	f10c 0301 	add.w	r3, ip, #1
 801fe86:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fe8a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe8e:	f880 c002 	strb.w	ip, [r0, #2]
 801fe92:	4444      	add	r4, r8
 801fe94:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fe98:	b2a4      	uxth	r4, r4
 801fe9a:	2c07      	cmp	r4, #7
 801fe9c:	bf89      	itett	hi
 801fe9e:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801fea0:	fa41 f108 	asrls.w	r1, r1, r8
 801fea4:	2400      	movhi	r4, #0
 801fea6:	7859      	ldrbhi	r1, [r3, #1]
 801fea8:	bf8a      	itet	hi
 801feaa:	3301      	addhi	r3, #1
 801feac:	b2c9      	uxtbls	r1, r1
 801feae:	9324      	strhi	r3, [sp, #144]	; 0x90
 801feb0:	9b06      	ldr	r3, [sp, #24]
 801feb2:	4418      	add	r0, r3
 801feb4:	e7a7      	b.n	801fe06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801feb6:	441d      	add	r5, r3
 801feb8:	b22d      	sxth	r5, r5
 801feba:	e6f1      	b.n	801fca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801febc:	f1b9 0f01 	cmp.w	r9, #1
 801fec0:	f47f af2c 	bne.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fec4:	f1bb 0f01 	cmp.w	fp, #1
 801fec8:	f47f af28 	bne.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801fecc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801ffbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801fed0:	f8db 0000 	ldr.w	r0, [fp]
 801fed4:	6803      	ldr	r3, [r0, #0]
 801fed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fed8:	4798      	blx	r3
 801feda:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801fede:	465a      	mov	r2, fp
 801fee0:	d006      	beq.n	801fef0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801fee2:	f1b8 0f04 	cmp.w	r8, #4
 801fee6:	d13d      	bne.n	801ff64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801fee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801feea:	3300      	adds	r3, #0
 801feec:	bf18      	it	ne
 801feee:	2301      	movne	r3, #1
 801fef0:	05c0      	lsls	r0, r0, #23
 801fef2:	d567      	bpl.n	801ffc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801fef4:	f1b8 0f08 	cmp.w	r8, #8
 801fef8:	d164      	bne.n	801ffc4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801fefa:	2b00      	cmp	r3, #0
 801fefc:	bf0c      	ite	eq
 801fefe:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ff02:	2180      	movne	r1, #128	; 0x80
 801ff04:	2e00      	cmp	r6, #0
 801ff06:	f47f af09 	bne.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ff0a:	2c00      	cmp	r4, #0
 801ff0c:	f47f af06 	bne.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ff10:	9b08      	ldr	r3, [sp, #32]
 801ff12:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ff14:	442b      	add	r3, r5
 801ff16:	4283      	cmp	r3, r0
 801ff18:	f73f af00 	bgt.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ff1c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801ff20:	4403      	add	r3, r0
 801ff22:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ff24:	4283      	cmp	r3, r0
 801ff26:	f73f aef9 	bgt.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ff2a:	f1b8 0f08 	cmp.w	r8, #8
 801ff2e:	6810      	ldr	r0, [r2, #0]
 801ff30:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801ff34:	bf18      	it	ne
 801ff36:	3701      	addne	r7, #1
 801ff38:	6804      	ldr	r4, [r0, #0]
 801ff3a:	9105      	str	r1, [sp, #20]
 801ff3c:	bf18      	it	ne
 801ff3e:	f027 0701 	bicne.w	r7, r7, #1
 801ff42:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ff44:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801ff48:	bf18      	it	ne
 801ff4a:	b2bf      	uxthne	r7, r7
 801ff4c:	9104      	str	r1, [sp, #16]
 801ff4e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ff50:	e9cd 7a00 	strd	r7, sl, [sp]
 801ff54:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801ff58:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ff5a:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801ff5c:	47a0      	blx	r4
 801ff5e:	b015      	add	sp, #84	; 0x54
 801ff60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff64:	2300      	movs	r3, #0
 801ff66:	e7c3      	b.n	801fef0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801ff68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ff6a:	e6e0      	b.n	801fd2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801ff6c:	22ff      	movs	r2, #255	; 0xff
 801ff6e:	e6fc      	b.n	801fd6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ff70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff72:	7003      	strb	r3, [r0, #0]
 801ff74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ff76:	7043      	strb	r3, [r0, #1]
 801ff78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff7a:	7083      	strb	r3, [r0, #2]
 801ff7c:	e789      	b.n	801fe92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801ff7e:	9b08      	ldr	r3, [sp, #32]
 801ff80:	b153      	cbz	r3, 801ff98 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801ff82:	441c      	add	r4, r3
 801ff84:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ff86:	b2a4      	uxth	r4, r4
 801ff88:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ff8c:	f004 0407 	and.w	r4, r4, #7
 801ff90:	7819      	ldrb	r1, [r3, #0]
 801ff92:	9324      	str	r3, [sp, #144]	; 0x90
 801ff94:	4121      	asrs	r1, r4
 801ff96:	b2c9      	uxtb	r1, r1
 801ff98:	9b07      	ldr	r3, [sp, #28]
 801ff9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff9e:	445b      	add	r3, fp
 801ffa0:	9307      	str	r3, [sp, #28]
 801ffa2:	e72a      	b.n	801fdfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801ffa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffa6:	2b00      	cmp	r3, #0
 801ffa8:	d1d9      	bne.n	801ff5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ffaa:	4b04      	ldr	r3, [pc, #16]	; (801ffbc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801ffac:	6818      	ldr	r0, [r3, #0]
 801ffae:	6803      	ldr	r3, [r0, #0]
 801ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ffb2:	4798      	blx	r3
 801ffb4:	e7d3      	b.n	801ff5e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ffb6:	bf00      	nop
 801ffb8:	200098e2 	.word	0x200098e2
 801ffbc:	200098ec 	.word	0x200098ec
 801ffc0:	200098e4 	.word	0x200098e4
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	f43f aea9 	beq.w	801fd1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ffca:	2180      	movs	r1, #128	; 0x80
 801ffcc:	e79a      	b.n	801ff04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801ffce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffd0:	b11b      	cbz	r3, 801ffda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ffd2:	07fb      	lsls	r3, r7, #31
 801ffd4:	d501      	bpl.n	801ffda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ffd6:	3701      	adds	r7, #1
 801ffd8:	b2bf      	uxth	r7, r7
 801ffda:	2211      	movs	r2, #17
 801ffdc:	e6c5      	b.n	801fd6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ffde:	2255      	movs	r2, #85	; 0x55
 801ffe0:	e6c3      	b.n	801fd6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ffe2:	bf00      	nop

0801ffe4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ffe4:	b538      	push	{r3, r4, r5, lr}
 801ffe6:	4c15      	ldr	r4, [pc, #84]	; (802003c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ffe8:	4605      	mov	r5, r0
 801ffea:	7823      	ldrb	r3, [r4, #0]
 801ffec:	f3bf 8f5b 	dmb	ish
 801fff0:	07da      	lsls	r2, r3, #31
 801fff2:	d40b      	bmi.n	802000c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fff4:	4620      	mov	r0, r4
 801fff6:	f005 f975 	bl	80252e4 <__cxa_guard_acquire>
 801fffa:	b138      	cbz	r0, 802000c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801fffc:	4620      	mov	r0, r4
 801fffe:	f005 f97d 	bl	80252fc <__cxa_guard_release>
 8020002:	4a0f      	ldr	r2, [pc, #60]	; (8020040 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020004:	490f      	ldr	r1, [pc, #60]	; (8020044 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8020006:	4810      	ldr	r0, [pc, #64]	; (8020048 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020008:	f005 f962 	bl	80252d0 <__aeabi_atexit>
 802000c:	4c0f      	ldr	r4, [pc, #60]	; (802004c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802000e:	7823      	ldrb	r3, [r4, #0]
 8020010:	f3bf 8f5b 	dmb	ish
 8020014:	07db      	lsls	r3, r3, #31
 8020016:	d40b      	bmi.n	8020030 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020018:	4620      	mov	r0, r4
 802001a:	f005 f963 	bl	80252e4 <__cxa_guard_acquire>
 802001e:	b138      	cbz	r0, 8020030 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8020020:	4620      	mov	r0, r4
 8020022:	f005 f96b 	bl	80252fc <__cxa_guard_release>
 8020026:	4a06      	ldr	r2, [pc, #24]	; (8020040 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8020028:	4909      	ldr	r1, [pc, #36]	; (8020050 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802002a:	480a      	ldr	r0, [pc, #40]	; (8020054 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802002c:	f005 f950 	bl	80252d0 <__aeabi_atexit>
 8020030:	4b05      	ldr	r3, [pc, #20]	; (8020048 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8020032:	612b      	str	r3, [r5, #16]
 8020034:	4b07      	ldr	r3, [pc, #28]	; (8020054 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8020036:	616b      	str	r3, [r5, #20]
 8020038:	bd38      	pop	{r3, r4, r5, pc}
 802003a:	bf00      	nop
 802003c:	200099d8 	.word	0x200099d8
 8020040:	20000000 	.word	0x20000000
 8020044:	0801ec1b 	.word	0x0801ec1b
 8020048:	200000b4 	.word	0x200000b4
 802004c:	200099dc 	.word	0x200099dc
 8020050:	0801ec19 	.word	0x0801ec19
 8020054:	200000b8 	.word	0x200000b8

08020058 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8020058:	b538      	push	{r3, r4, r5, lr}
 802005a:	4c15      	ldr	r4, [pc, #84]	; (80200b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802005c:	4605      	mov	r5, r0
 802005e:	7823      	ldrb	r3, [r4, #0]
 8020060:	f3bf 8f5b 	dmb	ish
 8020064:	07da      	lsls	r2, r3, #31
 8020066:	d40b      	bmi.n	8020080 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020068:	4620      	mov	r0, r4
 802006a:	f005 f93b 	bl	80252e4 <__cxa_guard_acquire>
 802006e:	b138      	cbz	r0, 8020080 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8020070:	4620      	mov	r0, r4
 8020072:	f005 f943 	bl	80252fc <__cxa_guard_release>
 8020076:	4a0f      	ldr	r2, [pc, #60]	; (80200b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8020078:	490f      	ldr	r1, [pc, #60]	; (80200b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802007a:	4810      	ldr	r0, [pc, #64]	; (80200bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802007c:	f005 f928 	bl	80252d0 <__aeabi_atexit>
 8020080:	4c0f      	ldr	r4, [pc, #60]	; (80200c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8020082:	7823      	ldrb	r3, [r4, #0]
 8020084:	f3bf 8f5b 	dmb	ish
 8020088:	07db      	lsls	r3, r3, #31
 802008a:	d40b      	bmi.n	80200a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802008c:	4620      	mov	r0, r4
 802008e:	f005 f929 	bl	80252e4 <__cxa_guard_acquire>
 8020092:	b138      	cbz	r0, 80200a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8020094:	4620      	mov	r0, r4
 8020096:	f005 f931 	bl	80252fc <__cxa_guard_release>
 802009a:	4a06      	ldr	r2, [pc, #24]	; (80200b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802009c:	4909      	ldr	r1, [pc, #36]	; (80200c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802009e:	480a      	ldr	r0, [pc, #40]	; (80200c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80200a0:	f005 f916 	bl	80252d0 <__aeabi_atexit>
 80200a4:	4b05      	ldr	r3, [pc, #20]	; (80200bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80200a6:	60ab      	str	r3, [r5, #8]
 80200a8:	4b07      	ldr	r3, [pc, #28]	; (80200c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80200aa:	60eb      	str	r3, [r5, #12]
 80200ac:	bd38      	pop	{r3, r4, r5, pc}
 80200ae:	bf00      	nop
 80200b0:	200099b8 	.word	0x200099b8
 80200b4:	20000000 	.word	0x20000000
 80200b8:	0801ec1f 	.word	0x0801ec1f
 80200bc:	20000094 	.word	0x20000094
 80200c0:	200099bc 	.word	0x200099bc
 80200c4:	0801ec1d 	.word	0x0801ec1d
 80200c8:	20000098 	.word	0x20000098

080200cc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80200cc:	b510      	push	{r4, lr}
 80200ce:	4604      	mov	r4, r0
 80200d0:	f7ff ff88 	bl	801ffe4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80200d4:	4620      	mov	r0, r4
 80200d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80200da:	f7ff bfbd 	b.w	8020058 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080200e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80200e0:	b538      	push	{r3, r4, r5, lr}
 80200e2:	4c15      	ldr	r4, [pc, #84]	; (8020138 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80200e4:	4605      	mov	r5, r0
 80200e6:	7823      	ldrb	r3, [r4, #0]
 80200e8:	f3bf 8f5b 	dmb	ish
 80200ec:	07da      	lsls	r2, r3, #31
 80200ee:	d40b      	bmi.n	8020108 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80200f0:	4620      	mov	r0, r4
 80200f2:	f005 f8f7 	bl	80252e4 <__cxa_guard_acquire>
 80200f6:	b138      	cbz	r0, 8020108 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80200f8:	4620      	mov	r0, r4
 80200fa:	f005 f8ff 	bl	80252fc <__cxa_guard_release>
 80200fe:	4a0f      	ldr	r2, [pc, #60]	; (802013c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020100:	490f      	ldr	r1, [pc, #60]	; (8020140 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8020102:	4810      	ldr	r0, [pc, #64]	; (8020144 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8020104:	f005 f8e4 	bl	80252d0 <__aeabi_atexit>
 8020108:	4c0f      	ldr	r4, [pc, #60]	; (8020148 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802010a:	7823      	ldrb	r3, [r4, #0]
 802010c:	f3bf 8f5b 	dmb	ish
 8020110:	07db      	lsls	r3, r3, #31
 8020112:	d40b      	bmi.n	802012c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8020114:	4620      	mov	r0, r4
 8020116:	f005 f8e5 	bl	80252e4 <__cxa_guard_acquire>
 802011a:	b138      	cbz	r0, 802012c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802011c:	4620      	mov	r0, r4
 802011e:	f005 f8ed 	bl	80252fc <__cxa_guard_release>
 8020122:	4a06      	ldr	r2, [pc, #24]	; (802013c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8020124:	4909      	ldr	r1, [pc, #36]	; (802014c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8020126:	480a      	ldr	r0, [pc, #40]	; (8020150 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020128:	f005 f8d2 	bl	80252d0 <__aeabi_atexit>
 802012c:	4b05      	ldr	r3, [pc, #20]	; (8020144 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802012e:	622b      	str	r3, [r5, #32]
 8020130:	4b07      	ldr	r3, [pc, #28]	; (8020150 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8020132:	626b      	str	r3, [r5, #36]	; 0x24
 8020134:	bd38      	pop	{r3, r4, r5, pc}
 8020136:	bf00      	nop
 8020138:	200099e0 	.word	0x200099e0
 802013c:	20000000 	.word	0x20000000
 8020140:	0801ec13 	.word	0x0801ec13
 8020144:	200000bc 	.word	0x200000bc
 8020148:	200099e4 	.word	0x200099e4
 802014c:	0801ec11 	.word	0x0801ec11
 8020150:	200000c0 	.word	0x200000c0

08020154 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8020154:	b538      	push	{r3, r4, r5, lr}
 8020156:	4c15      	ldr	r4, [pc, #84]	; (80201ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8020158:	4605      	mov	r5, r0
 802015a:	7823      	ldrb	r3, [r4, #0]
 802015c:	f3bf 8f5b 	dmb	ish
 8020160:	07da      	lsls	r2, r3, #31
 8020162:	d40b      	bmi.n	802017c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8020164:	4620      	mov	r0, r4
 8020166:	f005 f8bd 	bl	80252e4 <__cxa_guard_acquire>
 802016a:	b138      	cbz	r0, 802017c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802016c:	4620      	mov	r0, r4
 802016e:	f005 f8c5 	bl	80252fc <__cxa_guard_release>
 8020172:	4a0f      	ldr	r2, [pc, #60]	; (80201b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020174:	490f      	ldr	r1, [pc, #60]	; (80201b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8020176:	4810      	ldr	r0, [pc, #64]	; (80201b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8020178:	f005 f8aa 	bl	80252d0 <__aeabi_atexit>
 802017c:	4c0f      	ldr	r4, [pc, #60]	; (80201bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802017e:	7823      	ldrb	r3, [r4, #0]
 8020180:	f3bf 8f5b 	dmb	ish
 8020184:	07db      	lsls	r3, r3, #31
 8020186:	d40b      	bmi.n	80201a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020188:	4620      	mov	r0, r4
 802018a:	f005 f8ab 	bl	80252e4 <__cxa_guard_acquire>
 802018e:	b138      	cbz	r0, 80201a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8020190:	4620      	mov	r0, r4
 8020192:	f005 f8b3 	bl	80252fc <__cxa_guard_release>
 8020196:	4a06      	ldr	r2, [pc, #24]	; (80201b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8020198:	4909      	ldr	r1, [pc, #36]	; (80201c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802019a:	480a      	ldr	r0, [pc, #40]	; (80201c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802019c:	f005 f898 	bl	80252d0 <__aeabi_atexit>
 80201a0:	4b05      	ldr	r3, [pc, #20]	; (80201b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80201a2:	61ab      	str	r3, [r5, #24]
 80201a4:	4b07      	ldr	r3, [pc, #28]	; (80201c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80201a6:	61eb      	str	r3, [r5, #28]
 80201a8:	bd38      	pop	{r3, r4, r5, pc}
 80201aa:	bf00      	nop
 80201ac:	200099c0 	.word	0x200099c0
 80201b0:	20000000 	.word	0x20000000
 80201b4:	0801ec17 	.word	0x0801ec17
 80201b8:	2000009c 	.word	0x2000009c
 80201bc:	200099c4 	.word	0x200099c4
 80201c0:	0801ec15 	.word	0x0801ec15
 80201c4:	200000a0 	.word	0x200000a0

080201c8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80201c8:	b510      	push	{r4, lr}
 80201ca:	4604      	mov	r4, r0
 80201cc:	f7ff ff88 	bl	80200e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80201d0:	4620      	mov	r0, r4
 80201d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201d6:	f7ff bfbd 	b.w	8020154 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080201dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80201dc:	b538      	push	{r3, r4, r5, lr}
 80201de:	4c15      	ldr	r4, [pc, #84]	; (8020234 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80201e0:	4605      	mov	r5, r0
 80201e2:	7823      	ldrb	r3, [r4, #0]
 80201e4:	f3bf 8f5b 	dmb	ish
 80201e8:	07da      	lsls	r2, r3, #31
 80201ea:	d40b      	bmi.n	8020204 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80201ec:	4620      	mov	r0, r4
 80201ee:	f005 f879 	bl	80252e4 <__cxa_guard_acquire>
 80201f2:	b138      	cbz	r0, 8020204 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80201f4:	4620      	mov	r0, r4
 80201f6:	f005 f881 	bl	80252fc <__cxa_guard_release>
 80201fa:	4a0f      	ldr	r2, [pc, #60]	; (8020238 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80201fc:	490f      	ldr	r1, [pc, #60]	; (802023c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80201fe:	4810      	ldr	r0, [pc, #64]	; (8020240 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8020200:	f005 f866 	bl	80252d0 <__aeabi_atexit>
 8020204:	4c0f      	ldr	r4, [pc, #60]	; (8020244 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8020206:	7823      	ldrb	r3, [r4, #0]
 8020208:	f3bf 8f5b 	dmb	ish
 802020c:	07db      	lsls	r3, r3, #31
 802020e:	d40b      	bmi.n	8020228 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020210:	4620      	mov	r0, r4
 8020212:	f005 f867 	bl	80252e4 <__cxa_guard_acquire>
 8020216:	b138      	cbz	r0, 8020228 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8020218:	4620      	mov	r0, r4
 802021a:	f005 f86f 	bl	80252fc <__cxa_guard_release>
 802021e:	4a06      	ldr	r2, [pc, #24]	; (8020238 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8020220:	4909      	ldr	r1, [pc, #36]	; (8020248 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8020222:	480a      	ldr	r0, [pc, #40]	; (802024c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8020224:	f005 f854 	bl	80252d0 <__aeabi_atexit>
 8020228:	4b05      	ldr	r3, [pc, #20]	; (8020240 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802022a:	632b      	str	r3, [r5, #48]	; 0x30
 802022c:	4b07      	ldr	r3, [pc, #28]	; (802024c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802022e:	636b      	str	r3, [r5, #52]	; 0x34
 8020230:	bd38      	pop	{r3, r4, r5, pc}
 8020232:	bf00      	nop
 8020234:	200099c8 	.word	0x200099c8
 8020238:	20000000 	.word	0x20000000
 802023c:	0801ec0b 	.word	0x0801ec0b
 8020240:	200000a4 	.word	0x200000a4
 8020244:	200099cc 	.word	0x200099cc
 8020248:	0801ec09 	.word	0x0801ec09
 802024c:	200000a8 	.word	0x200000a8

08020250 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8020250:	b538      	push	{r3, r4, r5, lr}
 8020252:	4c15      	ldr	r4, [pc, #84]	; (80202a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8020254:	4605      	mov	r5, r0
 8020256:	7823      	ldrb	r3, [r4, #0]
 8020258:	f3bf 8f5b 	dmb	ish
 802025c:	07da      	lsls	r2, r3, #31
 802025e:	d40b      	bmi.n	8020278 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020260:	4620      	mov	r0, r4
 8020262:	f005 f83f 	bl	80252e4 <__cxa_guard_acquire>
 8020266:	b138      	cbz	r0, 8020278 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8020268:	4620      	mov	r0, r4
 802026a:	f005 f847 	bl	80252fc <__cxa_guard_release>
 802026e:	4a0f      	ldr	r2, [pc, #60]	; (80202ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020270:	490f      	ldr	r1, [pc, #60]	; (80202b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8020272:	4810      	ldr	r0, [pc, #64]	; (80202b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8020274:	f005 f82c 	bl	80252d0 <__aeabi_atexit>
 8020278:	4c0f      	ldr	r4, [pc, #60]	; (80202b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802027a:	7823      	ldrb	r3, [r4, #0]
 802027c:	f3bf 8f5b 	dmb	ish
 8020280:	07db      	lsls	r3, r3, #31
 8020282:	d40b      	bmi.n	802029c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8020284:	4620      	mov	r0, r4
 8020286:	f005 f82d 	bl	80252e4 <__cxa_guard_acquire>
 802028a:	b138      	cbz	r0, 802029c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802028c:	4620      	mov	r0, r4
 802028e:	f005 f835 	bl	80252fc <__cxa_guard_release>
 8020292:	4a06      	ldr	r2, [pc, #24]	; (80202ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8020294:	4909      	ldr	r1, [pc, #36]	; (80202bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8020296:	480a      	ldr	r0, [pc, #40]	; (80202c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8020298:	f005 f81a 	bl	80252d0 <__aeabi_atexit>
 802029c:	4b05      	ldr	r3, [pc, #20]	; (80202b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802029e:	62ab      	str	r3, [r5, #40]	; 0x28
 80202a0:	4b07      	ldr	r3, [pc, #28]	; (80202c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80202a2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80202a4:	bd38      	pop	{r3, r4, r5, pc}
 80202a6:	bf00      	nop
 80202a8:	200099a0 	.word	0x200099a0
 80202ac:	20000000 	.word	0x20000000
 80202b0:	0801ec0f 	.word	0x0801ec0f
 80202b4:	2000007c 	.word	0x2000007c
 80202b8:	200099a4 	.word	0x200099a4
 80202bc:	0801ec0d 	.word	0x0801ec0d
 80202c0:	20000080 	.word	0x20000080

080202c4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80202c4:	b510      	push	{r4, lr}
 80202c6:	4604      	mov	r4, r0
 80202c8:	f7ff ff88 	bl	80201dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80202cc:	4620      	mov	r0, r4
 80202ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202d2:	f7ff bfbd 	b.w	8020250 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080202d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80202d8:	b538      	push	{r3, r4, r5, lr}
 80202da:	4c15      	ldr	r4, [pc, #84]	; (8020330 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80202dc:	4605      	mov	r5, r0
 80202de:	7823      	ldrb	r3, [r4, #0]
 80202e0:	f3bf 8f5b 	dmb	ish
 80202e4:	07da      	lsls	r2, r3, #31
 80202e6:	d40b      	bmi.n	8020300 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80202e8:	4620      	mov	r0, r4
 80202ea:	f004 fffb 	bl	80252e4 <__cxa_guard_acquire>
 80202ee:	b138      	cbz	r0, 8020300 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80202f0:	4620      	mov	r0, r4
 80202f2:	f005 f803 	bl	80252fc <__cxa_guard_release>
 80202f6:	4a0f      	ldr	r2, [pc, #60]	; (8020334 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80202f8:	490f      	ldr	r1, [pc, #60]	; (8020338 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80202fa:	4810      	ldr	r0, [pc, #64]	; (802033c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80202fc:	f004 ffe8 	bl	80252d0 <__aeabi_atexit>
 8020300:	4c0f      	ldr	r4, [pc, #60]	; (8020340 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8020302:	7823      	ldrb	r3, [r4, #0]
 8020304:	f3bf 8f5b 	dmb	ish
 8020308:	07db      	lsls	r3, r3, #31
 802030a:	d40b      	bmi.n	8020324 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802030c:	4620      	mov	r0, r4
 802030e:	f004 ffe9 	bl	80252e4 <__cxa_guard_acquire>
 8020312:	b138      	cbz	r0, 8020324 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8020314:	4620      	mov	r0, r4
 8020316:	f004 fff1 	bl	80252fc <__cxa_guard_release>
 802031a:	4a06      	ldr	r2, [pc, #24]	; (8020334 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802031c:	4909      	ldr	r1, [pc, #36]	; (8020344 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802031e:	480a      	ldr	r0, [pc, #40]	; (8020348 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8020320:	f004 ffd6 	bl	80252d0 <__aeabi_atexit>
 8020324:	4b05      	ldr	r3, [pc, #20]	; (802033c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8020326:	642b      	str	r3, [r5, #64]	; 0x40
 8020328:	4b07      	ldr	r3, [pc, #28]	; (8020348 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802032a:	646b      	str	r3, [r5, #68]	; 0x44
 802032c:	bd38      	pop	{r3, r4, r5, pc}
 802032e:	bf00      	nop
 8020330:	200099d0 	.word	0x200099d0
 8020334:	20000000 	.word	0x20000000
 8020338:	0801ec03 	.word	0x0801ec03
 802033c:	200000ac 	.word	0x200000ac
 8020340:	200099d4 	.word	0x200099d4
 8020344:	0801ec01 	.word	0x0801ec01
 8020348:	200000b0 	.word	0x200000b0

0802034c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 802034c:	b538      	push	{r3, r4, r5, lr}
 802034e:	4c15      	ldr	r4, [pc, #84]	; (80203a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8020350:	4605      	mov	r5, r0
 8020352:	7823      	ldrb	r3, [r4, #0]
 8020354:	f3bf 8f5b 	dmb	ish
 8020358:	07da      	lsls	r2, r3, #31
 802035a:	d40b      	bmi.n	8020374 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802035c:	4620      	mov	r0, r4
 802035e:	f004 ffc1 	bl	80252e4 <__cxa_guard_acquire>
 8020362:	b138      	cbz	r0, 8020374 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8020364:	4620      	mov	r0, r4
 8020366:	f004 ffc9 	bl	80252fc <__cxa_guard_release>
 802036a:	4a0f      	ldr	r2, [pc, #60]	; (80203a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802036c:	490f      	ldr	r1, [pc, #60]	; (80203ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802036e:	4810      	ldr	r0, [pc, #64]	; (80203b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8020370:	f004 ffae 	bl	80252d0 <__aeabi_atexit>
 8020374:	4c0f      	ldr	r4, [pc, #60]	; (80203b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8020376:	7823      	ldrb	r3, [r4, #0]
 8020378:	f3bf 8f5b 	dmb	ish
 802037c:	07db      	lsls	r3, r3, #31
 802037e:	d40b      	bmi.n	8020398 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020380:	4620      	mov	r0, r4
 8020382:	f004 ffaf 	bl	80252e4 <__cxa_guard_acquire>
 8020386:	b138      	cbz	r0, 8020398 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8020388:	4620      	mov	r0, r4
 802038a:	f004 ffb7 	bl	80252fc <__cxa_guard_release>
 802038e:	4a06      	ldr	r2, [pc, #24]	; (80203a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8020390:	4909      	ldr	r1, [pc, #36]	; (80203b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8020392:	480a      	ldr	r0, [pc, #40]	; (80203bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8020394:	f004 ff9c 	bl	80252d0 <__aeabi_atexit>
 8020398:	4b05      	ldr	r3, [pc, #20]	; (80203b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802039a:	63ab      	str	r3, [r5, #56]	; 0x38
 802039c:	4b07      	ldr	r3, [pc, #28]	; (80203bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802039e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80203a0:	bd38      	pop	{r3, r4, r5, pc}
 80203a2:	bf00      	nop
 80203a4:	200099b0 	.word	0x200099b0
 80203a8:	20000000 	.word	0x20000000
 80203ac:	0801ec07 	.word	0x0801ec07
 80203b0:	2000008c 	.word	0x2000008c
 80203b4:	200099b4 	.word	0x200099b4
 80203b8:	0801ec05 	.word	0x0801ec05
 80203bc:	20000090 	.word	0x20000090

080203c0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80203c0:	b510      	push	{r4, lr}
 80203c2:	4604      	mov	r4, r0
 80203c4:	f7ff ff88 	bl	80202d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80203c8:	4620      	mov	r0, r4
 80203ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203ce:	f7ff bfbd 	b.w	802034c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080203d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80203d4:	b538      	push	{r3, r4, r5, lr}
 80203d6:	4c15      	ldr	r4, [pc, #84]	; (802042c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80203d8:	4605      	mov	r5, r0
 80203da:	7823      	ldrb	r3, [r4, #0]
 80203dc:	f3bf 8f5b 	dmb	ish
 80203e0:	07da      	lsls	r2, r3, #31
 80203e2:	d40b      	bmi.n	80203fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80203e4:	4620      	mov	r0, r4
 80203e6:	f004 ff7d 	bl	80252e4 <__cxa_guard_acquire>
 80203ea:	b138      	cbz	r0, 80203fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80203ec:	4620      	mov	r0, r4
 80203ee:	f004 ff85 	bl	80252fc <__cxa_guard_release>
 80203f2:	4a0f      	ldr	r2, [pc, #60]	; (8020430 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80203f4:	490f      	ldr	r1, [pc, #60]	; (8020434 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80203f6:	4810      	ldr	r0, [pc, #64]	; (8020438 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80203f8:	f004 ff6a 	bl	80252d0 <__aeabi_atexit>
 80203fc:	4c0f      	ldr	r4, [pc, #60]	; (802043c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80203fe:	7823      	ldrb	r3, [r4, #0]
 8020400:	f3bf 8f5b 	dmb	ish
 8020404:	07db      	lsls	r3, r3, #31
 8020406:	d40b      	bmi.n	8020420 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020408:	4620      	mov	r0, r4
 802040a:	f004 ff6b 	bl	80252e4 <__cxa_guard_acquire>
 802040e:	b138      	cbz	r0, 8020420 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8020410:	4620      	mov	r0, r4
 8020412:	f004 ff73 	bl	80252fc <__cxa_guard_release>
 8020416:	4a06      	ldr	r2, [pc, #24]	; (8020430 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8020418:	4909      	ldr	r1, [pc, #36]	; (8020440 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802041a:	480a      	ldr	r0, [pc, #40]	; (8020444 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802041c:	f004 ff58 	bl	80252d0 <__aeabi_atexit>
 8020420:	4b05      	ldr	r3, [pc, #20]	; (8020438 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8020422:	652b      	str	r3, [r5, #80]	; 0x50
 8020424:	4b07      	ldr	r3, [pc, #28]	; (8020444 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8020426:	656b      	str	r3, [r5, #84]	; 0x54
 8020428:	bd38      	pop	{r3, r4, r5, pc}
 802042a:	bf00      	nop
 802042c:	200099a8 	.word	0x200099a8
 8020430:	20000000 	.word	0x20000000
 8020434:	0801ebfb 	.word	0x0801ebfb
 8020438:	20000084 	.word	0x20000084
 802043c:	200099ac 	.word	0x200099ac
 8020440:	0801ebf9 	.word	0x0801ebf9
 8020444:	20000088 	.word	0x20000088

08020448 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8020448:	b538      	push	{r3, r4, r5, lr}
 802044a:	4c15      	ldr	r4, [pc, #84]	; (80204a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 802044c:	4605      	mov	r5, r0
 802044e:	7823      	ldrb	r3, [r4, #0]
 8020450:	f3bf 8f5b 	dmb	ish
 8020454:	07da      	lsls	r2, r3, #31
 8020456:	d40b      	bmi.n	8020470 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020458:	4620      	mov	r0, r4
 802045a:	f004 ff43 	bl	80252e4 <__cxa_guard_acquire>
 802045e:	b138      	cbz	r0, 8020470 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8020460:	4620      	mov	r0, r4
 8020462:	f004 ff4b 	bl	80252fc <__cxa_guard_release>
 8020466:	4a0f      	ldr	r2, [pc, #60]	; (80204a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8020468:	490f      	ldr	r1, [pc, #60]	; (80204a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802046a:	4810      	ldr	r0, [pc, #64]	; (80204ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802046c:	f004 ff30 	bl	80252d0 <__aeabi_atexit>
 8020470:	4c0f      	ldr	r4, [pc, #60]	; (80204b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8020472:	7823      	ldrb	r3, [r4, #0]
 8020474:	f3bf 8f5b 	dmb	ish
 8020478:	07db      	lsls	r3, r3, #31
 802047a:	d40b      	bmi.n	8020494 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802047c:	4620      	mov	r0, r4
 802047e:	f004 ff31 	bl	80252e4 <__cxa_guard_acquire>
 8020482:	b138      	cbz	r0, 8020494 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8020484:	4620      	mov	r0, r4
 8020486:	f004 ff39 	bl	80252fc <__cxa_guard_release>
 802048a:	4a06      	ldr	r2, [pc, #24]	; (80204a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 802048c:	4909      	ldr	r1, [pc, #36]	; (80204b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802048e:	480a      	ldr	r0, [pc, #40]	; (80204b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8020490:	f004 ff1e 	bl	80252d0 <__aeabi_atexit>
 8020494:	4b05      	ldr	r3, [pc, #20]	; (80204ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8020496:	64ab      	str	r3, [r5, #72]	; 0x48
 8020498:	4b07      	ldr	r3, [pc, #28]	; (80204b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802049a:	64eb      	str	r3, [r5, #76]	; 0x4c
 802049c:	bd38      	pop	{r3, r4, r5, pc}
 802049e:	bf00      	nop
 80204a0:	20009998 	.word	0x20009998
 80204a4:	20000000 	.word	0x20000000
 80204a8:	0801ebff 	.word	0x0801ebff
 80204ac:	20000074 	.word	0x20000074
 80204b0:	2000999c 	.word	0x2000999c
 80204b4:	0801ebfd 	.word	0x0801ebfd
 80204b8:	20000078 	.word	0x20000078

080204bc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80204bc:	b510      	push	{r4, lr}
 80204be:	4604      	mov	r4, r0
 80204c0:	f7ff ff88 	bl	80203d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80204c4:	4620      	mov	r0, r4
 80204c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204ca:	f7ff bfbd 	b.w	8020448 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080204ce <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80204ce:	b510      	push	{r4, lr}
 80204d0:	4604      	mov	r4, r0
 80204d2:	f7ff fff3 	bl	80204bc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80204d6:	4620      	mov	r0, r4
 80204d8:	f7ff ff72 	bl	80203c0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80204dc:	4620      	mov	r0, r4
 80204de:	f7ff fe73 	bl	80201c8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80204e2:	4620      	mov	r0, r4
 80204e4:	f7ff fdf2 	bl	80200cc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80204e8:	4620      	mov	r0, r4
 80204ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204ee:	f7ff bee9 	b.w	80202c4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080204f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80204f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204f8:	b087      	sub	sp, #28
 80204fa:	7888      	ldrb	r0, [r1, #2]
 80204fc:	4616      	mov	r6, r2
 80204fe:	9001      	str	r0, [sp, #4]
 8020500:	7848      	ldrb	r0, [r1, #1]
 8020502:	9100      	str	r1, [sp, #0]
 8020504:	9002      	str	r0, [sp, #8]
 8020506:	7808      	ldrb	r0, [r1, #0]
 8020508:	9901      	ldr	r1, [sp, #4]
 802050a:	9003      	str	r0, [sp, #12]
 802050c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8020510:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8020514:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020518:	9902      	ldr	r1, [sp, #8]
 802051a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 802051e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8020522:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8020526:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802052a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 802052e:	9005      	str	r0, [sp, #20]
 8020530:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8020534:	fb05 ca0e 	mla	sl, r5, lr, ip
 8020538:	2d00      	cmp	r5, #0
 802053a:	eb06 080a 	add.w	r8, r6, sl
 802053e:	db4a      	blt.n	80205d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020540:	45a9      	cmp	r9, r5
 8020542:	dd48      	ble.n	80205d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 8020544:	f1bc 0f00 	cmp.w	ip, #0
 8020548:	db43      	blt.n	80205d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802054a:	45e6      	cmp	lr, ip
 802054c:	dd41      	ble.n	80205d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 802054e:	f816 600a 	ldrb.w	r6, [r6, sl]
 8020552:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020556:	441e      	add	r6, r3
 8020558:	f11c 0001 	adds.w	r0, ip, #1
 802055c:	d43e      	bmi.n	80205dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 802055e:	4586      	cmp	lr, r0
 8020560:	dd3c      	ble.n	80205dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020562:	2a00      	cmp	r2, #0
 8020564:	d03a      	beq.n	80205dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 8020566:	f898 0001 	ldrb.w	r0, [r8, #1]
 802056a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802056e:	4418      	add	r0, r3
 8020570:	3501      	adds	r5, #1
 8020572:	d437      	bmi.n	80205e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8020574:	45a9      	cmp	r9, r5
 8020576:	dd35      	ble.n	80205e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 8020578:	b3a4      	cbz	r4, 80205e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 802057a:	f1bc 0f00 	cmp.w	ip, #0
 802057e:	db2f      	blt.n	80205e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8020580:	45e6      	cmp	lr, ip
 8020582:	dd2d      	ble.n	80205e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 8020584:	f818 500e 	ldrb.w	r5, [r8, lr]
 8020588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802058c:	441d      	add	r5, r3
 802058e:	f11c 0c01 	adds.w	ip, ip, #1
 8020592:	d42a      	bmi.n	80205ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8020594:	45e6      	cmp	lr, ip
 8020596:	dd28      	ble.n	80205ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8020598:	b33a      	cbz	r2, 80205ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802059a:	44c6      	add	lr, r8
 802059c:	f89e c001 	ldrb.w	ip, [lr, #1]
 80205a0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80205a4:	4463      	add	r3, ip
 80205a6:	ea6f 0c07 	mvn.w	ip, r7
 80205aa:	2a0f      	cmp	r2, #15
 80205ac:	f896 a000 	ldrb.w	sl, [r6]
 80205b0:	fa5f fc8c 	uxtb.w	ip, ip
 80205b4:	f890 b000 	ldrb.w	fp, [r0]
 80205b8:	f895 9000 	ldrb.w	r9, [r5]
 80205bc:	7819      	ldrb	r1, [r3, #0]
 80205be:	d801      	bhi.n	80205c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 80205c0:	2c0f      	cmp	r4, #15
 80205c2:	d914      	bls.n	80205ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 80205c4:	4b40      	ldr	r3, [pc, #256]	; (80206c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 80205c6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80205ca:	4a40      	ldr	r2, [pc, #256]	; (80206cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 80205cc:	4840      	ldr	r0, [pc, #256]	; (80206d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 80205ce:	f004 feb3 	bl	8025338 <__assert_func>
 80205d2:	ae05      	add	r6, sp, #20
 80205d4:	e7c0      	b.n	8020558 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 80205d6:	a805      	add	r0, sp, #20
 80205d8:	4606      	mov	r6, r0
 80205da:	e7c9      	b.n	8020570 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80205dc:	a805      	add	r0, sp, #20
 80205de:	e7c7      	b.n	8020570 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 80205e0:	ad05      	add	r5, sp, #20
 80205e2:	e7d4      	b.n	802058e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 80205e4:	ab05      	add	r3, sp, #20
 80205e6:	461d      	mov	r5, r3
 80205e8:	e7dd      	b.n	80205a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80205ea:	ab05      	add	r3, sp, #20
 80205ec:	e7db      	b.n	80205a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 80205ee:	b292      	uxth	r2, r2
 80205f0:	b2a4      	uxth	r4, r4
 80205f2:	fa1f fc8c 	uxth.w	ip, ip
 80205f6:	fb02 f804 	mul.w	r8, r2, r4
 80205fa:	0112      	lsls	r2, r2, #4
 80205fc:	b2bf      	uxth	r7, r7
 80205fe:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8020602:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8020606:	eba2 0208 	sub.w	r2, r2, r8
 802060a:	b2a4      	uxth	r4, r4
 802060c:	b292      	uxth	r2, r2
 802060e:	ebae 0e04 	sub.w	lr, lr, r4
 8020612:	fb02 fb0b 	mul.w	fp, r2, fp
 8020616:	fa1f fe8e 	uxth.w	lr, lr
 802061a:	fb0e ba0a 	mla	sl, lr, sl, fp
 802061e:	fb04 aa09 	mla	sl, r4, r9, sl
 8020622:	fb08 aa01 	mla	sl, r8, r1, sl
 8020626:	9903      	ldr	r1, [sp, #12]
 8020628:	fb11 f90c 	smulbb	r9, r1, ip
 802062c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020630:	9900      	ldr	r1, [sp, #0]
 8020632:	fb0a 9a07 	mla	sl, sl, r7, r9
 8020636:	fa1f fa8a 	uxth.w	sl, sl
 802063a:	f10a 0901 	add.w	r9, sl, #1
 802063e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8020642:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020646:	f881 a000 	strb.w	sl, [r1]
 802064a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802064e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8020652:	fb02 fa0a 	mul.w	sl, r2, sl
 8020656:	9902      	ldr	r1, [sp, #8]
 8020658:	fb0e aa09 	mla	sl, lr, r9, sl
 802065c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8020660:	fb04 aa09 	mla	sl, r4, r9, sl
 8020664:	f893 9001 	ldrb.w	r9, [r3, #1]
 8020668:	fb08 a909 	mla	r9, r8, r9, sl
 802066c:	fb11 fa0c 	smulbb	sl, r1, ip
 8020670:	9900      	ldr	r1, [sp, #0]
 8020672:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020676:	fb09 a907 	mla	r9, r9, r7, sl
 802067a:	fa1f f989 	uxth.w	r9, r9
 802067e:	f109 0a01 	add.w	sl, r9, #1
 8020682:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8020686:	ea4f 2929 	mov.w	r9, r9, asr #8
 802068a:	f881 9001 	strb.w	r9, [r1, #1]
 802068e:	7880      	ldrb	r0, [r0, #2]
 8020690:	78b6      	ldrb	r6, [r6, #2]
 8020692:	4342      	muls	r2, r0
 8020694:	78a8      	ldrb	r0, [r5, #2]
 8020696:	789b      	ldrb	r3, [r3, #2]
 8020698:	fb0e 2206 	mla	r2, lr, r6, r2
 802069c:	fb04 2400 	mla	r4, r4, r0, r2
 80206a0:	fb08 4803 	mla	r8, r8, r3, r4
 80206a4:	9b01      	ldr	r3, [sp, #4]
 80206a6:	fb13 fc0c 	smulbb	ip, r3, ip
 80206aa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80206ae:	fb08 c707 	mla	r7, r8, r7, ip
 80206b2:	b2bf      	uxth	r7, r7
 80206b4:	f107 0c01 	add.w	ip, r7, #1
 80206b8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80206bc:	123f      	asrs	r7, r7, #8
 80206be:	708f      	strb	r7, [r1, #2]
 80206c0:	b007      	add	sp, #28
 80206c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206c6:	bf00      	nop
 80206c8:	0802930c 	.word	0x0802930c
 80206cc:	08029802 	.word	0x08029802
 80206d0:	080293d5 	.word	0x080293d5

080206d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80206d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206d8:	ed2d 8b08 	vpush	{d8-d11}
 80206dc:	b095      	sub	sp, #84	; 0x54
 80206de:	eeb0 aa40 	vmov.f32	s20, s0
 80206e2:	eef0 9a60 	vmov.f32	s19, s1
 80206e6:	930a      	str	r3, [sp, #40]	; 0x28
 80206e8:	eeb0 9a41 	vmov.f32	s18, s2
 80206ec:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80206f0:	eeb0 8a62 	vmov.f32	s16, s5
 80206f4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80206f6:	eef0 8a43 	vmov.f32	s17, s6
 80206fa:	930c      	str	r3, [sp, #48]	; 0x30
 80206fc:	eef0 ba44 	vmov.f32	s23, s8
 8020700:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020704:	eeb0 ba64 	vmov.f32	s22, s9
 8020708:	9013      	str	r0, [sp, #76]	; 0x4c
 802070a:	eef0 aa45 	vmov.f32	s21, s10
 802070e:	9310      	str	r3, [sp, #64]	; 0x40
 8020710:	6860      	ldr	r0, [r4, #4]
 8020712:	910f      	str	r1, [sp, #60]	; 0x3c
 8020714:	9212      	str	r2, [sp, #72]	; 0x48
 8020716:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8020718:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 802071c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8020720:	fb00 1303 	mla	r3, r0, r3, r1
 8020724:	6821      	ldr	r1, [r4, #0]
 8020726:	6854      	ldr	r4, [r2, #4]
 8020728:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802072c:	18cb      	adds	r3, r1, r3
 802072e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020730:	6813      	ldr	r3, [r2, #0]
 8020732:	930e      	str	r3, [sp, #56]	; 0x38
 8020734:	1d23      	adds	r3, r4, #4
 8020736:	9309      	str	r3, [sp, #36]	; 0x24
 8020738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802073a:	43db      	mvns	r3, r3
 802073c:	b2db      	uxtb	r3, r3
 802073e:	930d      	str	r3, [sp, #52]	; 0x34
 8020740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020742:	2b00      	cmp	r3, #0
 8020744:	dc03      	bgt.n	802074e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020746:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020748:	2b00      	cmp	r3, #0
 802074a:	f340 823c 	ble.w	8020bc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802074e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020750:	2b00      	cmp	r3, #0
 8020752:	f340 8115 	ble.w	8020980 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8020756:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020758:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802075a:	1412      	asrs	r2, r2, #16
 802075c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020760:	d431      	bmi.n	80207c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8020762:	1c51      	adds	r1, r2, #1
 8020764:	428d      	cmp	r5, r1
 8020766:	dd31      	ble.n	80207cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020768:	2b00      	cmp	r3, #0
 802076a:	db2f      	blt.n	80207cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 802076c:	1c59      	adds	r1, r3, #1
 802076e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020770:	4288      	cmp	r0, r1
 8020772:	dd2b      	ble.n	80207cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8020774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020776:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020778:	3b01      	subs	r3, #1
 802077a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802077c:	fb02 1203 	mla	r2, r2, r3, r1
 8020780:	1412      	asrs	r2, r2, #16
 8020782:	d42d      	bmi.n	80207e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020784:	3201      	adds	r2, #1
 8020786:	4295      	cmp	r5, r2
 8020788:	dd2a      	ble.n	80207e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802078a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802078c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802078e:	fb02 1303 	mla	r3, r2, r3, r1
 8020792:	141b      	asrs	r3, r3, #16
 8020794:	d424      	bmi.n	80207e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8020796:	3301      	adds	r3, #1
 8020798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802079a:	429a      	cmp	r2, r3
 802079c:	dd20      	ble.n	80207e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802079e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80207a0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80207a4:	f103 0c03 	add.w	ip, r3, #3
 80207a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207aa:	9311      	str	r3, [sp, #68]	; 0x44
 80207ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	f300 814f 	bgt.w	8020a52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 80207b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80207b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80207bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207c0:	441a      	add	r2, r3
 80207c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80207c4:	e0de      	b.n	8020984 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80207c6:	1c51      	adds	r1, r2, #1
 80207c8:	f040 80cb 	bne.w	8020962 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80207cc:	42aa      	cmp	r2, r5
 80207ce:	f280 80c8 	bge.w	8020962 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80207d2:	1c5f      	adds	r7, r3, #1
 80207d4:	f2c0 80c5 	blt.w	8020962 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80207d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80207da:	4293      	cmp	r3, r2
 80207dc:	f280 80c1 	bge.w	8020962 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80207e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80207e4:	9311      	str	r3, [sp, #68]	; 0x44
 80207e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	dde3      	ble.n	80207b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80207ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80207f0:	141a      	asrs	r2, r3, #16
 80207f2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80207f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80207f6:	1400      	asrs	r0, r0, #16
 80207f8:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80207fc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020800:	f100 810e 	bmi.w	8020a20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8020804:	1c46      	adds	r6, r0, #1
 8020806:	42b5      	cmp	r5, r6
 8020808:	f340 810c 	ble.w	8020a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802080c:	2a00      	cmp	r2, #0
 802080e:	f2c0 8109 	blt.w	8020a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8020812:	1c56      	adds	r6, r2, #1
 8020814:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020816:	42b4      	cmp	r4, r6
 8020818:	f340 8104 	ble.w	8020a24 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802081c:	fb02 0005 	mla	r0, r2, r5, r0
 8020820:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020824:	f814 e000 	ldrb.w	lr, [r4, r0]
 8020828:	4402      	add	r2, r0
 802082a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802082c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020830:	eb00 080e 	add.w	r8, r0, lr
 8020834:	2b00      	cmp	r3, #0
 8020836:	f000 80e4 	beq.w	8020a02 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 802083a:	f892 c001 	ldrb.w	ip, [r2, #1]
 802083e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020842:	4484      	add	ip, r0
 8020844:	2900      	cmp	r1, #0
 8020846:	f000 80e5 	beq.w	8020a14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 802084a:	1950      	adds	r0, r2, r5
 802084c:	5d52      	ldrb	r2, [r2, r5]
 802084e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020850:	7840      	ldrb	r0, [r0, #1]
 8020852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020856:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802085a:	4422      	add	r2, r4
 802085c:	4420      	add	r0, r4
 802085e:	b29b      	uxth	r3, r3
 8020860:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020862:	b289      	uxth	r1, r1
 8020864:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 8020868:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802086c:	fb03 fa01 	mul.w	sl, r3, r1
 8020870:	011b      	lsls	r3, r3, #4
 8020872:	f89c e000 	ldrb.w	lr, [ip]
 8020876:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 802087a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 802087e:	eba3 030a 	sub.w	r3, r3, sl
 8020882:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020884:	b289      	uxth	r1, r1
 8020886:	b29b      	uxth	r3, r3
 8020888:	eba9 0901 	sub.w	r9, r9, r1
 802088c:	fb03 fe0e 	mul.w	lr, r3, lr
 8020890:	fa1f f989 	uxth.w	r9, r9
 8020894:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020898:	f892 b000 	ldrb.w	fp, [r2]
 802089c:	fb01 ee0b 	mla	lr, r1, fp, lr
 80208a0:	f890 b000 	ldrb.w	fp, [r0]
 80208a4:	fb0a ee0b 	mla	lr, sl, fp, lr
 80208a8:	f897 b000 	ldrb.w	fp, [r7]
 80208ac:	fb1b fb04 	smulbb	fp, fp, r4
 80208b0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80208b4:	fb0e be06 	mla	lr, lr, r6, fp
 80208b8:	fa1f fe8e 	uxth.w	lr, lr
 80208bc:	f10e 0b01 	add.w	fp, lr, #1
 80208c0:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 80208c4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 80208c8:	f887 b000 	strb.w	fp, [r7]
 80208cc:	f89c e001 	ldrb.w	lr, [ip, #1]
 80208d0:	f898 b001 	ldrb.w	fp, [r8, #1]
 80208d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80208d8:	fb09 ee0b 	mla	lr, r9, fp, lr
 80208dc:	f892 b001 	ldrb.w	fp, [r2, #1]
 80208e0:	fb01 ee0b 	mla	lr, r1, fp, lr
 80208e4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80208e8:	fb0a ee0b 	mla	lr, sl, fp, lr
 80208ec:	f897 b001 	ldrb.w	fp, [r7, #1]
 80208f0:	fb1b fb04 	smulbb	fp, fp, r4
 80208f4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80208f8:	fb0e be06 	mla	lr, lr, r6, fp
 80208fc:	fa1f fe8e 	uxth.w	lr, lr
 8020900:	f10e 0b01 	add.w	fp, lr, #1
 8020904:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8020908:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802090c:	f887 e001 	strb.w	lr, [r7, #1]
 8020910:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020914:	f898 e002 	ldrb.w	lr, [r8, #2]
 8020918:	fb03 f30c 	mul.w	r3, r3, ip
 802091c:	fb09 330e 	mla	r3, r9, lr, r3
 8020920:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020924:	7882      	ldrb	r2, [r0, #2]
 8020926:	fb01 310e 	mla	r1, r1, lr, r3
 802092a:	fb0a 1a02 	mla	sl, sl, r2, r1
 802092e:	78b9      	ldrb	r1, [r7, #2]
 8020930:	fb11 f104 	smulbb	r1, r1, r4
 8020934:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8020938:	fb0a 1606 	mla	r6, sl, r6, r1
 802093c:	b2b6      	uxth	r6, r6
 802093e:	1c73      	adds	r3, r6, #1
 8020940:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8020944:	1236      	asrs	r6, r6, #8
 8020946:	70be      	strb	r6, [r7, #2]
 8020948:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802094a:	3703      	adds	r7, #3
 802094c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802094e:	4413      	add	r3, r2
 8020950:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020952:	9327      	str	r3, [sp, #156]	; 0x9c
 8020954:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020956:	4413      	add	r3, r2
 8020958:	9328      	str	r3, [sp, #160]	; 0xa0
 802095a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802095c:	3b01      	subs	r3, #1
 802095e:	9311      	str	r3, [sp, #68]	; 0x44
 8020960:	e741      	b.n	80207e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 8020962:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020964:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020966:	4413      	add	r3, r2
 8020968:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802096a:	9327      	str	r3, [sp, #156]	; 0x9c
 802096c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802096e:	4413      	add	r3, r2
 8020970:	9328      	str	r3, [sp, #160]	; 0xa0
 8020972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020974:	3b01      	subs	r3, #1
 8020976:	930a      	str	r3, [sp, #40]	; 0x28
 8020978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802097a:	3303      	adds	r3, #3
 802097c:	930b      	str	r3, [sp, #44]	; 0x2c
 802097e:	e6e6      	b.n	802074e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020980:	f47f aef8 	bne.w	8020774 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8020984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020986:	2b00      	cmp	r3, #0
 8020988:	f340 811d 	ble.w	8020bc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 802098c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020992:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020996:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802099a:	eef0 6a48 	vmov.f32	s13, s16
 802099e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80209a2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80209a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209aa:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 80209ae:	eef0 6a68 	vmov.f32	s13, s17
 80209b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209b6:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 80209ba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80209be:	ee69 7a27 	vmul.f32	s15, s18, s15
 80209c2:	ee37 8a48 	vsub.f32	s16, s14, s16
 80209c6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80209ca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80209ce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80209d2:	ee18 2a10 	vmov	r2, s16
 80209d6:	eeb0 8a47 	vmov.f32	s16, s14
 80209da:	fb92 f3f3 	sdiv	r3, r2, r3
 80209de:	ee18 2a90 	vmov	r2, s17
 80209e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80209e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80209e6:	eef0 8a67 	vmov.f32	s17, s15
 80209ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80209ee:	932a      	str	r3, [sp, #168]	; 0xa8
 80209f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80209f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80209f4:	3b01      	subs	r3, #1
 80209f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80209f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80209fa:	bf08      	it	eq
 80209fc:	4613      	moveq	r3, r2
 80209fe:	930a      	str	r3, [sp, #40]	; 0x28
 8020a00:	e69e      	b.n	8020740 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8020a02:	b151      	cbz	r1, 8020a1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8020a04:	5d52      	ldrb	r2, [r2, r5]
 8020a06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a0c:	4402      	add	r2, r0
 8020a0e:	4640      	mov	r0, r8
 8020a10:	46c4      	mov	ip, r8
 8020a12:	e724      	b.n	802085e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020a14:	4640      	mov	r0, r8
 8020a16:	4642      	mov	r2, r8
 8020a18:	e721      	b.n	802085e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8020a1a:	4640      	mov	r0, r8
 8020a1c:	4642      	mov	r2, r8
 8020a1e:	e7f7      	b.n	8020a10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8020a20:	1c46      	adds	r6, r0, #1
 8020a22:	d191      	bne.n	8020948 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020a24:	4285      	cmp	r5, r0
 8020a26:	dd8f      	ble.n	8020948 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020a28:	1c54      	adds	r4, r2, #1
 8020a2a:	db8d      	blt.n	8020948 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020a2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a2e:	4294      	cmp	r4, r2
 8020a30:	dd8a      	ble.n	8020948 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020a32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a34:	9002      	str	r0, [sp, #8]
 8020a36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020a38:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8020a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a40:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020a44:	e9cd 5300 	strd	r5, r3, [sp]
 8020a48:	4639      	mov	r1, r7
 8020a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a4c:	f7ff fd52 	bl	80204f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8020a50:	e77a      	b.n	8020948 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020a52:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8020a54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020a56:	1410      	asrs	r0, r2, #16
 8020a58:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020a5c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020a5e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020a60:	1412      	asrs	r2, r2, #16
 8020a62:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020a66:	fb05 2000 	mla	r0, r5, r0, r2
 8020a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a6c:	f814 8000 	ldrb.w	r8, [r4, r0]
 8020a70:	4402      	add	r2, r0
 8020a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020a74:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020a78:	eb00 0708 	add.w	r7, r0, r8
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	f000 8093 	beq.w	8020ba8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8020a82:	7856      	ldrb	r6, [r2, #1]
 8020a84:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020a88:	4406      	add	r6, r0
 8020a8a:	2900      	cmp	r1, #0
 8020a8c:	f000 8095 	beq.w	8020bba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020a90:	1950      	adds	r0, r2, r5
 8020a92:	5d52      	ldrb	r2, [r2, r5]
 8020a94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020a96:	7840      	ldrb	r0, [r0, #1]
 8020a98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020a9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020aa0:	4422      	add	r2, r4
 8020aa2:	4420      	add	r0, r4
 8020aa4:	b29b      	uxth	r3, r3
 8020aa6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020aa8:	b289      	uxth	r1, r1
 8020aaa:	f10c 0c03 	add.w	ip, ip, #3
 8020aae:	f814 b008 	ldrb.w	fp, [r4, r8]
 8020ab2:	fb03 f901 	mul.w	r9, r3, r1
 8020ab6:	011b      	lsls	r3, r3, #4
 8020ab8:	f896 8000 	ldrb.w	r8, [r6]
 8020abc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020ac0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020ac4:	eba3 0309 	sub.w	r3, r3, r9
 8020ac8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020aca:	b289      	uxth	r1, r1
 8020acc:	b29b      	uxth	r3, r3
 8020ace:	ebae 0e01 	sub.w	lr, lr, r1
 8020ad2:	fb03 f808 	mul.w	r8, r3, r8
 8020ad6:	fa1f fe8e 	uxth.w	lr, lr
 8020ada:	fb0e 880b 	mla	r8, lr, fp, r8
 8020ade:	f892 b000 	ldrb.w	fp, [r2]
 8020ae2:	fb01 880b 	mla	r8, r1, fp, r8
 8020ae6:	f890 b000 	ldrb.w	fp, [r0]
 8020aea:	fb09 880b 	mla	r8, r9, fp, r8
 8020aee:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 8020af2:	fb1b fb04 	smulbb	fp, fp, r4
 8020af6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020afa:	fb08 b80a 	mla	r8, r8, sl, fp
 8020afe:	fa1f f888 	uxth.w	r8, r8
 8020b02:	f108 0b01 	add.w	fp, r8, #1
 8020b06:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020b0a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020b0e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 8020b12:	f896 8001 	ldrb.w	r8, [r6, #1]
 8020b16:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020b1a:	fb03 f808 	mul.w	r8, r3, r8
 8020b1e:	fb0e 880b 	mla	r8, lr, fp, r8
 8020b22:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020b26:	fb01 880b 	mla	r8, r1, fp, r8
 8020b2a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020b2e:	fb09 880b 	mla	r8, r9, fp, r8
 8020b32:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 8020b36:	fb1b fb04 	smulbb	fp, fp, r4
 8020b3a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8020b3e:	fb08 b80a 	mla	r8, r8, sl, fp
 8020b42:	fa1f f888 	uxth.w	r8, r8
 8020b46:	f108 0b01 	add.w	fp, r8, #1
 8020b4a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8020b4e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020b52:	f80c 8c05 	strb.w	r8, [ip, #-5]
 8020b56:	78b6      	ldrb	r6, [r6, #2]
 8020b58:	78bf      	ldrb	r7, [r7, #2]
 8020b5a:	4373      	muls	r3, r6
 8020b5c:	7896      	ldrb	r6, [r2, #2]
 8020b5e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020b60:	fb0e 3307 	mla	r3, lr, r7, r3
 8020b64:	fb01 3306 	mla	r3, r1, r6, r3
 8020b68:	7886      	ldrb	r6, [r0, #2]
 8020b6a:	fb09 3906 	mla	r9, r9, r6, r3
 8020b6e:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 8020b72:	fb13 f304 	smulbb	r3, r3, r4
 8020b76:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8020b7a:	fb09 390a 	mla	r9, r9, sl, r3
 8020b7e:	fa1f f989 	uxth.w	r9, r9
 8020b82:	f109 0301 	add.w	r3, r9, #1
 8020b86:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020b8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020b8c:	4413      	add	r3, r2
 8020b8e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020b90:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020b94:	9327      	str	r3, [sp, #156]	; 0x9c
 8020b96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020b98:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8020b9c:	4413      	add	r3, r2
 8020b9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8020ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020ba2:	3b01      	subs	r3, #1
 8020ba4:	9311      	str	r3, [sp, #68]	; 0x44
 8020ba6:	e601      	b.n	80207ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8020ba8:	b151      	cbz	r1, 8020bc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8020baa:	5d52      	ldrb	r2, [r2, r5]
 8020bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020bae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020bb2:	4402      	add	r2, r0
 8020bb4:	4638      	mov	r0, r7
 8020bb6:	463e      	mov	r6, r7
 8020bb8:	e774      	b.n	8020aa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8020bba:	4638      	mov	r0, r7
 8020bbc:	463a      	mov	r2, r7
 8020bbe:	e771      	b.n	8020aa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8020bc0:	4638      	mov	r0, r7
 8020bc2:	463a      	mov	r2, r7
 8020bc4:	e7f7      	b.n	8020bb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8020bc6:	b015      	add	sp, #84	; 0x54
 8020bc8:	ecbd 8b08 	vpop	{d8-d11}
 8020bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8020bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bd4:	780d      	ldrb	r5, [r1, #0]
 8020bd6:	f891 9002 	ldrb.w	r9, [r1, #2]
 8020bda:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8020bde:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020be2:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020be6:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8020bea:	f891 9001 	ldrb.w	r9, [r1, #1]
 8020bee:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020bf2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8020bf6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020bfa:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8020bfe:	9501      	str	r5, [sp, #4]
 8020c00:	fb06 470c 	mla	r7, r6, ip, r4
 8020c04:	2e00      	cmp	r6, #0
 8020c06:	eb02 0e07 	add.w	lr, r2, r7
 8020c0a:	db46      	blt.n	8020c9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020c0c:	45b0      	cmp	r8, r6
 8020c0e:	dd44      	ble.n	8020c9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8020c10:	2c00      	cmp	r4, #0
 8020c12:	db40      	blt.n	8020c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020c14:	45a4      	cmp	ip, r4
 8020c16:	dd3e      	ble.n	8020c96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8020c18:	5dd7      	ldrb	r7, [r2, r7]
 8020c1a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020c1e:	441f      	add	r7, r3
 8020c20:	1c62      	adds	r2, r4, #1
 8020c22:	d43d      	bmi.n	8020ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020c24:	4594      	cmp	ip, r2
 8020c26:	dd3b      	ble.n	8020ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020c28:	f1ba 0f00 	cmp.w	sl, #0
 8020c2c:	d038      	beq.n	8020ca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 8020c2e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8020c32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020c36:	441d      	add	r5, r3
 8020c38:	3601      	adds	r6, #1
 8020c3a:	d435      	bmi.n	8020ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020c3c:	45b0      	cmp	r8, r6
 8020c3e:	dd33      	ble.n	8020ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020c40:	b390      	cbz	r0, 8020ca8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 8020c42:	2c00      	cmp	r4, #0
 8020c44:	db2e      	blt.n	8020ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8020c46:	45a4      	cmp	ip, r4
 8020c48:	dd2c      	ble.n	8020ca4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 8020c4a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8020c4e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020c52:	441e      	add	r6, r3
 8020c54:	1c62      	adds	r2, r4, #1
 8020c56:	d42a      	bmi.n	8020cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020c58:	4594      	cmp	ip, r2
 8020c5a:	dd28      	ble.n	8020cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020c5c:	f1ba 0f00 	cmp.w	sl, #0
 8020c60:	d025      	beq.n	8020cae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 8020c62:	44f4      	add	ip, lr
 8020c64:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020c68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020c6c:	4413      	add	r3, r2
 8020c6e:	f1ba 0f0f 	cmp.w	sl, #15
 8020c72:	f897 8000 	ldrb.w	r8, [r7]
 8020c76:	f895 9000 	ldrb.w	r9, [r5]
 8020c7a:	f896 e000 	ldrb.w	lr, [r6]
 8020c7e:	f893 c000 	ldrb.w	ip, [r3]
 8020c82:	d801      	bhi.n	8020c88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 8020c84:	280f      	cmp	r0, #15
 8020c86:	d914      	bls.n	8020cb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8020c88:	4b29      	ldr	r3, [pc, #164]	; (8020d30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8020c8a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020c8e:	4a29      	ldr	r2, [pc, #164]	; (8020d34 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8020c90:	4829      	ldr	r0, [pc, #164]	; (8020d38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 8020c92:	f004 fb51 	bl	8025338 <__assert_func>
 8020c96:	af01      	add	r7, sp, #4
 8020c98:	e7c2      	b.n	8020c20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8020c9a:	ad01      	add	r5, sp, #4
 8020c9c:	462f      	mov	r7, r5
 8020c9e:	e7cb      	b.n	8020c38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020ca0:	ad01      	add	r5, sp, #4
 8020ca2:	e7c9      	b.n	8020c38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8020ca4:	ae01      	add	r6, sp, #4
 8020ca6:	e7d5      	b.n	8020c54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8020ca8:	ab01      	add	r3, sp, #4
 8020caa:	461e      	mov	r6, r3
 8020cac:	e7df      	b.n	8020c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8020cae:	ab01      	add	r3, sp, #4
 8020cb0:	e7dd      	b.n	8020c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8020cb2:	fa1f f48a 	uxth.w	r4, sl
 8020cb6:	b280      	uxth	r0, r0
 8020cb8:	fb04 fa00 	mul.w	sl, r4, r0
 8020cbc:	0124      	lsls	r4, r4, #4
 8020cbe:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020cc2:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 8020cc6:	b282      	uxth	r2, r0
 8020cc8:	eba4 000a 	sub.w	r0, r4, sl
 8020ccc:	ebab 0b02 	sub.w	fp, fp, r2
 8020cd0:	b280      	uxth	r0, r0
 8020cd2:	fa1f fb8b 	uxth.w	fp, fp
 8020cd6:	fb00 f909 	mul.w	r9, r0, r9
 8020cda:	fb0b 9808 	mla	r8, fp, r8, r9
 8020cde:	fb02 8e0e 	mla	lr, r2, lr, r8
 8020ce2:	fb0a ec0c 	mla	ip, sl, ip, lr
 8020ce6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020cea:	f881 c000 	strb.w	ip, [r1]
 8020cee:	786c      	ldrb	r4, [r5, #1]
 8020cf0:	f897 c001 	ldrb.w	ip, [r7, #1]
 8020cf4:	4344      	muls	r4, r0
 8020cf6:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8020cfa:	7874      	ldrb	r4, [r6, #1]
 8020cfc:	fb02 cc04 	mla	ip, r2, r4, ip
 8020d00:	785c      	ldrb	r4, [r3, #1]
 8020d02:	fb0a c404 	mla	r4, sl, r4, ip
 8020d06:	1224      	asrs	r4, r4, #8
 8020d08:	704c      	strb	r4, [r1, #1]
 8020d0a:	78ad      	ldrb	r5, [r5, #2]
 8020d0c:	78bc      	ldrb	r4, [r7, #2]
 8020d0e:	4368      	muls	r0, r5
 8020d10:	fb0b 0b04 	mla	fp, fp, r4, r0
 8020d14:	78b0      	ldrb	r0, [r6, #2]
 8020d16:	fb02 b000 	mla	r0, r2, r0, fp
 8020d1a:	789a      	ldrb	r2, [r3, #2]
 8020d1c:	fb0a 0a02 	mla	sl, sl, r2, r0
 8020d20:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8020d24:	f881 a002 	strb.w	sl, [r1, #2]
 8020d28:	b003      	add	sp, #12
 8020d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d2e:	bf00      	nop
 8020d30:	0802930c 	.word	0x0802930c
 8020d34:	08029802 	.word	0x08029802
 8020d38:	080293d5 	.word	0x080293d5

08020d3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d40:	ed2d 8b0a 	vpush	{d8-d12}
 8020d44:	b08f      	sub	sp, #60	; 0x3c
 8020d46:	eeb0 aa40 	vmov.f32	s20, s0
 8020d4a:	eef0 9a60 	vmov.f32	s19, s1
 8020d4e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8020d50:	eeb0 9a41 	vmov.f32	s18, s2
 8020d54:	9307      	str	r3, [sp, #28]
 8020d56:	eeb0 8a62 	vmov.f32	s16, s5
 8020d5a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 8020d5e:	eef0 8a43 	vmov.f32	s17, s6
 8020d62:	900d      	str	r0, [sp, #52]	; 0x34
 8020d64:	eeb0 ca44 	vmov.f32	s24, s8
 8020d68:	6860      	ldr	r0, [r4, #4]
 8020d6a:	eef0 ba64 	vmov.f32	s23, s9
 8020d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8020d70:	eeb0 ba45 	vmov.f32	s22, s10
 8020d74:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020d78:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 8020d7c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8020d80:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8020d84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020d86:	fb00 1303 	mla	r3, r0, r3, r1
 8020d8a:	6821      	ldr	r1, [r4, #0]
 8020d8c:	6854      	ldr	r4, [r2, #4]
 8020d8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d92:	3404      	adds	r4, #4
 8020d94:	18cb      	adds	r3, r1, r3
 8020d96:	9308      	str	r3, [sp, #32]
 8020d98:	6813      	ldr	r3, [r2, #0]
 8020d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8020d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	dc03      	bgt.n	8020daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	f340 81d2 	ble.w	802114e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8020daa:	9b07      	ldr	r3, [sp, #28]
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	f340 80e3 	ble.w	8020f78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8020db2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8020db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020db6:	1412      	asrs	r2, r2, #16
 8020db8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020dbc:	d42f      	bmi.n	8020e1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020dbe:	1c51      	adds	r1, r2, #1
 8020dc0:	428d      	cmp	r5, r1
 8020dc2:	dd2f      	ble.n	8020e24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	db2d      	blt.n	8020e24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8020dc8:	1c59      	adds	r1, r3, #1
 8020dca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020dcc:	4288      	cmp	r0, r1
 8020dce:	dd29      	ble.n	8020e24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8020dd0:	9b07      	ldr	r3, [sp, #28]
 8020dd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020dd4:	3b01      	subs	r3, #1
 8020dd6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8020dd8:	fb02 1203 	mla	r2, r2, r3, r1
 8020ddc:	1412      	asrs	r2, r2, #16
 8020dde:	d42b      	bmi.n	8020e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020de0:	3201      	adds	r2, #1
 8020de2:	4295      	cmp	r5, r2
 8020de4:	dd28      	ble.n	8020e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020de6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020de8:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020dea:	fb02 1303 	mla	r3, r2, r3, r1
 8020dee:	141b      	asrs	r3, r3, #16
 8020df0:	d422      	bmi.n	8020e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020df2:	3301      	adds	r3, #1
 8020df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020df6:	429a      	cmp	r2, r3
 8020df8:	dd1e      	ble.n	8020e38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8020dfa:	9b08      	ldr	r3, [sp, #32]
 8020dfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020e00:	f103 0803 	add.w	r8, r3, #3
 8020e04:	f1ba 0f00 	cmp.w	sl, #0
 8020e08:	f300 8119 	bgt.w	802103e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8020e0c:	9b07      	ldr	r3, [sp, #28]
 8020e0e:	9a08      	ldr	r2, [sp, #32]
 8020e10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e18:	441a      	add	r2, r3
 8020e1a:	9208      	str	r2, [sp, #32]
 8020e1c:	e0ae      	b.n	8020f7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8020e1e:	1c51      	adds	r1, r2, #1
 8020e20:	f040 809b 	bne.w	8020f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020e24:	42aa      	cmp	r2, r5
 8020e26:	f280 8098 	bge.w	8020f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020e2a:	1c5a      	adds	r2, r3, #1
 8020e2c:	f2c0 8095 	blt.w	8020f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e32:	4293      	cmp	r3, r2
 8020e34:	f280 8091 	bge.w	8020f5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8020e38:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8020e3c:	f1bb 0f00 	cmp.w	fp, #0
 8020e40:	dde4      	ble.n	8020e0c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8020e42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e44:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020e46:	141a      	asrs	r2, r3, #16
 8020e48:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020e4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e4c:	1400      	asrs	r0, r0, #16
 8020e4e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8020e52:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8020e56:	f100 80dc 	bmi.w	8021012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8020e5a:	1c47      	adds	r7, r0, #1
 8020e5c:	42bd      	cmp	r5, r7
 8020e5e:	f340 80da 	ble.w	8021016 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020e62:	2a00      	cmp	r2, #0
 8020e64:	f2c0 80d7 	blt.w	8021016 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020e68:	f102 0c01 	add.w	ip, r2, #1
 8020e6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020e6e:	4567      	cmp	r7, ip
 8020e70:	f340 80d1 	ble.w	8021016 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8020e74:	fb02 0005 	mla	r0, r2, r5, r0
 8020e78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e7c:	f817 8000 	ldrb.w	r8, [r7, r0]
 8020e80:	4402      	add	r2, r0
 8020e82:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020e86:	eb04 0c08 	add.w	ip, r4, r8
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	f000 80b3 	beq.w	8020ff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8020e90:	7857      	ldrb	r7, [r2, #1]
 8020e92:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020e96:	4427      	add	r7, r4
 8020e98:	2900      	cmp	r1, #0
 8020e9a:	f000 80b4 	beq.w	8021006 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8020e9e:	1950      	adds	r0, r2, r5
 8020ea0:	5d52      	ldrb	r2, [r2, r5]
 8020ea2:	7840      	ldrb	r0, [r0, #1]
 8020ea4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020ea8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020eac:	4422      	add	r2, r4
 8020eae:	4420      	add	r0, r4
 8020eb0:	b29b      	uxth	r3, r3
 8020eb2:	f814 a008 	ldrb.w	sl, [r4, r8]
 8020eb6:	b289      	uxth	r1, r1
 8020eb8:	f897 8000 	ldrb.w	r8, [r7]
 8020ebc:	fb03 f901 	mul.w	r9, r3, r1
 8020ec0:	011b      	lsls	r3, r3, #4
 8020ec2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020ec6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020eca:	eba3 0309 	sub.w	r3, r3, r9
 8020ece:	b289      	uxth	r1, r1
 8020ed0:	b29b      	uxth	r3, r3
 8020ed2:	ebae 0e01 	sub.w	lr, lr, r1
 8020ed6:	fb03 f808 	mul.w	r8, r3, r8
 8020eda:	fa1f fe8e 	uxth.w	lr, lr
 8020ede:	fb0e 880a 	mla	r8, lr, sl, r8
 8020ee2:	f892 a000 	ldrb.w	sl, [r2]
 8020ee6:	fb01 880a 	mla	r8, r1, sl, r8
 8020eea:	f890 a000 	ldrb.w	sl, [r0]
 8020eee:	fb09 880a 	mla	r8, r9, sl, r8
 8020ef2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020ef6:	f886 8000 	strb.w	r8, [r6]
 8020efa:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020efe:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020f02:	fb03 f808 	mul.w	r8, r3, r8
 8020f06:	fb0e 880a 	mla	r8, lr, sl, r8
 8020f0a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020f0e:	fb01 880a 	mla	r8, r1, sl, r8
 8020f12:	f890 a001 	ldrb.w	sl, [r0, #1]
 8020f16:	fb09 880a 	mla	r8, r9, sl, r8
 8020f1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020f1e:	f886 8001 	strb.w	r8, [r6, #1]
 8020f22:	78bf      	ldrb	r7, [r7, #2]
 8020f24:	f89c c002 	ldrb.w	ip, [ip, #2]
 8020f28:	437b      	muls	r3, r7
 8020f2a:	7892      	ldrb	r2, [r2, #2]
 8020f2c:	fb0e 330c 	mla	r3, lr, ip, r3
 8020f30:	fb01 3102 	mla	r1, r1, r2, r3
 8020f34:	7882      	ldrb	r2, [r0, #2]
 8020f36:	fb09 1902 	mla	r9, r9, r2, r1
 8020f3a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020f3e:	f886 9002 	strb.w	r9, [r6, #2]
 8020f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020f44:	3603      	adds	r6, #3
 8020f46:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020f4c:	4413      	add	r3, r2
 8020f4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020f50:	9323      	str	r3, [sp, #140]	; 0x8c
 8020f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f54:	4413      	add	r3, r2
 8020f56:	9324      	str	r3, [sp, #144]	; 0x90
 8020f58:	e770      	b.n	8020e3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8020f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020f5c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020f5e:	4413      	add	r3, r2
 8020f60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020f62:	9323      	str	r3, [sp, #140]	; 0x8c
 8020f64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f66:	4413      	add	r3, r2
 8020f68:	9324      	str	r3, [sp, #144]	; 0x90
 8020f6a:	9b07      	ldr	r3, [sp, #28]
 8020f6c:	3b01      	subs	r3, #1
 8020f6e:	9307      	str	r3, [sp, #28]
 8020f70:	9b08      	ldr	r3, [sp, #32]
 8020f72:	3303      	adds	r3, #3
 8020f74:	9308      	str	r3, [sp, #32]
 8020f76:	e718      	b.n	8020daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8020f78:	f47f af2a 	bne.w	8020dd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8020f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	f340 80e5 	ble.w	802114e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8020f84:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8020f88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020f8a:	ee79 9aab 	vadd.f32	s19, s19, s23
 8020f8e:	eef0 6a48 	vmov.f32	s13, s16
 8020f92:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8020f96:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8020f9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f9e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8020fa2:	eef0 6a68 	vmov.f32	s13, s17
 8020fa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020faa:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8020fae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020fb2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020fb6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020fba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020fbe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020fc2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020fc6:	ee18 2a10 	vmov	r2, s16
 8020fca:	eeb0 8a47 	vmov.f32	s16, s14
 8020fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fd2:	ee18 2a90 	vmov	r2, s17
 8020fd6:	9325      	str	r3, [sp, #148]	; 0x94
 8020fd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020fda:	eef0 8a67 	vmov.f32	s17, s15
 8020fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fe2:	9326      	str	r3, [sp, #152]	; 0x98
 8020fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020fe8:	3b01      	subs	r3, #1
 8020fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020fee:	bf08      	it	eq
 8020ff0:	4613      	moveq	r3, r2
 8020ff2:	9307      	str	r3, [sp, #28]
 8020ff4:	e6d2      	b.n	8020d9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8020ff6:	b149      	cbz	r1, 802100c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020ff8:	5d52      	ldrb	r2, [r2, r5]
 8020ffa:	4660      	mov	r0, ip
 8020ffc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021000:	4422      	add	r2, r4
 8021002:	4667      	mov	r7, ip
 8021004:	e754      	b.n	8020eb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8021006:	4660      	mov	r0, ip
 8021008:	4662      	mov	r2, ip
 802100a:	e751      	b.n	8020eb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 802100c:	4660      	mov	r0, ip
 802100e:	4662      	mov	r2, ip
 8021010:	e7f7      	b.n	8021002 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8021012:	1c47      	adds	r7, r0, #1
 8021014:	d195      	bne.n	8020f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021016:	4285      	cmp	r5, r0
 8021018:	dd93      	ble.n	8020f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802101a:	1c57      	adds	r7, r2, #1
 802101c:	db91      	blt.n	8020f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802101e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021020:	4297      	cmp	r7, r2
 8021022:	dd8e      	ble.n	8020f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8021024:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8021028:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802102c:	e9cd 5700 	strd	r5, r7, [sp]
 8021030:	4623      	mov	r3, r4
 8021032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021034:	4631      	mov	r1, r6
 8021036:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021038:	f7ff fdca 	bl	8020bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 802103c:	e781      	b.n	8020f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 802103e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021040:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021042:	1410      	asrs	r0, r2, #16
 8021044:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021048:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802104a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802104c:	1412      	asrs	r2, r2, #16
 802104e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8021052:	fb05 2000 	mla	r0, r5, r0, r2
 8021056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021058:	f816 e000 	ldrb.w	lr, [r6, r0]
 802105c:	4402      	add	r2, r0
 802105e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021062:	eb04 070e 	add.w	r7, r4, lr
 8021066:	2b00      	cmp	r3, #0
 8021068:	d063      	beq.n	8021132 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 802106a:	7856      	ldrb	r6, [r2, #1]
 802106c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8021070:	4426      	add	r6, r4
 8021072:	2900      	cmp	r1, #0
 8021074:	d065      	beq.n	8021142 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021076:	1950      	adds	r0, r2, r5
 8021078:	5d52      	ldrb	r2, [r2, r5]
 802107a:	7840      	ldrb	r0, [r0, #1]
 802107c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021080:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021084:	4422      	add	r2, r4
 8021086:	4420      	add	r0, r4
 8021088:	b29b      	uxth	r3, r3
 802108a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 802108e:	b289      	uxth	r1, r1
 8021090:	f896 e000 	ldrb.w	lr, [r6]
 8021094:	f108 0803 	add.w	r8, r8, #3
 8021098:	f10a 3aff 	add.w	sl, sl, #4294967295
 802109c:	fb03 f901 	mul.w	r9, r3, r1
 80210a0:	011b      	lsls	r3, r3, #4
 80210a2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80210a6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80210aa:	eba3 0309 	sub.w	r3, r3, r9
 80210ae:	b289      	uxth	r1, r1
 80210b0:	b29b      	uxth	r3, r3
 80210b2:	ebac 0c01 	sub.w	ip, ip, r1
 80210b6:	fb03 fe0e 	mul.w	lr, r3, lr
 80210ba:	fa1f fc8c 	uxth.w	ip, ip
 80210be:	fb0c ee0b 	mla	lr, ip, fp, lr
 80210c2:	f892 b000 	ldrb.w	fp, [r2]
 80210c6:	fb01 ee0b 	mla	lr, r1, fp, lr
 80210ca:	f890 b000 	ldrb.w	fp, [r0]
 80210ce:	fb09 ee0b 	mla	lr, r9, fp, lr
 80210d2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80210d6:	f808 ec06 	strb.w	lr, [r8, #-6]
 80210da:	f896 e001 	ldrb.w	lr, [r6, #1]
 80210de:	f897 b001 	ldrb.w	fp, [r7, #1]
 80210e2:	fb03 fe0e 	mul.w	lr, r3, lr
 80210e6:	fb0c ee0b 	mla	lr, ip, fp, lr
 80210ea:	f892 b001 	ldrb.w	fp, [r2, #1]
 80210ee:	fb01 ee0b 	mla	lr, r1, fp, lr
 80210f2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80210f6:	fb09 ee0b 	mla	lr, r9, fp, lr
 80210fa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80210fe:	f808 ec05 	strb.w	lr, [r8, #-5]
 8021102:	78b6      	ldrb	r6, [r6, #2]
 8021104:	78bf      	ldrb	r7, [r7, #2]
 8021106:	4373      	muls	r3, r6
 8021108:	7896      	ldrb	r6, [r2, #2]
 802110a:	7882      	ldrb	r2, [r0, #2]
 802110c:	fb0c 3307 	mla	r3, ip, r7, r3
 8021110:	fb01 3306 	mla	r3, r1, r6, r3
 8021114:	fb09 3902 	mla	r9, r9, r2, r3
 8021118:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802111a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802111c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021120:	4413      	add	r3, r2
 8021122:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021124:	f808 9c04 	strb.w	r9, [r8, #-4]
 8021128:	9323      	str	r3, [sp, #140]	; 0x8c
 802112a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802112c:	4413      	add	r3, r2
 802112e:	9324      	str	r3, [sp, #144]	; 0x90
 8021130:	e668      	b.n	8020e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021132:	b149      	cbz	r1, 8021148 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8021134:	5d52      	ldrb	r2, [r2, r5]
 8021136:	4638      	mov	r0, r7
 8021138:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802113c:	4422      	add	r2, r4
 802113e:	463e      	mov	r6, r7
 8021140:	e7a2      	b.n	8021088 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021142:	4638      	mov	r0, r7
 8021144:	463a      	mov	r2, r7
 8021146:	e79f      	b.n	8021088 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8021148:	4638      	mov	r0, r7
 802114a:	463a      	mov	r2, r7
 802114c:	e7f7      	b.n	802113e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 802114e:	b00f      	add	sp, #60	; 0x3c
 8021150:	ecbd 8b0a 	vpop	{d8-d12}
 8021154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021158 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8021158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802115c:	b087      	sub	sp, #28
 802115e:	7888      	ldrb	r0, [r1, #2]
 8021160:	9002      	str	r0, [sp, #8]
 8021162:	7848      	ldrb	r0, [r1, #1]
 8021164:	9e02      	ldr	r6, [sp, #8]
 8021166:	9003      	str	r0, [sp, #12]
 8021168:	7808      	ldrb	r0, [r1, #0]
 802116a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 802116e:	9004      	str	r0, [sp, #16]
 8021170:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021174:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8021178:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802117c:	9e03      	ldr	r6, [sp, #12]
 802117e:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8021182:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8021186:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 802118a:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 802118e:	fb04 7508 	mla	r5, r4, r8, r7
 8021192:	2c00      	cmp	r4, #0
 8021194:	eb02 0905 	add.w	r9, r2, r5
 8021198:	db45      	blt.n	8021226 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 802119a:	45a2      	cmp	sl, r4
 802119c:	dd43      	ble.n	8021226 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 802119e:	2f00      	cmp	r7, #0
 80211a0:	db3f      	blt.n	8021222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80211a2:	45b8      	cmp	r8, r7
 80211a4:	dd3d      	ble.n	8021222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 80211a6:	5d52      	ldrb	r2, [r2, r5]
 80211a8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80211ac:	1c7a      	adds	r2, r7, #1
 80211ae:	d43d      	bmi.n	802122c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80211b0:	4590      	cmp	r8, r2
 80211b2:	dd3b      	ble.n	802122c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80211b4:	f1bc 0f00 	cmp.w	ip, #0
 80211b8:	d038      	beq.n	802122c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 80211ba:	f899 2001 	ldrb.w	r2, [r9, #1]
 80211be:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80211c2:	3401      	adds	r4, #1
 80211c4:	d436      	bmi.n	8021234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80211c6:	45a2      	cmp	sl, r4
 80211c8:	dd34      	ble.n	8021234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80211ca:	f1be 0f00 	cmp.w	lr, #0
 80211ce:	d031      	beq.n	8021234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 80211d0:	2f00      	cmp	r7, #0
 80211d2:	db2d      	blt.n	8021230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80211d4:	45b8      	cmp	r8, r7
 80211d6:	dd2b      	ble.n	8021230 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 80211d8:	f819 2008 	ldrb.w	r2, [r9, r8]
 80211dc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80211e0:	3701      	adds	r7, #1
 80211e2:	d409      	bmi.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80211e4:	45b8      	cmp	r8, r7
 80211e6:	dd07      	ble.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80211e8:	f1bc 0f00 	cmp.w	ip, #0
 80211ec:	d004      	beq.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 80211ee:	44c8      	add	r8, r9
 80211f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80211f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80211f8:	f1bc 0f0f 	cmp.w	ip, #15
 80211fc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021200:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8021204:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021208:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802120c:	d802      	bhi.n	8021214 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 802120e:	f1be 0f0f 	cmp.w	lr, #15
 8021212:	d911      	bls.n	8021238 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8021214:	4b77      	ldr	r3, [pc, #476]	; (80213f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8021216:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802121a:	4a77      	ldr	r2, [pc, #476]	; (80213f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 802121c:	4877      	ldr	r0, [pc, #476]	; (80213fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 802121e:	f004 f88b 	bl	8025338 <__assert_func>
 8021222:	4606      	mov	r6, r0
 8021224:	e7c2      	b.n	80211ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8021226:	4605      	mov	r5, r0
 8021228:	4606      	mov	r6, r0
 802122a:	e7ca      	b.n	80211c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 802122c:	4605      	mov	r5, r0
 802122e:	e7c8      	b.n	80211c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8021230:	4604      	mov	r4, r0
 8021232:	e7d5      	b.n	80211e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8021234:	4604      	mov	r4, r0
 8021236:	e7df      	b.n	80211f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8021238:	fa1f fc8c 	uxth.w	ip, ip
 802123c:	fa1f f28e 	uxth.w	r2, lr
 8021240:	fb02 fe0c 	mul.w	lr, r2, ip
 8021244:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021248:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 802124c:	ebac 070e 	sub.w	r7, ip, lr
 8021250:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021254:	b292      	uxth	r2, r2
 8021256:	b2bf      	uxth	r7, r7
 8021258:	1a9b      	subs	r3, r3, r2
 802125a:	fb07 fc0a 	mul.w	ip, r7, sl
 802125e:	b29b      	uxth	r3, r3
 8021260:	fb03 cc0b 	mla	ip, r3, fp, ip
 8021264:	9301      	str	r3, [sp, #4]
 8021266:	fb02 cc09 	mla	ip, r2, r9, ip
 802126a:	fb0e cc08 	mla	ip, lr, r8, ip
 802126e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8021272:	9305      	str	r3, [sp, #20]
 8021274:	2b00      	cmp	r3, #0
 8021276:	f000 80b9 	beq.w	80213ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 802127a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802127e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021282:	fb0b fc0c 	mul.w	ip, fp, ip
 8021286:	fb0b f606 	mul.w	r6, fp, r6
 802128a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802128e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021292:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021296:	44dc      	add	ip, fp
 8021298:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802129c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80212a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212a4:	fb0a fb0b 	mul.w	fp, sl, fp
 80212a8:	fb0a fa05 	mul.w	sl, sl, r5
 80212ac:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80212b0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80212b4:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 80212b8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80212bc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80212c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80212c4:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 80212c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212cc:	0a36      	lsrs	r6, r6, #8
 80212ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212d2:	44dc      	add	ip, fp
 80212d4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80212d8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80212dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80212e0:	fb09 fb0b 	mul.w	fp, r9, fp
 80212e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212e8:	fb09 f904 	mul.w	r9, r9, r4
 80212ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80212f0:	ea4f 251b 	mov.w	r5, fp, lsr #8
 80212f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80212f8:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80212fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021300:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021304:	fb0c fc07 	mul.w	ip, ip, r7
 8021308:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802130c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8021310:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021314:	445d      	add	r5, fp
 8021316:	fb08 f404 	mul.w	r4, r8, r4
 802131a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802131e:	fb08 f800 	mul.w	r8, r8, r0
 8021322:	0a2d      	lsrs	r5, r5, #8
 8021324:	0a20      	lsrs	r0, r4, #8
 8021326:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802132a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802132e:	fb07 f70a 	mul.w	r7, r7, sl
 8021332:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021336:	4404      	add	r4, r0
 8021338:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802133c:	0a24      	lsrs	r4, r4, #8
 802133e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8021342:	9801      	ldr	r0, [sp, #4]
 8021344:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021348:	fb03 cc00 	mla	ip, r3, r0, ip
 802134c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021350:	fb00 7606 	mla	r6, r0, r6, r7
 8021354:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8021358:	fb04 cc0e 	mla	ip, r4, lr, ip
 802135c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021360:	b280      	uxth	r0, r0
 8021362:	9c04      	ldr	r4, [sp, #16]
 8021364:	fb05 cc02 	mla	ip, r5, r2, ip
 8021368:	fb0e 6e08 	mla	lr, lr, r8, r6
 802136c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021370:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021374:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8021378:	fb02 ec0c 	mla	ip, r2, ip, lr
 802137c:	9a05      	ldr	r2, [sp, #20]
 802137e:	4342      	muls	r2, r0
 8021380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021384:	1c53      	adds	r3, r2, #1
 8021386:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802138a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802138e:	ea45 0c0c 	orr.w	ip, r5, ip
 8021392:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8021396:	fa5f f28c 	uxtb.w	r2, ip
 802139a:	b2db      	uxtb	r3, r3
 802139c:	fb14 f403 	smulbb	r4, r4, r3
 80213a0:	fb02 4200 	mla	r2, r2, r0, r4
 80213a4:	b292      	uxth	r2, r2
 80213a6:	1c54      	adds	r4, r2, #1
 80213a8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80213ac:	9c03      	ldr	r4, [sp, #12]
 80213ae:	fb14 f403 	smulbb	r4, r4, r3
 80213b2:	1212      	asrs	r2, r2, #8
 80213b4:	700a      	strb	r2, [r1, #0]
 80213b6:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80213ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80213be:	fb02 4200 	mla	r2, r2, r0, r4
 80213c2:	b292      	uxth	r2, r2
 80213c4:	1c54      	adds	r4, r2, #1
 80213c6:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 80213ca:	1212      	asrs	r2, r2, #8
 80213cc:	704a      	strb	r2, [r1, #1]
 80213ce:	9a02      	ldr	r2, [sp, #8]
 80213d0:	fb12 f303 	smulbb	r3, r2, r3
 80213d4:	fb0c 3c00 	mla	ip, ip, r0, r3
 80213d8:	fa1f fc8c 	uxth.w	ip, ip
 80213dc:	f10c 0301 	add.w	r3, ip, #1
 80213e0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80213e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80213e8:	f881 c002 	strb.w	ip, [r1, #2]
 80213ec:	b007      	add	sp, #28
 80213ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f2:	bf00      	nop
 80213f4:	0802930c 	.word	0x0802930c
 80213f8:	08029802 	.word	0x08029802
 80213fc:	080293d5 	.word	0x080293d5

08021400 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021404:	ed2d 8b08 	vpush	{d8-d11}
 8021408:	b09b      	sub	sp, #108	; 0x6c
 802140a:	eeb0 aa40 	vmov.f32	s20, s0
 802140e:	eef0 9a60 	vmov.f32	s19, s1
 8021412:	930a      	str	r3, [sp, #40]	; 0x28
 8021414:	eeb0 9a41 	vmov.f32	s18, s2
 8021418:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 802141c:	eeb0 8a62 	vmov.f32	s16, s5
 8021420:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 8021422:	eef0 8a43 	vmov.f32	s17, s6
 8021426:	9312      	str	r3, [sp, #72]	; 0x48
 8021428:	eef0 ba44 	vmov.f32	s23, s8
 802142c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8021430:	eeb0 ba64 	vmov.f32	s22, s9
 8021434:	9019      	str	r0, [sp, #100]	; 0x64
 8021436:	eef0 aa45 	vmov.f32	s21, s10
 802143a:	9114      	str	r1, [sp, #80]	; 0x50
 802143c:	9317      	str	r3, [sp, #92]	; 0x5c
 802143e:	6868      	ldr	r0, [r5, #4]
 8021440:	9218      	str	r2, [sp, #96]	; 0x60
 8021442:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8021444:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8021448:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 802144c:	fb00 1303 	mla	r3, r0, r3, r1
 8021450:	6829      	ldr	r1, [r5, #0]
 8021452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021456:	18cb      	adds	r3, r1, r3
 8021458:	930d      	str	r3, [sp, #52]	; 0x34
 802145a:	6813      	ldr	r3, [r2, #0]
 802145c:	9313      	str	r3, [sp, #76]	; 0x4c
 802145e:	6853      	ldr	r3, [r2, #4]
 8021460:	3304      	adds	r3, #4
 8021462:	9309      	str	r3, [sp, #36]	; 0x24
 8021464:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021466:	2b00      	cmp	r3, #0
 8021468:	dc03      	bgt.n	8021472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802146a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802146c:	2b00      	cmp	r3, #0
 802146e:	f340 8352 	ble.w	8021b16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8021472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021474:	2b00      	cmp	r3, #0
 8021476:	f340 81a2 	ble.w	80217be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 802147a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802147c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802147e:	1412      	asrs	r2, r2, #16
 8021480:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021484:	d431      	bmi.n	80214ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8021486:	1c51      	adds	r1, r2, #1
 8021488:	428c      	cmp	r4, r1
 802148a:	dd31      	ble.n	80214f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 802148c:	2b00      	cmp	r3, #0
 802148e:	db2f      	blt.n	80214f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021490:	1c59      	adds	r1, r3, #1
 8021492:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021494:	4288      	cmp	r0, r1
 8021496:	dd2b      	ble.n	80214f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8021498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802149a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802149c:	3b01      	subs	r3, #1
 802149e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80214a0:	fb02 1203 	mla	r2, r2, r3, r1
 80214a4:	1412      	asrs	r2, r2, #16
 80214a6:	d42d      	bmi.n	8021504 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80214a8:	3201      	adds	r2, #1
 80214aa:	4294      	cmp	r4, r2
 80214ac:	dd2a      	ble.n	8021504 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80214ae:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80214b0:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80214b2:	fb02 1303 	mla	r3, r2, r3, r1
 80214b6:	141b      	asrs	r3, r3, #16
 80214b8:	d424      	bmi.n	8021504 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80214ba:	3301      	adds	r3, #1
 80214bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80214be:	429a      	cmp	r2, r3
 80214c0:	dd20      	ble.n	8021504 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80214c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214c4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80214c8:	f103 0e03 	add.w	lr, r3, #3
 80214cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214ce:	9315      	str	r3, [sp, #84]	; 0x54
 80214d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	f300 81de 	bgt.w	8021894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 80214d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80214dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80214e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214e4:	441a      	add	r2, r3
 80214e6:	920d      	str	r2, [sp, #52]	; 0x34
 80214e8:	e16b      	b.n	80217c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 80214ea:	1c51      	adds	r1, r2, #1
 80214ec:	f040 8158 	bne.w	80217a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80214f0:	42a2      	cmp	r2, r4
 80214f2:	f280 8155 	bge.w	80217a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80214f6:	1c5a      	adds	r2, r3, #1
 80214f8:	f2c0 8152 	blt.w	80217a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 80214fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80214fe:	4293      	cmp	r3, r2
 8021500:	f280 814e 	bge.w	80217a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8021504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021506:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021508:	9316      	str	r3, [sp, #88]	; 0x58
 802150a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 802150e:	9315      	str	r3, [sp, #84]	; 0x54
 8021510:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021512:	2b00      	cmp	r3, #0
 8021514:	dde0      	ble.n	80214d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021516:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021518:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802151a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802151e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021520:	141b      	asrs	r3, r3, #16
 8021522:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021526:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021528:	1412      	asrs	r2, r2, #16
 802152a:	f100 819a 	bmi.w	8021862 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 802152e:	1c55      	adds	r5, r2, #1
 8021530:	42ac      	cmp	r4, r5
 8021532:	f340 8198 	ble.w	8021866 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021536:	2b00      	cmp	r3, #0
 8021538:	f2c0 8195 	blt.w	8021866 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 802153c:	1c5d      	adds	r5, r3, #1
 802153e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021540:	42af      	cmp	r7, r5
 8021542:	f340 8190 	ble.w	8021866 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 8021546:	fb03 2304 	mla	r3, r3, r4, r2
 802154a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802154c:	18d5      	adds	r5, r2, r3
 802154e:	5cd3      	ldrb	r3, [r2, r3]
 8021550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021556:	0e1f      	lsrs	r7, r3, #24
 8021558:	2800      	cmp	r0, #0
 802155a:	f000 8171 	beq.w	8021840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802155e:	f895 c001 	ldrb.w	ip, [r5, #1]
 8021562:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8021566:	920e      	str	r2, [sp, #56]	; 0x38
 8021568:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802156c:	2900      	cmp	r1, #0
 802156e:	f000 8172 	beq.w	8021856 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021572:	eb05 0c04 	add.w	ip, r5, r4
 8021576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021578:	5d2d      	ldrb	r5, [r5, r4]
 802157a:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 802157e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021582:	950b      	str	r5, [sp, #44]	; 0x2c
 8021584:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021588:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802158a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802158e:	0e15      	lsrs	r5, r2, #24
 8021590:	920f      	str	r2, [sp, #60]	; 0x3c
 8021592:	b280      	uxth	r0, r0
 8021594:	b289      	uxth	r1, r1
 8021596:	fb00 fa01 	mul.w	sl, r0, r1
 802159a:	0100      	lsls	r0, r0, #4
 802159c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80215a0:	eba0 080a 	sub.w	r8, r0, sl
 80215a4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80215a8:	b289      	uxth	r1, r1
 80215aa:	fa1f f888 	uxth.w	r8, r8
 80215ae:	1a52      	subs	r2, r2, r1
 80215b0:	fb08 f00e 	mul.w	r0, r8, lr
 80215b4:	b292      	uxth	r2, r2
 80215b6:	fb02 0007 	mla	r0, r2, r7, r0
 80215ba:	fb01 0009 	mla	r0, r1, r9, r0
 80215be:	fb0a 0005 	mla	r0, sl, r5, r0
 80215c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80215c6:	2800      	cmp	r0, #0
 80215c8:	f000 80dd 	beq.w	8021786 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80215cc:	2fff      	cmp	r7, #255	; 0xff
 80215ce:	d01a      	beq.n	8021606 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 80215d0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80215d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80215d8:	fb07 fc0c 	mul.w	ip, r7, ip
 80215dc:	435f      	muls	r7, r3
 80215de:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80215e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80215e6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80215ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80215ee:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80215f2:	4463      	add	r3, ip
 80215f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80215f8:	0a1b      	lsrs	r3, r3, #8
 80215fa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80215fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021602:	ea43 030b 	orr.w	r3, r3, fp
 8021606:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802160a:	d01e      	beq.n	802164a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 802160c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802160e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021612:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021616:	fb0e fb0b 	mul.w	fp, lr, fp
 802161a:	fb0e fe07 	mul.w	lr, lr, r7
 802161e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021622:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021626:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802162a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802162e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021632:	44dc      	add	ip, fp
 8021634:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021638:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802163c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021640:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021644:	ea4c 070e 	orr.w	r7, ip, lr
 8021648:	970e      	str	r7, [sp, #56]	; 0x38
 802164a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802164e:	d01e      	beq.n	802168e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021650:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021652:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021656:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802165a:	fb09 fe0e 	mul.w	lr, r9, lr
 802165e:	fb09 f907 	mul.w	r9, r9, r7
 8021662:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021666:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802166a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802166e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021672:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8021676:	44f4      	add	ip, lr
 8021678:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802167c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021680:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021684:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021688:	ea4c 0709 	orr.w	r7, ip, r9
 802168c:	970b      	str	r7, [sp, #44]	; 0x2c
 802168e:	2dff      	cmp	r5, #255	; 0xff
 8021690:	d01c      	beq.n	80216cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8021692:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021694:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8021698:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802169c:	fb05 fe0e 	mul.w	lr, r5, lr
 80216a0:	437d      	muls	r5, r7
 80216a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80216a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80216aa:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80216ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216b2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80216b6:	44f4      	add	ip, lr
 80216b8:	0a2d      	lsrs	r5, r5, #8
 80216ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216be:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80216c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216c6:	ea4c 0505 	orr.w	r5, ip, r5
 80216ca:	950f      	str	r5, [sp, #60]	; 0x3c
 80216cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80216ce:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80216d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80216d6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80216da:	fb08 f505 	mul.w	r5, r8, r5
 80216de:	fb02 5507 	mla	r5, r2, r7, r5
 80216e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80216e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80216e8:	fb01 5507 	mla	r5, r1, r7, r5
 80216ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80216ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80216f2:	fb0a 5507 	mla	r5, sl, r7, r5
 80216f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80216f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80216fc:	0a2d      	lsrs	r5, r5, #8
 80216fe:	fb08 f807 	mul.w	r8, r8, r7
 8021702:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021706:	fb02 8303 	mla	r3, r2, r3, r8
 802170a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802170c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021712:	fb01 330c 	mla	r3, r1, ip, r3
 8021716:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802171a:	fb0a 3a01 	mla	sl, sl, r1, r3
 802171e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021720:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021722:	4343      	muls	r3, r0
 8021724:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021728:	1c58      	adds	r0, r3, #1
 802172a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802172e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021732:	ea45 050a 	orr.w	r5, r5, sl
 8021736:	7833      	ldrb	r3, [r6, #0]
 8021738:	b2ea      	uxtb	r2, r5
 802173a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802173e:	fb12 f201 	smulbb	r2, r2, r1
 8021742:	b2c0      	uxtb	r0, r0
 8021744:	fb03 2300 	mla	r3, r3, r0, r2
 8021748:	b29b      	uxth	r3, r3
 802174a:	1c5a      	adds	r2, r3, #1
 802174c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021750:	7872      	ldrb	r2, [r6, #1]
 8021752:	fb12 f200 	smulbb	r2, r2, r0
 8021756:	121b      	asrs	r3, r3, #8
 8021758:	7033      	strb	r3, [r6, #0]
 802175a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 802175e:	0c2d      	lsrs	r5, r5, #16
 8021760:	fb03 2301 	mla	r3, r3, r1, r2
 8021764:	b29b      	uxth	r3, r3
 8021766:	1c5a      	adds	r2, r3, #1
 8021768:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802176c:	121b      	asrs	r3, r3, #8
 802176e:	7073      	strb	r3, [r6, #1]
 8021770:	78b3      	ldrb	r3, [r6, #2]
 8021772:	fb13 f000 	smulbb	r0, r3, r0
 8021776:	fb05 0501 	mla	r5, r5, r1, r0
 802177a:	b2ad      	uxth	r5, r5
 802177c:	1c6b      	adds	r3, r5, #1
 802177e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8021782:	122d      	asrs	r5, r5, #8
 8021784:	70b5      	strb	r5, [r6, #2]
 8021786:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021788:	3603      	adds	r6, #3
 802178a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802178c:	4413      	add	r3, r2
 802178e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021790:	932d      	str	r3, [sp, #180]	; 0xb4
 8021792:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021794:	4413      	add	r3, r2
 8021796:	932e      	str	r3, [sp, #184]	; 0xb8
 8021798:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802179a:	3b01      	subs	r3, #1
 802179c:	9316      	str	r3, [sp, #88]	; 0x58
 802179e:	e6b7      	b.n	8021510 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80217a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80217a2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80217a4:	4413      	add	r3, r2
 80217a6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80217a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80217aa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217ac:	4413      	add	r3, r2
 80217ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80217b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217b2:	3b01      	subs	r3, #1
 80217b4:	930a      	str	r3, [sp, #40]	; 0x28
 80217b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80217b8:	3303      	adds	r3, #3
 80217ba:	930d      	str	r3, [sp, #52]	; 0x34
 80217bc:	e659      	b.n	8021472 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80217be:	f47f ae6b 	bne.w	8021498 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80217c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	f340 81a6 	ble.w	8021b16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80217ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80217ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80217d0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80217d4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80217d8:	eef0 6a48 	vmov.f32	s13, s16
 80217dc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80217e0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80217e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217e8:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80217ec:	eef0 6a68 	vmov.f32	s13, s17
 80217f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80217f4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80217f8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80217fc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021800:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021804:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021808:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802180c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8021810:	ee18 2a10 	vmov	r2, s16
 8021814:	eeb0 8a47 	vmov.f32	s16, s14
 8021818:	fb92 f3f3 	sdiv	r3, r2, r3
 802181c:	ee18 2a90 	vmov	r2, s17
 8021820:	932f      	str	r3, [sp, #188]	; 0xbc
 8021822:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021824:	eef0 8a67 	vmov.f32	s17, s15
 8021828:	fb92 f3f3 	sdiv	r3, r2, r3
 802182c:	9330      	str	r3, [sp, #192]	; 0xc0
 802182e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021830:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021832:	3b01      	subs	r3, #1
 8021834:	9314      	str	r3, [sp, #80]	; 0x50
 8021836:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021838:	bf08      	it	eq
 802183a:	4613      	moveq	r3, r2
 802183c:	930a      	str	r3, [sp, #40]	; 0x28
 802183e:	e611      	b.n	8021464 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021840:	b161      	cbz	r1, 802185c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 8021842:	5d2a      	ldrb	r2, [r5, r4]
 8021844:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021846:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802184a:	25ff      	movs	r5, #255	; 0xff
 802184c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021850:	920b      	str	r2, [sp, #44]	; 0x2c
 8021852:	46ae      	mov	lr, r5
 8021854:	e69d      	b.n	8021592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 8021856:	25ff      	movs	r5, #255	; 0xff
 8021858:	46a9      	mov	r9, r5
 802185a:	e69a      	b.n	8021592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 802185c:	25ff      	movs	r5, #255	; 0xff
 802185e:	46a9      	mov	r9, r5
 8021860:	e7f7      	b.n	8021852 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 8021862:	1c57      	adds	r7, r2, #1
 8021864:	d18f      	bne.n	8021786 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021866:	4294      	cmp	r4, r2
 8021868:	dd8d      	ble.n	8021786 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802186a:	1c5d      	adds	r5, r3, #1
 802186c:	db8b      	blt.n	8021786 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802186e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021870:	429d      	cmp	r5, r3
 8021872:	dd88      	ble.n	8021786 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021874:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8021876:	9202      	str	r2, [sp, #8]
 8021878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802187a:	e9cd 3003 	strd	r3, r0, [sp, #12]
 802187e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021880:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021882:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021886:	e9cd 4300 	strd	r4, r3, [sp]
 802188a:	4631      	mov	r1, r6
 802188c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802188e:	f7ff fc63 	bl	8021158 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8021892:	e778      	b.n	8021786 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8021894:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021896:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021898:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802189c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802189e:	1412      	asrs	r2, r2, #16
 80218a0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80218a4:	141b      	asrs	r3, r3, #16
 80218a6:	fb04 2303 	mla	r3, r4, r3, r2
 80218aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80218ac:	18d5      	adds	r5, r2, r3
 80218ae:	5cd3      	ldrb	r3, [r2, r3]
 80218b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80218b6:	0e1e      	lsrs	r6, r3, #24
 80218b8:	2900      	cmp	r1, #0
 80218ba:	f000 811b 	beq.w	8021af4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 80218be:	786a      	ldrb	r2, [r5, #1]
 80218c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80218c2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80218c6:	9210      	str	r2, [sp, #64]	; 0x40
 80218c8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80218cc:	2800      	cmp	r0, #0
 80218ce:	f000 811c 	beq.w	8021b0a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 80218d2:	192a      	adds	r2, r5, r4
 80218d4:	5d2d      	ldrb	r5, [r5, r4]
 80218d6:	7852      	ldrb	r2, [r2, #1]
 80218d8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80218dc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80218e0:	950c      	str	r5, [sp, #48]	; 0x30
 80218e2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80218e6:	0e15      	lsrs	r5, r2, #24
 80218e8:	9211      	str	r2, [sp, #68]	; 0x44
 80218ea:	b289      	uxth	r1, r1
 80218ec:	b280      	uxth	r0, r0
 80218ee:	fb01 fa00 	mul.w	sl, r1, r0
 80218f2:	0109      	lsls	r1, r1, #4
 80218f4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80218f8:	eba1 080a 	sub.w	r8, r1, sl
 80218fc:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021900:	b280      	uxth	r0, r0
 8021902:	fa1f f888 	uxth.w	r8, r8
 8021906:	1a12      	subs	r2, r2, r0
 8021908:	fb08 f10c 	mul.w	r1, r8, ip
 802190c:	b292      	uxth	r2, r2
 802190e:	fb02 1106 	mla	r1, r2, r6, r1
 8021912:	fb00 1109 	mla	r1, r0, r9, r1
 8021916:	fb0a 1105 	mla	r1, sl, r5, r1
 802191a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802191e:	2900      	cmp	r1, #0
 8021920:	f000 80da 	beq.w	8021ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 8021924:	2eff      	cmp	r6, #255	; 0xff
 8021926:	d016      	beq.n	8021956 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 8021928:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802192c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021930:	4377      	muls	r7, r6
 8021932:	435e      	muls	r6, r3
 8021934:	0a3b      	lsrs	r3, r7, #8
 8021936:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802193a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802193e:	443b      	add	r3, r7
 8021940:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8021944:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021948:	0a1b      	lsrs	r3, r3, #8
 802194a:	0a3f      	lsrs	r7, r7, #8
 802194c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021950:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021954:	433b      	orrs	r3, r7
 8021956:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802195a:	d01d      	beq.n	8021998 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 802195c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802195e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021960:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021964:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021968:	fb0c f606 	mul.w	r6, ip, r6
 802196c:	fb0c fc07 	mul.w	ip, ip, r7
 8021970:	0a37      	lsrs	r7, r6, #8
 8021972:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021976:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802197a:	4437      	add	r7, r6
 802197c:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 8021980:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8021984:	0a3f      	lsrs	r7, r7, #8
 8021986:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802198a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802198e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021992:	ea47 060c 	orr.w	r6, r7, ip
 8021996:	9610      	str	r6, [sp, #64]	; 0x40
 8021998:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802199c:	d01d      	beq.n	80219da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 802199e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80219a0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80219a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219a8:	fb09 fc0c 	mul.w	ip, r9, ip
 80219ac:	fb09 f906 	mul.w	r9, r9, r6
 80219b0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80219b4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219b8:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80219bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219c0:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80219c4:	4467      	add	r7, ip
 80219c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219ca:	0a3f      	lsrs	r7, r7, #8
 80219cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80219d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219d4:	ea47 0609 	orr.w	r6, r7, r9
 80219d8:	960c      	str	r6, [sp, #48]	; 0x30
 80219da:	2dff      	cmp	r5, #255	; 0xff
 80219dc:	d01a      	beq.n	8021a14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 80219de:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80219e0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80219e4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219e8:	fb05 fc0c 	mul.w	ip, r5, ip
 80219ec:	4375      	muls	r5, r6
 80219ee:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80219f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219f6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80219fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219fe:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021a02:	4467      	add	r7, ip
 8021a04:	0a2d      	lsrs	r5, r5, #8
 8021a06:	0a3f      	lsrs	r7, r7, #8
 8021a08:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021a0c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a10:	433d      	orrs	r5, r7
 8021a12:	9511      	str	r5, [sp, #68]	; 0x44
 8021a14:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021a16:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a1e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a22:	fb08 f505 	mul.w	r5, r8, r5
 8021a26:	fb02 5506 	mla	r5, r2, r6, r5
 8021a2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021a2c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a30:	fb00 5506 	mla	r5, r0, r6, r5
 8021a34:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021a36:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a3a:	fb0a 5506 	mla	r5, sl, r6, r5
 8021a3e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021a40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a44:	0a2d      	lsrs	r5, r5, #8
 8021a46:	fb08 f806 	mul.w	r8, r8, r6
 8021a4a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a4e:	fb02 8303 	mla	r3, r2, r3, r8
 8021a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021a54:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021a58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021a5a:	fb00 3307 	mla	r3, r0, r7, r3
 8021a5e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021a62:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021a66:	fb01 f30b 	mul.w	r3, r1, fp
 8021a6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a6e:	1c59      	adds	r1, r3, #1
 8021a70:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a74:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021a78:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021a7c:	ea45 050c 	orr.w	r5, r5, ip
 8021a80:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021a84:	b2ea      	uxtb	r2, r5
 8021a86:	b2c9      	uxtb	r1, r1
 8021a88:	fb12 f20b 	smulbb	r2, r2, fp
 8021a8c:	fb03 2301 	mla	r3, r3, r1, r2
 8021a90:	b29b      	uxth	r3, r3
 8021a92:	1c5a      	adds	r2, r3, #1
 8021a94:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a98:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021a9c:	fb12 f201 	smulbb	r2, r2, r1
 8021aa0:	121b      	asrs	r3, r3, #8
 8021aa2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021aa6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021aaa:	0c2d      	lsrs	r5, r5, #16
 8021aac:	fb03 230b 	mla	r3, r3, fp, r2
 8021ab0:	b29b      	uxth	r3, r3
 8021ab2:	1c5a      	adds	r2, r3, #1
 8021ab4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ab8:	121b      	asrs	r3, r3, #8
 8021aba:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021abe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021ac2:	fb13 f101 	smulbb	r1, r3, r1
 8021ac6:	fb05 150b 	mla	r5, r5, fp, r1
 8021aca:	b2ad      	uxth	r5, r5
 8021acc:	1c69      	adds	r1, r5, #1
 8021ace:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021ad2:	122d      	asrs	r5, r5, #8
 8021ad4:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021ad8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021ada:	f10e 0e03 	add.w	lr, lr, #3
 8021ade:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021ae0:	4413      	add	r3, r2
 8021ae2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8021ae4:	932d      	str	r3, [sp, #180]	; 0xb4
 8021ae6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021ae8:	4413      	add	r3, r2
 8021aea:	932e      	str	r3, [sp, #184]	; 0xb8
 8021aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021aee:	3b01      	subs	r3, #1
 8021af0:	9315      	str	r3, [sp, #84]	; 0x54
 8021af2:	e4ed      	b.n	80214d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8021af4:	b160      	cbz	r0, 8021b10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 8021af6:	5d2a      	ldrb	r2, [r5, r4]
 8021af8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021afa:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021afe:	25ff      	movs	r5, #255	; 0xff
 8021b00:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021b04:	920c      	str	r2, [sp, #48]	; 0x30
 8021b06:	46ac      	mov	ip, r5
 8021b08:	e6ef      	b.n	80218ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021b0a:	25ff      	movs	r5, #255	; 0xff
 8021b0c:	46a9      	mov	r9, r5
 8021b0e:	e6ec      	b.n	80218ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8021b10:	25ff      	movs	r5, #255	; 0xff
 8021b12:	46a9      	mov	r9, r5
 8021b14:	e7f7      	b.n	8021b06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 8021b16:	b01b      	add	sp, #108	; 0x6c
 8021b18:	ecbd 8b08 	vpop	{d8-d11}
 8021b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021b20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8021b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b24:	b085      	sub	sp, #20
 8021b26:	7888      	ldrb	r0, [r1, #2]
 8021b28:	4692      	mov	sl, r2
 8021b2a:	4698      	mov	r8, r3
 8021b2c:	9000      	str	r0, [sp, #0]
 8021b2e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8021b32:	7848      	ldrb	r0, [r1, #1]
 8021b34:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8021b38:	9001      	str	r0, [sp, #4]
 8021b3a:	7808      	ldrb	r0, [r1, #0]
 8021b3c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8021b40:	9002      	str	r0, [sp, #8]
 8021b42:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021b46:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8021b4a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8021b4e:	fb04 560c 	mla	r6, r4, ip, r5
 8021b52:	2c00      	cmp	r4, #0
 8021b54:	eb02 0e06 	add.w	lr, r2, r6
 8021b58:	9a00      	ldr	r2, [sp, #0]
 8021b5a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021b5e:	9a01      	ldr	r2, [sp, #4]
 8021b60:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021b64:	db3e      	blt.n	8021be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8021b66:	45a1      	cmp	r9, r4
 8021b68:	dd3c      	ble.n	8021be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 8021b6a:	2d00      	cmp	r5, #0
 8021b6c:	db38      	blt.n	8021be0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021b6e:	45ac      	cmp	ip, r5
 8021b70:	dd36      	ble.n	8021be0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 8021b72:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8021b76:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8021b7a:	1c6e      	adds	r6, r5, #1
 8021b7c:	d435      	bmi.n	8021bea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021b7e:	45b4      	cmp	ip, r6
 8021b80:	dd33      	ble.n	8021bea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021b82:	b393      	cbz	r3, 8021bea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 8021b84:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8021b88:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8021b8c:	3401      	adds	r4, #1
 8021b8e:	d430      	bmi.n	8021bf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021b90:	45a1      	cmp	r9, r4
 8021b92:	dd2e      	ble.n	8021bf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021b94:	b36f      	cbz	r7, 8021bf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8021b96:	2d00      	cmp	r5, #0
 8021b98:	db29      	blt.n	8021bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8021b9a:	45ac      	cmp	ip, r5
 8021b9c:	dd27      	ble.n	8021bee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8021b9e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8021ba2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8021ba6:	3501      	adds	r5, #1
 8021ba8:	d407      	bmi.n	8021bba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021baa:	45ac      	cmp	ip, r5
 8021bac:	dd05      	ble.n	8021bba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021bae:	b123      	cbz	r3, 8021bba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021bb0:	44f4      	add	ip, lr
 8021bb2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021bb6:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8021bba:	2b0f      	cmp	r3, #15
 8021bbc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021bc0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021bc4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021bc8:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021bcc:	d801      	bhi.n	8021bd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8021bce:	2f0f      	cmp	r7, #15
 8021bd0:	d911      	bls.n	8021bf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 8021bd2:	4b76      	ldr	r3, [pc, #472]	; (8021dac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 8021bd4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021bd8:	4a75      	ldr	r2, [pc, #468]	; (8021db0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8021bda:	4876      	ldr	r0, [pc, #472]	; (8021db4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8021bdc:	f003 fbac 	bl	8025338 <__assert_func>
 8021be0:	4602      	mov	r2, r0
 8021be2:	e7ca      	b.n	8021b7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 8021be4:	4606      	mov	r6, r0
 8021be6:	4602      	mov	r2, r0
 8021be8:	e7d0      	b.n	8021b8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8021bea:	4606      	mov	r6, r0
 8021bec:	e7ce      	b.n	8021b8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8021bee:	4604      	mov	r4, r0
 8021bf0:	e7d9      	b.n	8021ba6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 8021bf2:	4604      	mov	r4, r0
 8021bf4:	e7e1      	b.n	8021bba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8021bf6:	b29b      	uxth	r3, r3
 8021bf8:	b2bf      	uxth	r7, r7
 8021bfa:	fb07 fe03 	mul.w	lr, r7, r3
 8021bfe:	011b      	lsls	r3, r3, #4
 8021c00:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021c04:	eba3 0c0e 	sub.w	ip, r3, lr
 8021c08:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021c0c:	b2bf      	uxth	r7, r7
 8021c0e:	fa1f fc8c 	uxth.w	ip, ip
 8021c12:	1bed      	subs	r5, r5, r7
 8021c14:	fb0c f30a 	mul.w	r3, ip, sl
 8021c18:	b2ad      	uxth	r5, r5
 8021c1a:	fb05 330b 	mla	r3, r5, fp, r3
 8021c1e:	fb07 3309 	mla	r3, r7, r9, r3
 8021c22:	fb0e 3308 	mla	r3, lr, r8, r3
 8021c26:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c2a:	9303      	str	r3, [sp, #12]
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	f000 80b9 	beq.w	8021da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 8021c32:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021c36:	d018      	beq.n	8021c6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 8021c38:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021c3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c40:	fb0b f303 	mul.w	r3, fp, r3
 8021c44:	fb0b fb02 	mul.w	fp, fp, r2
 8021c48:	0a1a      	lsrs	r2, r3, #8
 8021c4a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021c4e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c52:	441a      	add	r2, r3
 8021c54:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021c58:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021c5c:	0a12      	lsrs	r2, r2, #8
 8021c5e:	0a1b      	lsrs	r3, r3, #8
 8021c60:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c68:	431a      	orrs	r2, r3
 8021c6a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021c6e:	d019      	beq.n	8021ca4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 8021c70:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021c74:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c78:	fb0a fb0b 	mul.w	fp, sl, fp
 8021c7c:	fb0a fa06 	mul.w	sl, sl, r6
 8021c80:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021c84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021c88:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021c8c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021c90:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021c94:	445e      	add	r6, fp
 8021c96:	0a1b      	lsrs	r3, r3, #8
 8021c98:	0a36      	lsrs	r6, r6, #8
 8021c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c9e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021ca2:	431e      	orrs	r6, r3
 8021ca4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021ca8:	d019      	beq.n	8021cde <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8021caa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021cae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021cb2:	fb09 fa0a 	mul.w	sl, r9, sl
 8021cb6:	fb09 f904 	mul.w	r9, r9, r4
 8021cba:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021cbe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021cc2:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021cc6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021cca:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021cce:	4454      	add	r4, sl
 8021cd0:	0a1b      	lsrs	r3, r3, #8
 8021cd2:	0a24      	lsrs	r4, r4, #8
 8021cd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cd8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021cdc:	431c      	orrs	r4, r3
 8021cde:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021ce2:	d019      	beq.n	8021d18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 8021ce4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021ce8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021cec:	fb08 f909 	mul.w	r9, r8, r9
 8021cf0:	fb08 f800 	mul.w	r8, r8, r0
 8021cf4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021cf8:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021cfc:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021d00:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021d04:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021d08:	4448      	add	r0, r9
 8021d0a:	0a1b      	lsrs	r3, r3, #8
 8021d0c:	0a00      	lsrs	r0, r0, #8
 8021d0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d12:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021d16:	4318      	orrs	r0, r3
 8021d18:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021d1c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021d20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d24:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d28:	fb0c f808 	mul.w	r8, ip, r8
 8021d2c:	fb0c f606 	mul.w	r6, ip, r6
 8021d30:	fb05 8803 	mla	r8, r5, r3, r8
 8021d34:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021d38:	fb05 6202 	mla	r2, r5, r2, r6
 8021d3c:	fb07 8803 	mla	r8, r7, r3, r8
 8021d40:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021d44:	fb0e 8303 	mla	r3, lr, r3, r8
 8021d48:	0a1b      	lsrs	r3, r3, #8
 8021d4a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8021d4e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8021d52:	9c02      	ldr	r4, [sp, #8]
 8021d54:	fb07 2703 	mla	r7, r7, r3, r2
 8021d58:	9a03      	ldr	r2, [sp, #12]
 8021d5a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8021d5e:	43d2      	mvns	r2, r2
 8021d60:	fb0e 7303 	mla	r3, lr, r3, r7
 8021d64:	b2d2      	uxtb	r2, r2
 8021d66:	0a1b      	lsrs	r3, r3, #8
 8021d68:	4354      	muls	r4, r2
 8021d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d6e:	1c60      	adds	r0, r4, #1
 8021d70:	ea48 0303 	orr.w	r3, r8, r3
 8021d74:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8021d78:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021d7c:	7008      	strb	r0, [r1, #0]
 8021d7e:	9801      	ldr	r0, [sp, #4]
 8021d80:	4350      	muls	r0, r2
 8021d82:	1c44      	adds	r4, r0, #1
 8021d84:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8021d88:	0a18      	lsrs	r0, r3, #8
 8021d8a:	0c1b      	lsrs	r3, r3, #16
 8021d8c:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8021d90:	7048      	strb	r0, [r1, #1]
 8021d92:	9800      	ldr	r0, [sp, #0]
 8021d94:	4350      	muls	r0, r2
 8021d96:	4602      	mov	r2, r0
 8021d98:	3001      	adds	r0, #1
 8021d9a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021d9e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021da2:	708b      	strb	r3, [r1, #2]
 8021da4:	b005      	add	sp, #20
 8021da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021daa:	bf00      	nop
 8021dac:	0802930c 	.word	0x0802930c
 8021db0:	08029802 	.word	0x08029802
 8021db4:	080293d5 	.word	0x080293d5

08021db8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dbc:	ed2d 8b08 	vpush	{d8-d11}
 8021dc0:	b097      	sub	sp, #92	; 0x5c
 8021dc2:	eeb0 aa40 	vmov.f32	s20, s0
 8021dc6:	eef0 9a60 	vmov.f32	s19, s1
 8021dca:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8021dcc:	eeb0 9a41 	vmov.f32	s18, s2
 8021dd0:	9308      	str	r3, [sp, #32]
 8021dd2:	eeb0 8a62 	vmov.f32	s16, s5
 8021dd6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021dda:	eef0 8a43 	vmov.f32	s17, s6
 8021dde:	9015      	str	r0, [sp, #84]	; 0x54
 8021de0:	eef0 ba44 	vmov.f32	s23, s8
 8021de4:	6868      	ldr	r0, [r5, #4]
 8021de6:	eeb0 ba64 	vmov.f32	s22, s9
 8021dea:	9112      	str	r1, [sp, #72]	; 0x48
 8021dec:	eef0 aa45 	vmov.f32	s21, s10
 8021df0:	9310      	str	r3, [sp, #64]	; 0x40
 8021df2:	9214      	str	r2, [sp, #80]	; 0x50
 8021df4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8021df6:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8021dfa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021dfe:	fb00 1303 	mla	r3, r0, r3, r1
 8021e02:	6829      	ldr	r1, [r5, #0]
 8021e04:	6855      	ldr	r5, [r2, #4]
 8021e06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e0a:	3504      	adds	r5, #4
 8021e0c:	18cb      	adds	r3, r1, r3
 8021e0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021e10:	6813      	ldr	r3, [r2, #0]
 8021e12:	9311      	str	r3, [sp, #68]	; 0x44
 8021e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e16:	2b00      	cmp	r3, #0
 8021e18:	dc03      	bgt.n	8021e22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021e1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e1c:	2b00      	cmp	r3, #0
 8021e1e:	f340 8333 	ble.w	8022488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8021e22:	9b08      	ldr	r3, [sp, #32]
 8021e24:	2b00      	cmp	r3, #0
 8021e26:	f340 8190 	ble.w	802214a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021e2a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021e2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021e2e:	1412      	asrs	r2, r2, #16
 8021e30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8021e34:	d42f      	bmi.n	8021e96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021e36:	1c51      	adds	r1, r2, #1
 8021e38:	428c      	cmp	r4, r1
 8021e3a:	dd2f      	ble.n	8021e9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	db2d      	blt.n	8021e9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021e40:	1c59      	adds	r1, r3, #1
 8021e42:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021e44:	4288      	cmp	r0, r1
 8021e46:	dd29      	ble.n	8021e9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8021e48:	9b08      	ldr	r3, [sp, #32]
 8021e4a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e4c:	3b01      	subs	r3, #1
 8021e4e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021e50:	fb02 1203 	mla	r2, r2, r3, r1
 8021e54:	1412      	asrs	r2, r2, #16
 8021e56:	d42b      	bmi.n	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021e58:	3201      	adds	r2, #1
 8021e5a:	4294      	cmp	r4, r2
 8021e5c:	dd28      	ble.n	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021e5e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e60:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021e62:	fb02 1303 	mla	r3, r2, r3, r1
 8021e66:	141b      	asrs	r3, r3, #16
 8021e68:	d422      	bmi.n	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021e6a:	3301      	adds	r3, #1
 8021e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e6e:	429a      	cmp	r2, r3
 8021e70:	dd1e      	ble.n	8021eb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8021e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021e74:	f103 0803 	add.w	r8, r3, #3
 8021e78:	9b08      	ldr	r3, [sp, #32]
 8021e7a:	9307      	str	r3, [sp, #28]
 8021e7c:	9b07      	ldr	r3, [sp, #28]
 8021e7e:	2b00      	cmp	r3, #0
 8021e80:	f300 81ca 	bgt.w	8022218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8021e84:	9b08      	ldr	r3, [sp, #32]
 8021e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021e88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021e8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e90:	441a      	add	r2, r3
 8021e92:	920b      	str	r2, [sp, #44]	; 0x2c
 8021e94:	e15b      	b.n	802214e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8021e96:	1c51      	adds	r1, r2, #1
 8021e98:	f040 8148 	bne.w	802212c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021e9c:	42a2      	cmp	r2, r4
 8021e9e:	f280 8145 	bge.w	802212c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021ea2:	1c5a      	adds	r2, r3, #1
 8021ea4:	f2c0 8142 	blt.w	802212c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021ea8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021eaa:	4293      	cmp	r3, r2
 8021eac:	f280 813e 	bge.w	802212c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8021eb0:	9b08      	ldr	r3, [sp, #32]
 8021eb2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021eb6:	9307      	str	r3, [sp, #28]
 8021eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	dde2      	ble.n	8021e84 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8021ebe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ec0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021ec2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8021ec6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8021ec8:	141b      	asrs	r3, r3, #16
 8021eca:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021ece:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ed0:	1412      	asrs	r2, r2, #16
 8021ed2:	f100 818b 	bmi.w	80221ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8021ed6:	1c56      	adds	r6, r2, #1
 8021ed8:	42b4      	cmp	r4, r6
 8021eda:	f340 8189 	ble.w	80221f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021ede:	2b00      	cmp	r3, #0
 8021ee0:	f2c0 8186 	blt.w	80221f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021ee4:	1c5e      	adds	r6, r3, #1
 8021ee6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021ee8:	42b7      	cmp	r7, r6
 8021eea:	f340 8181 	ble.w	80221f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8021eee:	fb03 2304 	mla	r3, r3, r4, r2
 8021ef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021ef4:	18d6      	adds	r6, r2, r3
 8021ef6:	5cd3      	ldrb	r3, [r2, r3]
 8021ef8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021efc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021f00:	2900      	cmp	r1, #0
 8021f02:	f000 8163 	beq.w	80221cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8021f06:	7872      	ldrb	r2, [r6, #1]
 8021f08:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021f0c:	920c      	str	r2, [sp, #48]	; 0x30
 8021f0e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021f12:	2800      	cmp	r0, #0
 8021f14:	f000 8164 	beq.w	80221e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8021f18:	1932      	adds	r2, r6, r4
 8021f1a:	5d36      	ldrb	r6, [r6, r4]
 8021f1c:	7852      	ldrb	r2, [r2, #1]
 8021f1e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8021f22:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021f26:	9609      	str	r6, [sp, #36]	; 0x24
 8021f28:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021f2c:	0e16      	lsrs	r6, r2, #24
 8021f2e:	920d      	str	r2, [sp, #52]	; 0x34
 8021f30:	b289      	uxth	r1, r1
 8021f32:	b280      	uxth	r0, r0
 8021f34:	fb01 fb00 	mul.w	fp, r1, r0
 8021f38:	0109      	lsls	r1, r1, #4
 8021f3a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8021f3e:	eba1 090b 	sub.w	r9, r1, fp
 8021f42:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8021f46:	b280      	uxth	r0, r0
 8021f48:	fa1f f989 	uxth.w	r9, r9
 8021f4c:	1a12      	subs	r2, r2, r0
 8021f4e:	fb09 f108 	mul.w	r1, r9, r8
 8021f52:	b292      	uxth	r2, r2
 8021f54:	fb02 110c 	mla	r1, r2, ip, r1
 8021f58:	fb00 110a 	mla	r1, r0, sl, r1
 8021f5c:	fb0b 1106 	mla	r1, fp, r6, r1
 8021f60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021f64:	2900      	cmp	r1, #0
 8021f66:	f000 80d2 	beq.w	802210e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8021f6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021f6e:	d01b      	beq.n	8021fa8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8021f70:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f78:	fb0c fe0e 	mul.w	lr, ip, lr
 8021f7c:	fb0c fc03 	mul.w	ip, ip, r3
 8021f80:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021f84:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021f88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021f8c:	4473      	add	r3, lr
 8021f8e:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021f92:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021f96:	0a1b      	lsrs	r3, r3, #8
 8021f98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021fa0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021fa4:	ea43 030e 	orr.w	r3, r3, lr
 8021fa8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021fac:	d01e      	beq.n	8021fec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8021fae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8021fb0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021fb4:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021fb8:	fb08 fc0c 	mul.w	ip, r8, ip
 8021fbc:	fb08 f80e 	mul.w	r8, r8, lr
 8021fc0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021fc4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021fc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fcc:	44e6      	add	lr, ip
 8021fce:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021fd2:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021fd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fda:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021fde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021fe2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021fe6:	ea4e 0708 	orr.w	r7, lr, r8
 8021fea:	970c      	str	r7, [sp, #48]	; 0x30
 8021fec:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021ff0:	d01e      	beq.n	8022030 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021ff2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021ff4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021ff8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8021ffc:	fb0a f808 	mul.w	r8, sl, r8
 8022000:	fb0a fa0c 	mul.w	sl, sl, ip
 8022004:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8022008:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802200c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022010:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022014:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022018:	44c6      	add	lr, r8
 802201a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802201e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022022:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022026:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802202a:	ea4e 070a 	orr.w	r7, lr, sl
 802202e:	9709      	str	r7, [sp, #36]	; 0x24
 8022030:	2eff      	cmp	r6, #255	; 0xff
 8022032:	d01d      	beq.n	8022070 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8022034:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022036:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802203a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802203e:	fb06 f808 	mul.w	r8, r6, r8
 8022042:	fb06 f60c 	mul.w	r6, r6, ip
 8022046:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802204a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802204e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8022052:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022056:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802205a:	44c6      	add	lr, r8
 802205c:	0a36      	lsrs	r6, r6, #8
 802205e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022062:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022066:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802206a:	ea4e 0606 	orr.w	r6, lr, r6
 802206e:	960d      	str	r6, [sp, #52]	; 0x34
 8022070:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022072:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022076:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022078:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802207c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022080:	43c9      	mvns	r1, r1
 8022082:	fb09 f606 	mul.w	r6, r9, r6
 8022086:	b2c9      	uxtb	r1, r1
 8022088:	fb02 660c 	mla	r6, r2, ip, r6
 802208c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8022090:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022092:	fb00 660c 	mla	r6, r0, ip, r6
 8022096:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802209a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802209c:	fb0b 660c 	mla	r6, fp, ip, r6
 80220a0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80220a4:	fb09 f90c 	mul.w	r9, r9, ip
 80220a8:	0a36      	lsrs	r6, r6, #8
 80220aa:	fb02 9303 	mla	r3, r2, r3, r9
 80220ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220b0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80220b4:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80220b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80220ba:	fb00 330e 	mla	r3, r0, lr, r3
 80220be:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80220c2:	fb0b 3b00 	mla	fp, fp, r0, r3
 80220c6:	9b07      	ldr	r3, [sp, #28]
 80220c8:	781b      	ldrb	r3, [r3, #0]
 80220ca:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80220ce:	fb03 f201 	mul.w	r2, r3, r1
 80220d2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80220d6:	1c53      	adds	r3, r2, #1
 80220d8:	ea46 060b 	orr.w	r6, r6, fp
 80220dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220e0:	9a07      	ldr	r2, [sp, #28]
 80220e2:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80220e6:	7013      	strb	r3, [r2, #0]
 80220e8:	7853      	ldrb	r3, [r2, #1]
 80220ea:	434b      	muls	r3, r1
 80220ec:	1c5a      	adds	r2, r3, #1
 80220ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80220f2:	0a33      	lsrs	r3, r6, #8
 80220f4:	0c36      	lsrs	r6, r6, #16
 80220f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80220fa:	9a07      	ldr	r2, [sp, #28]
 80220fc:	7053      	strb	r3, [r2, #1]
 80220fe:	7893      	ldrb	r3, [r2, #2]
 8022100:	4359      	muls	r1, r3
 8022102:	1c4b      	adds	r3, r1, #1
 8022104:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022108:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802210c:	7096      	strb	r6, [r2, #2]
 802210e:	9b07      	ldr	r3, [sp, #28]
 8022110:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022112:	3303      	adds	r3, #3
 8022114:	9307      	str	r3, [sp, #28]
 8022116:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022118:	4413      	add	r3, r2
 802211a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802211c:	9329      	str	r3, [sp, #164]	; 0xa4
 802211e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022120:	4413      	add	r3, r2
 8022122:	932a      	str	r3, [sp, #168]	; 0xa8
 8022124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022126:	3b01      	subs	r3, #1
 8022128:	9313      	str	r3, [sp, #76]	; 0x4c
 802212a:	e6c5      	b.n	8021eb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802212c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802212e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022130:	4413      	add	r3, r2
 8022132:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8022134:	9329      	str	r3, [sp, #164]	; 0xa4
 8022136:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022138:	4413      	add	r3, r2
 802213a:	932a      	str	r3, [sp, #168]	; 0xa8
 802213c:	9b08      	ldr	r3, [sp, #32]
 802213e:	3b01      	subs	r3, #1
 8022140:	9308      	str	r3, [sp, #32]
 8022142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022144:	3303      	adds	r3, #3
 8022146:	930b      	str	r3, [sp, #44]	; 0x2c
 8022148:	e66b      	b.n	8021e22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802214a:	f47f ae7d 	bne.w	8021e48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802214e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022150:	2b00      	cmp	r3, #0
 8022152:	f340 8199 	ble.w	8022488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8022156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802215a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802215c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022160:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022164:	eef0 6a48 	vmov.f32	s13, s16
 8022168:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802216c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022170:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022174:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022178:	eef0 6a68 	vmov.f32	s13, s17
 802217c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022180:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8022184:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022188:	ee69 7a27 	vmul.f32	s15, s18, s15
 802218c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022190:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022194:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022198:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802219c:	ee18 2a10 	vmov	r2, s16
 80221a0:	eeb0 8a47 	vmov.f32	s16, s14
 80221a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80221a8:	ee18 2a90 	vmov	r2, s17
 80221ac:	932b      	str	r3, [sp, #172]	; 0xac
 80221ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221b0:	eef0 8a67 	vmov.f32	s17, s15
 80221b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80221b8:	932c      	str	r3, [sp, #176]	; 0xb0
 80221ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80221be:	3b01      	subs	r3, #1
 80221c0:	9312      	str	r3, [sp, #72]	; 0x48
 80221c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221c4:	bf08      	it	eq
 80221c6:	4613      	moveq	r3, r2
 80221c8:	9308      	str	r3, [sp, #32]
 80221ca:	e623      	b.n	8021e14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80221cc:	b158      	cbz	r0, 80221e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80221ce:	5d32      	ldrb	r2, [r6, r4]
 80221d0:	26ff      	movs	r6, #255	; 0xff
 80221d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80221d6:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80221da:	9209      	str	r2, [sp, #36]	; 0x24
 80221dc:	46b0      	mov	r8, r6
 80221de:	e6a7      	b.n	8021f30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80221e0:	26ff      	movs	r6, #255	; 0xff
 80221e2:	46b2      	mov	sl, r6
 80221e4:	e6a4      	b.n	8021f30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 80221e6:	26ff      	movs	r6, #255	; 0xff
 80221e8:	46b2      	mov	sl, r6
 80221ea:	e7f7      	b.n	80221dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80221ec:	1c57      	adds	r7, r2, #1
 80221ee:	d18e      	bne.n	802210e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80221f0:	4294      	cmp	r4, r2
 80221f2:	dd8c      	ble.n	802210e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80221f4:	1c5e      	adds	r6, r3, #1
 80221f6:	db8a      	blt.n	802210e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80221f8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80221fa:	429e      	cmp	r6, r3
 80221fc:	dd87      	ble.n	802210e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80221fe:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8022202:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022206:	e9cd 4600 	strd	r4, r6, [sp]
 802220a:	462b      	mov	r3, r5
 802220c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802220e:	9907      	ldr	r1, [sp, #28]
 8022210:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022212:	f7ff fc85 	bl	8021b20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8022216:	e77a      	b.n	802210e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8022218:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802221a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802221c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022220:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022222:	1409      	asrs	r1, r1, #16
 8022224:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8022228:	141b      	asrs	r3, r3, #16
 802222a:	fb04 1303 	mla	r3, r4, r3, r1
 802222e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022230:	18ce      	adds	r6, r1, r3
 8022232:	5ccb      	ldrb	r3, [r1, r3]
 8022234:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022238:	0e1f      	lsrs	r7, r3, #24
 802223a:	2a00      	cmp	r2, #0
 802223c:	f000 8114 	beq.w	8022468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8022240:	7871      	ldrb	r1, [r6, #1]
 8022242:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022246:	910e      	str	r1, [sp, #56]	; 0x38
 8022248:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802224c:	2800      	cmp	r0, #0
 802224e:	f000 8115 	beq.w	802247c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8022252:	1931      	adds	r1, r6, r4
 8022254:	5d36      	ldrb	r6, [r6, r4]
 8022256:	7849      	ldrb	r1, [r1, #1]
 8022258:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 802225c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022260:	960a      	str	r6, [sp, #40]	; 0x28
 8022262:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022266:	0e0e      	lsrs	r6, r1, #24
 8022268:	910f      	str	r1, [sp, #60]	; 0x3c
 802226a:	b292      	uxth	r2, r2
 802226c:	b280      	uxth	r0, r0
 802226e:	fb02 fb00 	mul.w	fp, r2, r0
 8022272:	0112      	lsls	r2, r2, #4
 8022274:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8022278:	eba2 090b 	sub.w	r9, r2, fp
 802227c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022280:	b280      	uxth	r0, r0
 8022282:	fa1f f989 	uxth.w	r9, r9
 8022286:	1a09      	subs	r1, r1, r0
 8022288:	fb09 f20e 	mul.w	r2, r9, lr
 802228c:	b289      	uxth	r1, r1
 802228e:	fb01 2207 	mla	r2, r1, r7, r2
 8022292:	fb00 220a 	mla	r2, r0, sl, r2
 8022296:	fb0b 2206 	mla	r2, fp, r6, r2
 802229a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802229e:	9213      	str	r2, [sp, #76]	; 0x4c
 80222a0:	2a00      	cmp	r2, #0
 80222a2:	f000 80d4 	beq.w	802244e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 80222a6:	2fff      	cmp	r7, #255	; 0xff
 80222a8:	d01a      	beq.n	80222e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80222aa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222b2:	fb07 fc0c 	mul.w	ip, r7, ip
 80222b6:	435f      	muls	r7, r3
 80222b8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80222bc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80222c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222c4:	4463      	add	r3, ip
 80222c6:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80222ca:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80222ce:	0a1b      	lsrs	r3, r3, #8
 80222d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222d8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222dc:	ea43 030c 	orr.w	r3, r3, ip
 80222e0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80222e4:	d01f      	beq.n	8022326 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 80222e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80222e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80222ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222ee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80222f2:	fb0e f707 	mul.w	r7, lr, r7
 80222f6:	fb0e fe0c 	mul.w	lr, lr, ip
 80222fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80222fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022306:	44bc      	add	ip, r7
 8022308:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802230c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8022310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022314:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802231c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022320:	ea4c 020e 	orr.w	r2, ip, lr
 8022324:	920e      	str	r2, [sp, #56]	; 0x38
 8022326:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802232a:	d01e      	beq.n	802236a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 802232c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802232e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022332:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022336:	fb0a fe0e 	mul.w	lr, sl, lr
 802233a:	fb0a fa07 	mul.w	sl, sl, r7
 802233e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022342:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022346:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802234a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802234e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022352:	44f4      	add	ip, lr
 8022354:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022358:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802235c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022360:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022364:	ea4c 020a 	orr.w	r2, ip, sl
 8022368:	920a      	str	r2, [sp, #40]	; 0x28
 802236a:	2eff      	cmp	r6, #255	; 0xff
 802236c:	d01c      	beq.n	80223a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 802236e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022370:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022374:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8022378:	fb06 fe0e 	mul.w	lr, r6, lr
 802237c:	437e      	muls	r6, r7
 802237e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022382:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022386:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802238a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802238e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8022392:	44f4      	add	ip, lr
 8022394:	0a36      	lsrs	r6, r6, #8
 8022396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802239a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802239e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223a2:	ea4c 0206 	orr.w	r2, ip, r6
 80223a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80223a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223aa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223b2:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 80223b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80223b8:	fb09 f606 	mul.w	r6, r9, r6
 80223bc:	fb01 6607 	mla	r6, r1, r7, r6
 80223c0:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80223c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80223c6:	fb00 6607 	mla	r6, r0, r7, r6
 80223ca:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80223ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80223d0:	fb0b 6607 	mla	r6, fp, r7, r6
 80223d4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80223d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80223da:	fb09 f907 	mul.w	r9, r9, r7
 80223de:	0a36      	lsrs	r6, r6, #8
 80223e0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80223e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80223e6:	fb01 9303 	mla	r3, r1, r3, r9
 80223ea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223ee:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80223f2:	fb00 330c 	mla	r3, r0, ip, r3
 80223f6:	fb0b 3e0e 	mla	lr, fp, lr, r3
 80223fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80223fc:	43da      	mvns	r2, r3
 80223fe:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8022402:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022406:	b2d2      	uxtb	r2, r2
 8022408:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802240c:	fb03 f102 	mul.w	r1, r3, r2
 8022410:	ea46 060e 	orr.w	r6, r6, lr
 8022414:	1c4b      	adds	r3, r1, #1
 8022416:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802241a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802241e:	f808 3c03 	strb.w	r3, [r8, #-3]
 8022422:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8022426:	4353      	muls	r3, r2
 8022428:	1c59      	adds	r1, r3, #1
 802242a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802242e:	0a33      	lsrs	r3, r6, #8
 8022430:	0c36      	lsrs	r6, r6, #16
 8022432:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022436:	f808 3c02 	strb.w	r3, [r8, #-2]
 802243a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802243e:	435a      	muls	r2, r3
 8022440:	1c53      	adds	r3, r2, #1
 8022442:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022446:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802244a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802244e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022450:	f108 0803 	add.w	r8, r8, #3
 8022454:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022456:	4413      	add	r3, r2
 8022458:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802245a:	9329      	str	r3, [sp, #164]	; 0xa4
 802245c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802245e:	4413      	add	r3, r2
 8022460:	932a      	str	r3, [sp, #168]	; 0xa8
 8022462:	9b07      	ldr	r3, [sp, #28]
 8022464:	3b01      	subs	r3, #1
 8022466:	e508      	b.n	8021e7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 8022468:	b158      	cbz	r0, 8022482 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 802246a:	5d31      	ldrb	r1, [r6, r4]
 802246c:	26ff      	movs	r6, #255	; 0xff
 802246e:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8022472:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022476:	910a      	str	r1, [sp, #40]	; 0x28
 8022478:	46b6      	mov	lr, r6
 802247a:	e6f6      	b.n	802226a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 802247c:	26ff      	movs	r6, #255	; 0xff
 802247e:	46b2      	mov	sl, r6
 8022480:	e6f3      	b.n	802226a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 8022482:	26ff      	movs	r6, #255	; 0xff
 8022484:	46b2      	mov	sl, r6
 8022486:	e7f7      	b.n	8022478 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8022488:	b017      	add	sp, #92	; 0x5c
 802248a:	ecbd 8b08 	vpop	{d8-d11}
 802248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022494 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8022494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022498:	b08d      	sub	sp, #52	; 0x34
 802249a:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 802249e:	9103      	str	r1, [sp, #12]
 80224a0:	fb07 5803 	mla	r8, r7, r3, r5
 80224a4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80224a8:	9803      	ldr	r0, [sp, #12]
 80224aa:	2f00      	cmp	r7, #0
 80224ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80224ae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80224b2:	9903      	ldr	r1, [sp, #12]
 80224b4:	9c03      	ldr	r4, [sp, #12]
 80224b6:	eb02 0608 	add.w	r6, r2, r8
 80224ba:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80224be:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 80224c2:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80224c6:	7809      	ldrb	r1, [r1, #0]
 80224c8:	7840      	ldrb	r0, [r0, #1]
 80224ca:	78a4      	ldrb	r4, [r4, #2]
 80224cc:	db51      	blt.n	8022572 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80224ce:	45be      	cmp	lr, r7
 80224d0:	dd4f      	ble.n	8022572 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 80224d2:	2d00      	cmp	r5, #0
 80224d4:	db49      	blt.n	802256a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80224d6:	42ab      	cmp	r3, r5
 80224d8:	dd47      	ble.n	802256a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 80224da:	f812 2008 	ldrb.w	r2, [r2, r8]
 80224de:	9204      	str	r2, [sp, #16]
 80224e0:	7872      	ldrb	r2, [r6, #1]
 80224e2:	9205      	str	r2, [sp, #20]
 80224e4:	78b2      	ldrb	r2, [r6, #2]
 80224e6:	9206      	str	r2, [sp, #24]
 80224e8:	1c6a      	adds	r2, r5, #1
 80224ea:	d449      	bmi.n	8022580 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80224ec:	4293      	cmp	r3, r2
 80224ee:	dd47      	ble.n	8022580 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80224f0:	f1bc 0f00 	cmp.w	ip, #0
 80224f4:	d044      	beq.n	8022580 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 80224f6:	7972      	ldrb	r2, [r6, #5]
 80224f8:	f896 b003 	ldrb.w	fp, [r6, #3]
 80224fc:	f896 a004 	ldrb.w	sl, [r6, #4]
 8022500:	9201      	str	r2, [sp, #4]
 8022502:	3701      	adds	r7, #1
 8022504:	d444      	bmi.n	8022590 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8022506:	45be      	cmp	lr, r7
 8022508:	dd42      	ble.n	8022590 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802250a:	f1b9 0f00 	cmp.w	r9, #0
 802250e:	f000 80c1 	beq.w	8022694 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8022512:	2d00      	cmp	r5, #0
 8022514:	db38      	blt.n	8022588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8022516:	42ab      	cmp	r3, r5
 8022518:	dd36      	ble.n	8022588 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802251a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802251e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8022522:	2203      	movs	r2, #3
 8022524:	fb03 6702 	mla	r7, r3, r2, r6
 8022528:	fb03 6202 	mla	r2, r3, r2, r6
 802252c:	787f      	ldrb	r7, [r7, #1]
 802252e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022532:	9702      	str	r7, [sp, #8]
 8022534:	3501      	adds	r5, #1
 8022536:	d432      	bmi.n	802259e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8022538:	42ab      	cmp	r3, r5
 802253a:	dd30      	ble.n	802259e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802253c:	f1bc 0f00 	cmp.w	ip, #0
 8022540:	d031      	beq.n	80225a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8022542:	2703      	movs	r7, #3
 8022544:	fb13 7207 	smlabb	r2, r3, r7, r7
 8022548:	5cb5      	ldrb	r5, [r6, r2]
 802254a:	fb03 6207 	mla	r2, r3, r7, r6
 802254e:	fb03 6307 	mla	r3, r3, r7, r6
 8022552:	7912      	ldrb	r2, [r2, #4]
 8022554:	795e      	ldrb	r6, [r3, #5]
 8022556:	f1bc 0f0f 	cmp.w	ip, #15
 802255a:	d927      	bls.n	80225ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 802255c:	4b53      	ldr	r3, [pc, #332]	; (80226ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 802255e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022562:	4a53      	ldr	r2, [pc, #332]	; (80226b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 8022564:	4853      	ldr	r0, [pc, #332]	; (80226b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 8022566:	f002 fee7 	bl	8025338 <__assert_func>
 802256a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802256e:	9104      	str	r1, [sp, #16]
 8022570:	e7ba      	b.n	80224e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 8022572:	9401      	str	r4, [sp, #4]
 8022574:	4682      	mov	sl, r0
 8022576:	468b      	mov	fp, r1
 8022578:	9104      	str	r1, [sp, #16]
 802257a:	e9cd 0405 	strd	r0, r4, [sp, #20]
 802257e:	e7c0      	b.n	8022502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022580:	9401      	str	r4, [sp, #4]
 8022582:	4682      	mov	sl, r0
 8022584:	468b      	mov	fp, r1
 8022586:	e7bc      	b.n	8022502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8022588:	46a6      	mov	lr, r4
 802258a:	9002      	str	r0, [sp, #8]
 802258c:	4688      	mov	r8, r1
 802258e:	e7d1      	b.n	8022534 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8022590:	4626      	mov	r6, r4
 8022592:	4602      	mov	r2, r0
 8022594:	460d      	mov	r5, r1
 8022596:	46a6      	mov	lr, r4
 8022598:	9002      	str	r0, [sp, #8]
 802259a:	4688      	mov	r8, r1
 802259c:	e7db      	b.n	8022556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802259e:	4626      	mov	r6, r4
 80225a0:	4602      	mov	r2, r0
 80225a2:	460d      	mov	r5, r1
 80225a4:	e7d7      	b.n	8022556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80225a6:	4626      	mov	r6, r4
 80225a8:	4602      	mov	r2, r0
 80225aa:	460d      	mov	r5, r1
 80225ac:	f1b9 0f0f 	cmp.w	r9, #15
 80225b0:	d8d4      	bhi.n	802255c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80225b2:	fa1f f38c 	uxth.w	r3, ip
 80225b6:	fa1f fc89 	uxth.w	ip, r9
 80225ba:	fb03 f70c 	mul.w	r7, r3, ip
 80225be:	011b      	lsls	r3, r3, #4
 80225c0:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80225c4:	9707      	str	r7, [sp, #28]
 80225c6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80225ca:	fa1f fc8c 	uxth.w	ip, ip
 80225ce:	eba7 070c 	sub.w	r7, r7, ip
 80225d2:	b2bf      	uxth	r7, r7
 80225d4:	9709      	str	r7, [sp, #36]	; 0x24
 80225d6:	9f07      	ldr	r7, [sp, #28]
 80225d8:	1bdb      	subs	r3, r3, r7
 80225da:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80225de:	b29b      	uxth	r3, r3
 80225e0:	9708      	str	r7, [sp, #32]
 80225e2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80225e4:	930a      	str	r3, [sp, #40]	; 0x28
 80225e6:	ea6f 0907 	mvn.w	r9, r7
 80225ea:	fb03 fb0b 	mul.w	fp, r3, fp
 80225ee:	9f04      	ldr	r7, [sp, #16]
 80225f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225f2:	fa5f f989 	uxtb.w	r9, r9
 80225f6:	fb03 bb07 	mla	fp, r3, r7, fp
 80225fa:	9f07      	ldr	r7, [sp, #28]
 80225fc:	fb11 f109 	smulbb	r1, r1, r9
 8022600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022602:	fb0c b808 	mla	r8, ip, r8, fp
 8022606:	fb10 f009 	smulbb	r0, r0, r9
 802260a:	fb14 f409 	smulbb	r4, r4, r9
 802260e:	fb07 8805 	mla	r8, r7, r5, r8
 8022612:	9d08      	ldr	r5, [sp, #32]
 8022614:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022616:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802261a:	fb08 1805 	mla	r8, r8, r5, r1
 802261e:	9d05      	ldr	r5, [sp, #20]
 8022620:	fa1f f888 	uxth.w	r8, r8
 8022624:	f108 0101 	add.w	r1, r8, #1
 8022628:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802262c:	9903      	ldr	r1, [sp, #12]
 802262e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022632:	f881 8000 	strb.w	r8, [r1]
 8022636:	fb03 f10a 	mul.w	r1, r3, sl
 802263a:	fb07 1105 	mla	r1, r7, r5, r1
 802263e:	9d02      	ldr	r5, [sp, #8]
 8022640:	fb0c 1105 	mla	r1, ip, r5, r1
 8022644:	9d07      	ldr	r5, [sp, #28]
 8022646:	fb05 1102 	mla	r1, r5, r2, r1
 802264a:	9a08      	ldr	r2, [sp, #32]
 802264c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022650:	fb01 0102 	mla	r1, r1, r2, r0
 8022654:	9a03      	ldr	r2, [sp, #12]
 8022656:	b289      	uxth	r1, r1
 8022658:	1c48      	adds	r0, r1, #1
 802265a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802265e:	1209      	asrs	r1, r1, #8
 8022660:	7051      	strb	r1, [r2, #1]
 8022662:	9a01      	ldr	r2, [sp, #4]
 8022664:	4353      	muls	r3, r2
 8022666:	9a06      	ldr	r2, [sp, #24]
 8022668:	fb07 3702 	mla	r7, r7, r2, r3
 802266c:	9b08      	ldr	r3, [sp, #32]
 802266e:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8022672:	fb05 c606 	mla	r6, r5, r6, ip
 8022676:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802267a:	fb06 4603 	mla	r6, r6, r3, r4
 802267e:	9b03      	ldr	r3, [sp, #12]
 8022680:	b2b6      	uxth	r6, r6
 8022682:	f106 0e01 	add.w	lr, r6, #1
 8022686:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802268a:	1236      	asrs	r6, r6, #8
 802268c:	709e      	strb	r6, [r3, #2]
 802268e:	b00d      	add	sp, #52	; 0x34
 8022690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022694:	f1bc 0f0f 	cmp.w	ip, #15
 8022698:	f63f af60 	bhi.w	802255c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802269c:	4626      	mov	r6, r4
 802269e:	4602      	mov	r2, r0
 80226a0:	460d      	mov	r5, r1
 80226a2:	46a6      	mov	lr, r4
 80226a4:	9002      	str	r0, [sp, #8]
 80226a6:	4688      	mov	r8, r1
 80226a8:	e783      	b.n	80225b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80226aa:	bf00      	nop
 80226ac:	0802930c 	.word	0x0802930c
 80226b0:	08029802 	.word	0x08029802
 80226b4:	080293d5 	.word	0x080293d5

080226b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80226b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226bc:	ed2d 8b08 	vpush	{d8-d11}
 80226c0:	b0a1      	sub	sp, #132	; 0x84
 80226c2:	eeb0 aa40 	vmov.f32	s20, s0
 80226c6:	eef0 9a60 	vmov.f32	s19, s1
 80226ca:	9307      	str	r3, [sp, #28]
 80226cc:	eeb0 9a41 	vmov.f32	s18, s2
 80226d0:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 80226d4:	eeb0 8a62 	vmov.f32	s16, s5
 80226d8:	9210      	str	r2, [sp, #64]	; 0x40
 80226da:	eef0 8a43 	vmov.f32	s17, s6
 80226de:	9308      	str	r3, [sp, #32]
 80226e0:	eef0 ba44 	vmov.f32	s23, s8
 80226e4:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 80226e8:	eeb0 ba64 	vmov.f32	s22, s9
 80226ec:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 80226ee:	eef0 aa45 	vmov.f32	s21, s10
 80226f2:	930a      	str	r3, [sp, #40]	; 0x28
 80226f4:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 80226f8:	901f      	str	r0, [sp, #124]	; 0x7c
 80226fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80226fc:	6850      	ldr	r0, [r2, #4]
 80226fe:	910e      	str	r1, [sp, #56]	; 0x38
 8022700:	6812      	ldr	r2, [r2, #0]
 8022702:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8022706:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802270a:	fb00 1303 	mla	r3, r0, r3, r1
 802270e:	9908      	ldr	r1, [sp, #32]
 8022710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022714:	18d3      	adds	r3, r2, r3
 8022716:	2203      	movs	r2, #3
 8022718:	9309      	str	r3, [sp, #36]	; 0x24
 802271a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	930c      	str	r3, [sp, #48]	; 0x30
 8022720:	f06f 0304 	mvn.w	r3, #4
 8022724:	fb11 3302 	smlabb	r3, r1, r2, r3
 8022728:	930d      	str	r3, [sp, #52]	; 0x34
 802272a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802272c:	43db      	mvns	r3, r3
 802272e:	b2db      	uxtb	r3, r3
 8022730:	930b      	str	r3, [sp, #44]	; 0x2c
 8022732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022734:	2b00      	cmp	r3, #0
 8022736:	dc03      	bgt.n	8022740 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8022738:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802273a:	2b00      	cmp	r3, #0
 802273c:	f340 81df 	ble.w	8022afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022740:	9b07      	ldr	r3, [sp, #28]
 8022742:	2b00      	cmp	r3, #0
 8022744:	f340 80f2 	ble.w	802292c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8022748:	ea5f 4228 	movs.w	r2, r8, asr #16
 802274c:	ea4f 432b 	mov.w	r3, fp, asr #16
 8022750:	d430      	bmi.n	80227b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022752:	1c51      	adds	r1, r2, #1
 8022754:	9808      	ldr	r0, [sp, #32]
 8022756:	4281      	cmp	r1, r0
 8022758:	da2f      	bge.n	80227ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802275a:	2b00      	cmp	r3, #0
 802275c:	db2d      	blt.n	80227ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802275e:	1c59      	adds	r1, r3, #1
 8022760:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022762:	4288      	cmp	r0, r1
 8022764:	dd29      	ble.n	80227ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8022766:	9b07      	ldr	r3, [sp, #28]
 8022768:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802276a:	3b01      	subs	r3, #1
 802276c:	fb02 8203 	mla	r2, r2, r3, r8
 8022770:	1412      	asrs	r2, r2, #16
 8022772:	d42d      	bmi.n	80227d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022774:	3201      	adds	r2, #1
 8022776:	9908      	ldr	r1, [sp, #32]
 8022778:	4291      	cmp	r1, r2
 802277a:	dd29      	ble.n	80227d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802277c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 802277e:	fb02 b303 	mla	r3, r2, r3, fp
 8022782:	141b      	asrs	r3, r3, #16
 8022784:	d424      	bmi.n	80227d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022786:	3301      	adds	r3, #1
 8022788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802278a:	429a      	cmp	r2, r3
 802278c:	dd20      	ble.n	80227d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 802278e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022790:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022794:	1cde      	adds	r6, r3, #3
 8022796:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 802279a:	f1bc 0f00 	cmp.w	ip, #0
 802279e:	f300 811f 	bgt.w	80229e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 80227a2:	9b07      	ldr	r3, [sp, #28]
 80227a4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80227a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227ae:	4423      	add	r3, r4
 80227b0:	9309      	str	r3, [sp, #36]	; 0x24
 80227b2:	e0bd      	b.n	8022930 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80227b4:	1c57      	adds	r7, r2, #1
 80227b6:	f040 80ae 	bne.w	8022916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80227ba:	9908      	ldr	r1, [sp, #32]
 80227bc:	428a      	cmp	r2, r1
 80227be:	f280 80aa 	bge.w	8022916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80227c2:	1c5e      	adds	r6, r3, #1
 80227c4:	f2c0 80a7 	blt.w	8022916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80227c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80227ca:	4293      	cmp	r3, r2
 80227cc:	f280 80a3 	bge.w	8022916 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 80227d0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80227d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80227d6:	f1ba 0f00 	cmp.w	sl, #0
 80227da:	dde2      	ble.n	80227a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80227dc:	ea5f 4028 	movs.w	r0, r8, asr #16
 80227e0:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80227e4:	ea4f 412b 	mov.w	r1, fp, asr #16
 80227e8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80227ec:	f100 80df 	bmi.w	80229ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80227f0:	1c45      	adds	r5, r0, #1
 80227f2:	9f08      	ldr	r7, [sp, #32]
 80227f4:	42af      	cmp	r7, r5
 80227f6:	f340 80dc 	ble.w	80229b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 80227fa:	2900      	cmp	r1, #0
 80227fc:	f2c0 80d9 	blt.w	80229b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8022800:	1c4d      	adds	r5, r1, #1
 8022802:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022804:	42af      	cmp	r7, r5
 8022806:	f340 80d4 	ble.w	80229b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802280a:	9d08      	ldr	r5, [sp, #32]
 802280c:	fb05 0101 	mla	r1, r5, r1, r0
 8022810:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022812:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022816:	1845      	adds	r5, r0, r1
 8022818:	5c40      	ldrb	r0, [r0, r1]
 802281a:	792f      	ldrb	r7, [r5, #4]
 802281c:	7869      	ldrb	r1, [r5, #1]
 802281e:	9711      	str	r7, [sp, #68]	; 0x44
 8022820:	796f      	ldrb	r7, [r5, #5]
 8022822:	f895 e002 	ldrb.w	lr, [r5, #2]
 8022826:	f895 9003 	ldrb.w	r9, [r5, #3]
 802282a:	9712      	str	r7, [sp, #72]	; 0x48
 802282c:	b17a      	cbz	r2, 802284e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 802282e:	3505      	adds	r5, #5
 8022830:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022832:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022834:	19ef      	adds	r7, r5, r7
 8022836:	5d2d      	ldrb	r5, [r5, r4]
 8022838:	787c      	ldrb	r4, [r7, #1]
 802283a:	9513      	str	r5, [sp, #76]	; 0x4c
 802283c:	9415      	str	r4, [sp, #84]	; 0x54
 802283e:	78bc      	ldrb	r4, [r7, #2]
 8022840:	9417      	str	r4, [sp, #92]	; 0x5c
 8022842:	78fc      	ldrb	r4, [r7, #3]
 8022844:	9414      	str	r4, [sp, #80]	; 0x50
 8022846:	793c      	ldrb	r4, [r7, #4]
 8022848:	9416      	str	r4, [sp, #88]	; 0x58
 802284a:	797c      	ldrb	r4, [r7, #5]
 802284c:	9418      	str	r4, [sp, #96]	; 0x60
 802284e:	b29b      	uxth	r3, r3
 8022850:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022852:	b292      	uxth	r2, r2
 8022854:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8022858:	fb03 f702 	mul.w	r7, r3, r2
 802285c:	011b      	lsls	r3, r3, #4
 802285e:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 8022862:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8022866:	1bdb      	subs	r3, r3, r7
 8022868:	b292      	uxth	r2, r2
 802286a:	b29b      	uxth	r3, r3
 802286c:	ebac 0c02 	sub.w	ip, ip, r2
 8022870:	fb03 f909 	mul.w	r9, r3, r9
 8022874:	fa1f fc8c 	uxth.w	ip, ip
 8022878:	fb0c 9000 	mla	r0, ip, r0, r9
 802287c:	f896 9000 	ldrb.w	r9, [r6]
 8022880:	fb02 0004 	mla	r0, r2, r4, r0
 8022884:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022886:	fb07 0004 	mla	r0, r7, r4, r0
 802288a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802288c:	fb19 f904 	smulbb	r9, r9, r4
 8022890:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022894:	fb00 9005 	mla	r0, r0, r5, r9
 8022898:	b280      	uxth	r0, r0
 802289a:	f100 0901 	add.w	r9, r0, #1
 802289e:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80228a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80228a4:	4358      	muls	r0, r3
 80228a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80228aa:	fb0c 0101 	mla	r1, ip, r1, r0
 80228ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80228b0:	f886 9000 	strb.w	r9, [r6]
 80228b4:	fb02 1100 	mla	r1, r2, r0, r1
 80228b8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80228ba:	fb07 1100 	mla	r1, r7, r0, r1
 80228be:	7870      	ldrb	r0, [r6, #1]
 80228c0:	fb10 f004 	smulbb	r0, r0, r4
 80228c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80228c8:	fb01 0105 	mla	r1, r1, r5, r0
 80228cc:	b289      	uxth	r1, r1
 80228ce:	1c48      	adds	r0, r1, #1
 80228d0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80228d4:	1209      	asrs	r1, r1, #8
 80228d6:	7071      	strb	r1, [r6, #1]
 80228d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80228da:	434b      	muls	r3, r1
 80228dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80228de:	fb0c 330e 	mla	r3, ip, lr, r3
 80228e2:	fb02 3201 	mla	r2, r2, r1, r3
 80228e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80228e8:	fb07 2703 	mla	r7, r7, r3, r2
 80228ec:	78b2      	ldrb	r2, [r6, #2]
 80228ee:	fb12 f204 	smulbb	r2, r2, r4
 80228f2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80228f6:	fb07 2505 	mla	r5, r7, r5, r2
 80228fa:	b2ad      	uxth	r5, r5
 80228fc:	1c6f      	adds	r7, r5, #1
 80228fe:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8022902:	122d      	asrs	r5, r5, #8
 8022904:	70b5      	strb	r5, [r6, #2]
 8022906:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022908:	3603      	adds	r6, #3
 802290a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802290e:	4498      	add	r8, r3
 8022910:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022912:	449b      	add	fp, r3
 8022914:	e75f      	b.n	80227d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8022916:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022918:	4498      	add	r8, r3
 802291a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802291c:	449b      	add	fp, r3
 802291e:	9b07      	ldr	r3, [sp, #28]
 8022920:	3b01      	subs	r3, #1
 8022922:	9307      	str	r3, [sp, #28]
 8022924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022926:	3303      	adds	r3, #3
 8022928:	9309      	str	r3, [sp, #36]	; 0x24
 802292a:	e709      	b.n	8022740 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 802292c:	f47f af1b 	bne.w	8022766 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8022930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022932:	2b00      	cmp	r3, #0
 8022934:	f340 80e3 	ble.w	8022afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8022938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802293c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802293e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022942:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022946:	eef0 6a48 	vmov.f32	s13, s16
 802294a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802294e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022956:	ee16 8a90 	vmov	r8, s13
 802295a:	eef0 6a68 	vmov.f32	s13, s17
 802295e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022962:	ee16 ba90 	vmov	fp, s13
 8022966:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802296a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802296e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022972:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022976:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802297a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802297e:	ee18 2a10 	vmov	r2, s16
 8022982:	eeb0 8a47 	vmov.f32	s16, s14
 8022986:	fb92 f3f3 	sdiv	r3, r2, r3
 802298a:	ee18 2a90 	vmov	r2, s17
 802298e:	9335      	str	r3, [sp, #212]	; 0xd4
 8022990:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022992:	eef0 8a67 	vmov.f32	s17, s15
 8022996:	fb92 f3f3 	sdiv	r3, r2, r3
 802299a:	9336      	str	r3, [sp, #216]	; 0xd8
 802299c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802299e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80229a0:	3b01      	subs	r3, #1
 80229a2:	930e      	str	r3, [sp, #56]	; 0x38
 80229a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80229a6:	bf08      	it	eq
 80229a8:	4613      	moveq	r3, r2
 80229aa:	9307      	str	r3, [sp, #28]
 80229ac:	e6c1      	b.n	8022732 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80229ae:	1c45      	adds	r5, r0, #1
 80229b0:	d1a9      	bne.n	8022906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80229b2:	9c08      	ldr	r4, [sp, #32]
 80229b4:	42a0      	cmp	r0, r4
 80229b6:	daa6      	bge.n	8022906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80229b8:	1c4c      	adds	r4, r1, #1
 80229ba:	dba4      	blt.n	8022906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80229bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80229be:	428c      	cmp	r4, r1
 80229c0:	dda1      	ble.n	8022906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80229c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80229c4:	9001      	str	r0, [sp, #4]
 80229c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80229c8:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80229cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229ce:	4631      	mov	r1, r6
 80229d0:	e9cd 2404 	strd	r2, r4, [sp, #16]
 80229d4:	9300      	str	r3, [sp, #0]
 80229d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80229d8:	9b08      	ldr	r3, [sp, #32]
 80229da:	f7ff fd5b 	bl	8022494 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80229de:	e792      	b.n	8022906 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 80229e0:	ea4f 4228 	mov.w	r2, r8, asr #16
 80229e4:	9c08      	ldr	r4, [sp, #32]
 80229e6:	ea4f 402b 	mov.w	r0, fp, asr #16
 80229ea:	f3cb 3103 	ubfx	r1, fp, #12, #4
 80229ee:	f3c8 3303 	ubfx	r3, r8, #12, #4
 80229f2:	fb04 2000 	mla	r0, r4, r0, r2
 80229f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80229f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80229fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80229fe:	4402      	add	r2, r0
 8022a00:	5c25      	ldrb	r5, [r4, r0]
 8022a02:	7894      	ldrb	r4, [r2, #2]
 8022a04:	7850      	ldrb	r0, [r2, #1]
 8022a06:	9411      	str	r4, [sp, #68]	; 0x44
 8022a08:	7954      	ldrb	r4, [r2, #5]
 8022a0a:	f892 a003 	ldrb.w	sl, [r2, #3]
 8022a0e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8022a12:	9412      	str	r4, [sp, #72]	; 0x48
 8022a14:	b171      	cbz	r1, 8022a34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8022a16:	3205      	adds	r2, #5
 8022a18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022a1a:	1917      	adds	r7, r2, r4
 8022a1c:	5d12      	ldrb	r2, [r2, r4]
 8022a1e:	9219      	str	r2, [sp, #100]	; 0x64
 8022a20:	787a      	ldrb	r2, [r7, #1]
 8022a22:	921b      	str	r2, [sp, #108]	; 0x6c
 8022a24:	78ba      	ldrb	r2, [r7, #2]
 8022a26:	921d      	str	r2, [sp, #116]	; 0x74
 8022a28:	78fa      	ldrb	r2, [r7, #3]
 8022a2a:	921a      	str	r2, [sp, #104]	; 0x68
 8022a2c:	793a      	ldrb	r2, [r7, #4]
 8022a2e:	921c      	str	r2, [sp, #112]	; 0x70
 8022a30:	797a      	ldrb	r2, [r7, #5]
 8022a32:	921e      	str	r2, [sp, #120]	; 0x78
 8022a34:	b29b      	uxth	r3, r3
 8022a36:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8022a38:	b289      	uxth	r1, r1
 8022a3a:	3603      	adds	r6, #3
 8022a3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022a40:	fb03 f201 	mul.w	r2, r3, r1
 8022a44:	011b      	lsls	r3, r3, #4
 8022a46:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8022a4a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022a4e:	1a9b      	subs	r3, r3, r2
 8022a50:	b289      	uxth	r1, r1
 8022a52:	b29b      	uxth	r3, r3
 8022a54:	1a7f      	subs	r7, r7, r1
 8022a56:	fb03 fa0a 	mul.w	sl, r3, sl
 8022a5a:	b2bf      	uxth	r7, r7
 8022a5c:	fb03 f909 	mul.w	r9, r3, r9
 8022a60:	fb07 a505 	mla	r5, r7, r5, sl
 8022a64:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8022a68:	fb07 9000 	mla	r0, r7, r0, r9
 8022a6c:	fb01 5504 	mla	r5, r1, r4, r5
 8022a70:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022a72:	fb02 5504 	mla	r5, r2, r4, r5
 8022a76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022a78:	fb1a fa04 	smulbb	sl, sl, r4
 8022a7c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8022a80:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8022a82:	fb05 a50e 	mla	r5, r5, lr, sl
 8022a86:	fb01 0004 	mla	r0, r1, r4, r0
 8022a8a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8022a8c:	b2ad      	uxth	r5, r5
 8022a8e:	fb02 0004 	mla	r0, r2, r4, r0
 8022a92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022a94:	f105 0a01 	add.w	sl, r5, #1
 8022a98:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022a9c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8022aa0:	122d      	asrs	r5, r5, #8
 8022aa2:	f806 5c06 	strb.w	r5, [r6, #-6]
 8022aa6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8022aaa:	fb15 f504 	smulbb	r5, r5, r4
 8022aae:	fb00 500e 	mla	r0, r0, lr, r5
 8022ab2:	b280      	uxth	r0, r0
 8022ab4:	1c45      	adds	r5, r0, #1
 8022ab6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022aba:	1200      	asrs	r0, r0, #8
 8022abc:	f806 0c05 	strb.w	r0, [r6, #-5]
 8022ac0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022ac2:	4343      	muls	r3, r0
 8022ac4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022ac6:	fb07 3300 	mla	r3, r7, r0, r3
 8022aca:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022acc:	fb01 3100 	mla	r1, r1, r0, r3
 8022ad0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022ad2:	fb02 1203 	mla	r2, r2, r3, r1
 8022ad6:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8022ada:	fb11 f104 	smulbb	r1, r1, r4
 8022ade:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022ae2:	fb02 120e 	mla	r2, r2, lr, r1
 8022ae6:	b292      	uxth	r2, r2
 8022ae8:	1c53      	adds	r3, r2, #1
 8022aea:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022aee:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022af0:	1212      	asrs	r2, r2, #8
 8022af2:	4498      	add	r8, r3
 8022af4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8022af6:	f806 2c04 	strb.w	r2, [r6, #-4]
 8022afa:	449b      	add	fp, r3
 8022afc:	e64d      	b.n	802279a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8022afe:	b021      	add	sp, #132	; 0x84
 8022b00:	ecbd 8b08 	vpop	{d8-d11}
 8022b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8022b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b0c:	b085      	sub	sp, #20
 8022b0e:	784d      	ldrb	r5, [r1, #1]
 8022b10:	788e      	ldrb	r6, [r1, #2]
 8022b12:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8022b16:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8022b1a:	9403      	str	r4, [sp, #12]
 8022b1c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022b20:	780c      	ldrb	r4, [r1, #0]
 8022b22:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8022b26:	fb07 ce03 	mla	lr, r7, r3, ip
 8022b2a:	2f00      	cmp	r7, #0
 8022b2c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022b30:	eb02 0b0e 	add.w	fp, r2, lr
 8022b34:	db56      	blt.n	8022be4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022b36:	45b9      	cmp	r9, r7
 8022b38:	dd54      	ble.n	8022be4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8022b3a:	f1bc 0f00 	cmp.w	ip, #0
 8022b3e:	db4d      	blt.n	8022bdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022b40:	4563      	cmp	r3, ip
 8022b42:	dd4b      	ble.n	8022bdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8022b44:	f812 200e 	ldrb.w	r2, [r2, lr]
 8022b48:	9200      	str	r2, [sp, #0]
 8022b4a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8022b4e:	9201      	str	r2, [sp, #4]
 8022b50:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8022b54:	9202      	str	r2, [sp, #8]
 8022b56:	f11c 0201 	adds.w	r2, ip, #1
 8022b5a:	d44a      	bmi.n	8022bf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022b5c:	4293      	cmp	r3, r2
 8022b5e:	dd48      	ble.n	8022bf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022b60:	2800      	cmp	r0, #0
 8022b62:	d046      	beq.n	8022bf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8022b64:	f89b e003 	ldrb.w	lr, [fp, #3]
 8022b68:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8022b6c:	f89b a005 	ldrb.w	sl, [fp, #5]
 8022b70:	3701      	adds	r7, #1
 8022b72:	d446      	bmi.n	8022c02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022b74:	45b9      	cmp	r9, r7
 8022b76:	dd44      	ble.n	8022c02 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8022b78:	9a03      	ldr	r2, [sp, #12]
 8022b7a:	2a00      	cmp	r2, #0
 8022b7c:	d045      	beq.n	8022c0a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8022b7e:	f1bc 0f00 	cmp.w	ip, #0
 8022b82:	db3a      	blt.n	8022bfa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022b84:	4563      	cmp	r3, ip
 8022b86:	dd38      	ble.n	8022bfa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8022b88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8022b8c:	f04f 0903 	mov.w	r9, #3
 8022b90:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8022b94:	fb03 b209 	mla	r2, r3, r9, fp
 8022b98:	fb03 b909 	mla	r9, r3, r9, fp
 8022b9c:	7852      	ldrb	r2, [r2, #1]
 8022b9e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8022ba2:	f11c 0c01 	adds.w	ip, ip, #1
 8022ba6:	d40d      	bmi.n	8022bc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022ba8:	4563      	cmp	r3, ip
 8022baa:	dd0b      	ble.n	8022bc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022bac:	b160      	cbz	r0, 8022bc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8022bae:	2603      	movs	r6, #3
 8022bb0:	fb13 6406 	smlabb	r4, r3, r6, r6
 8022bb4:	fb03 b506 	mla	r5, r3, r6, fp
 8022bb8:	fb03 b306 	mla	r3, r3, r6, fp
 8022bbc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8022bc0:	792d      	ldrb	r5, [r5, #4]
 8022bc2:	795e      	ldrb	r6, [r3, #5]
 8022bc4:	280f      	cmp	r0, #15
 8022bc6:	d802      	bhi.n	8022bce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022bc8:	9b03      	ldr	r3, [sp, #12]
 8022bca:	2b0f      	cmp	r3, #15
 8022bcc:	d922      	bls.n	8022c14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8022bce:	4b2f      	ldr	r3, [pc, #188]	; (8022c8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8022bd0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022bd4:	4a2e      	ldr	r2, [pc, #184]	; (8022c90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8022bd6:	482f      	ldr	r0, [pc, #188]	; (8022c94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8022bd8:	f002 fbae 	bl	8025338 <__assert_func>
 8022bdc:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022be0:	9400      	str	r4, [sp, #0]
 8022be2:	e7b8      	b.n	8022b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8022be4:	46b2      	mov	sl, r6
 8022be6:	46a8      	mov	r8, r5
 8022be8:	46a6      	mov	lr, r4
 8022bea:	9400      	str	r4, [sp, #0]
 8022bec:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8022bf0:	e7be      	b.n	8022b70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022bf2:	46b2      	mov	sl, r6
 8022bf4:	46a8      	mov	r8, r5
 8022bf6:	46a6      	mov	lr, r4
 8022bf8:	e7ba      	b.n	8022b70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8022bfa:	46b1      	mov	r9, r6
 8022bfc:	462a      	mov	r2, r5
 8022bfe:	4627      	mov	r7, r4
 8022c00:	e7cf      	b.n	8022ba2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8022c02:	46b1      	mov	r9, r6
 8022c04:	462a      	mov	r2, r5
 8022c06:	4627      	mov	r7, r4
 8022c08:	e7dc      	b.n	8022bc4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8022c0a:	280f      	cmp	r0, #15
 8022c0c:	d8df      	bhi.n	8022bce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8022c0e:	46b1      	mov	r9, r6
 8022c10:	462a      	mov	r2, r5
 8022c12:	4627      	mov	r7, r4
 8022c14:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8022c18:	b280      	uxth	r0, r0
 8022c1a:	fb00 f30b 	mul.w	r3, r0, fp
 8022c1e:	0100      	lsls	r0, r0, #4
 8022c20:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8022c24:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8022c28:	1ac0      	subs	r0, r0, r3
 8022c2a:	fa1f fb8b 	uxth.w	fp, fp
 8022c2e:	b280      	uxth	r0, r0
 8022c30:	ebac 0c0b 	sub.w	ip, ip, fp
 8022c34:	9003      	str	r0, [sp, #12]
 8022c36:	fa1f fc8c 	uxth.w	ip, ip
 8022c3a:	fb00 fe0e 	mul.w	lr, r0, lr
 8022c3e:	9800      	ldr	r0, [sp, #0]
 8022c40:	fb0c ee00 	mla	lr, ip, r0, lr
 8022c44:	9803      	ldr	r0, [sp, #12]
 8022c46:	fb00 f808 	mul.w	r8, r0, r8
 8022c4a:	9801      	ldr	r0, [sp, #4]
 8022c4c:	fb0b ee07 	mla	lr, fp, r7, lr
 8022c50:	fb0c 8800 	mla	r8, ip, r0, r8
 8022c54:	fb03 ee04 	mla	lr, r3, r4, lr
 8022c58:	fb0b 8202 	mla	r2, fp, r2, r8
 8022c5c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022c60:	fb03 2505 	mla	r5, r3, r5, r2
 8022c64:	9a03      	ldr	r2, [sp, #12]
 8022c66:	f881 e000 	strb.w	lr, [r1]
 8022c6a:	fb02 f00a 	mul.w	r0, r2, sl
 8022c6e:	9a02      	ldr	r2, [sp, #8]
 8022c70:	122d      	asrs	r5, r5, #8
 8022c72:	fb0c 0c02 	mla	ip, ip, r2, r0
 8022c76:	704d      	strb	r5, [r1, #1]
 8022c78:	fb0b c909 	mla	r9, fp, r9, ip
 8022c7c:	fb03 9606 	mla	r6, r3, r6, r9
 8022c80:	1236      	asrs	r6, r6, #8
 8022c82:	708e      	strb	r6, [r1, #2]
 8022c84:	b005      	add	sp, #20
 8022c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c8a:	bf00      	nop
 8022c8c:	0802930c 	.word	0x0802930c
 8022c90:	08029802 	.word	0x08029802
 8022c94:	080293d5 	.word	0x080293d5

08022c98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c9c:	ed2d 8b0a 	vpush	{d8-d12}
 8022ca0:	b09d      	sub	sp, #116	; 0x74
 8022ca2:	eeb0 aa40 	vmov.f32	s20, s0
 8022ca6:	eef0 9a60 	vmov.f32	s19, s1
 8022caa:	9306      	str	r3, [sp, #24]
 8022cac:	eeb0 9a41 	vmov.f32	s18, s2
 8022cb0:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8022cb4:	eeb0 8a62 	vmov.f32	s16, s5
 8022cb8:	901b      	str	r0, [sp, #108]	; 0x6c
 8022cba:	eef0 8a43 	vmov.f32	s17, s6
 8022cbe:	9307      	str	r3, [sp, #28]
 8022cc0:	eeb0 ca44 	vmov.f32	s24, s8
 8022cc4:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8022cc8:	eef0 ba64 	vmov.f32	s23, s9
 8022ccc:	eeb0 ba45 	vmov.f32	s22, s10
 8022cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8022cd2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8022cd6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8022cda:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8022cdc:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8022ce0:	6850      	ldr	r0, [r2, #4]
 8022ce2:	6812      	ldr	r2, [r2, #0]
 8022ce4:	fb00 1303 	mla	r3, r0, r3, r1
 8022ce8:	9907      	ldr	r1, [sp, #28]
 8022cea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cee:	18d3      	adds	r3, r2, r3
 8022cf0:	2203      	movs	r2, #3
 8022cf2:	9308      	str	r3, [sp, #32]
 8022cf4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8022cf6:	681b      	ldr	r3, [r3, #0]
 8022cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8022cfa:	f06f 0304 	mvn.w	r3, #4
 8022cfe:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8022d02:	fb11 3302 	smlabb	r3, r1, r2, r3
 8022d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d0a:	2b00      	cmp	r3, #0
 8022d0c:	dc03      	bgt.n	8022d16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	f340 8193 	ble.w	802303c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8022d16:	9b06      	ldr	r3, [sp, #24]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	f340 80d0 	ble.w	8022ebe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8022d1e:	1432      	asrs	r2, r6, #16
 8022d20:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022d24:	d42f      	bmi.n	8022d86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8022d26:	1c51      	adds	r1, r2, #1
 8022d28:	9807      	ldr	r0, [sp, #28]
 8022d2a:	4281      	cmp	r1, r0
 8022d2c:	da2e      	bge.n	8022d8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	db2c      	blt.n	8022d8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022d32:	1c59      	adds	r1, r3, #1
 8022d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d36:	4288      	cmp	r0, r1
 8022d38:	dd28      	ble.n	8022d8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022d3a:	9b06      	ldr	r3, [sp, #24]
 8022d3c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8022d3e:	3b01      	subs	r3, #1
 8022d40:	fb02 6203 	mla	r2, r2, r3, r6
 8022d44:	1412      	asrs	r2, r2, #16
 8022d46:	d42c      	bmi.n	8022da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022d48:	3201      	adds	r2, #1
 8022d4a:	9907      	ldr	r1, [sp, #28]
 8022d4c:	4291      	cmp	r1, r2
 8022d4e:	dd28      	ble.n	8022da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022d50:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8022d52:	fb02 5303 	mla	r3, r2, r3, r5
 8022d56:	141b      	asrs	r3, r3, #16
 8022d58:	d423      	bmi.n	8022da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022d5a:	3301      	adds	r3, #1
 8022d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d5e:	429a      	cmp	r2, r3
 8022d60:	dd1f      	ble.n	8022da2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8022d62:	9b08      	ldr	r3, [sp, #32]
 8022d64:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022d68:	f103 0c03 	add.w	ip, r3, #3
 8022d6c:	f1be 0f00 	cmp.w	lr, #0
 8022d70:	f300 80fa 	bgt.w	8022f68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8022d74:	9b06      	ldr	r3, [sp, #24]
 8022d76:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022d7a:	9b08      	ldr	r3, [sp, #32]
 8022d7c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022d80:	4423      	add	r3, r4
 8022d82:	9308      	str	r3, [sp, #32]
 8022d84:	e09d      	b.n	8022ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8022d86:	1c51      	adds	r1, r2, #1
 8022d88:	f040 808e 	bne.w	8022ea8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022d8c:	9907      	ldr	r1, [sp, #28]
 8022d8e:	428a      	cmp	r2, r1
 8022d90:	f280 808a 	bge.w	8022ea8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022d94:	1c5f      	adds	r7, r3, #1
 8022d96:	f2c0 8087 	blt.w	8022ea8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d9c:	4293      	cmp	r3, r2
 8022d9e:	f280 8083 	bge.w	8022ea8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8022da2:	9f06      	ldr	r7, [sp, #24]
 8022da4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8022da8:	2f00      	cmp	r7, #0
 8022daa:	dde3      	ble.n	8022d74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8022dac:	1432      	asrs	r2, r6, #16
 8022dae:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022db2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022db6:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8022dba:	f100 80bf 	bmi.w	8022f3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8022dbe:	1c50      	adds	r0, r2, #1
 8022dc0:	9c07      	ldr	r4, [sp, #28]
 8022dc2:	4284      	cmp	r4, r0
 8022dc4:	f340 80bc 	ble.w	8022f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	f2c0 80b9 	blt.w	8022f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022dce:	1c58      	adds	r0, r3, #1
 8022dd0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022dd2:	4284      	cmp	r4, r0
 8022dd4:	f340 80b4 	ble.w	8022f40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8022dd8:	9807      	ldr	r0, [sp, #28]
 8022dda:	fb00 2303 	mla	r3, r0, r3, r2
 8022dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022de0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022de2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022de6:	441a      	add	r2, r3
 8022de8:	f810 c003 	ldrb.w	ip, [r0, r3]
 8022dec:	7953      	ldrb	r3, [r2, #5]
 8022dee:	7850      	ldrb	r0, [r2, #1]
 8022df0:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022df4:	f892 9003 	ldrb.w	r9, [r2, #3]
 8022df8:	f892 8004 	ldrb.w	r8, [r2, #4]
 8022dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8022dfe:	f1bb 0f00 	cmp.w	fp, #0
 8022e02:	d00f      	beq.n	8022e24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8022e04:	3205      	adds	r2, #5
 8022e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022e08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e0a:	18d3      	adds	r3, r2, r3
 8022e0c:	5d12      	ldrb	r2, [r2, r4]
 8022e0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8022e10:	785a      	ldrb	r2, [r3, #1]
 8022e12:	9211      	str	r2, [sp, #68]	; 0x44
 8022e14:	789a      	ldrb	r2, [r3, #2]
 8022e16:	9213      	str	r2, [sp, #76]	; 0x4c
 8022e18:	78da      	ldrb	r2, [r3, #3]
 8022e1a:	9210      	str	r2, [sp, #64]	; 0x40
 8022e1c:	791a      	ldrb	r2, [r3, #4]
 8022e1e:	795b      	ldrb	r3, [r3, #5]
 8022e20:	9212      	str	r2, [sp, #72]	; 0x48
 8022e22:	9314      	str	r3, [sp, #80]	; 0x50
 8022e24:	b28b      	uxth	r3, r1
 8022e26:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022e28:	fa1f f28b 	uxth.w	r2, fp
 8022e2c:	fb03 fb02 	mul.w	fp, r3, r2
 8022e30:	011b      	lsls	r3, r3, #4
 8022e32:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8022e36:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8022e3a:	eba3 030b 	sub.w	r3, r3, fp
 8022e3e:	b292      	uxth	r2, r2
 8022e40:	b29b      	uxth	r3, r3
 8022e42:	1a89      	subs	r1, r1, r2
 8022e44:	fb03 f808 	mul.w	r8, r3, r8
 8022e48:	b289      	uxth	r1, r1
 8022e4a:	fb03 f909 	mul.w	r9, r3, r9
 8022e4e:	fb01 8800 	mla	r8, r1, r0, r8
 8022e52:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022e54:	fb01 990c 	mla	r9, r1, ip, r9
 8022e58:	fb02 8800 	mla	r8, r2, r0, r8
 8022e5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022e5e:	fb02 9904 	mla	r9, r2, r4, r9
 8022e62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022e64:	fb0b 8800 	mla	r8, fp, r0, r8
 8022e68:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022e6a:	fb0b 9904 	mla	r9, fp, r4, r9
 8022e6e:	4343      	muls	r3, r0
 8022e70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022e74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022e78:	fb01 330e 	mla	r3, r1, lr, r3
 8022e7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8022e7e:	f88a 9000 	strb.w	r9, [sl]
 8022e82:	fb02 3201 	mla	r2, r2, r1, r3
 8022e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022e88:	f88a 8001 	strb.w	r8, [sl, #1]
 8022e8c:	fb0b 2b03 	mla	fp, fp, r3, r2
 8022e90:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022e94:	f88a b002 	strb.w	fp, [sl, #2]
 8022e98:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022e9a:	f10a 0a03 	add.w	sl, sl, #3
 8022e9e:	3f01      	subs	r7, #1
 8022ea0:	441e      	add	r6, r3
 8022ea2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022ea4:	441d      	add	r5, r3
 8022ea6:	e77f      	b.n	8022da8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8022ea8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8022eaa:	441e      	add	r6, r3
 8022eac:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8022eae:	441d      	add	r5, r3
 8022eb0:	9b06      	ldr	r3, [sp, #24]
 8022eb2:	3b01      	subs	r3, #1
 8022eb4:	9306      	str	r3, [sp, #24]
 8022eb6:	9b08      	ldr	r3, [sp, #32]
 8022eb8:	3303      	adds	r3, #3
 8022eba:	9308      	str	r3, [sp, #32]
 8022ebc:	e72b      	b.n	8022d16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8022ebe:	f47f af3c 	bne.w	8022d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8022ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ec4:	2b00      	cmp	r3, #0
 8022ec6:	f340 80b9 	ble.w	802303c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8022eca:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8022ece:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022ed0:	ee79 9aab 	vadd.f32	s19, s19, s23
 8022ed4:	eef0 6a48 	vmov.f32	s13, s16
 8022ed8:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8022edc:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8022ee0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ee4:	ee16 6a90 	vmov	r6, s13
 8022ee8:	eef0 6a68 	vmov.f32	s13, s17
 8022eec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ef0:	ee16 5a90 	vmov	r5, s13
 8022ef4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ef8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022efc:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022f00:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022f04:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022f08:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022f0c:	ee18 2a10 	vmov	r2, s16
 8022f10:	eeb0 8a47 	vmov.f32	s16, s14
 8022f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f18:	ee18 2a90 	vmov	r2, s17
 8022f1c:	9333      	str	r3, [sp, #204]	; 0xcc
 8022f1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022f20:	eef0 8a67 	vmov.f32	s17, s15
 8022f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f28:	9334      	str	r3, [sp, #208]	; 0xd0
 8022f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022f2e:	3b01      	subs	r3, #1
 8022f30:	930c      	str	r3, [sp, #48]	; 0x30
 8022f32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022f34:	bf08      	it	eq
 8022f36:	4613      	moveq	r3, r2
 8022f38:	9306      	str	r3, [sp, #24]
 8022f3a:	e6e5      	b.n	8022d08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022f3c:	1c54      	adds	r4, r2, #1
 8022f3e:	d1ab      	bne.n	8022e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022f40:	9807      	ldr	r0, [sp, #28]
 8022f42:	4282      	cmp	r2, r0
 8022f44:	daa8      	bge.n	8022e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022f46:	1c58      	adds	r0, r3, #1
 8022f48:	dba6      	blt.n	8022e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f4c:	4298      	cmp	r0, r3
 8022f4e:	dda3      	ble.n	8022e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022f50:	9000      	str	r0, [sp, #0]
 8022f52:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022f54:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8022f58:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8022f5c:	9b07      	ldr	r3, [sp, #28]
 8022f5e:	4651      	mov	r1, sl
 8022f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f62:	f7ff fdd1 	bl	8022b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8022f66:	e797      	b.n	8022e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8022f68:	1431      	asrs	r1, r6, #16
 8022f6a:	9c07      	ldr	r4, [sp, #28]
 8022f6c:	1428      	asrs	r0, r5, #16
 8022f6e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022f72:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8022f76:	fb04 1000 	mla	r0, r4, r0, r1
 8022f7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8022f7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022f82:	4401      	add	r1, r0
 8022f84:	5c20      	ldrb	r0, [r4, r0]
 8022f86:	f891 8002 	ldrb.w	r8, [r1, #2]
 8022f8a:	900e      	str	r0, [sp, #56]	; 0x38
 8022f8c:	f891 a003 	ldrb.w	sl, [r1, #3]
 8022f90:	7848      	ldrb	r0, [r1, #1]
 8022f92:	f891 9004 	ldrb.w	r9, [r1, #4]
 8022f96:	f891 b005 	ldrb.w	fp, [r1, #5]
 8022f9a:	b172      	cbz	r2, 8022fba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8022f9c:	3105      	adds	r1, #5
 8022f9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022fa0:	190f      	adds	r7, r1, r4
 8022fa2:	5d09      	ldrb	r1, [r1, r4]
 8022fa4:	9115      	str	r1, [sp, #84]	; 0x54
 8022fa6:	7879      	ldrb	r1, [r7, #1]
 8022fa8:	9117      	str	r1, [sp, #92]	; 0x5c
 8022faa:	78b9      	ldrb	r1, [r7, #2]
 8022fac:	9119      	str	r1, [sp, #100]	; 0x64
 8022fae:	78f9      	ldrb	r1, [r7, #3]
 8022fb0:	9116      	str	r1, [sp, #88]	; 0x58
 8022fb2:	7939      	ldrb	r1, [r7, #4]
 8022fb4:	9118      	str	r1, [sp, #96]	; 0x60
 8022fb6:	7979      	ldrb	r1, [r7, #5]
 8022fb8:	911a      	str	r1, [sp, #104]	; 0x68
 8022fba:	b29b      	uxth	r3, r3
 8022fbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022fbe:	b292      	uxth	r2, r2
 8022fc0:	f10c 0c03 	add.w	ip, ip, #3
 8022fc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8022fc8:	fb03 f102 	mul.w	r1, r3, r2
 8022fcc:	011b      	lsls	r3, r3, #4
 8022fce:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8022fd2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8022fd6:	1a5b      	subs	r3, r3, r1
 8022fd8:	b292      	uxth	r2, r2
 8022fda:	b29b      	uxth	r3, r3
 8022fdc:	1abf      	subs	r7, r7, r2
 8022fde:	fb03 f909 	mul.w	r9, r3, r9
 8022fe2:	b2bf      	uxth	r7, r7
 8022fe4:	fb03 fa0a 	mul.w	sl, r3, sl
 8022fe8:	fb03 f30b 	mul.w	r3, r3, fp
 8022fec:	fb07 9900 	mla	r9, r7, r0, r9
 8022ff0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022ff2:	fb07 aa04 	mla	sl, r7, r4, sl
 8022ff6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022ff8:	fb02 9900 	mla	r9, r2, r0, r9
 8022ffc:	9818      	ldr	r0, [sp, #96]	; 0x60
 8022ffe:	fb07 3308 	mla	r3, r7, r8, r3
 8023002:	fb01 9900 	mla	r9, r1, r0, r9
 8023006:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023008:	fb02 aa04 	mla	sl, r2, r4, sl
 802300c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802300e:	fb02 3200 	mla	r2, r2, r0, r3
 8023012:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023014:	fb01 aa04 	mla	sl, r1, r4, sl
 8023018:	ea4f 2929 	mov.w	r9, r9, asr #8
 802301c:	fb01 2103 	mla	r1, r1, r3, r2
 8023020:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8023022:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8023026:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802302a:	1209      	asrs	r1, r1, #8
 802302c:	441e      	add	r6, r3
 802302e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8023030:	f80c ac06 	strb.w	sl, [ip, #-6]
 8023034:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8023038:	441d      	add	r5, r3
 802303a:	e697      	b.n	8022d6c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802303c:	b01d      	add	sp, #116	; 0x74
 802303e:	ecbd 8b0a 	vpop	{d8-d12}
 8023042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8023048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802304c:	b085      	sub	sp, #20
 802304e:	7888      	ldrb	r0, [r1, #2]
 8023050:	4691      	mov	r9, r2
 8023052:	9000      	str	r0, [sp, #0]
 8023054:	7848      	ldrb	r0, [r1, #1]
 8023056:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802305a:	9001      	str	r0, [sp, #4]
 802305c:	7808      	ldrb	r0, [r1, #0]
 802305e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023062:	9002      	str	r0, [sp, #8]
 8023064:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023068:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 802306c:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023070:	fb04 c603 	mla	r6, r4, r3, ip
 8023074:	2c00      	cmp	r4, #0
 8023076:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802307a:	9a00      	ldr	r2, [sp, #0]
 802307c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023080:	9a01      	ldr	r2, [sp, #4]
 8023082:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023086:	db3a      	blt.n	80230fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8023088:	45a0      	cmp	r8, r4
 802308a:	dd38      	ble.n	80230fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 802308c:	f1bc 0f00 	cmp.w	ip, #0
 8023090:	db33      	blt.n	80230fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8023092:	4563      	cmp	r3, ip
 8023094:	dd31      	ble.n	80230fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8023096:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 802309a:	f11c 0601 	adds.w	r6, ip, #1
 802309e:	d431      	bmi.n	8023104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80230a0:	42b3      	cmp	r3, r6
 80230a2:	dd2f      	ble.n	8023104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80230a4:	b375      	cbz	r5, 8023104 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80230a6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80230aa:	3401      	adds	r4, #1
 80230ac:	d42e      	bmi.n	802310c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80230ae:	45a0      	cmp	r8, r4
 80230b0:	dd2c      	ble.n	802310c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80230b2:	b35f      	cbz	r7, 802310c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80230b4:	f1bc 0f00 	cmp.w	ip, #0
 80230b8:	db26      	blt.n	8023108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80230ba:	4563      	cmp	r3, ip
 80230bc:	dd24      	ble.n	8023108 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 80230be:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80230c2:	f11c 0c01 	adds.w	ip, ip, #1
 80230c6:	d405      	bmi.n	80230d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80230c8:	4563      	cmp	r3, ip
 80230ca:	dd03      	ble.n	80230d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80230cc:	b115      	cbz	r5, 80230d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80230ce:	3301      	adds	r3, #1
 80230d0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80230d4:	2d0f      	cmp	r5, #15
 80230d6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80230da:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80230de:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80230e2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80230e6:	d801      	bhi.n	80230ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 80230e8:	2f0f      	cmp	r7, #15
 80230ea:	d911      	bls.n	8023110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 80230ec:	4b80      	ldr	r3, [pc, #512]	; (80232f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 80230ee:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80230f2:	4a80      	ldr	r2, [pc, #512]	; (80232f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 80230f4:	4880      	ldr	r0, [pc, #512]	; (80232f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 80230f6:	f002 f91f 	bl	8025338 <__assert_func>
 80230fa:	4602      	mov	r2, r0
 80230fc:	e7cd      	b.n	802309a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 80230fe:	4606      	mov	r6, r0
 8023100:	4602      	mov	r2, r0
 8023102:	e7d2      	b.n	80230aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023104:	4606      	mov	r6, r0
 8023106:	e7d0      	b.n	80230aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8023108:	4604      	mov	r4, r0
 802310a:	e7da      	b.n	80230c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802310c:	4604      	mov	r4, r0
 802310e:	e7e1      	b.n	80230d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8023110:	b2ab      	uxth	r3, r5
 8023112:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023116:	b2bf      	uxth	r7, r7
 8023118:	fb03 fe07 	mul.w	lr, r3, r7
 802311c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023120:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023124:	eba3 0c0e 	sub.w	ip, r3, lr
 8023128:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802312c:	b2bf      	uxth	r7, r7
 802312e:	fa1f fc8c 	uxth.w	ip, ip
 8023132:	eba5 0507 	sub.w	r5, r5, r7
 8023136:	fb0c f30a 	mul.w	r3, ip, sl
 802313a:	b2ad      	uxth	r5, r5
 802313c:	fb05 330b 	mla	r3, r5, fp, r3
 8023140:	fb07 3309 	mla	r3, r7, r9, r3
 8023144:	fb0e 3308 	mla	r3, lr, r8, r3
 8023148:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802314c:	9303      	str	r3, [sp, #12]
 802314e:	d018      	beq.n	8023182 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8023150:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023154:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023158:	fb0b f303 	mul.w	r3, fp, r3
 802315c:	fb0b fb02 	mul.w	fp, fp, r2
 8023160:	0a1a      	lsrs	r2, r3, #8
 8023162:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023166:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802316a:	441a      	add	r2, r3
 802316c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023170:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023174:	0a12      	lsrs	r2, r2, #8
 8023176:	0a1b      	lsrs	r3, r3, #8
 8023178:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802317c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023180:	431a      	orrs	r2, r3
 8023182:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023186:	d019      	beq.n	80231bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8023188:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 802318c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023190:	fb0a fb0b 	mul.w	fp, sl, fp
 8023194:	fb0a fa06 	mul.w	sl, sl, r6
 8023198:	ea4f 261b 	mov.w	r6, fp, lsr #8
 802319c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80231a0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80231a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80231a8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80231ac:	445e      	add	r6, fp
 80231ae:	0a1b      	lsrs	r3, r3, #8
 80231b0:	0a36      	lsrs	r6, r6, #8
 80231b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231b6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80231ba:	431e      	orrs	r6, r3
 80231bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80231c0:	d019      	beq.n	80231f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 80231c2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80231c6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80231ca:	fb09 fa0a 	mul.w	sl, r9, sl
 80231ce:	fb09 f904 	mul.w	r9, r9, r4
 80231d2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80231d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80231da:	f509 7380 	add.w	r3, r9, #256	; 0x100
 80231de:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80231e2:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 80231e6:	4454      	add	r4, sl
 80231e8:	0a1b      	lsrs	r3, r3, #8
 80231ea:	0a24      	lsrs	r4, r4, #8
 80231ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80231f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80231f4:	431c      	orrs	r4, r3
 80231f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80231fa:	d019      	beq.n	8023230 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 80231fc:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023200:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023204:	fb08 f909 	mul.w	r9, r8, r9
 8023208:	fb08 f800 	mul.w	r8, r8, r0
 802320c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023210:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023214:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023218:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802321c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023220:	4448      	add	r0, r9
 8023222:	0a1b      	lsrs	r3, r3, #8
 8023224:	0a00      	lsrs	r0, r0, #8
 8023226:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802322a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802322e:	4318      	orrs	r0, r3
 8023230:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023234:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023238:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802323c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023240:	fb0c f808 	mul.w	r8, ip, r8
 8023244:	fb0c f606 	mul.w	r6, ip, r6
 8023248:	fb05 8803 	mla	r8, r5, r3, r8
 802324c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023250:	fb05 6202 	mla	r2, r5, r2, r6
 8023254:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023258:	fb07 8803 	mla	r8, r7, r3, r8
 802325c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023260:	fb07 2704 	mla	r7, r7, r4, r2
 8023264:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023268:	fb0e 8303 	mla	r3, lr, r3, r8
 802326c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8023270:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023274:	9803      	ldr	r0, [sp, #12]
 8023276:	b292      	uxth	r2, r2
 8023278:	9c02      	ldr	r4, [sp, #8]
 802327a:	0a1b      	lsrs	r3, r3, #8
 802327c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023280:	4350      	muls	r0, r2
 8023282:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023286:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802328a:	ea43 0e0e 	orr.w	lr, r3, lr
 802328e:	1c43      	adds	r3, r0, #1
 8023290:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023294:	fa5f f08e 	uxtb.w	r0, lr
 8023298:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802329c:	b2db      	uxtb	r3, r3
 802329e:	fb14 f403 	smulbb	r4, r4, r3
 80232a2:	fb00 4002 	mla	r0, r0, r2, r4
 80232a6:	b280      	uxth	r0, r0
 80232a8:	1c44      	adds	r4, r0, #1
 80232aa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80232ae:	9c01      	ldr	r4, [sp, #4]
 80232b0:	fb14 f403 	smulbb	r4, r4, r3
 80232b4:	1200      	asrs	r0, r0, #8
 80232b6:	7008      	strb	r0, [r1, #0]
 80232b8:	f3ce 2007 	ubfx	r0, lr, #8, #8
 80232bc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80232c0:	fb00 4002 	mla	r0, r0, r2, r4
 80232c4:	b280      	uxth	r0, r0
 80232c6:	1c44      	adds	r4, r0, #1
 80232c8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80232cc:	1200      	asrs	r0, r0, #8
 80232ce:	7048      	strb	r0, [r1, #1]
 80232d0:	9800      	ldr	r0, [sp, #0]
 80232d2:	fb10 f303 	smulbb	r3, r0, r3
 80232d6:	fb0e 3202 	mla	r2, lr, r2, r3
 80232da:	b292      	uxth	r2, r2
 80232dc:	f102 0e01 	add.w	lr, r2, #1
 80232e0:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80232e4:	1212      	asrs	r2, r2, #8
 80232e6:	708a      	strb	r2, [r1, #2]
 80232e8:	b005      	add	sp, #20
 80232ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ee:	bf00      	nop
 80232f0:	0802930c 	.word	0x0802930c
 80232f4:	08029802 	.word	0x08029802
 80232f8:	080293d5 	.word	0x080293d5

080232fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80232fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023300:	ed2d 8b08 	vpush	{d8-d11}
 8023304:	b099      	sub	sp, #100	; 0x64
 8023306:	eeb0 aa40 	vmov.f32	s20, s0
 802330a:	eef0 9a60 	vmov.f32	s19, s1
 802330e:	9306      	str	r3, [sp, #24]
 8023310:	eeb0 9a41 	vmov.f32	s18, s2
 8023314:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8023318:	eeb0 8a62 	vmov.f32	s16, s5
 802331c:	9216      	str	r2, [sp, #88]	; 0x58
 802331e:	eef0 8a43 	vmov.f32	s17, s6
 8023322:	9307      	str	r3, [sp, #28]
 8023324:	eef0 ba44 	vmov.f32	s23, s8
 8023328:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802332c:	eeb0 ba64 	vmov.f32	s22, s9
 8023330:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023332:	eef0 aa45 	vmov.f32	s21, s10
 8023336:	9310      	str	r3, [sp, #64]	; 0x40
 8023338:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802333c:	9017      	str	r0, [sp, #92]	; 0x5c
 802333e:	9112      	str	r1, [sp, #72]	; 0x48
 8023340:	6850      	ldr	r0, [r2, #4]
 8023342:	9315      	str	r3, [sp, #84]	; 0x54
 8023344:	6812      	ldr	r2, [r2, #0]
 8023346:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8023348:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802334c:	fb00 1303 	mla	r3, r0, r3, r1
 8023350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023354:	18d3      	adds	r3, r2, r3
 8023356:	930a      	str	r3, [sp, #40]	; 0x28
 8023358:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802335a:	681b      	ldr	r3, [r3, #0]
 802335c:	9311      	str	r3, [sp, #68]	; 0x44
 802335e:	9b07      	ldr	r3, [sp, #28]
 8023360:	009b      	lsls	r3, r3, #2
 8023362:	930e      	str	r3, [sp, #56]	; 0x38
 8023364:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023366:	2b00      	cmp	r3, #0
 8023368:	dc03      	bgt.n	8023372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802336a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802336c:	2b00      	cmp	r3, #0
 802336e:	f340 833b 	ble.w	80239e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8023372:	9b06      	ldr	r3, [sp, #24]
 8023374:	2b00      	cmp	r3, #0
 8023376:	f340 8197 	ble.w	80236a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 802337a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802337c:	1423      	asrs	r3, r4, #16
 802337e:	1412      	asrs	r2, r2, #16
 8023380:	d432      	bmi.n	80233e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8023382:	1c51      	adds	r1, r2, #1
 8023384:	9807      	ldr	r0, [sp, #28]
 8023386:	4288      	cmp	r0, r1
 8023388:	dd31      	ble.n	80233ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802338a:	2b00      	cmp	r3, #0
 802338c:	db2f      	blt.n	80233ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802338e:	1c59      	adds	r1, r3, #1
 8023390:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023392:	4288      	cmp	r0, r1
 8023394:	dd2b      	ble.n	80233ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8023396:	9b06      	ldr	r3, [sp, #24]
 8023398:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802339a:	3b01      	subs	r3, #1
 802339c:	992b      	ldr	r1, [sp, #172]	; 0xac
 802339e:	fb02 1203 	mla	r2, r2, r3, r1
 80233a2:	1412      	asrs	r2, r2, #16
 80233a4:	d42e      	bmi.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80233a6:	3201      	adds	r2, #1
 80233a8:	9907      	ldr	r1, [sp, #28]
 80233aa:	4291      	cmp	r1, r2
 80233ac:	dd2a      	ble.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80233ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80233b0:	fb02 4303 	mla	r3, r2, r3, r4
 80233b4:	141b      	asrs	r3, r3, #16
 80233b6:	d425      	bmi.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80233b8:	3301      	adds	r3, #1
 80233ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80233bc:	429a      	cmp	r2, r3
 80233be:	dd21      	ble.n	8023404 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80233c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233c2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 80233c6:	f103 0e03 	add.w	lr, r3, #3
 80233ca:	9b06      	ldr	r3, [sp, #24]
 80233cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80233ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	f300 81d2 	bgt.w	802377a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 80233d6:	9b06      	ldr	r3, [sp, #24]
 80233d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80233dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80233e2:	4423      	add	r3, r4
 80233e4:	930a      	str	r3, [sp, #40]	; 0x28
 80233e6:	e161      	b.n	80236ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 80233e8:	1c51      	adds	r1, r2, #1
 80233ea:	f040 8150 	bne.w	802368e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80233ee:	9907      	ldr	r1, [sp, #28]
 80233f0:	428a      	cmp	r2, r1
 80233f2:	f280 814c 	bge.w	802368e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80233f6:	1c5a      	adds	r2, r3, #1
 80233f8:	f2c0 8149 	blt.w	802368e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 80233fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80233fe:	4293      	cmp	r3, r2
 8023400:	f280 8145 	bge.w	802368e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8023404:	9b06      	ldr	r3, [sp, #24]
 8023406:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023408:	9314      	str	r3, [sp, #80]	; 0x50
 802340a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802340e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023412:	2b00      	cmp	r3, #0
 8023414:	dddf      	ble.n	80233d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8023416:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023418:	1423      	asrs	r3, r4, #16
 802341a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802341e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023422:	1412      	asrs	r2, r2, #16
 8023424:	f100 8190 	bmi.w	8023748 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8023428:	1c55      	adds	r5, r2, #1
 802342a:	9f07      	ldr	r7, [sp, #28]
 802342c:	42af      	cmp	r7, r5
 802342e:	f340 818d 	ble.w	802374c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023432:	2b00      	cmp	r3, #0
 8023434:	f2c0 818a 	blt.w	802374c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023438:	1c5d      	adds	r5, r3, #1
 802343a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802343c:	42af      	cmp	r7, r5
 802343e:	f340 8185 	ble.w	802374c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8023442:	9d07      	ldr	r5, [sp, #28]
 8023444:	fb03 2305 	mla	r3, r3, r5, r2
 8023448:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802344a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023452:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023456:	2800      	cmp	r0, #0
 8023458:	f000 8167 	beq.w	802372a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802345c:	686a      	ldr	r2, [r5, #4]
 802345e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023460:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8023464:	2900      	cmp	r1, #0
 8023466:	f000 8169 	beq.w	802373c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 802346a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802346c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802346e:	18aa      	adds	r2, r5, r2
 8023470:	59ed      	ldr	r5, [r5, r7]
 8023472:	6852      	ldr	r2, [r2, #4]
 8023474:	9508      	str	r5, [sp, #32]
 8023476:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 802347a:	0e15      	lsrs	r5, r2, #24
 802347c:	920c      	str	r2, [sp, #48]	; 0x30
 802347e:	b280      	uxth	r0, r0
 8023480:	b289      	uxth	r1, r1
 8023482:	fb00 fb01 	mul.w	fp, r0, r1
 8023486:	0100      	lsls	r0, r0, #4
 8023488:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 802348c:	eba0 090b 	sub.w	r9, r0, fp
 8023490:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8023494:	b289      	uxth	r1, r1
 8023496:	fa1f f989 	uxth.w	r9, r9
 802349a:	1a52      	subs	r2, r2, r1
 802349c:	fb09 f008 	mul.w	r0, r9, r8
 80234a0:	b292      	uxth	r2, r2
 80234a2:	fb02 000c 	mla	r0, r2, ip, r0
 80234a6:	fb01 000a 	mla	r0, r1, sl, r0
 80234aa:	fb0b 0005 	mla	r0, fp, r5, r0
 80234ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80234b2:	2800      	cmp	r0, #0
 80234b4:	f000 80e0 	beq.w	8023678 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80234b8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80234bc:	d01b      	beq.n	80234f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 80234be:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80234c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80234c6:	fb0c fe0e 	mul.w	lr, ip, lr
 80234ca:	fb0c fc03 	mul.w	ip, ip, r3
 80234ce:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80234d2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80234d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80234da:	4473      	add	r3, lr
 80234dc:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80234e0:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80234e4:	0a1b      	lsrs	r3, r3, #8
 80234e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80234ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80234ee:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80234f2:	ea43 030e 	orr.w	r3, r3, lr
 80234f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80234fa:	d01e      	beq.n	802353a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 80234fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80234fe:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023502:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8023506:	fb08 fc0c 	mul.w	ip, r8, ip
 802350a:	fb08 f80e 	mul.w	r8, r8, lr
 802350e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023512:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023516:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802351a:	44e6      	add	lr, ip
 802351c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8023520:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8023524:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023528:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802352c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023530:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023534:	ea4e 0708 	orr.w	r7, lr, r8
 8023538:	970b      	str	r7, [sp, #44]	; 0x2c
 802353a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802353e:	d01e      	beq.n	802357e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8023540:	9f08      	ldr	r7, [sp, #32]
 8023542:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023546:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802354a:	fb0a f808 	mul.w	r8, sl, r8
 802354e:	fb0a fa0c 	mul.w	sl, sl, ip
 8023552:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023556:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802355a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802355e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023562:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023566:	44c6      	add	lr, r8
 8023568:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802356c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023570:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023574:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023578:	ea4e 070a 	orr.w	r7, lr, sl
 802357c:	9708      	str	r7, [sp, #32]
 802357e:	2dff      	cmp	r5, #255	; 0xff
 8023580:	d01d      	beq.n	80235be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 8023582:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023584:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8023588:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802358c:	fb05 f808 	mul.w	r8, r5, r8
 8023590:	fb05 f50c 	mul.w	r5, r5, ip
 8023594:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8023598:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802359c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80235a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80235a4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80235a8:	44c6      	add	lr, r8
 80235aa:	0a2d      	lsrs	r5, r5, #8
 80235ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235b0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80235b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80235b8:	ea4e 0505 	orr.w	r5, lr, r5
 80235bc:	950c      	str	r5, [sp, #48]	; 0x30
 80235be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80235c0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80235c4:	9f08      	ldr	r7, [sp, #32]
 80235c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235ca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80235ce:	fb09 f505 	mul.w	r5, r9, r5
 80235d2:	fb02 550c 	mla	r5, r2, ip, r5
 80235d6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80235da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80235dc:	fb01 550c 	mla	r5, r1, ip, r5
 80235e0:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80235e4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80235e6:	fb0b 550c 	mla	r5, fp, ip, r5
 80235ea:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80235ee:	fb09 f90c 	mul.w	r9, r9, ip
 80235f2:	0a2d      	lsrs	r5, r5, #8
 80235f4:	fb02 9303 	mla	r3, r2, r3, r9
 80235f8:	9a08      	ldr	r2, [sp, #32]
 80235fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80235fe:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8023602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023604:	fb01 330e 	mla	r3, r1, lr, r3
 8023608:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802360c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8023610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023612:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023614:	4343      	muls	r3, r0
 8023616:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802361a:	1c58      	adds	r0, r3, #1
 802361c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023620:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023624:	ea45 050b 	orr.w	r5, r5, fp
 8023628:	7833      	ldrb	r3, [r6, #0]
 802362a:	b2ea      	uxtb	r2, r5
 802362c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8023630:	fb12 f201 	smulbb	r2, r2, r1
 8023634:	b2c0      	uxtb	r0, r0
 8023636:	fb03 2300 	mla	r3, r3, r0, r2
 802363a:	b29b      	uxth	r3, r3
 802363c:	1c5a      	adds	r2, r3, #1
 802363e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023642:	7872      	ldrb	r2, [r6, #1]
 8023644:	fb12 f200 	smulbb	r2, r2, r0
 8023648:	121b      	asrs	r3, r3, #8
 802364a:	7033      	strb	r3, [r6, #0]
 802364c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023650:	0c2d      	lsrs	r5, r5, #16
 8023652:	fb03 2301 	mla	r3, r3, r1, r2
 8023656:	b29b      	uxth	r3, r3
 8023658:	1c5a      	adds	r2, r3, #1
 802365a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802365e:	121b      	asrs	r3, r3, #8
 8023660:	7073      	strb	r3, [r6, #1]
 8023662:	78b3      	ldrb	r3, [r6, #2]
 8023664:	fb13 f000 	smulbb	r0, r3, r0
 8023668:	fb05 0501 	mla	r5, r5, r1, r0
 802366c:	b2ad      	uxth	r5, r5
 802366e:	1c6b      	adds	r3, r5, #1
 8023670:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8023674:	122d      	asrs	r5, r5, #8
 8023676:	70b5      	strb	r5, [r6, #2]
 8023678:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802367a:	3603      	adds	r6, #3
 802367c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802367e:	4413      	add	r3, r2
 8023680:	932b      	str	r3, [sp, #172]	; 0xac
 8023682:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023684:	441c      	add	r4, r3
 8023686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023688:	3b01      	subs	r3, #1
 802368a:	9314      	str	r3, [sp, #80]	; 0x50
 802368c:	e6c0      	b.n	8023410 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 802368e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023690:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023692:	4413      	add	r3, r2
 8023694:	932b      	str	r3, [sp, #172]	; 0xac
 8023696:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023698:	441c      	add	r4, r3
 802369a:	9b06      	ldr	r3, [sp, #24]
 802369c:	3b01      	subs	r3, #1
 802369e:	9306      	str	r3, [sp, #24]
 80236a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236a2:	3303      	adds	r3, #3
 80236a4:	930a      	str	r3, [sp, #40]	; 0x28
 80236a6:	e664      	b.n	8023372 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80236a8:	f47f ae75 	bne.w	8023396 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80236ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	f340 819a 	ble.w	80239e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80236b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80236b8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80236ba:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80236be:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80236c2:	eef0 6a48 	vmov.f32	s13, s16
 80236c6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80236ca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80236ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236d2:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80236d6:	eef0 6a68 	vmov.f32	s13, s17
 80236da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80236de:	ee16 4a90 	vmov	r4, s13
 80236e2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80236e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80236ea:	ee37 8a48 	vsub.f32	s16, s14, s16
 80236ee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80236f2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80236f6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80236fa:	ee18 2a10 	vmov	r2, s16
 80236fe:	eeb0 8a47 	vmov.f32	s16, s14
 8023702:	fb92 f3f3 	sdiv	r3, r2, r3
 8023706:	ee18 2a90 	vmov	r2, s17
 802370a:	932d      	str	r3, [sp, #180]	; 0xb4
 802370c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802370e:	eef0 8a67 	vmov.f32	s17, s15
 8023712:	fb92 f3f3 	sdiv	r3, r2, r3
 8023716:	932e      	str	r3, [sp, #184]	; 0xb8
 8023718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802371a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802371c:	3b01      	subs	r3, #1
 802371e:	9312      	str	r3, [sp, #72]	; 0x48
 8023720:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023722:	bf08      	it	eq
 8023724:	4613      	moveq	r3, r2
 8023726:	9306      	str	r3, [sp, #24]
 8023728:	e61c      	b.n	8023364 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802372a:	b151      	cbz	r1, 8023742 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802372c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802372e:	58aa      	ldr	r2, [r5, r2]
 8023730:	25ff      	movs	r5, #255	; 0xff
 8023732:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8023736:	9208      	str	r2, [sp, #32]
 8023738:	46a8      	mov	r8, r5
 802373a:	e6a0      	b.n	802347e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802373c:	25ff      	movs	r5, #255	; 0xff
 802373e:	46aa      	mov	sl, r5
 8023740:	e69d      	b.n	802347e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8023742:	25ff      	movs	r5, #255	; 0xff
 8023744:	46aa      	mov	sl, r5
 8023746:	e7f7      	b.n	8023738 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8023748:	1c57      	adds	r7, r2, #1
 802374a:	d195      	bne.n	8023678 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802374c:	9d07      	ldr	r5, [sp, #28]
 802374e:	4295      	cmp	r5, r2
 8023750:	dd92      	ble.n	8023678 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023752:	1c5d      	adds	r5, r3, #1
 8023754:	db90      	blt.n	8023678 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8023756:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023758:	429d      	cmp	r5, r3
 802375a:	dd8d      	ble.n	8023678 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802375c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802375e:	9201      	str	r2, [sp, #4]
 8023760:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023762:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8023766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023768:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802376a:	9300      	str	r3, [sp, #0]
 802376c:	9b07      	ldr	r3, [sp, #28]
 802376e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8023772:	4631      	mov	r1, r6
 8023774:	f7ff fc68 	bl	8023048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8023778:	e77e      	b.n	8023678 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802377a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802377c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023780:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023782:	9d07      	ldr	r5, [sp, #28]
 8023784:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8023788:	1412      	asrs	r2, r2, #16
 802378a:	1423      	asrs	r3, r4, #16
 802378c:	fb05 2303 	mla	r3, r5, r3, r2
 8023790:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023792:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802379a:	0e1e      	lsrs	r6, r3, #24
 802379c:	2900      	cmp	r1, #0
 802379e:	f000 8114 	beq.w	80239ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80237a2:	686a      	ldr	r2, [r5, #4]
 80237a4:	920d      	str	r2, [sp, #52]	; 0x34
 80237a6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80237aa:	2800      	cmp	r0, #0
 80237ac:	f000 8116 	beq.w	80239dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 80237b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80237b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80237b4:	18aa      	adds	r2, r5, r2
 80237b6:	59ed      	ldr	r5, [r5, r7]
 80237b8:	6852      	ldr	r2, [r2, #4]
 80237ba:	9509      	str	r5, [sp, #36]	; 0x24
 80237bc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80237c0:	0e15      	lsrs	r5, r2, #24
 80237c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80237c4:	b289      	uxth	r1, r1
 80237c6:	b280      	uxth	r0, r0
 80237c8:	fb01 fa00 	mul.w	sl, r1, r0
 80237cc:	0109      	lsls	r1, r1, #4
 80237ce:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80237d2:	eba1 080a 	sub.w	r8, r1, sl
 80237d6:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 80237da:	b280      	uxth	r0, r0
 80237dc:	fa1f f888 	uxth.w	r8, r8
 80237e0:	1a12      	subs	r2, r2, r0
 80237e2:	fb08 f10c 	mul.w	r1, r8, ip
 80237e6:	b292      	uxth	r2, r2
 80237e8:	fb02 1106 	mla	r1, r2, r6, r1
 80237ec:	fb00 1109 	mla	r1, r0, r9, r1
 80237f0:	fb0a 1105 	mla	r1, sl, r5, r1
 80237f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80237f8:	2900      	cmp	r1, #0
 80237fa:	f000 80da 	beq.w	80239b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80237fe:	2eff      	cmp	r6, #255	; 0xff
 8023800:	d016      	beq.n	8023830 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8023802:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023806:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802380a:	4377      	muls	r7, r6
 802380c:	435e      	muls	r6, r3
 802380e:	0a3b      	lsrs	r3, r7, #8
 8023810:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023814:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023818:	443b      	add	r3, r7
 802381a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802381e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023822:	0a1b      	lsrs	r3, r3, #8
 8023824:	0a3f      	lsrs	r7, r7, #8
 8023826:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802382a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802382e:	433b      	orrs	r3, r7
 8023830:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023834:	d01d      	beq.n	8023872 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8023836:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8023838:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802383a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802383e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023842:	fb0c f606 	mul.w	r6, ip, r6
 8023846:	fb0c fc07 	mul.w	ip, ip, r7
 802384a:	0a37      	lsrs	r7, r6, #8
 802384c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8023850:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023854:	4437      	add	r7, r6
 8023856:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 802385a:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 802385e:	0a3f      	lsrs	r7, r7, #8
 8023860:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023864:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023868:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802386c:	ea47 060c 	orr.w	r6, r7, ip
 8023870:	960d      	str	r6, [sp, #52]	; 0x34
 8023872:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023876:	d01d      	beq.n	80238b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 8023878:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802387a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802387e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023882:	fb09 fc0c 	mul.w	ip, r9, ip
 8023886:	fb09 f906 	mul.w	r9, r9, r6
 802388a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802388e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023892:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8023896:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802389a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802389e:	4467      	add	r7, ip
 80238a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80238a4:	0a3f      	lsrs	r7, r7, #8
 80238a6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80238aa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80238ae:	ea47 0609 	orr.w	r6, r7, r9
 80238b2:	9609      	str	r6, [sp, #36]	; 0x24
 80238b4:	2dff      	cmp	r5, #255	; 0xff
 80238b6:	d01a      	beq.n	80238ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 80238b8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80238ba:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80238be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238c2:	fb05 fc0c 	mul.w	ip, r5, ip
 80238c6:	4375      	muls	r5, r6
 80238c8:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80238cc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238d0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 80238d4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80238d8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80238dc:	4467      	add	r7, ip
 80238de:	0a2d      	lsrs	r5, r5, #8
 80238e0:	0a3f      	lsrs	r7, r7, #8
 80238e2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80238e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80238ea:	433d      	orrs	r5, r7
 80238ec:	950f      	str	r5, [sp, #60]	; 0x3c
 80238ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80238f0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80238f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80238f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80238fc:	fb08 f505 	mul.w	r5, r8, r5
 8023900:	fb02 5506 	mla	r5, r2, r6, r5
 8023904:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023906:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802390a:	fb00 5506 	mla	r5, r0, r6, r5
 802390e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023910:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023914:	fb0a 5506 	mla	r5, sl, r6, r5
 8023918:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802391a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802391e:	0a2d      	lsrs	r5, r5, #8
 8023920:	fb08 f806 	mul.w	r8, r8, r6
 8023924:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023928:	fb02 8303 	mla	r3, r2, r3, r8
 802392c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802392e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8023932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023934:	fb00 3307 	mla	r3, r0, r7, r3
 8023938:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802393c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8023940:	fb01 f30b 	mul.w	r3, r1, fp
 8023944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023948:	1c59      	adds	r1, r3, #1
 802394a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802394e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023952:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8023956:	ea45 050c 	orr.w	r5, r5, ip
 802395a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802395e:	b2ea      	uxtb	r2, r5
 8023960:	b2c9      	uxtb	r1, r1
 8023962:	fb12 f20b 	smulbb	r2, r2, fp
 8023966:	fb03 2301 	mla	r3, r3, r1, r2
 802396a:	b29b      	uxth	r3, r3
 802396c:	1c5a      	adds	r2, r3, #1
 802396e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023972:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023976:	fb12 f201 	smulbb	r2, r2, r1
 802397a:	121b      	asrs	r3, r3, #8
 802397c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023980:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8023984:	0c2d      	lsrs	r5, r5, #16
 8023986:	fb03 230b 	mla	r3, r3, fp, r2
 802398a:	b29b      	uxth	r3, r3
 802398c:	1c5a      	adds	r2, r3, #1
 802398e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023992:	121b      	asrs	r3, r3, #8
 8023994:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8023998:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802399c:	fb13 f101 	smulbb	r1, r3, r1
 80239a0:	fb05 150b 	mla	r5, r5, fp, r1
 80239a4:	b2ad      	uxth	r5, r5
 80239a6:	1c69      	adds	r1, r5, #1
 80239a8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80239ac:	122d      	asrs	r5, r5, #8
 80239ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80239b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80239b4:	f10e 0e03 	add.w	lr, lr, #3
 80239b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80239ba:	4413      	add	r3, r2
 80239bc:	932b      	str	r3, [sp, #172]	; 0xac
 80239be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80239c0:	441c      	add	r4, r3
 80239c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80239c4:	3b01      	subs	r3, #1
 80239c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80239c8:	e501      	b.n	80233ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80239ca:	b150      	cbz	r0, 80239e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 80239cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80239ce:	58aa      	ldr	r2, [r5, r2]
 80239d0:	25ff      	movs	r5, #255	; 0xff
 80239d2:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80239d6:	9209      	str	r2, [sp, #36]	; 0x24
 80239d8:	46ac      	mov	ip, r5
 80239da:	e6f3      	b.n	80237c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80239dc:	25ff      	movs	r5, #255	; 0xff
 80239de:	46a9      	mov	r9, r5
 80239e0:	e6f0      	b.n	80237c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 80239e2:	25ff      	movs	r5, #255	; 0xff
 80239e4:	46a9      	mov	r9, r5
 80239e6:	e7f7      	b.n	80239d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 80239e8:	b019      	add	sp, #100	; 0x64
 80239ea:	ecbd 8b08 	vpop	{d8-d11}
 80239ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080239f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80239f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239f8:	b085      	sub	sp, #20
 80239fa:	7888      	ldrb	r0, [r1, #2]
 80239fc:	4691      	mov	r9, r2
 80239fe:	9000      	str	r0, [sp, #0]
 8023a00:	7848      	ldrb	r0, [r1, #1]
 8023a02:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8023a06:	9001      	str	r0, [sp, #4]
 8023a08:	7808      	ldrb	r0, [r1, #0]
 8023a0a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8023a0e:	9002      	str	r0, [sp, #8]
 8023a10:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023a14:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8023a18:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8023a1c:	fb04 c603 	mla	r6, r4, r3, ip
 8023a20:	2c00      	cmp	r4, #0
 8023a22:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8023a26:	9a00      	ldr	r2, [sp, #0]
 8023a28:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8023a2c:	9a01      	ldr	r2, [sp, #4]
 8023a2e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023a32:	db3a      	blt.n	8023aaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023a34:	45a0      	cmp	r8, r4
 8023a36:	dd38      	ble.n	8023aaa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8023a38:	f1bc 0f00 	cmp.w	ip, #0
 8023a3c:	db33      	blt.n	8023aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023a3e:	4563      	cmp	r3, ip
 8023a40:	dd31      	ble.n	8023aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8023a42:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8023a46:	f11c 0601 	adds.w	r6, ip, #1
 8023a4a:	d431      	bmi.n	8023ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023a4c:	42b3      	cmp	r3, r6
 8023a4e:	dd2f      	ble.n	8023ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023a50:	b375      	cbz	r5, 8023ab0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8023a52:	f8de 6004 	ldr.w	r6, [lr, #4]
 8023a56:	3401      	adds	r4, #1
 8023a58:	d42e      	bmi.n	8023ab8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023a5a:	45a0      	cmp	r8, r4
 8023a5c:	dd2c      	ble.n	8023ab8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023a5e:	b35f      	cbz	r7, 8023ab8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8023a60:	f1bc 0f00 	cmp.w	ip, #0
 8023a64:	db26      	blt.n	8023ab4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8023a66:	4563      	cmp	r3, ip
 8023a68:	dd24      	ble.n	8023ab4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8023a6a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8023a6e:	f11c 0c01 	adds.w	ip, ip, #1
 8023a72:	d405      	bmi.n	8023a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023a74:	4563      	cmp	r3, ip
 8023a76:	dd03      	ble.n	8023a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023a78:	b115      	cbz	r5, 8023a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023a7a:	3301      	adds	r3, #1
 8023a7c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8023a80:	2d0f      	cmp	r5, #15
 8023a82:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8023a86:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023a8a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8023a8e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8023a92:	d801      	bhi.n	8023a98 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8023a94:	2f0f      	cmp	r7, #15
 8023a96:	d911      	bls.n	8023abc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8023a98:	4b77      	ldr	r3, [pc, #476]	; (8023c78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8023a9a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8023a9e:	4a77      	ldr	r2, [pc, #476]	; (8023c7c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8023aa0:	4877      	ldr	r0, [pc, #476]	; (8023c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8023aa2:	f001 fc49 	bl	8025338 <__assert_func>
 8023aa6:	4602      	mov	r2, r0
 8023aa8:	e7cd      	b.n	8023a46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8023aaa:	4606      	mov	r6, r0
 8023aac:	4602      	mov	r2, r0
 8023aae:	e7d2      	b.n	8023a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8023ab0:	4606      	mov	r6, r0
 8023ab2:	e7d0      	b.n	8023a56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8023ab4:	4604      	mov	r4, r0
 8023ab6:	e7da      	b.n	8023a6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8023ab8:	4604      	mov	r4, r0
 8023aba:	e7e1      	b.n	8023a80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023abc:	b2ab      	uxth	r3, r5
 8023abe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8023ac2:	b2bf      	uxth	r7, r7
 8023ac4:	fb03 fe07 	mul.w	lr, r3, r7
 8023ac8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023acc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8023ad0:	eba3 0c0e 	sub.w	ip, r3, lr
 8023ad4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8023ad8:	b2bf      	uxth	r7, r7
 8023ada:	fa1f fc8c 	uxth.w	ip, ip
 8023ade:	eba5 0507 	sub.w	r5, r5, r7
 8023ae2:	fb0c f30a 	mul.w	r3, ip, sl
 8023ae6:	b2ad      	uxth	r5, r5
 8023ae8:	fb05 330b 	mla	r3, r5, fp, r3
 8023aec:	fb07 3309 	mla	r3, r7, r9, r3
 8023af0:	fb0e 3308 	mla	r3, lr, r8, r3
 8023af4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023af8:	9303      	str	r3, [sp, #12]
 8023afa:	d018      	beq.n	8023b2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8023afc:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023b00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023b04:	fb0b f303 	mul.w	r3, fp, r3
 8023b08:	fb0b fb02 	mul.w	fp, fp, r2
 8023b0c:	0a1a      	lsrs	r2, r3, #8
 8023b0e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8023b12:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b16:	441a      	add	r2, r3
 8023b18:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8023b1c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8023b20:	0a12      	lsrs	r2, r2, #8
 8023b22:	0a1b      	lsrs	r3, r3, #8
 8023b24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023b28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b2c:	431a      	orrs	r2, r3
 8023b2e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023b32:	d019      	beq.n	8023b68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8023b34:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8023b38:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023b3c:	fb0a fb0b 	mul.w	fp, sl, fp
 8023b40:	fb0a fa06 	mul.w	sl, sl, r6
 8023b44:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8023b48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023b4c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8023b50:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023b54:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8023b58:	445e      	add	r6, fp
 8023b5a:	0a1b      	lsrs	r3, r3, #8
 8023b5c:	0a36      	lsrs	r6, r6, #8
 8023b5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b62:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023b66:	431e      	orrs	r6, r3
 8023b68:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023b6c:	d019      	beq.n	8023ba2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8023b6e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8023b72:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023b76:	fb09 fa0a 	mul.w	sl, r9, sl
 8023b7a:	fb09 f904 	mul.w	r9, r9, r4
 8023b7e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8023b82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023b86:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8023b8a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023b8e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8023b92:	4454      	add	r4, sl
 8023b94:	0a1b      	lsrs	r3, r3, #8
 8023b96:	0a24      	lsrs	r4, r4, #8
 8023b98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b9c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023ba0:	431c      	orrs	r4, r3
 8023ba2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023ba6:	d019      	beq.n	8023bdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8023ba8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8023bac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023bb0:	fb08 f909 	mul.w	r9, r8, r9
 8023bb4:	fb08 f800 	mul.w	r8, r8, r0
 8023bb8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8023bbc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8023bc0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8023bc4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023bc8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8023bcc:	4448      	add	r0, r9
 8023bce:	0a1b      	lsrs	r3, r3, #8
 8023bd0:	0a00      	lsrs	r0, r0, #8
 8023bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023bd6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023bda:	4318      	orrs	r0, r3
 8023bdc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8023be0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023be4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023be8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023bec:	fb0c f808 	mul.w	r8, ip, r8
 8023bf0:	fb0c f606 	mul.w	r6, ip, r6
 8023bf4:	fb05 8803 	mla	r8, r5, r3, r8
 8023bf8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8023bfc:	fb05 6202 	mla	r2, r5, r2, r6
 8023c00:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023c04:	fb07 8803 	mla	r8, r7, r3, r8
 8023c08:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023c0c:	fb07 2704 	mla	r7, r7, r4, r2
 8023c10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023c14:	fb0e 8303 	mla	r3, lr, r3, r8
 8023c18:	fb0e 7e00 	mla	lr, lr, r0, r7
 8023c1c:	9802      	ldr	r0, [sp, #8]
 8023c1e:	0a1b      	lsrs	r3, r3, #8
 8023c20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c28:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023c2c:	ea43 0e0e 	orr.w	lr, r3, lr
 8023c30:	9b03      	ldr	r3, [sp, #12]
 8023c32:	43db      	mvns	r3, r3
 8023c34:	b2db      	uxtb	r3, r3
 8023c36:	4358      	muls	r0, r3
 8023c38:	1c42      	adds	r2, r0, #1
 8023c3a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023c3e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8023c42:	700a      	strb	r2, [r1, #0]
 8023c44:	9a01      	ldr	r2, [sp, #4]
 8023c46:	435a      	muls	r2, r3
 8023c48:	1c50      	adds	r0, r2, #1
 8023c4a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023c4e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8023c52:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8023c56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023c5a:	704a      	strb	r2, [r1, #1]
 8023c5c:	9a00      	ldr	r2, [sp, #0]
 8023c5e:	435a      	muls	r2, r3
 8023c60:	4613      	mov	r3, r2
 8023c62:	3201      	adds	r2, #1
 8023c64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023c68:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023c6c:	f881 e002 	strb.w	lr, [r1, #2]
 8023c70:	b005      	add	sp, #20
 8023c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c76:	bf00      	nop
 8023c78:	0802930c 	.word	0x0802930c
 8023c7c:	08029802 	.word	0x08029802
 8023c80:	080293d5 	.word	0x080293d5

08023c84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8023c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c88:	ed2d 8b08 	vpush	{d8-d11}
 8023c8c:	b097      	sub	sp, #92	; 0x5c
 8023c8e:	eeb0 aa40 	vmov.f32	s20, s0
 8023c92:	eef0 9a60 	vmov.f32	s19, s1
 8023c96:	9306      	str	r3, [sp, #24]
 8023c98:	eeb0 9a41 	vmov.f32	s18, s2
 8023c9c:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8023ca0:	eeb0 8a62 	vmov.f32	s16, s5
 8023ca4:	9214      	str	r2, [sp, #80]	; 0x50
 8023ca6:	eef0 8a43 	vmov.f32	s17, s6
 8023caa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023cac:	eef0 ba44 	vmov.f32	s23, s8
 8023cb0:	9307      	str	r3, [sp, #28]
 8023cb2:	eeb0 ba64 	vmov.f32	s22, s9
 8023cb6:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8023cba:	eef0 aa45 	vmov.f32	s21, s10
 8023cbe:	9015      	str	r0, [sp, #84]	; 0x54
 8023cc0:	9112      	str	r1, [sp, #72]	; 0x48
 8023cc2:	6850      	ldr	r0, [r2, #4]
 8023cc4:	9310      	str	r3, [sp, #64]	; 0x40
 8023cc6:	6812      	ldr	r2, [r2, #0]
 8023cc8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8023cca:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023cce:	fb00 1303 	mla	r3, r0, r3, r1
 8023cd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023cd6:	18d3      	adds	r3, r2, r3
 8023cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8023cda:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023cdc:	681b      	ldr	r3, [r3, #0]
 8023cde:	9311      	str	r3, [sp, #68]	; 0x44
 8023ce0:	9b07      	ldr	r3, [sp, #28]
 8023ce2:	009b      	lsls	r3, r3, #2
 8023ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8023ce6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023ce8:	2b00      	cmp	r3, #0
 8023cea:	dc03      	bgt.n	8023cf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8023cec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023cee:	2b00      	cmp	r3, #0
 8023cf0:	f340 832e 	ble.w	8024350 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8023cf4:	9b06      	ldr	r3, [sp, #24]
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	f340 8186 	ble.w	8024008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8023cfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023cfe:	1423      	asrs	r3, r4, #16
 8023d00:	1412      	asrs	r2, r2, #16
 8023d02:	d42f      	bmi.n	8023d64 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8023d04:	1c51      	adds	r1, r2, #1
 8023d06:	9807      	ldr	r0, [sp, #28]
 8023d08:	4288      	cmp	r0, r1
 8023d0a:	dd2e      	ble.n	8023d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023d0c:	2b00      	cmp	r3, #0
 8023d0e:	db2c      	blt.n	8023d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023d10:	1c59      	adds	r1, r3, #1
 8023d12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023d14:	4288      	cmp	r0, r1
 8023d16:	dd28      	ble.n	8023d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8023d18:	9b06      	ldr	r3, [sp, #24]
 8023d1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023d1c:	3b01      	subs	r3, #1
 8023d1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023d20:	fb02 1203 	mla	r2, r2, r3, r1
 8023d24:	1412      	asrs	r2, r2, #16
 8023d26:	d42b      	bmi.n	8023d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023d28:	3201      	adds	r2, #1
 8023d2a:	9907      	ldr	r1, [sp, #28]
 8023d2c:	4291      	cmp	r1, r2
 8023d2e:	dd27      	ble.n	8023d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023d30:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023d32:	fb02 4303 	mla	r3, r2, r3, r4
 8023d36:	141b      	asrs	r3, r3, #16
 8023d38:	d422      	bmi.n	8023d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023d3a:	3301      	adds	r3, #1
 8023d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d3e:	429a      	cmp	r2, r3
 8023d40:	dd1e      	ble.n	8023d80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8023d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d44:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023d48:	1cdd      	adds	r5, r3, #3
 8023d4a:	f1bb 0f00 	cmp.w	fp, #0
 8023d4e:	f300 81c4 	bgt.w	80240da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8023d52:	9b06      	ldr	r3, [sp, #24]
 8023d54:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023d5e:	4423      	add	r3, r4
 8023d60:	930a      	str	r3, [sp, #40]	; 0x28
 8023d62:	e153      	b.n	802400c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8023d64:	1c51      	adds	r1, r2, #1
 8023d66:	f040 8142 	bne.w	8023fee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023d6a:	9907      	ldr	r1, [sp, #28]
 8023d6c:	428a      	cmp	r2, r1
 8023d6e:	f280 813e 	bge.w	8023fee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023d72:	1c5a      	adds	r2, r3, #1
 8023d74:	f2c0 813b 	blt.w	8023fee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023d78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d7a:	4293      	cmp	r3, r2
 8023d7c:	f280 8137 	bge.w	8023fee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8023d80:	9b06      	ldr	r3, [sp, #24]
 8023d82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023d84:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d88:	2b00      	cmp	r3, #0
 8023d8a:	dde2      	ble.n	8023d52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8023d8c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023d8e:	1423      	asrs	r3, r4, #16
 8023d90:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d92:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023d96:	1409      	asrs	r1, r1, #16
 8023d98:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8023d9c:	f100 8187 	bmi.w	80240ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8023da0:	1c4e      	adds	r6, r1, #1
 8023da2:	9f07      	ldr	r7, [sp, #28]
 8023da4:	42b7      	cmp	r7, r6
 8023da6:	f340 8184 	ble.w	80240b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023daa:	2b00      	cmp	r3, #0
 8023dac:	f2c0 8181 	blt.w	80240b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023db0:	1c5e      	adds	r6, r3, #1
 8023db2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8023db4:	42b7      	cmp	r7, r6
 8023db6:	f340 817c 	ble.w	80240b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8023dba:	9e07      	ldr	r6, [sp, #28]
 8023dbc:	fb03 1306 	mla	r3, r3, r6, r1
 8023dc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023dc2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8023dc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8023dca:	0e1f      	lsrs	r7, r3, #24
 8023dcc:	2a00      	cmp	r2, #0
 8023dce:	f000 815c 	beq.w	802408a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8023dd2:	6871      	ldr	r1, [r6, #4]
 8023dd4:	910b      	str	r1, [sp, #44]	; 0x2c
 8023dd6:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8023dda:	2800      	cmp	r0, #0
 8023ddc:	f000 815e 	beq.w	802409c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8023de0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8023de2:	eb06 0c01 	add.w	ip, r6, r1
 8023de6:	5876      	ldr	r6, [r6, r1]
 8023de8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8023dec:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8023df0:	9608      	str	r6, [sp, #32]
 8023df2:	0e0e      	lsrs	r6, r1, #24
 8023df4:	910c      	str	r1, [sp, #48]	; 0x30
 8023df6:	b292      	uxth	r2, r2
 8023df8:	b280      	uxth	r0, r0
 8023dfa:	fb02 fa00 	mul.w	sl, r2, r0
 8023dfe:	0112      	lsls	r2, r2, #4
 8023e00:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023e04:	eba2 080a 	sub.w	r8, r2, sl
 8023e08:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023e0c:	b280      	uxth	r0, r0
 8023e0e:	fa1f f888 	uxth.w	r8, r8
 8023e12:	1a09      	subs	r1, r1, r0
 8023e14:	fb08 f20e 	mul.w	r2, r8, lr
 8023e18:	b289      	uxth	r1, r1
 8023e1a:	fb01 2207 	mla	r2, r1, r7, r2
 8023e1e:	fb00 2209 	mla	r2, r0, r9, r2
 8023e22:	fb0a 2206 	mla	r2, sl, r6, r2
 8023e26:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e2a:	2a00      	cmp	r2, #0
 8023e2c:	f000 80d4 	beq.w	8023fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8023e30:	2fff      	cmp	r7, #255	; 0xff
 8023e32:	d01a      	beq.n	8023e6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8023e34:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023e38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e3c:	fb07 fc0c 	mul.w	ip, r7, ip
 8023e40:	435f      	muls	r7, r3
 8023e42:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023e46:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023e4a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8023e4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e52:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8023e56:	4463      	add	r3, ip
 8023e58:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023e5c:	0a1b      	lsrs	r3, r3, #8
 8023e5e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023e62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023e66:	ea43 030b 	orr.w	r3, r3, fp
 8023e6a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023e6e:	d01e      	beq.n	8023eae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8023e70:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023e72:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8023e76:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023e7a:	fb0e fb0b 	mul.w	fp, lr, fp
 8023e7e:	fb0e fe07 	mul.w	lr, lr, r7
 8023e82:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8023e86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023e8a:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8023e8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023e92:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8023e96:	44dc      	add	ip, fp
 8023e98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023e9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ea0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023ea4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ea8:	ea4c 070e 	orr.w	r7, ip, lr
 8023eac:	970b      	str	r7, [sp, #44]	; 0x2c
 8023eae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023eb2:	d01e      	beq.n	8023ef2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8023eb4:	9f08      	ldr	r7, [sp, #32]
 8023eb6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023eba:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023ebe:	fb09 fe0e 	mul.w	lr, r9, lr
 8023ec2:	fb09 f907 	mul.w	r9, r9, r7
 8023ec6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023eca:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023ece:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8023ed2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023ed6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8023eda:	44f4      	add	ip, lr
 8023edc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023ee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023ee4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023ee8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023eec:	ea4c 0709 	orr.w	r7, ip, r9
 8023ef0:	9708      	str	r7, [sp, #32]
 8023ef2:	2eff      	cmp	r6, #255	; 0xff
 8023ef4:	d01c      	beq.n	8023f30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8023ef6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023ef8:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8023efc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f00:	fb06 fe0e 	mul.w	lr, r6, lr
 8023f04:	437e      	muls	r6, r7
 8023f06:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8023f0a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023f0e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8023f12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f16:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8023f1a:	44f4      	add	ip, lr
 8023f1c:	0a36      	lsrs	r6, r6, #8
 8023f1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f22:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023f26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f2a:	ea4c 0606 	orr.w	r6, ip, r6
 8023f2e:	960c      	str	r6, [sp, #48]	; 0x30
 8023f30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8023f32:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8023f36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f3a:	2aff      	cmp	r2, #255	; 0xff
 8023f3c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023f40:	fb08 f606 	mul.w	r6, r8, r6
 8023f44:	fb01 6607 	mla	r6, r1, r7, r6
 8023f48:	9f08      	ldr	r7, [sp, #32]
 8023f4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023f4e:	fb00 6607 	mla	r6, r0, r7, r6
 8023f52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023f54:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8023f58:	fb0a 6607 	mla	r6, sl, r7, r6
 8023f5c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023f5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f62:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8023f66:	fb08 f807 	mul.w	r8, r8, r7
 8023f6a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8023f6e:	fb01 8303 	mla	r3, r1, r3, r8
 8023f72:	9908      	ldr	r1, [sp, #32]
 8023f74:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8023f78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023f7a:	fb00 330c 	mla	r3, r0, ip, r3
 8023f7e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8023f82:	fb0a 3a00 	mla	sl, sl, r0, r3
 8023f86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f8e:	ea46 060a 	orr.w	r6, r6, sl
 8023f92:	b2f0      	uxtb	r0, r6
 8023f94:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8023f98:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8023f9c:	f000 8084 	beq.w	80240a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8023fa0:	43d2      	mvns	r2, r2
 8023fa2:	782b      	ldrb	r3, [r5, #0]
 8023fa4:	b2d2      	uxtb	r2, r2
 8023fa6:	fb03 f702 	mul.w	r7, r3, r2
 8023faa:	1c7b      	adds	r3, r7, #1
 8023fac:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8023fb0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023fb4:	702b      	strb	r3, [r5, #0]
 8023fb6:	786b      	ldrb	r3, [r5, #1]
 8023fb8:	fb03 f002 	mul.w	r0, r3, r2
 8023fbc:	1c43      	adds	r3, r0, #1
 8023fbe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023fc2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023fc6:	706b      	strb	r3, [r5, #1]
 8023fc8:	78ab      	ldrb	r3, [r5, #2]
 8023fca:	4353      	muls	r3, r2
 8023fcc:	1c5a      	adds	r2, r3, #1
 8023fce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023fd2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8023fd6:	70ae      	strb	r6, [r5, #2]
 8023fd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023fda:	3503      	adds	r5, #3
 8023fdc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023fde:	4413      	add	r3, r2
 8023fe0:	9329      	str	r3, [sp, #164]	; 0xa4
 8023fe2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023fe4:	441c      	add	r4, r3
 8023fe6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023fe8:	3b01      	subs	r3, #1
 8023fea:	9313      	str	r3, [sp, #76]	; 0x4c
 8023fec:	e6cb      	b.n	8023d86 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8023fee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023ff0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023ff2:	4413      	add	r3, r2
 8023ff4:	9329      	str	r3, [sp, #164]	; 0xa4
 8023ff6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023ff8:	441c      	add	r4, r3
 8023ffa:	9b06      	ldr	r3, [sp, #24]
 8023ffc:	3b01      	subs	r3, #1
 8023ffe:	9306      	str	r3, [sp, #24]
 8024000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024002:	3303      	adds	r3, #3
 8024004:	930a      	str	r3, [sp, #40]	; 0x28
 8024006:	e675      	b.n	8023cf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8024008:	f47f ae86 	bne.w	8023d18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802400c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802400e:	2b00      	cmp	r3, #0
 8024010:	f340 819e 	ble.w	8024350 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8024014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024018:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802401a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802401e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024022:	eef0 6a48 	vmov.f32	s13, s16
 8024026:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802402a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802402e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024032:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8024036:	eef0 6a68 	vmov.f32	s13, s17
 802403a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802403e:	ee16 4a90 	vmov	r4, s13
 8024042:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024046:	ee69 7a27 	vmul.f32	s15, s18, s15
 802404a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802404e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024052:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024056:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802405a:	ee18 2a10 	vmov	r2, s16
 802405e:	eeb0 8a47 	vmov.f32	s16, s14
 8024062:	fb92 f3f3 	sdiv	r3, r2, r3
 8024066:	ee18 2a90 	vmov	r2, s17
 802406a:	932b      	str	r3, [sp, #172]	; 0xac
 802406c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802406e:	eef0 8a67 	vmov.f32	s17, s15
 8024072:	fb92 f3f3 	sdiv	r3, r2, r3
 8024076:	932c      	str	r3, [sp, #176]	; 0xb0
 8024078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802407a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802407c:	3b01      	subs	r3, #1
 802407e:	9312      	str	r3, [sp, #72]	; 0x48
 8024080:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024082:	bf08      	it	eq
 8024084:	4613      	moveq	r3, r2
 8024086:	9306      	str	r3, [sp, #24]
 8024088:	e62d      	b.n	8023ce6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 802408a:	b150      	cbz	r0, 80240a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 802408c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802408e:	5871      	ldr	r1, [r6, r1]
 8024090:	26ff      	movs	r6, #255	; 0xff
 8024092:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024096:	9108      	str	r1, [sp, #32]
 8024098:	46b6      	mov	lr, r6
 802409a:	e6ac      	b.n	8023df6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802409c:	26ff      	movs	r6, #255	; 0xff
 802409e:	46b1      	mov	r9, r6
 80240a0:	e6a9      	b.n	8023df6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80240a2:	26ff      	movs	r6, #255	; 0xff
 80240a4:	46b1      	mov	r9, r6
 80240a6:	e7f7      	b.n	8024098 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80240a8:	7028      	strb	r0, [r5, #0]
 80240aa:	7069      	strb	r1, [r5, #1]
 80240ac:	e793      	b.n	8023fd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80240ae:	1c4f      	adds	r7, r1, #1
 80240b0:	d192      	bne.n	8023fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80240b2:	9e07      	ldr	r6, [sp, #28]
 80240b4:	428e      	cmp	r6, r1
 80240b6:	dd8f      	ble.n	8023fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80240b8:	1c5e      	adds	r6, r3, #1
 80240ba:	db8d      	blt.n	8023fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80240bc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80240be:	429e      	cmp	r6, r3
 80240c0:	dd8a      	ble.n	8023fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80240c2:	9600      	str	r6, [sp, #0]
 80240c4:	e9cd 2003 	strd	r2, r0, [sp, #12]
 80240c8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80240cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80240ce:	4629      	mov	r1, r5
 80240d0:	9b07      	ldr	r3, [sp, #28]
 80240d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80240d4:	f7ff fc8e 	bl	80239f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80240d8:	e77e      	b.n	8023fd8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80240da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80240dc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80240e0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80240e2:	9e07      	ldr	r6, [sp, #28]
 80240e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80240e8:	1409      	asrs	r1, r1, #16
 80240ea:	1423      	asrs	r3, r4, #16
 80240ec:	fb06 1303 	mla	r3, r6, r3, r1
 80240f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80240f2:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 80240f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80240fa:	0e1f      	lsrs	r7, r3, #24
 80240fc:	2a00      	cmp	r2, #0
 80240fe:	f000 8113 	beq.w	8024328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8024102:	6871      	ldr	r1, [r6, #4]
 8024104:	910d      	str	r1, [sp, #52]	; 0x34
 8024106:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802410a:	2800      	cmp	r0, #0
 802410c:	f000 8115 	beq.w	802433a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8024110:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024112:	eb06 0c01 	add.w	ip, r6, r1
 8024116:	5876      	ldr	r6, [r6, r1]
 8024118:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802411c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8024120:	9609      	str	r6, [sp, #36]	; 0x24
 8024122:	0e0e      	lsrs	r6, r1, #24
 8024124:	910f      	str	r1, [sp, #60]	; 0x3c
 8024126:	b292      	uxth	r2, r2
 8024128:	b280      	uxth	r0, r0
 802412a:	fb02 fa00 	mul.w	sl, r2, r0
 802412e:	0112      	lsls	r2, r2, #4
 8024130:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024134:	eba2 080a 	sub.w	r8, r2, sl
 8024138:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802413c:	b280      	uxth	r0, r0
 802413e:	fa1f f888 	uxth.w	r8, r8
 8024142:	1a09      	subs	r1, r1, r0
 8024144:	fb08 f20e 	mul.w	r2, r8, lr
 8024148:	b289      	uxth	r1, r1
 802414a:	fb01 2207 	mla	r2, r1, r7, r2
 802414e:	fb00 2209 	mla	r2, r0, r9, r2
 8024152:	fb0a 2206 	mla	r2, sl, r6, r2
 8024156:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802415a:	2a00      	cmp	r2, #0
 802415c:	f000 80da 	beq.w	8024314 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8024160:	2fff      	cmp	r7, #255	; 0xff
 8024162:	d01a      	beq.n	802419a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8024164:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024168:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802416c:	fb07 fc0c 	mul.w	ip, r7, ip
 8024170:	435f      	muls	r7, r3
 8024172:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8024176:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802417a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802417e:	4463      	add	r3, ip
 8024180:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8024184:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8024188:	0a1b      	lsrs	r3, r3, #8
 802418a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802418e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024192:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024196:	ea43 030c 	orr.w	r3, r3, ip
 802419a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802419e:	d021      	beq.n	80241e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80241a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80241a2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80241a6:	fb0e f707 	mul.w	r7, lr, r7
 80241aa:	9713      	str	r7, [sp, #76]	; 0x4c
 80241ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80241ae:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80241b2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80241b4:	fb0e fe0c 	mul.w	lr, lr, ip
 80241b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80241bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80241c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241c4:	44bc      	add	ip, r7
 80241c6:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80241ca:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80241ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80241d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80241d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80241da:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80241de:	ea4c 070e 	orr.w	r7, ip, lr
 80241e2:	970d      	str	r7, [sp, #52]	; 0x34
 80241e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80241e8:	d01e      	beq.n	8024228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 80241ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80241ec:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80241f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80241f4:	fb09 fe0e 	mul.w	lr, r9, lr
 80241f8:	fb09 f907 	mul.w	r9, r9, r7
 80241fc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024200:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024204:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8024208:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802420c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8024210:	44f4      	add	ip, lr
 8024212:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024216:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802421a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802421e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024222:	ea4c 0709 	orr.w	r7, ip, r9
 8024226:	9709      	str	r7, [sp, #36]	; 0x24
 8024228:	2eff      	cmp	r6, #255	; 0xff
 802422a:	d01c      	beq.n	8024266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802422c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802422e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8024232:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024236:	fb06 fe0e 	mul.w	lr, r6, lr
 802423a:	437e      	muls	r6, r7
 802423c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8024240:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024244:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8024248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802424c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8024250:	44f4      	add	ip, lr
 8024252:	0a36      	lsrs	r6, r6, #8
 8024254:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024258:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802425c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024260:	ea4c 0606 	orr.w	r6, ip, r6
 8024264:	960f      	str	r6, [sp, #60]	; 0x3c
 8024266:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8024268:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802426c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024270:	2aff      	cmp	r2, #255	; 0xff
 8024272:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024276:	fb08 f606 	mul.w	r6, r8, r6
 802427a:	fb01 6607 	mla	r6, r1, r7, r6
 802427e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024280:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024284:	fb00 6607 	mla	r6, r0, r7, r6
 8024288:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802428a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802428e:	fb0a 6607 	mla	r6, sl, r7, r6
 8024292:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8024294:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024298:	ea4f 2616 	mov.w	r6, r6, lsr #8
 802429c:	fb08 f807 	mul.w	r8, r8, r7
 80242a0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80242a4:	fb01 8303 	mla	r3, r1, r3, r8
 80242a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80242aa:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80242ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80242b0:	fb00 330c 	mla	r3, r0, ip, r3
 80242b4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 80242b8:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80242bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80242c0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80242c4:	ea46 060e 	orr.w	r6, r6, lr
 80242c8:	b2f0      	uxtb	r0, r6
 80242ca:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80242ce:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80242d2:	d038      	beq.n	8024346 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 80242d4:	43d2      	mvns	r2, r2
 80242d6:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80242da:	b2d2      	uxtb	r2, r2
 80242dc:	4357      	muls	r7, r2
 80242de:	1c7b      	adds	r3, r7, #1
 80242e0:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80242e4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80242e8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 80242ec:	4350      	muls	r0, r2
 80242ee:	f805 3c03 	strb.w	r3, [r5, #-3]
 80242f2:	1c43      	adds	r3, r0, #1
 80242f4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80242f8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80242fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8024300:	4353      	muls	r3, r2
 8024302:	f805 1c02 	strb.w	r1, [r5, #-2]
 8024306:	1c5a      	adds	r2, r3, #1
 8024308:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802430c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8024310:	f805 6c01 	strb.w	r6, [r5, #-1]
 8024314:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024316:	3503      	adds	r5, #3
 8024318:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802431a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802431e:	4413      	add	r3, r2
 8024320:	9329      	str	r3, [sp, #164]	; 0xa4
 8024322:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024324:	441c      	add	r4, r3
 8024326:	e510      	b.n	8023d4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8024328:	b150      	cbz	r0, 8024340 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802432a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802432c:	5871      	ldr	r1, [r6, r1]
 802432e:	26ff      	movs	r6, #255	; 0xff
 8024330:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8024334:	9109      	str	r1, [sp, #36]	; 0x24
 8024336:	46b6      	mov	lr, r6
 8024338:	e6f5      	b.n	8024126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802433a:	26ff      	movs	r6, #255	; 0xff
 802433c:	46b1      	mov	r9, r6
 802433e:	e6f2      	b.n	8024126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8024340:	26ff      	movs	r6, #255	; 0xff
 8024342:	46b1      	mov	r9, r6
 8024344:	e7f7      	b.n	8024336 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8024346:	f805 0c03 	strb.w	r0, [r5, #-3]
 802434a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802434e:	e7df      	b.n	8024310 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8024350:	b017      	add	sp, #92	; 0x5c
 8024352:	ecbd 8b08 	vpop	{d8-d11}
 8024356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802435c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802435c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024360:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024364:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024368:	2800      	cmp	r0, #0
 802436a:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802436e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024372:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024376:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 802437a:	db6b      	blt.n	8024454 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802437c:	4580      	cmp	r8, r0
 802437e:	dd69      	ble.n	8024454 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024380:	f1bc 0f00 	cmp.w	ip, #0
 8024384:	db66      	blt.n	8024454 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8024386:	45e1      	cmp	r9, ip
 8024388:	dd64      	ble.n	8024454 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802438a:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802438e:	f01e 0f01 	tst.w	lr, #1
 8024392:	5d16      	ldrb	r6, [r2, r4]
 8024394:	bf0c      	ite	eq
 8024396:	f006 060f 	andeq.w	r6, r6, #15
 802439a:	1136      	asrne	r6, r6, #4
 802439c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80243a0:	b2f6      	uxtb	r6, r6
 80243a2:	f110 0a01 	adds.w	sl, r0, #1
 80243a6:	d457      	bmi.n	8024458 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80243a8:	45d0      	cmp	r8, sl
 80243aa:	dd55      	ble.n	8024458 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80243ac:	f1bc 0f00 	cmp.w	ip, #0
 80243b0:	db52      	blt.n	8024458 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80243b2:	45e1      	cmp	r9, ip
 80243b4:	dd50      	ble.n	8024458 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80243b6:	2f00      	cmp	r7, #0
 80243b8:	f000 80ac 	beq.w	8024514 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 80243bc:	f10e 0b01 	add.w	fp, lr, #1
 80243c0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80243c4:	f01b 0f01 	tst.w	fp, #1
 80243c8:	5d14      	ldrb	r4, [r2, r4]
 80243ca:	bf0c      	ite	eq
 80243cc:	f004 040f 	andeq.w	r4, r4, #15
 80243d0:	1124      	asrne	r4, r4, #4
 80243d2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80243d6:	b2e4      	uxtb	r4, r4
 80243d8:	2d00      	cmp	r5, #0
 80243da:	f000 8096 	beq.w	802450a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 80243de:	2800      	cmp	r0, #0
 80243e0:	f10c 0c01 	add.w	ip, ip, #1
 80243e4:	db3c      	blt.n	8024460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80243e6:	4580      	cmp	r8, r0
 80243e8:	dd3a      	ble.n	8024460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80243ea:	f1bc 0f00 	cmp.w	ip, #0
 80243ee:	db37      	blt.n	8024460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80243f0:	45e1      	cmp	r9, ip
 80243f2:	dd35      	ble.n	8024460 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 80243f4:	eb03 0b0e 	add.w	fp, r3, lr
 80243f8:	ea4f 005b 	mov.w	r0, fp, lsr #1
 80243fc:	f01b 0f01 	tst.w	fp, #1
 8024400:	5c10      	ldrb	r0, [r2, r0]
 8024402:	bf0c      	ite	eq
 8024404:	f000 000f 	andeq.w	r0, r0, #15
 8024408:	1100      	asrne	r0, r0, #4
 802440a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802440e:	b2c0      	uxtb	r0, r0
 8024410:	f1ba 0f00 	cmp.w	sl, #0
 8024414:	db26      	blt.n	8024464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024416:	45d0      	cmp	r8, sl
 8024418:	dd24      	ble.n	8024464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802441a:	f1bc 0f00 	cmp.w	ip, #0
 802441e:	db21      	blt.n	8024464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024420:	45e1      	cmp	r9, ip
 8024422:	dd1f      	ble.n	8024464 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8024424:	b307      	cbz	r7, 8024468 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8024426:	3301      	adds	r3, #1
 8024428:	449e      	add	lr, r3
 802442a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802442e:	f01e 0f01 	tst.w	lr, #1
 8024432:	5cd3      	ldrb	r3, [r2, r3]
 8024434:	bf0c      	ite	eq
 8024436:	f003 030f 	andeq.w	r3, r3, #15
 802443a:	111b      	asrne	r3, r3, #4
 802443c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024440:	b2db      	uxtb	r3, r3
 8024442:	2f0f      	cmp	r7, #15
 8024444:	d911      	bls.n	802446a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8024446:	4b35      	ldr	r3, [pc, #212]	; (802451c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8024448:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802444c:	4a34      	ldr	r2, [pc, #208]	; (8024520 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802444e:	4835      	ldr	r0, [pc, #212]	; (8024524 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 8024450:	f000 ff72 	bl	8025338 <__assert_func>
 8024454:	2600      	movs	r6, #0
 8024456:	e7a4      	b.n	80243a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 8024458:	2400      	movs	r4, #0
 802445a:	e7bd      	b.n	80243d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 802445c:	463c      	mov	r4, r7
 802445e:	e7be      	b.n	80243de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 8024460:	2000      	movs	r0, #0
 8024462:	e7d5      	b.n	8024410 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8024464:	2300      	movs	r3, #0
 8024466:	e7ec      	b.n	8024442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8024468:	463b      	mov	r3, r7
 802446a:	2d0f      	cmp	r5, #15
 802446c:	d8eb      	bhi.n	8024446 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802446e:	b2bf      	uxth	r7, r7
 8024470:	b2ad      	uxth	r5, r5
 8024472:	fb07 f205 	mul.w	r2, r7, r5
 8024476:	013f      	lsls	r7, r7, #4
 8024478:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 802447c:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024480:	1abf      	subs	r7, r7, r2
 8024482:	b2ad      	uxth	r5, r5
 8024484:	b2bf      	uxth	r7, r7
 8024486:	ebac 0c05 	sub.w	ip, ip, r5
 802448a:	437c      	muls	r4, r7
 802448c:	fa1f fc8c 	uxth.w	ip, ip
 8024490:	fb06 440c 	mla	r4, r6, ip, r4
 8024494:	fb05 4400 	mla	r4, r5, r0, r4
 8024498:	fb02 4203 	mla	r2, r2, r3, r4
 802449c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80244a0:	b38a      	cbz	r2, 8024506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80244a2:	4b21      	ldr	r3, [pc, #132]	; (8024528 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80244a4:	681c      	ldr	r4, [r3, #0]
 80244a6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80244aa:	b2e5      	uxtb	r5, r4
 80244ac:	4353      	muls	r3, r2
 80244ae:	1c5a      	adds	r2, r3, #1
 80244b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80244b4:	1212      	asrs	r2, r2, #8
 80244b6:	b290      	uxth	r0, r2
 80244b8:	43d2      	mvns	r2, r2
 80244ba:	fb15 f500 	smulbb	r5, r5, r0
 80244be:	b2d3      	uxtb	r3, r2
 80244c0:	780a      	ldrb	r2, [r1, #0]
 80244c2:	fb02 5203 	mla	r2, r2, r3, r5
 80244c6:	b292      	uxth	r2, r2
 80244c8:	1c55      	adds	r5, r2, #1
 80244ca:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80244ce:	784d      	ldrb	r5, [r1, #1]
 80244d0:	fb15 f503 	smulbb	r5, r5, r3
 80244d4:	1212      	asrs	r2, r2, #8
 80244d6:	700a      	strb	r2, [r1, #0]
 80244d8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80244dc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80244e0:	fb02 5200 	mla	r2, r2, r0, r5
 80244e4:	b292      	uxth	r2, r2
 80244e6:	1c55      	adds	r5, r2, #1
 80244e8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 80244ec:	1212      	asrs	r2, r2, #8
 80244ee:	704a      	strb	r2, [r1, #1]
 80244f0:	788a      	ldrb	r2, [r1, #2]
 80244f2:	fb12 f303 	smulbb	r3, r2, r3
 80244f6:	fb04 3300 	mla	r3, r4, r0, r3
 80244fa:	b29b      	uxth	r3, r3
 80244fc:	1c5a      	adds	r2, r3, #1
 80244fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024502:	121b      	asrs	r3, r3, #8
 8024504:	708b      	strb	r3, [r1, #2]
 8024506:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802450a:	2f0f      	cmp	r7, #15
 802450c:	d89b      	bhi.n	8024446 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802450e:	462b      	mov	r3, r5
 8024510:	4628      	mov	r0, r5
 8024512:	e7ac      	b.n	802446e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8024514:	2d00      	cmp	r5, #0
 8024516:	d1a1      	bne.n	802445c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8024518:	462c      	mov	r4, r5
 802451a:	e7f8      	b.n	802450e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802451c:	0802930c 	.word	0x0802930c
 8024520:	08029802 	.word	0x08029802
 8024524:	080293d5 	.word	0x080293d5
 8024528:	200098f4 	.word	0x200098f4

0802452c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802452c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024530:	ed2d 8b08 	vpush	{d8-d11}
 8024534:	b097      	sub	sp, #92	; 0x5c
 8024536:	eeb0 aa40 	vmov.f32	s20, s0
 802453a:	eef0 9a60 	vmov.f32	s19, s1
 802453e:	9308      	str	r3, [sp, #32]
 8024540:	eeb0 9a41 	vmov.f32	s18, s2
 8024544:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8024548:	eeb0 8a62 	vmov.f32	s16, s5
 802454c:	9214      	str	r2, [sp, #80]	; 0x50
 802454e:	eef0 8a43 	vmov.f32	s17, s6
 8024552:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8024554:	eef0 ba44 	vmov.f32	s23, s8
 8024558:	9309      	str	r3, [sp, #36]	; 0x24
 802455a:	eeb0 ba64 	vmov.f32	s22, s9
 802455e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8024562:	eef0 aa45 	vmov.f32	s21, s10
 8024566:	9015      	str	r0, [sp, #84]	; 0x54
 8024568:	910c      	str	r1, [sp, #48]	; 0x30
 802456a:	930e      	str	r3, [sp, #56]	; 0x38
 802456c:	6850      	ldr	r0, [r2, #4]
 802456e:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8024572:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8024576:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 802457a:	fb00 1803 	mla	r8, r0, r3, r1
 802457e:	6813      	ldr	r3, [r2, #0]
 8024580:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024584:	4498      	add	r8, r3
 8024586:	f10b 0301 	add.w	r3, fp, #1
 802458a:	f023 0301 	bic.w	r3, r3, #1
 802458e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024590:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024592:	681f      	ldr	r7, [r3, #0]
 8024594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024596:	2b00      	cmp	r3, #0
 8024598:	dc03      	bgt.n	80245a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802459a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802459c:	2b00      	cmp	r3, #0
 802459e:	f340 8238 	ble.w	8024a12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80245a2:	9b08      	ldr	r3, [sp, #32]
 80245a4:	2b00      	cmp	r3, #0
 80245a6:	f340 810c 	ble.w	80247c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80245aa:	142a      	asrs	r2, r5, #16
 80245ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 80245b0:	d42c      	bmi.n	802460c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80245b2:	1c51      	adds	r1, r2, #1
 80245b4:	458b      	cmp	fp, r1
 80245b6:	dd2c      	ble.n	8024612 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	db2a      	blt.n	8024612 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80245bc:	1c59      	adds	r1, r3, #1
 80245be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80245c0:	4288      	cmp	r0, r1
 80245c2:	dd26      	ble.n	8024612 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80245c4:	9b08      	ldr	r3, [sp, #32]
 80245c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80245c8:	3b01      	subs	r3, #1
 80245ca:	fb02 5203 	mla	r2, r2, r3, r5
 80245ce:	1412      	asrs	r2, r2, #16
 80245d0:	d429      	bmi.n	8024626 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80245d2:	3201      	adds	r2, #1
 80245d4:	4593      	cmp	fp, r2
 80245d6:	dd26      	ble.n	8024626 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80245d8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80245da:	fb02 6303 	mla	r3, r2, r3, r6
 80245de:	141b      	asrs	r3, r3, #16
 80245e0:	d421      	bmi.n	8024626 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80245e2:	3301      	adds	r3, #1
 80245e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80245e6:	429a      	cmp	r2, r3
 80245e8:	dd1d      	ble.n	8024626 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 80245ea:	f108 0e03 	add.w	lr, r8, #3
 80245ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80245f2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80245f6:	f1b9 0f00 	cmp.w	r9, #0
 80245fa:	f300 814f 	bgt.w	802489c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 80245fe:	9b08      	ldr	r3, [sp, #32]
 8024600:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024604:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024608:	44a0      	add	r8, r4
 802460a:	e0dc      	b.n	80247c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802460c:	1c51      	adds	r1, r2, #1
 802460e:	f040 80ce 	bne.w	80247ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024612:	4593      	cmp	fp, r2
 8024614:	f340 80cb 	ble.w	80247ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024618:	1c5a      	adds	r2, r3, #1
 802461a:	f2c0 80c8 	blt.w	80247ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802461e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024620:	4293      	cmp	r3, r2
 8024622:	f280 80c4 	bge.w	80247ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8024626:	9b08      	ldr	r3, [sp, #32]
 8024628:	46c1      	mov	r9, r8
 802462a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802462e:	930d      	str	r3, [sp, #52]	; 0x34
 8024630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024632:	2b00      	cmp	r3, #0
 8024634:	dde3      	ble.n	80245fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8024636:	1428      	asrs	r0, r5, #16
 8024638:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802463c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024640:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024644:	f100 8111 	bmi.w	802486a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8024648:	f100 0c01 	add.w	ip, r0, #1
 802464c:	45e3      	cmp	fp, ip
 802464e:	f340 810e 	ble.w	802486e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024652:	2b00      	cmp	r3, #0
 8024654:	f2c0 810b 	blt.w	802486e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024658:	f103 0c01 	add.w	ip, r3, #1
 802465c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802465e:	4564      	cmp	r4, ip
 8024660:	f340 8105 	ble.w	802486e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024664:	fb03 030a 	mla	r3, r3, sl, r0
 8024668:	0858      	lsrs	r0, r3, #1
 802466a:	07dc      	lsls	r4, r3, #31
 802466c:	5c38      	ldrb	r0, [r7, r0]
 802466e:	bf54      	ite	pl
 8024670:	f000 000f 	andpl.w	r0, r0, #15
 8024674:	1100      	asrmi	r0, r0, #4
 8024676:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802467a:	b2c0      	uxtb	r0, r0
 802467c:	2a00      	cmp	r2, #0
 802467e:	f000 80e1 	beq.w	8024844 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8024682:	f103 0e01 	add.w	lr, r3, #1
 8024686:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802468a:	f01e 0f01 	tst.w	lr, #1
 802468e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024692:	bf0c      	ite	eq
 8024694:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024698:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802469c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80246a0:	fa5f f48c 	uxtb.w	r4, ip
 80246a4:	9410      	str	r4, [sp, #64]	; 0x40
 80246a6:	b1f9      	cbz	r1, 80246e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80246a8:	4453      	add	r3, sl
 80246aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80246ae:	07dc      	lsls	r4, r3, #31
 80246b0:	f103 0301 	add.w	r3, r3, #1
 80246b4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80246b8:	bf54      	ite	pl
 80246ba:	f00c 0c0f 	andpl.w	ip, ip, #15
 80246be:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80246c2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80246c6:	fa5f f48c 	uxtb.w	r4, ip
 80246ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80246ce:	940a      	str	r4, [sp, #40]	; 0x28
 80246d0:	07dc      	lsls	r4, r3, #31
 80246d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80246d6:	bf54      	ite	pl
 80246d8:	f00c 030f 	andpl.w	r3, ip, #15
 80246dc:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80246e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80246e4:	b2db      	uxtb	r3, r3
 80246e6:	9311      	str	r3, [sp, #68]	; 0x44
 80246e8:	b292      	uxth	r2, r2
 80246ea:	b289      	uxth	r1, r1
 80246ec:	0113      	lsls	r3, r2, #4
 80246ee:	fb02 fc01 	mul.w	ip, r2, r1
 80246f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80246f4:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80246f8:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 80246fc:	eba3 030c 	sub.w	r3, r3, ip
 8024700:	b289      	uxth	r1, r1
 8024702:	b29b      	uxth	r3, r3
 8024704:	ebae 0e01 	sub.w	lr, lr, r1
 8024708:	4353      	muls	r3, r2
 802470a:	fa1f fe8e 	uxth.w	lr, lr
 802470e:	fb00 320e 	mla	r2, r0, lr, r3
 8024712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024714:	fb01 2203 	mla	r2, r1, r3, r2
 8024718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802471a:	fb0c 2203 	mla	r2, ip, r3, r2
 802471e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8024722:	2a00      	cmp	r2, #0
 8024724:	d039      	beq.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024726:	4bbd      	ldr	r3, [pc, #756]	; (8024a1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8024728:	6819      	ldr	r1, [r3, #0]
 802472a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802472c:	fa5f fc81 	uxtb.w	ip, r1
 8024730:	435a      	muls	r2, r3
 8024732:	1c53      	adds	r3, r2, #1
 8024734:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024738:	1212      	asrs	r2, r2, #8
 802473a:	b290      	uxth	r0, r2
 802473c:	43d2      	mvns	r2, r2
 802473e:	fb1c fc00 	smulbb	ip, ip, r0
 8024742:	b2d3      	uxtb	r3, r2
 8024744:	f899 2000 	ldrb.w	r2, [r9]
 8024748:	fb02 c203 	mla	r2, r2, r3, ip
 802474c:	b292      	uxth	r2, r2
 802474e:	f102 0c01 	add.w	ip, r2, #1
 8024752:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024756:	f899 c001 	ldrb.w	ip, [r9, #1]
 802475a:	fb1c fc03 	smulbb	ip, ip, r3
 802475e:	1212      	asrs	r2, r2, #8
 8024760:	f889 2000 	strb.w	r2, [r9]
 8024764:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8024768:	f3c1 4107 	ubfx	r1, r1, #16, #8
 802476c:	fb02 c200 	mla	r2, r2, r0, ip
 8024770:	b292      	uxth	r2, r2
 8024772:	f102 0c01 	add.w	ip, r2, #1
 8024776:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802477a:	1212      	asrs	r2, r2, #8
 802477c:	f889 2001 	strb.w	r2, [r9, #1]
 8024780:	f899 2002 	ldrb.w	r2, [r9, #2]
 8024784:	fb12 f303 	smulbb	r3, r2, r3
 8024788:	fb01 3300 	mla	r3, r1, r0, r3
 802478c:	b29b      	uxth	r3, r3
 802478e:	1c5a      	adds	r2, r3, #1
 8024790:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024794:	121b      	asrs	r3, r3, #8
 8024796:	f889 3002 	strb.w	r3, [r9, #2]
 802479a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802479c:	f109 0903 	add.w	r9, r9, #3
 80247a0:	441d      	add	r5, r3
 80247a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80247a4:	441e      	add	r6, r3
 80247a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80247a8:	3b01      	subs	r3, #1
 80247aa:	930d      	str	r3, [sp, #52]	; 0x34
 80247ac:	e740      	b.n	8024630 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80247ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80247b0:	f108 0803 	add.w	r8, r8, #3
 80247b4:	441d      	add	r5, r3
 80247b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80247b8:	441e      	add	r6, r3
 80247ba:	9b08      	ldr	r3, [sp, #32]
 80247bc:	3b01      	subs	r3, #1
 80247be:	9308      	str	r3, [sp, #32]
 80247c0:	e6ef      	b.n	80245a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80247c2:	f47f aeff 	bne.w	80245c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80247c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80247c8:	2b00      	cmp	r3, #0
 80247ca:	f340 8122 	ble.w	8024a12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80247ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80247d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247d4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80247d8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80247dc:	eef0 6a48 	vmov.f32	s13, s16
 80247e0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80247e4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80247e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247ec:	ee16 5a90 	vmov	r5, s13
 80247f0:	eef0 6a68 	vmov.f32	s13, s17
 80247f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247f8:	ee16 6a90 	vmov	r6, s13
 80247fc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024800:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024804:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024808:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802480c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024810:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024814:	ee18 2a10 	vmov	r2, s16
 8024818:	eeb0 8a47 	vmov.f32	s16, s14
 802481c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024820:	ee18 2a90 	vmov	r2, s17
 8024824:	932b      	str	r3, [sp, #172]	; 0xac
 8024826:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024828:	eef0 8a67 	vmov.f32	s17, s15
 802482c:	fb92 f3f3 	sdiv	r3, r2, r3
 8024830:	932c      	str	r3, [sp, #176]	; 0xb0
 8024832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024836:	3b01      	subs	r3, #1
 8024838:	930c      	str	r3, [sp, #48]	; 0x30
 802483a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802483c:	bf08      	it	eq
 802483e:	4613      	moveq	r3, r2
 8024840:	9308      	str	r3, [sp, #32]
 8024842:	e6a7      	b.n	8024594 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8024844:	2900      	cmp	r1, #0
 8024846:	f43f af4f 	beq.w	80246e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802484a:	4453      	add	r3, sl
 802484c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024850:	07db      	lsls	r3, r3, #31
 8024852:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024856:	bf54      	ite	pl
 8024858:	f00c 030f 	andpl.w	r3, ip, #15
 802485c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024860:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024864:	b2db      	uxtb	r3, r3
 8024866:	930a      	str	r3, [sp, #40]	; 0x28
 8024868:	e73e      	b.n	80246e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802486a:	1c44      	adds	r4, r0, #1
 802486c:	d195      	bne.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802486e:	4583      	cmp	fp, r0
 8024870:	dd93      	ble.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024872:	1c5c      	adds	r4, r3, #1
 8024874:	db91      	blt.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8024876:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024878:	429c      	cmp	r4, r3
 802487a:	dd8e      	ble.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802487c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802487e:	9002      	str	r0, [sp, #8]
 8024880:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024882:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024888:	463a      	mov	r2, r7
 802488a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802488e:	e9cd b300 	strd	fp, r3, [sp]
 8024892:	4649      	mov	r1, r9
 8024894:	4653      	mov	r3, sl
 8024896:	f7ff fd61 	bl	802435c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802489a:	e77e      	b.n	802479a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802489c:	142a      	asrs	r2, r5, #16
 802489e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80248a2:	1433      	asrs	r3, r6, #16
 80248a4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80248a8:	fb0a 2303 	mla	r3, sl, r3, r2
 80248ac:	085a      	lsrs	r2, r3, #1
 80248ae:	07dc      	lsls	r4, r3, #31
 80248b0:	5cba      	ldrb	r2, [r7, r2]
 80248b2:	bf54      	ite	pl
 80248b4:	f002 020f 	andpl.w	r2, r2, #15
 80248b8:	1112      	asrmi	r2, r2, #4
 80248ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80248be:	b2d2      	uxtb	r2, r2
 80248c0:	2900      	cmp	r1, #0
 80248c2:	f000 8093 	beq.w	80249ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 80248c6:	1c5c      	adds	r4, r3, #1
 80248c8:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80248cc:	07e4      	lsls	r4, r4, #31
 80248ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248d2:	bf54      	ite	pl
 80248d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80248d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80248dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80248e0:	fa5f f48c 	uxtb.w	r4, ip
 80248e4:	9412      	str	r4, [sp, #72]	; 0x48
 80248e6:	b300      	cbz	r0, 802492a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80248e8:	4453      	add	r3, sl
 80248ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80248ee:	07dc      	lsls	r4, r3, #31
 80248f0:	f103 0301 	add.w	r3, r3, #1
 80248f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80248f8:	bf54      	ite	pl
 80248fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80248fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024902:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024906:	fa5f f48c 	uxtb.w	r4, ip
 802490a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802490e:	940b      	str	r4, [sp, #44]	; 0x2c
 8024910:	07dc      	lsls	r4, r3, #31
 8024912:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024916:	bf54      	ite	pl
 8024918:	f00c 0c0f 	andpl.w	ip, ip, #15
 802491c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024920:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024924:	fa5f f38c 	uxtb.w	r3, ip
 8024928:	9313      	str	r3, [sp, #76]	; 0x4c
 802492a:	b289      	uxth	r1, r1
 802492c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802492e:	b280      	uxth	r0, r0
 8024930:	fb01 f300 	mul.w	r3, r1, r0
 8024934:	0109      	lsls	r1, r1, #4
 8024936:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802493a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802493e:	1ac9      	subs	r1, r1, r3
 8024940:	b280      	uxth	r0, r0
 8024942:	b289      	uxth	r1, r1
 8024944:	ebac 0c00 	sub.w	ip, ip, r0
 8024948:	4361      	muls	r1, r4
 802494a:	fa1f fc8c 	uxth.w	ip, ip
 802494e:	fb02 120c 	mla	r2, r2, ip, r1
 8024952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8024954:	fb00 2001 	mla	r0, r0, r1, r2
 8024958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802495a:	fb03 0302 	mla	r3, r3, r2, r0
 802495e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024962:	2b00      	cmp	r3, #0
 8024964:	d039      	beq.n	80249da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8024966:	4a2d      	ldr	r2, [pc, #180]	; (8024a1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8024968:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802496c:	6810      	ldr	r0, [r2, #0]
 802496e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024970:	fa5f fc80 	uxtb.w	ip, r0
 8024974:	4353      	muls	r3, r2
 8024976:	1c5a      	adds	r2, r3, #1
 8024978:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802497c:	121b      	asrs	r3, r3, #8
 802497e:	b29a      	uxth	r2, r3
 8024980:	43db      	mvns	r3, r3
 8024982:	fb1c fc02 	smulbb	ip, ip, r2
 8024986:	b2db      	uxtb	r3, r3
 8024988:	fb01 c103 	mla	r1, r1, r3, ip
 802498c:	b289      	uxth	r1, r1
 802498e:	f101 0c01 	add.w	ip, r1, #1
 8024992:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024996:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802499a:	fb1c fc03 	smulbb	ip, ip, r3
 802499e:	1209      	asrs	r1, r1, #8
 80249a0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80249a4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80249a8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80249ac:	fb01 c102 	mla	r1, r1, r2, ip
 80249b0:	b289      	uxth	r1, r1
 80249b2:	f101 0c01 	add.w	ip, r1, #1
 80249b6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80249ba:	1209      	asrs	r1, r1, #8
 80249bc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80249c0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80249c4:	fb11 f303 	smulbb	r3, r1, r3
 80249c8:	fb00 3002 	mla	r0, r0, r2, r3
 80249cc:	b280      	uxth	r0, r0
 80249ce:	1c42      	adds	r2, r0, #1
 80249d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80249d4:	1200      	asrs	r0, r0, #8
 80249d6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80249da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80249dc:	f10e 0e03 	add.w	lr, lr, #3
 80249e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80249e4:	441d      	add	r5, r3
 80249e6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80249e8:	441e      	add	r6, r3
 80249ea:	e604      	b.n	80245f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 80249ec:	2800      	cmp	r0, #0
 80249ee:	d09c      	beq.n	802492a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 80249f0:	4453      	add	r3, sl
 80249f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80249f6:	07db      	lsls	r3, r3, #31
 80249f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80249fc:	bf54      	ite	pl
 80249fe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024a02:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024a06:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024a0a:	fa5f f38c 	uxtb.w	r3, ip
 8024a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8024a10:	e78b      	b.n	802492a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8024a12:	b017      	add	sp, #92	; 0x5c
 8024a14:	ecbd 8b08 	vpop	{d8-d11}
 8024a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a1c:	200098f4 	.word	0x200098f4

08024a20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8024a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a24:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8024a28:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8024a2c:	2800      	cmp	r0, #0
 8024a2e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8024a32:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8024a36:	fb0c 0e03 	mla	lr, ip, r3, r0
 8024a3a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8024a3e:	db6b      	blt.n	8024b18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024a40:	4580      	cmp	r8, r0
 8024a42:	dd69      	ble.n	8024b18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024a44:	f1bc 0f00 	cmp.w	ip, #0
 8024a48:	db66      	blt.n	8024b18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024a4a:	45e1      	cmp	r9, ip
 8024a4c:	dd64      	ble.n	8024b18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8024a4e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8024a52:	f01e 0f01 	tst.w	lr, #1
 8024a56:	5d16      	ldrb	r6, [r2, r4]
 8024a58:	bf0c      	ite	eq
 8024a5a:	f006 060f 	andeq.w	r6, r6, #15
 8024a5e:	1136      	asrne	r6, r6, #4
 8024a60:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8024a64:	b2f6      	uxtb	r6, r6
 8024a66:	f110 0a01 	adds.w	sl, r0, #1
 8024a6a:	d457      	bmi.n	8024b1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a6c:	45d0      	cmp	r8, sl
 8024a6e:	dd55      	ble.n	8024b1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a70:	f1bc 0f00 	cmp.w	ip, #0
 8024a74:	db52      	blt.n	8024b1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a76:	45e1      	cmp	r9, ip
 8024a78:	dd50      	ble.n	8024b1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8024a7a:	2f00      	cmp	r7, #0
 8024a7c:	f000 80a5 	beq.w	8024bca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8024a80:	f10e 0b01 	add.w	fp, lr, #1
 8024a84:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8024a88:	f01b 0f01 	tst.w	fp, #1
 8024a8c:	5d14      	ldrb	r4, [r2, r4]
 8024a8e:	bf0c      	ite	eq
 8024a90:	f004 040f 	andeq.w	r4, r4, #15
 8024a94:	1124      	asrne	r4, r4, #4
 8024a96:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8024a9a:	b2e4      	uxtb	r4, r4
 8024a9c:	2d00      	cmp	r5, #0
 8024a9e:	f000 808f 	beq.w	8024bc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8024aa2:	2800      	cmp	r0, #0
 8024aa4:	f10c 0c01 	add.w	ip, ip, #1
 8024aa8:	db3c      	blt.n	8024b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024aaa:	4580      	cmp	r8, r0
 8024aac:	dd3a      	ble.n	8024b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024aae:	f1bc 0f00 	cmp.w	ip, #0
 8024ab2:	db37      	blt.n	8024b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024ab4:	45e1      	cmp	r9, ip
 8024ab6:	dd35      	ble.n	8024b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8024ab8:	eb03 0b0e 	add.w	fp, r3, lr
 8024abc:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8024ac0:	f01b 0f01 	tst.w	fp, #1
 8024ac4:	5c10      	ldrb	r0, [r2, r0]
 8024ac6:	bf0c      	ite	eq
 8024ac8:	f000 000f 	andeq.w	r0, r0, #15
 8024acc:	1100      	asrne	r0, r0, #4
 8024ace:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024ad2:	b2c0      	uxtb	r0, r0
 8024ad4:	f1ba 0f00 	cmp.w	sl, #0
 8024ad8:	db26      	blt.n	8024b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024ada:	45d0      	cmp	r8, sl
 8024adc:	dd24      	ble.n	8024b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024ade:	f1bc 0f00 	cmp.w	ip, #0
 8024ae2:	db21      	blt.n	8024b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024ae4:	45e1      	cmp	r9, ip
 8024ae6:	dd1f      	ble.n	8024b28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8024ae8:	b307      	cbz	r7, 8024b2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8024aea:	3301      	adds	r3, #1
 8024aec:	449e      	add	lr, r3
 8024aee:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8024af2:	f01e 0f01 	tst.w	lr, #1
 8024af6:	5cd3      	ldrb	r3, [r2, r3]
 8024af8:	bf0c      	ite	eq
 8024afa:	f003 030f 	andeq.w	r3, r3, #15
 8024afe:	111b      	asrne	r3, r3, #4
 8024b00:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024b04:	b2db      	uxtb	r3, r3
 8024b06:	2f0f      	cmp	r7, #15
 8024b08:	d911      	bls.n	8024b2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8024b0a:	4b32      	ldr	r3, [pc, #200]	; (8024bd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8024b0c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024b10:	4a31      	ldr	r2, [pc, #196]	; (8024bd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8024b12:	4832      	ldr	r0, [pc, #200]	; (8024bdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8024b14:	f000 fc10 	bl	8025338 <__assert_func>
 8024b18:	2600      	movs	r6, #0
 8024b1a:	e7a4      	b.n	8024a66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8024b1c:	2400      	movs	r4, #0
 8024b1e:	e7bd      	b.n	8024a9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8024b20:	463c      	mov	r4, r7
 8024b22:	e7be      	b.n	8024aa2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8024b24:	2000      	movs	r0, #0
 8024b26:	e7d5      	b.n	8024ad4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8024b28:	2300      	movs	r3, #0
 8024b2a:	e7ec      	b.n	8024b06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8024b2c:	463b      	mov	r3, r7
 8024b2e:	2d0f      	cmp	r5, #15
 8024b30:	d8eb      	bhi.n	8024b0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024b32:	b2bf      	uxth	r7, r7
 8024b34:	b2ad      	uxth	r5, r5
 8024b36:	fb07 f205 	mul.w	r2, r7, r5
 8024b3a:	013f      	lsls	r7, r7, #4
 8024b3c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8024b40:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8024b44:	1abf      	subs	r7, r7, r2
 8024b46:	b2ad      	uxth	r5, r5
 8024b48:	b2bf      	uxth	r7, r7
 8024b4a:	ebac 0c05 	sub.w	ip, ip, r5
 8024b4e:	437c      	muls	r4, r7
 8024b50:	fa1f fc8c 	uxth.w	ip, ip
 8024b54:	fb06 440c 	mla	r4, r6, ip, r4
 8024b58:	fb05 4400 	mla	r4, r5, r0, r4
 8024b5c:	fb02 4303 	mla	r3, r2, r3, r4
 8024b60:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024b64:	b353      	cbz	r3, 8024bbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8024b66:	4a1e      	ldr	r2, [pc, #120]	; (8024be0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8024b68:	7808      	ldrb	r0, [r1, #0]
 8024b6a:	6814      	ldr	r4, [r2, #0]
 8024b6c:	b29a      	uxth	r2, r3
 8024b6e:	43db      	mvns	r3, r3
 8024b70:	b2e5      	uxtb	r5, r4
 8024b72:	b2db      	uxtb	r3, r3
 8024b74:	fb15 f502 	smulbb	r5, r5, r2
 8024b78:	fb00 5003 	mla	r0, r0, r3, r5
 8024b7c:	b280      	uxth	r0, r0
 8024b7e:	1c45      	adds	r5, r0, #1
 8024b80:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024b84:	784d      	ldrb	r5, [r1, #1]
 8024b86:	fb15 f503 	smulbb	r5, r5, r3
 8024b8a:	1200      	asrs	r0, r0, #8
 8024b8c:	7008      	strb	r0, [r1, #0]
 8024b8e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024b92:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8024b96:	fb00 5002 	mla	r0, r0, r2, r5
 8024b9a:	b280      	uxth	r0, r0
 8024b9c:	1c45      	adds	r5, r0, #1
 8024b9e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024ba2:	1200      	asrs	r0, r0, #8
 8024ba4:	7048      	strb	r0, [r1, #1]
 8024ba6:	7888      	ldrb	r0, [r1, #2]
 8024ba8:	fb10 f303 	smulbb	r3, r0, r3
 8024bac:	fb04 3202 	mla	r2, r4, r2, r3
 8024bb0:	b292      	uxth	r2, r2
 8024bb2:	1c53      	adds	r3, r2, #1
 8024bb4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024bb8:	1212      	asrs	r2, r2, #8
 8024bba:	708a      	strb	r2, [r1, #2]
 8024bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024bc0:	2f0f      	cmp	r7, #15
 8024bc2:	d8a2      	bhi.n	8024b0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8024bc4:	462b      	mov	r3, r5
 8024bc6:	4628      	mov	r0, r5
 8024bc8:	e7b3      	b.n	8024b32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8024bca:	2d00      	cmp	r5, #0
 8024bcc:	d1a8      	bne.n	8024b20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8024bce:	462c      	mov	r4, r5
 8024bd0:	e7f8      	b.n	8024bc4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8024bd2:	bf00      	nop
 8024bd4:	0802930c 	.word	0x0802930c
 8024bd8:	08029802 	.word	0x08029802
 8024bdc:	080293d5 	.word	0x080293d5
 8024be0:	200098f4 	.word	0x200098f4

08024be4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8024be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024be8:	ed2d 8b08 	vpush	{d8-d11}
 8024bec:	b095      	sub	sp, #84	; 0x54
 8024bee:	461c      	mov	r4, r3
 8024bf0:	eeb0 aa40 	vmov.f32	s20, s0
 8024bf4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8024bf8:	eef0 9a60 	vmov.f32	s19, s1
 8024bfc:	920e      	str	r2, [sp, #56]	; 0x38
 8024bfe:	eeb0 9a41 	vmov.f32	s18, s2
 8024c02:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024c04:	eeb0 8a62 	vmov.f32	s16, s5
 8024c08:	9307      	str	r3, [sp, #28]
 8024c0a:	eef0 8a43 	vmov.f32	s17, s6
 8024c0e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024c12:	eef0 ba44 	vmov.f32	s23, s8
 8024c16:	9013      	str	r0, [sp, #76]	; 0x4c
 8024c18:	eeb0 ba64 	vmov.f32	s22, s9
 8024c1c:	9109      	str	r1, [sp, #36]	; 0x24
 8024c1e:	eef0 aa45 	vmov.f32	s21, s10
 8024c22:	9308      	str	r3, [sp, #32]
 8024c24:	6850      	ldr	r0, [r2, #4]
 8024c26:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024c2a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8024c2e:	fb00 1803 	mla	r8, r0, r3, r1
 8024c32:	6813      	ldr	r3, [r2, #0]
 8024c34:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024c38:	4498      	add	r8, r3
 8024c3a:	9b07      	ldr	r3, [sp, #28]
 8024c3c:	3301      	adds	r3, #1
 8024c3e:	f023 0301 	bic.w	r3, r3, #1
 8024c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c44:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024c46:	681f      	ldr	r7, [r3, #0]
 8024c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	dc03      	bgt.n	8024c56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024c50:	2b00      	cmp	r3, #0
 8024c52:	f340 8238 	ble.w	80250c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8024c56:	2c00      	cmp	r4, #0
 8024c58:	f340 8109 	ble.w	8024e6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8024c5c:	142a      	asrs	r2, r5, #16
 8024c5e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024c62:	d42b      	bmi.n	8024cbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8024c64:	1c51      	adds	r1, r2, #1
 8024c66:	9807      	ldr	r0, [sp, #28]
 8024c68:	4288      	cmp	r0, r1
 8024c6a:	dd2a      	ble.n	8024cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	db28      	blt.n	8024cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024c70:	1c59      	adds	r1, r3, #1
 8024c72:	9808      	ldr	r0, [sp, #32]
 8024c74:	4288      	cmp	r0, r1
 8024c76:	dd24      	ble.n	8024cc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8024c78:	1e63      	subs	r3, r4, #1
 8024c7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024c7c:	fb02 5203 	mla	r2, r2, r3, r5
 8024c80:	1412      	asrs	r2, r2, #16
 8024c82:	d429      	bmi.n	8024cd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024c84:	3201      	adds	r2, #1
 8024c86:	9907      	ldr	r1, [sp, #28]
 8024c88:	4291      	cmp	r1, r2
 8024c8a:	dd25      	ble.n	8024cd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024c8c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024c8e:	fb02 6303 	mla	r3, r2, r3, r6
 8024c92:	141b      	asrs	r3, r3, #16
 8024c94:	d420      	bmi.n	8024cd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024c96:	3301      	adds	r3, #1
 8024c98:	9a08      	ldr	r2, [sp, #32]
 8024c9a:	429a      	cmp	r2, r3
 8024c9c:	dd1c      	ble.n	8024cd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8024c9e:	f108 0e03 	add.w	lr, r8, #3
 8024ca2:	46a1      	mov	r9, r4
 8024ca4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8024ca8:	f1b9 0f00 	cmp.w	r9, #0
 8024cac:	f300 8155 	bgt.w	8024f5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8024cb0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8024cb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024cb8:	44a0      	add	r8, r4
 8024cba:	e0da      	b.n	8024e72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024cbc:	1c50      	adds	r0, r2, #1
 8024cbe:	f040 80ce 	bne.w	8024e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024cc2:	9907      	ldr	r1, [sp, #28]
 8024cc4:	4291      	cmp	r1, r2
 8024cc6:	f340 80ca 	ble.w	8024e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024cca:	1c59      	adds	r1, r3, #1
 8024ccc:	f2c0 80c7 	blt.w	8024e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024cd0:	9a08      	ldr	r2, [sp, #32]
 8024cd2:	4293      	cmp	r3, r2
 8024cd4:	f280 80c3 	bge.w	8024e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8024cd8:	46a3      	mov	fp, r4
 8024cda:	46c1      	mov	r9, r8
 8024cdc:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8024ce0:	f1bb 0f00 	cmp.w	fp, #0
 8024ce4:	dde4      	ble.n	8024cb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8024ce6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8024cea:	1428      	asrs	r0, r5, #16
 8024cec:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024cf0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024cf4:	920a      	str	r2, [sp, #40]	; 0x28
 8024cf6:	f100 8116 	bmi.w	8024f26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8024cfa:	f100 0c01 	add.w	ip, r0, #1
 8024cfe:	9a07      	ldr	r2, [sp, #28]
 8024d00:	4562      	cmp	r2, ip
 8024d02:	f340 8112 	ble.w	8024f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024d06:	2b00      	cmp	r3, #0
 8024d08:	f2c0 810f 	blt.w	8024f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024d0c:	f103 0c01 	add.w	ip, r3, #1
 8024d10:	9a08      	ldr	r2, [sp, #32]
 8024d12:	4562      	cmp	r2, ip
 8024d14:	f340 8109 	ble.w	8024f2a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8024d18:	fb03 030a 	mla	r3, r3, sl, r0
 8024d1c:	0858      	lsrs	r0, r3, #1
 8024d1e:	07da      	lsls	r2, r3, #31
 8024d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d22:	5c38      	ldrb	r0, [r7, r0]
 8024d24:	bf54      	ite	pl
 8024d26:	f000 000f 	andpl.w	r0, r0, #15
 8024d2a:	1100      	asrmi	r0, r0, #4
 8024d2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8024d30:	b2c0      	uxtb	r0, r0
 8024d32:	2a00      	cmp	r2, #0
 8024d34:	f000 80dd 	beq.w	8024ef2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8024d38:	f103 0e01 	add.w	lr, r3, #1
 8024d3c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8024d40:	f01e 0f01 	tst.w	lr, #1
 8024d44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024d48:	bf0c      	ite	eq
 8024d4a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024d4e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024d52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024d56:	fa5f fc8c 	uxtb.w	ip, ip
 8024d5a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8024d5e:	b301      	cbz	r1, 8024da2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024d60:	4453      	add	r3, sl
 8024d62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024d66:	07da      	lsls	r2, r3, #31
 8024d68:	f103 0301 	add.w	r3, r3, #1
 8024d6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024d70:	bf54      	ite	pl
 8024d72:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024d76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024d7a:	07da      	lsls	r2, r3, #31
 8024d7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024d80:	fa5f fc8c 	uxtb.w	ip, ip
 8024d84:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8024d88:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024d8c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024d90:	bf54      	ite	pl
 8024d92:	f00c 030f 	andpl.w	r3, ip, #15
 8024d96:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024d9a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024d9e:	b2db      	uxtb	r3, r3
 8024da0:	9310      	str	r3, [sp, #64]	; 0x40
 8024da2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8024da6:	b289      	uxth	r1, r1
 8024da8:	fb02 f301 	mul.w	r3, r2, r1
 8024dac:	0112      	lsls	r2, r2, #4
 8024dae:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8024db2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8024db6:	1ad2      	subs	r2, r2, r3
 8024db8:	fa1f fe81 	uxth.w	lr, r1
 8024dbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024dbe:	b292      	uxth	r2, r2
 8024dc0:	ebac 0c0e 	sub.w	ip, ip, lr
 8024dc4:	434a      	muls	r2, r1
 8024dc6:	fa1f fc8c 	uxth.w	ip, ip
 8024dca:	fb00 200c 	mla	r0, r0, ip, r2
 8024dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024dd0:	fb0e 0002 	mla	r0, lr, r2, r0
 8024dd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024dd6:	fb03 0002 	mla	r0, r3, r2, r0
 8024dda:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024dde:	b3a8      	cbz	r0, 8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024de0:	4bbb      	ldr	r3, [pc, #748]	; (80250d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8024de2:	28ff      	cmp	r0, #255	; 0xff
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8024dea:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8024dee:	b2db      	uxtb	r3, r3
 8024df0:	f000 8092 	beq.w	8024f18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8024df4:	b282      	uxth	r2, r0
 8024df6:	43c0      	mvns	r0, r0
 8024df8:	f899 e000 	ldrb.w	lr, [r9]
 8024dfc:	fb13 f302 	smulbb	r3, r3, r2
 8024e00:	b2c0      	uxtb	r0, r0
 8024e02:	fb11 f102 	smulbb	r1, r1, r2
 8024e06:	fb0e 3300 	mla	r3, lr, r0, r3
 8024e0a:	fb1c f202 	smulbb	r2, ip, r2
 8024e0e:	b29b      	uxth	r3, r3
 8024e10:	f103 0e01 	add.w	lr, r3, #1
 8024e14:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024e18:	121b      	asrs	r3, r3, #8
 8024e1a:	f889 3000 	strb.w	r3, [r9]
 8024e1e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024e22:	fb03 1100 	mla	r1, r3, r0, r1
 8024e26:	b289      	uxth	r1, r1
 8024e28:	1c4b      	adds	r3, r1, #1
 8024e2a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024e2e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8024e32:	fb03 2000 	mla	r0, r3, r0, r2
 8024e36:	1209      	asrs	r1, r1, #8
 8024e38:	b280      	uxth	r0, r0
 8024e3a:	f889 1001 	strb.w	r1, [r9, #1]
 8024e3e:	f100 0c01 	add.w	ip, r0, #1
 8024e42:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8024e46:	1200      	asrs	r0, r0, #8
 8024e48:	f889 0002 	strb.w	r0, [r9, #2]
 8024e4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024e4e:	f109 0903 	add.w	r9, r9, #3
 8024e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024e56:	441d      	add	r5, r3
 8024e58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024e5a:	441e      	add	r6, r3
 8024e5c:	e740      	b.n	8024ce0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024e5e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024e60:	3c01      	subs	r4, #1
 8024e62:	f108 0803 	add.w	r8, r8, #3
 8024e66:	441d      	add	r5, r3
 8024e68:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024e6a:	441e      	add	r6, r3
 8024e6c:	e6f3      	b.n	8024c56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8024e6e:	f47f af03 	bne.w	8024c78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8024e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e74:	2b00      	cmp	r3, #0
 8024e76:	f340 8126 	ble.w	80250c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8024e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024e80:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024e84:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024e88:	eef0 6a48 	vmov.f32	s13, s16
 8024e8c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024e90:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024e94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024e98:	ee16 5a90 	vmov	r5, s13
 8024e9c:	eef0 6a68 	vmov.f32	s13, s17
 8024ea0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024ea4:	ee16 6a90 	vmov	r6, s13
 8024ea8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024eac:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024eb0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024eb4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024eb8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024ebc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024ec0:	ee18 2a10 	vmov	r2, s16
 8024ec4:	eeb0 8a47 	vmov.f32	s16, s14
 8024ec8:	fb92 f3f3 	sdiv	r3, r2, r3
 8024ecc:	ee18 2a90 	vmov	r2, s17
 8024ed0:	9329      	str	r3, [sp, #164]	; 0xa4
 8024ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ed4:	eef0 8a67 	vmov.f32	s17, s15
 8024ed8:	fb92 f3f3 	sdiv	r3, r2, r3
 8024edc:	932a      	str	r3, [sp, #168]	; 0xa8
 8024ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ee2:	3b01      	subs	r3, #1
 8024ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8024ee6:	bf08      	it	eq
 8024ee8:	4614      	moveq	r4, r2
 8024eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024eec:	bf18      	it	ne
 8024eee:	461c      	movne	r4, r3
 8024ef0:	e6aa      	b.n	8024c48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8024ef2:	2900      	cmp	r1, #0
 8024ef4:	f43f af55 	beq.w	8024da2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024ef8:	4453      	add	r3, sl
 8024efa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024efe:	07db      	lsls	r3, r3, #31
 8024f00:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8024f04:	bf54      	ite	pl
 8024f06:	f00c 030f 	andpl.w	r3, ip, #15
 8024f0a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8024f0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8024f12:	b2db      	uxtb	r3, r3
 8024f14:	930c      	str	r3, [sp, #48]	; 0x30
 8024f16:	e744      	b.n	8024da2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8024f18:	f889 3000 	strb.w	r3, [r9]
 8024f1c:	f889 1001 	strb.w	r1, [r9, #1]
 8024f20:	f889 c002 	strb.w	ip, [r9, #2]
 8024f24:	e792      	b.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024f26:	1c42      	adds	r2, r0, #1
 8024f28:	d190      	bne.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024f2a:	9a07      	ldr	r2, [sp, #28]
 8024f2c:	4282      	cmp	r2, r0
 8024f2e:	dd8d      	ble.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024f30:	1c5a      	adds	r2, r3, #1
 8024f32:	db8b      	blt.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024f34:	9a08      	ldr	r2, [sp, #32]
 8024f36:	429a      	cmp	r2, r3
 8024f38:	dd88      	ble.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024f3c:	9105      	str	r1, [sp, #20]
 8024f3e:	4649      	mov	r1, r9
 8024f40:	9002      	str	r0, [sp, #8]
 8024f42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024f44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024f48:	9b08      	ldr	r3, [sp, #32]
 8024f4a:	463a      	mov	r2, r7
 8024f4c:	9301      	str	r3, [sp, #4]
 8024f4e:	9b07      	ldr	r3, [sp, #28]
 8024f50:	9300      	str	r3, [sp, #0]
 8024f52:	4653      	mov	r3, sl
 8024f54:	f7ff fd64 	bl	8024a20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8024f58:	e778      	b.n	8024e4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8024f5a:	142a      	asrs	r2, r5, #16
 8024f5c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024f60:	1433      	asrs	r3, r6, #16
 8024f62:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8024f66:	fb0a 2303 	mla	r3, sl, r3, r2
 8024f6a:	085a      	lsrs	r2, r3, #1
 8024f6c:	07d9      	lsls	r1, r3, #31
 8024f6e:	5cba      	ldrb	r2, [r7, r2]
 8024f70:	bf54      	ite	pl
 8024f72:	f002 020f 	andpl.w	r2, r2, #15
 8024f76:	1112      	asrmi	r2, r2, #4
 8024f78:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024f7c:	b2d2      	uxtb	r2, r2
 8024f7e:	2800      	cmp	r0, #0
 8024f80:	f000 808a 	beq.w	8025098 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8024f84:	f103 0b01 	add.w	fp, r3, #1
 8024f88:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8024f8c:	f01b 0f01 	tst.w	fp, #1
 8024f90:	5c79      	ldrb	r1, [r7, r1]
 8024f92:	bf0c      	ite	eq
 8024f94:	f001 010f 	andeq.w	r1, r1, #15
 8024f98:	1109      	asrne	r1, r1, #4
 8024f9a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024f9e:	b2c9      	uxtb	r1, r1
 8024fa0:	9111      	str	r1, [sp, #68]	; 0x44
 8024fa2:	f1bc 0f00 	cmp.w	ip, #0
 8024fa6:	d019      	beq.n	8024fdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8024fa8:	4453      	add	r3, sl
 8024faa:	0859      	lsrs	r1, r3, #1
 8024fac:	f013 0f01 	tst.w	r3, #1
 8024fb0:	f103 0301 	add.w	r3, r3, #1
 8024fb4:	5c79      	ldrb	r1, [r7, r1]
 8024fb6:	bf0c      	ite	eq
 8024fb8:	f001 010f 	andeq.w	r1, r1, #15
 8024fbc:	1109      	asrne	r1, r1, #4
 8024fbe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024fc2:	b2c9      	uxtb	r1, r1
 8024fc4:	910d      	str	r1, [sp, #52]	; 0x34
 8024fc6:	0859      	lsrs	r1, r3, #1
 8024fc8:	07db      	lsls	r3, r3, #31
 8024fca:	5c79      	ldrb	r1, [r7, r1]
 8024fcc:	bf54      	ite	pl
 8024fce:	f001 010f 	andpl.w	r1, r1, #15
 8024fd2:	1109      	asrmi	r1, r1, #4
 8024fd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024fd8:	b2c9      	uxtb	r1, r1
 8024fda:	9112      	str	r1, [sp, #72]	; 0x48
 8024fdc:	b280      	uxth	r0, r0
 8024fde:	fa1f fc8c 	uxth.w	ip, ip
 8024fe2:	fb00 f30c 	mul.w	r3, r0, ip
 8024fe6:	0100      	lsls	r0, r0, #4
 8024fe8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8024fec:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8024ff0:	1ac0      	subs	r0, r0, r3
 8024ff2:	fa1f fc8c 	uxth.w	ip, ip
 8024ff6:	b280      	uxth	r0, r0
 8024ff8:	eba1 010c 	sub.w	r1, r1, ip
 8024ffc:	fa1f fb81 	uxth.w	fp, r1
 8025000:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025002:	4348      	muls	r0, r1
 8025004:	990d      	ldr	r1, [sp, #52]	; 0x34
 8025006:	fb02 020b 	mla	r2, r2, fp, r0
 802500a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802500e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025010:	fb03 c302 	mla	r3, r3, r2, ip
 8025014:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025018:	b3ab      	cbz	r3, 8025086 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802501a:	4a2d      	ldr	r2, [pc, #180]	; (80250d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802501c:	2bff      	cmp	r3, #255	; 0xff
 802501e:	6811      	ldr	r1, [r2, #0]
 8025020:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8025024:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8025028:	b2c9      	uxtb	r1, r1
 802502a:	d045      	beq.n	80250b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802502c:	b298      	uxth	r0, r3
 802502e:	43db      	mvns	r3, r3
 8025030:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8025034:	fb11 f100 	smulbb	r1, r1, r0
 8025038:	b2db      	uxtb	r3, r3
 802503a:	fb1c fc00 	smulbb	ip, ip, r0
 802503e:	fb02 1103 	mla	r1, r2, r3, r1
 8025042:	fb1b f000 	smulbb	r0, fp, r0
 8025046:	b289      	uxth	r1, r1
 8025048:	1c4a      	adds	r2, r1, #1
 802504a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802504e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025052:	fb02 cc03 	mla	ip, r2, r3, ip
 8025056:	1209      	asrs	r1, r1, #8
 8025058:	fa1f fc8c 	uxth.w	ip, ip
 802505c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8025060:	f10c 0201 	add.w	r2, ip, #1
 8025064:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8025068:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 802506c:	fb02 0303 	mla	r3, r2, r3, r0
 8025070:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025074:	b29b      	uxth	r3, r3
 8025076:	f80e cc02 	strb.w	ip, [lr, #-2]
 802507a:	1c5a      	adds	r2, r3, #1
 802507c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025080:	121b      	asrs	r3, r3, #8
 8025082:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8025086:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025088:	f10e 0e03 	add.w	lr, lr, #3
 802508c:	f109 39ff 	add.w	r9, r9, #4294967295
 8025090:	441d      	add	r5, r3
 8025092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025094:	441e      	add	r6, r3
 8025096:	e607      	b.n	8024ca8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8025098:	f1bc 0f00 	cmp.w	ip, #0
 802509c:	d09e      	beq.n	8024fdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802509e:	4453      	add	r3, sl
 80250a0:	0859      	lsrs	r1, r3, #1
 80250a2:	07db      	lsls	r3, r3, #31
 80250a4:	5c79      	ldrb	r1, [r7, r1]
 80250a6:	bf54      	ite	pl
 80250a8:	f001 010f 	andpl.w	r1, r1, #15
 80250ac:	1109      	asrmi	r1, r1, #4
 80250ae:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80250b2:	b2c9      	uxtb	r1, r1
 80250b4:	910d      	str	r1, [sp, #52]	; 0x34
 80250b6:	e791      	b.n	8024fdc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80250b8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80250bc:	f80e cc02 	strb.w	ip, [lr, #-2]
 80250c0:	f80e bc01 	strb.w	fp, [lr, #-1]
 80250c4:	e7df      	b.n	8025086 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80250c6:	b015      	add	sp, #84	; 0x54
 80250c8:	ecbd 8b08 	vpop	{d8-d11}
 80250cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250d0:	200098f4 	.word	0x200098f4

080250d4 <CRC_Lock>:
 80250d4:	4a1d      	ldr	r2, [pc, #116]	; (802514c <CRC_Lock+0x78>)
 80250d6:	b530      	push	{r4, r5, lr}
 80250d8:	6813      	ldr	r3, [r2, #0]
 80250da:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80250de:	f24c 2540 	movw	r5, #49728	; 0xc240
 80250e2:	f023 0301 	bic.w	r3, r3, #1
 80250e6:	6013      	str	r3, [r2, #0]
 80250e8:	4b19      	ldr	r3, [pc, #100]	; (8025150 <CRC_Lock+0x7c>)
 80250ea:	681a      	ldr	r2, [r3, #0]
 80250ec:	4022      	ands	r2, r4
 80250ee:	42aa      	cmp	r2, r5
 80250f0:	d005      	beq.n	80250fe <CRC_Lock+0x2a>
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80250f8:	4023      	ands	r3, r4
 80250fa:	4293      	cmp	r3, r2
 80250fc:	d11d      	bne.n	802513a <CRC_Lock+0x66>
 80250fe:	4b15      	ldr	r3, [pc, #84]	; (8025154 <CRC_Lock+0x80>)
 8025100:	681b      	ldr	r3, [r3, #0]
 8025102:	b9d3      	cbnz	r3, 802513a <CRC_Lock+0x66>
 8025104:	4a14      	ldr	r2, [pc, #80]	; (8025158 <CRC_Lock+0x84>)
 8025106:	6813      	ldr	r3, [r2, #0]
 8025108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802510c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8025110:	d006      	beq.n	8025120 <CRC_Lock+0x4c>
 8025112:	6813      	ldr	r3, [r2, #0]
 8025114:	f240 4283 	movw	r2, #1155	; 0x483
 8025118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802511c:	4293      	cmp	r3, r2
 802511e:	d10c      	bne.n	802513a <CRC_Lock+0x66>
 8025120:	4b0e      	ldr	r3, [pc, #56]	; (802515c <CRC_Lock+0x88>)
 8025122:	2201      	movs	r2, #1
 8025124:	601a      	str	r2, [r3, #0]
 8025126:	681a      	ldr	r2, [r3, #0]
 8025128:	2a00      	cmp	r2, #0
 802512a:	d1fc      	bne.n	8025126 <CRC_Lock+0x52>
 802512c:	4b0c      	ldr	r3, [pc, #48]	; (8025160 <CRC_Lock+0x8c>)
 802512e:	6018      	str	r0, [r3, #0]
 8025130:	6818      	ldr	r0, [r3, #0]
 8025132:	1a43      	subs	r3, r0, r1
 8025134:	4258      	negs	r0, r3
 8025136:	4158      	adcs	r0, r3
 8025138:	bd30      	pop	{r4, r5, pc}
 802513a:	4b0a      	ldr	r3, [pc, #40]	; (8025164 <CRC_Lock+0x90>)
 802513c:	2201      	movs	r2, #1
 802513e:	601a      	str	r2, [r3, #0]
 8025140:	681a      	ldr	r2, [r3, #0]
 8025142:	2a00      	cmp	r2, #0
 8025144:	d1fc      	bne.n	8025140 <CRC_Lock+0x6c>
 8025146:	4b08      	ldr	r3, [pc, #32]	; (8025168 <CRC_Lock+0x94>)
 8025148:	e7f1      	b.n	802512e <CRC_Lock+0x5a>
 802514a:	bf00      	nop
 802514c:	e0002000 	.word	0xe0002000
 8025150:	e000ed00 	.word	0xe000ed00
 8025154:	e0042000 	.word	0xe0042000
 8025158:	5c001000 	.word	0x5c001000
 802515c:	58024c08 	.word	0x58024c08
 8025160:	58024c00 	.word	0x58024c00
 8025164:	40023008 	.word	0x40023008
 8025168:	40023000 	.word	0x40023000

0802516c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802516c:	6101      	str	r1, [r0, #16]
 802516e:	4770      	bx	lr

08025170 <_ZN8touchgfx8Gestures4tickEv>:
 8025170:	7b83      	ldrb	r3, [r0, #14]
 8025172:	b14b      	cbz	r3, 8025188 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8025174:	8903      	ldrh	r3, [r0, #8]
 8025176:	3301      	adds	r3, #1
 8025178:	b29b      	uxth	r3, r3
 802517a:	2b07      	cmp	r3, #7
 802517c:	8103      	strh	r3, [r0, #8]
 802517e:	bf81      	itttt	hi
 8025180:	2300      	movhi	r3, #0
 8025182:	8143      	strhhi	r3, [r0, #10]
 8025184:	8183      	strhhi	r3, [r0, #12]
 8025186:	7383      	strbhi	r3, [r0, #14]
 8025188:	4770      	bx	lr
	...

0802518c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802518c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8025190:	4604      	mov	r4, r0
 8025192:	4698      	mov	r8, r3
 8025194:	8880      	ldrh	r0, [r0, #4]
 8025196:	4617      	mov	r7, r2
 8025198:	4b1d      	ldr	r3, [pc, #116]	; (8025210 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802519a:	460e      	mov	r6, r1
 802519c:	f8ad 0006 	strh.w	r0, [sp, #6]
 80251a0:	eba8 0000 	sub.w	r0, r8, r0
 80251a4:	9300      	str	r3, [sp, #0]
 80251a6:	2300      	movs	r3, #0
 80251a8:	b280      	uxth	r0, r0
 80251aa:	8aa2      	ldrh	r2, [r4, #20]
 80251ac:	f88d 3004 	strb.w	r3, [sp, #4]
 80251b0:	b203      	sxth	r3, r0
 80251b2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80251b6:	88e1      	ldrh	r1, [r4, #6]
 80251b8:	2b00      	cmp	r3, #0
 80251ba:	f8ad 800a 	strh.w	r8, [sp, #10]
 80251be:	f8ad 1008 	strh.w	r1, [sp, #8]
 80251c2:	bfb8      	it	lt
 80251c4:	4240      	neglt	r0, r0
 80251c6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80251ca:	bfb8      	it	lt
 80251cc:	b203      	sxthlt	r3, r0
 80251ce:	4293      	cmp	r3, r2
 80251d0:	dc08      	bgt.n	80251e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 80251d2:	1a69      	subs	r1, r5, r1
 80251d4:	b289      	uxth	r1, r1
 80251d6:	b20b      	sxth	r3, r1
 80251d8:	2b00      	cmp	r3, #0
 80251da:	bfbc      	itt	lt
 80251dc:	4249      	neglt	r1, r1
 80251de:	b20b      	sxthlt	r3, r1
 80251e0:	429a      	cmp	r2, r3
 80251e2:	da13      	bge.n	802520c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 80251e4:	6920      	ldr	r0, [r4, #16]
 80251e6:	4669      	mov	r1, sp
 80251e8:	eba8 0606 	sub.w	r6, r8, r6
 80251ec:	1bef      	subs	r7, r5, r7
 80251ee:	6803      	ldr	r3, [r0, #0]
 80251f0:	685b      	ldr	r3, [r3, #4]
 80251f2:	4798      	blx	r3
 80251f4:	2300      	movs	r3, #0
 80251f6:	2001      	movs	r0, #1
 80251f8:	8166      	strh	r6, [r4, #10]
 80251fa:	8123      	strh	r3, [r4, #8]
 80251fc:	81a7      	strh	r7, [r4, #12]
 80251fe:	f8a4 8004 	strh.w	r8, [r4, #4]
 8025202:	80e5      	strh	r5, [r4, #6]
 8025204:	73a0      	strb	r0, [r4, #14]
 8025206:	b004      	add	sp, #16
 8025208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802520c:	2000      	movs	r0, #0
 802520e:	e7fa      	b.n	8025206 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8025210:	08028538 	.word	0x08028538

08025214 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8025214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025216:	461e      	mov	r6, r3
 8025218:	1e4b      	subs	r3, r1, #1
 802521a:	b085      	sub	sp, #20
 802521c:	4604      	mov	r4, r0
 802521e:	2b01      	cmp	r3, #1
 8025220:	460d      	mov	r5, r1
 8025222:	4617      	mov	r7, r2
 8025224:	d84b      	bhi.n	80252be <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8025226:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802522a:	1cd3      	adds	r3, r2, #3
 802522c:	b29b      	uxth	r3, r3
 802522e:	2b06      	cmp	r3, #6
 8025230:	d916      	bls.n	8025260 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8025232:	f8df c098 	ldr.w	ip, [pc, #152]	; 80252cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025236:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802523a:	f8cd c004 	str.w	ip, [sp, #4]
 802523e:	f04f 0c00 	mov.w	ip, #0
 8025242:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025246:	6900      	ldr	r0, [r0, #16]
 8025248:	f8ad 100c 	strh.w	r1, [sp, #12]
 802524c:	a901      	add	r1, sp, #4
 802524e:	f88d c008 	strb.w	ip, [sp, #8]
 8025252:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025256:	f8ad 300e 	strh.w	r3, [sp, #14]
 802525a:	6803      	ldr	r3, [r0, #0]
 802525c:	689b      	ldr	r3, [r3, #8]
 802525e:	4798      	blx	r3
 8025260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025264:	1cd3      	adds	r3, r2, #3
 8025266:	b29b      	uxth	r3, r3
 8025268:	2b06      	cmp	r3, #6
 802526a:	d916      	bls.n	802529a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802526c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80252cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8025270:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025274:	f8cd c004 	str.w	ip, [sp, #4]
 8025278:	f04f 0c01 	mov.w	ip, #1
 802527c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8025280:	6920      	ldr	r0, [r4, #16]
 8025282:	f8ad 100c 	strh.w	r1, [sp, #12]
 8025286:	a901      	add	r1, sp, #4
 8025288:	f88d c008 	strb.w	ip, [sp, #8]
 802528c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8025290:	f8ad 300e 	strh.w	r3, [sp, #14]
 8025294:	6803      	ldr	r3, [r0, #0]
 8025296:	689b      	ldr	r3, [r3, #8]
 8025298:	4798      	blx	r3
 802529a:	4b0b      	ldr	r3, [pc, #44]	; (80252c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 802529c:	a901      	add	r1, sp, #4
 802529e:	6920      	ldr	r0, [r4, #16]
 80252a0:	9301      	str	r3, [sp, #4]
 80252a2:	2300      	movs	r3, #0
 80252a4:	f88d 5008 	strb.w	r5, [sp, #8]
 80252a8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80252ac:	f8ad 600c 	strh.w	r6, [sp, #12]
 80252b0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80252b4:	6803      	ldr	r3, [r0, #0]
 80252b6:	681b      	ldr	r3, [r3, #0]
 80252b8:	4798      	blx	r3
 80252ba:	b005      	add	sp, #20
 80252bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252be:	2900      	cmp	r1, #0
 80252c0:	d1eb      	bne.n	802529a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80252c2:	80a2      	strh	r2, [r4, #4]
 80252c4:	80c6      	strh	r6, [r0, #6]
 80252c6:	e7e8      	b.n	802529a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80252c8:	08028524 	.word	0x08028524
 80252cc:	0802854c 	.word	0x0802854c

080252d0 <__aeabi_atexit>:
 80252d0:	460b      	mov	r3, r1
 80252d2:	4601      	mov	r1, r0
 80252d4:	4618      	mov	r0, r3
 80252d6:	f000 b853 	b.w	8025380 <__cxa_atexit>

080252da <__cxa_pure_virtual>:
 80252da:	b508      	push	{r3, lr}
 80252dc:	f000 f820 	bl	8025320 <_ZSt9terminatev>

080252e0 <_ZdlPvj>:
 80252e0:	f000 b80f 	b.w	8025302 <_ZdlPv>

080252e4 <__cxa_guard_acquire>:
 80252e4:	6803      	ldr	r3, [r0, #0]
 80252e6:	07db      	lsls	r3, r3, #31
 80252e8:	d406      	bmi.n	80252f8 <__cxa_guard_acquire+0x14>
 80252ea:	7843      	ldrb	r3, [r0, #1]
 80252ec:	b103      	cbz	r3, 80252f0 <__cxa_guard_acquire+0xc>
 80252ee:	deff      	udf	#255	; 0xff
 80252f0:	2301      	movs	r3, #1
 80252f2:	7043      	strb	r3, [r0, #1]
 80252f4:	4618      	mov	r0, r3
 80252f6:	4770      	bx	lr
 80252f8:	2000      	movs	r0, #0
 80252fa:	4770      	bx	lr

080252fc <__cxa_guard_release>:
 80252fc:	2301      	movs	r3, #1
 80252fe:	6003      	str	r3, [r0, #0]
 8025300:	4770      	bx	lr

08025302 <_ZdlPv>:
 8025302:	f000 b88f 	b.w	8025424 <free>

08025306 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8025306:	b508      	push	{r3, lr}
 8025308:	4780      	blx	r0
 802530a:	f000 f80e 	bl	802532a <abort>
	...

08025310 <_ZSt13get_terminatev>:
 8025310:	4b02      	ldr	r3, [pc, #8]	; (802531c <_ZSt13get_terminatev+0xc>)
 8025312:	6818      	ldr	r0, [r3, #0]
 8025314:	f3bf 8f5b 	dmb	ish
 8025318:	4770      	bx	lr
 802531a:	bf00      	nop
 802531c:	200000c4 	.word	0x200000c4

08025320 <_ZSt9terminatev>:
 8025320:	b508      	push	{r3, lr}
 8025322:	f7ff fff5 	bl	8025310 <_ZSt13get_terminatev>
 8025326:	f7ff ffee 	bl	8025306 <_ZN10__cxxabiv111__terminateEPFvvE>

0802532a <abort>:
 802532a:	b508      	push	{r3, lr}
 802532c:	2006      	movs	r0, #6
 802532e:	f000 fc3d 	bl	8025bac <raise>
 8025332:	2001      	movs	r0, #1
 8025334:	f7dd fe6e 	bl	8003014 <_exit>

08025338 <__assert_func>:
 8025338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802533a:	461c      	mov	r4, r3
 802533c:	4b09      	ldr	r3, [pc, #36]	; (8025364 <__assert_func+0x2c>)
 802533e:	681b      	ldr	r3, [r3, #0]
 8025340:	4605      	mov	r5, r0
 8025342:	68d8      	ldr	r0, [r3, #12]
 8025344:	b152      	cbz	r2, 802535c <__assert_func+0x24>
 8025346:	4b08      	ldr	r3, [pc, #32]	; (8025368 <__assert_func+0x30>)
 8025348:	9100      	str	r1, [sp, #0]
 802534a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802534e:	4907      	ldr	r1, [pc, #28]	; (802536c <__assert_func+0x34>)
 8025350:	462b      	mov	r3, r5
 8025352:	4622      	mov	r2, r4
 8025354:	f000 f828 	bl	80253a8 <fiprintf>
 8025358:	f7ff ffe7 	bl	802532a <abort>
 802535c:	4b04      	ldr	r3, [pc, #16]	; (8025370 <__assert_func+0x38>)
 802535e:	461a      	mov	r2, r3
 8025360:	e7f2      	b.n	8025348 <__assert_func+0x10>
 8025362:	bf00      	nop
 8025364:	200000c8 	.word	0x200000c8
 8025368:	08029a72 	.word	0x08029a72
 802536c:	08029a7f 	.word	0x08029a7f
 8025370:	08029aad 	.word	0x08029aad

08025374 <atexit>:
 8025374:	2300      	movs	r3, #0
 8025376:	4601      	mov	r1, r0
 8025378:	461a      	mov	r2, r3
 802537a:	4618      	mov	r0, r3
 802537c:	f000 bcf2 	b.w	8025d64 <__register_exitproc>

08025380 <__cxa_atexit>:
 8025380:	b510      	push	{r4, lr}
 8025382:	4c05      	ldr	r4, [pc, #20]	; (8025398 <__cxa_atexit+0x18>)
 8025384:	4613      	mov	r3, r2
 8025386:	b12c      	cbz	r4, 8025394 <__cxa_atexit+0x14>
 8025388:	460a      	mov	r2, r1
 802538a:	4601      	mov	r1, r0
 802538c:	2002      	movs	r0, #2
 802538e:	f000 fce9 	bl	8025d64 <__register_exitproc>
 8025392:	bd10      	pop	{r4, pc}
 8025394:	4620      	mov	r0, r4
 8025396:	e7fc      	b.n	8025392 <__cxa_atexit+0x12>
 8025398:	08025d65 	.word	0x08025d65

0802539c <__errno>:
 802539c:	4b01      	ldr	r3, [pc, #4]	; (80253a4 <__errno+0x8>)
 802539e:	6818      	ldr	r0, [r3, #0]
 80253a0:	4770      	bx	lr
 80253a2:	bf00      	nop
 80253a4:	200000c8 	.word	0x200000c8

080253a8 <fiprintf>:
 80253a8:	b40e      	push	{r1, r2, r3}
 80253aa:	b503      	push	{r0, r1, lr}
 80253ac:	4601      	mov	r1, r0
 80253ae:	ab03      	add	r3, sp, #12
 80253b0:	4805      	ldr	r0, [pc, #20]	; (80253c8 <fiprintf+0x20>)
 80253b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80253b6:	6800      	ldr	r0, [r0, #0]
 80253b8:	9301      	str	r3, [sp, #4]
 80253ba:	f000 f921 	bl	8025600 <_vfiprintf_r>
 80253be:	b002      	add	sp, #8
 80253c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80253c4:	b003      	add	sp, #12
 80253c6:	4770      	bx	lr
 80253c8:	200000c8 	.word	0x200000c8

080253cc <__libc_init_array>:
 80253cc:	b570      	push	{r4, r5, r6, lr}
 80253ce:	4e0d      	ldr	r6, [pc, #52]	; (8025404 <__libc_init_array+0x38>)
 80253d0:	4c0d      	ldr	r4, [pc, #52]	; (8025408 <__libc_init_array+0x3c>)
 80253d2:	1ba4      	subs	r4, r4, r6
 80253d4:	10a4      	asrs	r4, r4, #2
 80253d6:	2500      	movs	r5, #0
 80253d8:	42a5      	cmp	r5, r4
 80253da:	d109      	bne.n	80253f0 <__libc_init_array+0x24>
 80253dc:	4e0b      	ldr	r6, [pc, #44]	; (802540c <__libc_init_array+0x40>)
 80253de:	4c0c      	ldr	r4, [pc, #48]	; (8025410 <__libc_init_array+0x44>)
 80253e0:	f000 ffb0 	bl	8026344 <_init>
 80253e4:	1ba4      	subs	r4, r4, r6
 80253e6:	10a4      	asrs	r4, r4, #2
 80253e8:	2500      	movs	r5, #0
 80253ea:	42a5      	cmp	r5, r4
 80253ec:	d105      	bne.n	80253fa <__libc_init_array+0x2e>
 80253ee:	bd70      	pop	{r4, r5, r6, pc}
 80253f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80253f4:	4798      	blx	r3
 80253f6:	3501      	adds	r5, #1
 80253f8:	e7ee      	b.n	80253d8 <__libc_init_array+0xc>
 80253fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80253fe:	4798      	blx	r3
 8025400:	3501      	adds	r5, #1
 8025402:	e7f2      	b.n	80253ea <__libc_init_array+0x1e>
 8025404:	08090aa4 	.word	0x08090aa4
 8025408:	08090aa4 	.word	0x08090aa4
 802540c:	08090aa4 	.word	0x08090aa4
 8025410:	08090ab8 	.word	0x08090ab8

08025414 <malloc>:
 8025414:	4b02      	ldr	r3, [pc, #8]	; (8025420 <malloc+0xc>)
 8025416:	4601      	mov	r1, r0
 8025418:	6818      	ldr	r0, [r3, #0]
 802541a:	f000 b86d 	b.w	80254f8 <_malloc_r>
 802541e:	bf00      	nop
 8025420:	200000c8 	.word	0x200000c8

08025424 <free>:
 8025424:	4b02      	ldr	r3, [pc, #8]	; (8025430 <free+0xc>)
 8025426:	4601      	mov	r1, r0
 8025428:	6818      	ldr	r0, [r3, #0]
 802542a:	f000 b817 	b.w	802545c <_free_r>
 802542e:	bf00      	nop
 8025430:	200000c8 	.word	0x200000c8

08025434 <memcpy>:
 8025434:	b510      	push	{r4, lr}
 8025436:	1e43      	subs	r3, r0, #1
 8025438:	440a      	add	r2, r1
 802543a:	4291      	cmp	r1, r2
 802543c:	d100      	bne.n	8025440 <memcpy+0xc>
 802543e:	bd10      	pop	{r4, pc}
 8025440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025448:	e7f7      	b.n	802543a <memcpy+0x6>

0802544a <memset>:
 802544a:	4402      	add	r2, r0
 802544c:	4603      	mov	r3, r0
 802544e:	4293      	cmp	r3, r2
 8025450:	d100      	bne.n	8025454 <memset+0xa>
 8025452:	4770      	bx	lr
 8025454:	f803 1b01 	strb.w	r1, [r3], #1
 8025458:	e7f9      	b.n	802544e <memset+0x4>
	...

0802545c <_free_r>:
 802545c:	b538      	push	{r3, r4, r5, lr}
 802545e:	4605      	mov	r5, r0
 8025460:	2900      	cmp	r1, #0
 8025462:	d045      	beq.n	80254f0 <_free_r+0x94>
 8025464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025468:	1f0c      	subs	r4, r1, #4
 802546a:	2b00      	cmp	r3, #0
 802546c:	bfb8      	it	lt
 802546e:	18e4      	addlt	r4, r4, r3
 8025470:	f000 feba 	bl	80261e8 <__malloc_lock>
 8025474:	4a1f      	ldr	r2, [pc, #124]	; (80254f4 <_free_r+0x98>)
 8025476:	6813      	ldr	r3, [r2, #0]
 8025478:	4610      	mov	r0, r2
 802547a:	b933      	cbnz	r3, 802548a <_free_r+0x2e>
 802547c:	6063      	str	r3, [r4, #4]
 802547e:	6014      	str	r4, [r2, #0]
 8025480:	4628      	mov	r0, r5
 8025482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025486:	f000 beb0 	b.w	80261ea <__malloc_unlock>
 802548a:	42a3      	cmp	r3, r4
 802548c:	d90c      	bls.n	80254a8 <_free_r+0x4c>
 802548e:	6821      	ldr	r1, [r4, #0]
 8025490:	1862      	adds	r2, r4, r1
 8025492:	4293      	cmp	r3, r2
 8025494:	bf04      	itt	eq
 8025496:	681a      	ldreq	r2, [r3, #0]
 8025498:	685b      	ldreq	r3, [r3, #4]
 802549a:	6063      	str	r3, [r4, #4]
 802549c:	bf04      	itt	eq
 802549e:	1852      	addeq	r2, r2, r1
 80254a0:	6022      	streq	r2, [r4, #0]
 80254a2:	6004      	str	r4, [r0, #0]
 80254a4:	e7ec      	b.n	8025480 <_free_r+0x24>
 80254a6:	4613      	mov	r3, r2
 80254a8:	685a      	ldr	r2, [r3, #4]
 80254aa:	b10a      	cbz	r2, 80254b0 <_free_r+0x54>
 80254ac:	42a2      	cmp	r2, r4
 80254ae:	d9fa      	bls.n	80254a6 <_free_r+0x4a>
 80254b0:	6819      	ldr	r1, [r3, #0]
 80254b2:	1858      	adds	r0, r3, r1
 80254b4:	42a0      	cmp	r0, r4
 80254b6:	d10b      	bne.n	80254d0 <_free_r+0x74>
 80254b8:	6820      	ldr	r0, [r4, #0]
 80254ba:	4401      	add	r1, r0
 80254bc:	1858      	adds	r0, r3, r1
 80254be:	4282      	cmp	r2, r0
 80254c0:	6019      	str	r1, [r3, #0]
 80254c2:	d1dd      	bne.n	8025480 <_free_r+0x24>
 80254c4:	6810      	ldr	r0, [r2, #0]
 80254c6:	6852      	ldr	r2, [r2, #4]
 80254c8:	605a      	str	r2, [r3, #4]
 80254ca:	4401      	add	r1, r0
 80254cc:	6019      	str	r1, [r3, #0]
 80254ce:	e7d7      	b.n	8025480 <_free_r+0x24>
 80254d0:	d902      	bls.n	80254d8 <_free_r+0x7c>
 80254d2:	230c      	movs	r3, #12
 80254d4:	602b      	str	r3, [r5, #0]
 80254d6:	e7d3      	b.n	8025480 <_free_r+0x24>
 80254d8:	6820      	ldr	r0, [r4, #0]
 80254da:	1821      	adds	r1, r4, r0
 80254dc:	428a      	cmp	r2, r1
 80254de:	bf04      	itt	eq
 80254e0:	6811      	ldreq	r1, [r2, #0]
 80254e2:	6852      	ldreq	r2, [r2, #4]
 80254e4:	6062      	str	r2, [r4, #4]
 80254e6:	bf04      	itt	eq
 80254e8:	1809      	addeq	r1, r1, r0
 80254ea:	6021      	streq	r1, [r4, #0]
 80254ec:	605c      	str	r4, [r3, #4]
 80254ee:	e7c7      	b.n	8025480 <_free_r+0x24>
 80254f0:	bd38      	pop	{r3, r4, r5, pc}
 80254f2:	bf00      	nop
 80254f4:	200099e8 	.word	0x200099e8

080254f8 <_malloc_r>:
 80254f8:	b570      	push	{r4, r5, r6, lr}
 80254fa:	1ccd      	adds	r5, r1, #3
 80254fc:	f025 0503 	bic.w	r5, r5, #3
 8025500:	3508      	adds	r5, #8
 8025502:	2d0c      	cmp	r5, #12
 8025504:	bf38      	it	cc
 8025506:	250c      	movcc	r5, #12
 8025508:	2d00      	cmp	r5, #0
 802550a:	4606      	mov	r6, r0
 802550c:	db01      	blt.n	8025512 <_malloc_r+0x1a>
 802550e:	42a9      	cmp	r1, r5
 8025510:	d903      	bls.n	802551a <_malloc_r+0x22>
 8025512:	230c      	movs	r3, #12
 8025514:	6033      	str	r3, [r6, #0]
 8025516:	2000      	movs	r0, #0
 8025518:	bd70      	pop	{r4, r5, r6, pc}
 802551a:	f000 fe65 	bl	80261e8 <__malloc_lock>
 802551e:	4a21      	ldr	r2, [pc, #132]	; (80255a4 <_malloc_r+0xac>)
 8025520:	6814      	ldr	r4, [r2, #0]
 8025522:	4621      	mov	r1, r4
 8025524:	b991      	cbnz	r1, 802554c <_malloc_r+0x54>
 8025526:	4c20      	ldr	r4, [pc, #128]	; (80255a8 <_malloc_r+0xb0>)
 8025528:	6823      	ldr	r3, [r4, #0]
 802552a:	b91b      	cbnz	r3, 8025534 <_malloc_r+0x3c>
 802552c:	4630      	mov	r0, r6
 802552e:	f000 fb05 	bl	8025b3c <_sbrk_r>
 8025532:	6020      	str	r0, [r4, #0]
 8025534:	4629      	mov	r1, r5
 8025536:	4630      	mov	r0, r6
 8025538:	f000 fb00 	bl	8025b3c <_sbrk_r>
 802553c:	1c43      	adds	r3, r0, #1
 802553e:	d124      	bne.n	802558a <_malloc_r+0x92>
 8025540:	230c      	movs	r3, #12
 8025542:	6033      	str	r3, [r6, #0]
 8025544:	4630      	mov	r0, r6
 8025546:	f000 fe50 	bl	80261ea <__malloc_unlock>
 802554a:	e7e4      	b.n	8025516 <_malloc_r+0x1e>
 802554c:	680b      	ldr	r3, [r1, #0]
 802554e:	1b5b      	subs	r3, r3, r5
 8025550:	d418      	bmi.n	8025584 <_malloc_r+0x8c>
 8025552:	2b0b      	cmp	r3, #11
 8025554:	d90f      	bls.n	8025576 <_malloc_r+0x7e>
 8025556:	600b      	str	r3, [r1, #0]
 8025558:	50cd      	str	r5, [r1, r3]
 802555a:	18cc      	adds	r4, r1, r3
 802555c:	4630      	mov	r0, r6
 802555e:	f000 fe44 	bl	80261ea <__malloc_unlock>
 8025562:	f104 000b 	add.w	r0, r4, #11
 8025566:	1d23      	adds	r3, r4, #4
 8025568:	f020 0007 	bic.w	r0, r0, #7
 802556c:	1ac3      	subs	r3, r0, r3
 802556e:	d0d3      	beq.n	8025518 <_malloc_r+0x20>
 8025570:	425a      	negs	r2, r3
 8025572:	50e2      	str	r2, [r4, r3]
 8025574:	e7d0      	b.n	8025518 <_malloc_r+0x20>
 8025576:	428c      	cmp	r4, r1
 8025578:	684b      	ldr	r3, [r1, #4]
 802557a:	bf16      	itet	ne
 802557c:	6063      	strne	r3, [r4, #4]
 802557e:	6013      	streq	r3, [r2, #0]
 8025580:	460c      	movne	r4, r1
 8025582:	e7eb      	b.n	802555c <_malloc_r+0x64>
 8025584:	460c      	mov	r4, r1
 8025586:	6849      	ldr	r1, [r1, #4]
 8025588:	e7cc      	b.n	8025524 <_malloc_r+0x2c>
 802558a:	1cc4      	adds	r4, r0, #3
 802558c:	f024 0403 	bic.w	r4, r4, #3
 8025590:	42a0      	cmp	r0, r4
 8025592:	d005      	beq.n	80255a0 <_malloc_r+0xa8>
 8025594:	1a21      	subs	r1, r4, r0
 8025596:	4630      	mov	r0, r6
 8025598:	f000 fad0 	bl	8025b3c <_sbrk_r>
 802559c:	3001      	adds	r0, #1
 802559e:	d0cf      	beq.n	8025540 <_malloc_r+0x48>
 80255a0:	6025      	str	r5, [r4, #0]
 80255a2:	e7db      	b.n	802555c <_malloc_r+0x64>
 80255a4:	200099e8 	.word	0x200099e8
 80255a8:	200099ec 	.word	0x200099ec

080255ac <__sfputc_r>:
 80255ac:	6893      	ldr	r3, [r2, #8]
 80255ae:	3b01      	subs	r3, #1
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	b410      	push	{r4}
 80255b4:	6093      	str	r3, [r2, #8]
 80255b6:	da08      	bge.n	80255ca <__sfputc_r+0x1e>
 80255b8:	6994      	ldr	r4, [r2, #24]
 80255ba:	42a3      	cmp	r3, r4
 80255bc:	db01      	blt.n	80255c2 <__sfputc_r+0x16>
 80255be:	290a      	cmp	r1, #10
 80255c0:	d103      	bne.n	80255ca <__sfputc_r+0x1e>
 80255c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80255c6:	f000 bb0d 	b.w	8025be4 <__swbuf_r>
 80255ca:	6813      	ldr	r3, [r2, #0]
 80255cc:	1c58      	adds	r0, r3, #1
 80255ce:	6010      	str	r0, [r2, #0]
 80255d0:	7019      	strb	r1, [r3, #0]
 80255d2:	4608      	mov	r0, r1
 80255d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80255d8:	4770      	bx	lr

080255da <__sfputs_r>:
 80255da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255dc:	4606      	mov	r6, r0
 80255de:	460f      	mov	r7, r1
 80255e0:	4614      	mov	r4, r2
 80255e2:	18d5      	adds	r5, r2, r3
 80255e4:	42ac      	cmp	r4, r5
 80255e6:	d101      	bne.n	80255ec <__sfputs_r+0x12>
 80255e8:	2000      	movs	r0, #0
 80255ea:	e007      	b.n	80255fc <__sfputs_r+0x22>
 80255ec:	463a      	mov	r2, r7
 80255ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80255f2:	4630      	mov	r0, r6
 80255f4:	f7ff ffda 	bl	80255ac <__sfputc_r>
 80255f8:	1c43      	adds	r3, r0, #1
 80255fa:	d1f3      	bne.n	80255e4 <__sfputs_r+0xa>
 80255fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025600 <_vfiprintf_r>:
 8025600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025604:	460c      	mov	r4, r1
 8025606:	b09d      	sub	sp, #116	; 0x74
 8025608:	4617      	mov	r7, r2
 802560a:	461d      	mov	r5, r3
 802560c:	4606      	mov	r6, r0
 802560e:	b118      	cbz	r0, 8025618 <_vfiprintf_r+0x18>
 8025610:	6983      	ldr	r3, [r0, #24]
 8025612:	b90b      	cbnz	r3, 8025618 <_vfiprintf_r+0x18>
 8025614:	f000 fcfa 	bl	802600c <__sinit>
 8025618:	4b7c      	ldr	r3, [pc, #496]	; (802580c <_vfiprintf_r+0x20c>)
 802561a:	429c      	cmp	r4, r3
 802561c:	d158      	bne.n	80256d0 <_vfiprintf_r+0xd0>
 802561e:	6874      	ldr	r4, [r6, #4]
 8025620:	89a3      	ldrh	r3, [r4, #12]
 8025622:	0718      	lsls	r0, r3, #28
 8025624:	d55e      	bpl.n	80256e4 <_vfiprintf_r+0xe4>
 8025626:	6923      	ldr	r3, [r4, #16]
 8025628:	2b00      	cmp	r3, #0
 802562a:	d05b      	beq.n	80256e4 <_vfiprintf_r+0xe4>
 802562c:	2300      	movs	r3, #0
 802562e:	9309      	str	r3, [sp, #36]	; 0x24
 8025630:	2320      	movs	r3, #32
 8025632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8025636:	2330      	movs	r3, #48	; 0x30
 8025638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802563c:	9503      	str	r5, [sp, #12]
 802563e:	f04f 0b01 	mov.w	fp, #1
 8025642:	46b8      	mov	r8, r7
 8025644:	4645      	mov	r5, r8
 8025646:	f815 3b01 	ldrb.w	r3, [r5], #1
 802564a:	b10b      	cbz	r3, 8025650 <_vfiprintf_r+0x50>
 802564c:	2b25      	cmp	r3, #37	; 0x25
 802564e:	d154      	bne.n	80256fa <_vfiprintf_r+0xfa>
 8025650:	ebb8 0a07 	subs.w	sl, r8, r7
 8025654:	d00b      	beq.n	802566e <_vfiprintf_r+0x6e>
 8025656:	4653      	mov	r3, sl
 8025658:	463a      	mov	r2, r7
 802565a:	4621      	mov	r1, r4
 802565c:	4630      	mov	r0, r6
 802565e:	f7ff ffbc 	bl	80255da <__sfputs_r>
 8025662:	3001      	adds	r0, #1
 8025664:	f000 80c2 	beq.w	80257ec <_vfiprintf_r+0x1ec>
 8025668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802566a:	4453      	add	r3, sl
 802566c:	9309      	str	r3, [sp, #36]	; 0x24
 802566e:	f898 3000 	ldrb.w	r3, [r8]
 8025672:	2b00      	cmp	r3, #0
 8025674:	f000 80ba 	beq.w	80257ec <_vfiprintf_r+0x1ec>
 8025678:	2300      	movs	r3, #0
 802567a:	f04f 32ff 	mov.w	r2, #4294967295
 802567e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025682:	9304      	str	r3, [sp, #16]
 8025684:	9307      	str	r3, [sp, #28]
 8025686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802568a:	931a      	str	r3, [sp, #104]	; 0x68
 802568c:	46a8      	mov	r8, r5
 802568e:	2205      	movs	r2, #5
 8025690:	f818 1b01 	ldrb.w	r1, [r8], #1
 8025694:	485e      	ldr	r0, [pc, #376]	; (8025810 <_vfiprintf_r+0x210>)
 8025696:	f7da fdbb 	bl	8000210 <memchr>
 802569a:	9b04      	ldr	r3, [sp, #16]
 802569c:	bb78      	cbnz	r0, 80256fe <_vfiprintf_r+0xfe>
 802569e:	06d9      	lsls	r1, r3, #27
 80256a0:	bf44      	itt	mi
 80256a2:	2220      	movmi	r2, #32
 80256a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80256a8:	071a      	lsls	r2, r3, #28
 80256aa:	bf44      	itt	mi
 80256ac:	222b      	movmi	r2, #43	; 0x2b
 80256ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80256b2:	782a      	ldrb	r2, [r5, #0]
 80256b4:	2a2a      	cmp	r2, #42	; 0x2a
 80256b6:	d02a      	beq.n	802570e <_vfiprintf_r+0x10e>
 80256b8:	9a07      	ldr	r2, [sp, #28]
 80256ba:	46a8      	mov	r8, r5
 80256bc:	2000      	movs	r0, #0
 80256be:	250a      	movs	r5, #10
 80256c0:	4641      	mov	r1, r8
 80256c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80256c6:	3b30      	subs	r3, #48	; 0x30
 80256c8:	2b09      	cmp	r3, #9
 80256ca:	d969      	bls.n	80257a0 <_vfiprintf_r+0x1a0>
 80256cc:	b360      	cbz	r0, 8025728 <_vfiprintf_r+0x128>
 80256ce:	e024      	b.n	802571a <_vfiprintf_r+0x11a>
 80256d0:	4b50      	ldr	r3, [pc, #320]	; (8025814 <_vfiprintf_r+0x214>)
 80256d2:	429c      	cmp	r4, r3
 80256d4:	d101      	bne.n	80256da <_vfiprintf_r+0xda>
 80256d6:	68b4      	ldr	r4, [r6, #8]
 80256d8:	e7a2      	b.n	8025620 <_vfiprintf_r+0x20>
 80256da:	4b4f      	ldr	r3, [pc, #316]	; (8025818 <_vfiprintf_r+0x218>)
 80256dc:	429c      	cmp	r4, r3
 80256de:	bf08      	it	eq
 80256e0:	68f4      	ldreq	r4, [r6, #12]
 80256e2:	e79d      	b.n	8025620 <_vfiprintf_r+0x20>
 80256e4:	4621      	mov	r1, r4
 80256e6:	4630      	mov	r0, r6
 80256e8:	f000 face 	bl	8025c88 <__swsetup_r>
 80256ec:	2800      	cmp	r0, #0
 80256ee:	d09d      	beq.n	802562c <_vfiprintf_r+0x2c>
 80256f0:	f04f 30ff 	mov.w	r0, #4294967295
 80256f4:	b01d      	add	sp, #116	; 0x74
 80256f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256fa:	46a8      	mov	r8, r5
 80256fc:	e7a2      	b.n	8025644 <_vfiprintf_r+0x44>
 80256fe:	4a44      	ldr	r2, [pc, #272]	; (8025810 <_vfiprintf_r+0x210>)
 8025700:	1a80      	subs	r0, r0, r2
 8025702:	fa0b f000 	lsl.w	r0, fp, r0
 8025706:	4318      	orrs	r0, r3
 8025708:	9004      	str	r0, [sp, #16]
 802570a:	4645      	mov	r5, r8
 802570c:	e7be      	b.n	802568c <_vfiprintf_r+0x8c>
 802570e:	9a03      	ldr	r2, [sp, #12]
 8025710:	1d11      	adds	r1, r2, #4
 8025712:	6812      	ldr	r2, [r2, #0]
 8025714:	9103      	str	r1, [sp, #12]
 8025716:	2a00      	cmp	r2, #0
 8025718:	db01      	blt.n	802571e <_vfiprintf_r+0x11e>
 802571a:	9207      	str	r2, [sp, #28]
 802571c:	e004      	b.n	8025728 <_vfiprintf_r+0x128>
 802571e:	4252      	negs	r2, r2
 8025720:	f043 0302 	orr.w	r3, r3, #2
 8025724:	9207      	str	r2, [sp, #28]
 8025726:	9304      	str	r3, [sp, #16]
 8025728:	f898 3000 	ldrb.w	r3, [r8]
 802572c:	2b2e      	cmp	r3, #46	; 0x2e
 802572e:	d10e      	bne.n	802574e <_vfiprintf_r+0x14e>
 8025730:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025734:	2b2a      	cmp	r3, #42	; 0x2a
 8025736:	d138      	bne.n	80257aa <_vfiprintf_r+0x1aa>
 8025738:	9b03      	ldr	r3, [sp, #12]
 802573a:	1d1a      	adds	r2, r3, #4
 802573c:	681b      	ldr	r3, [r3, #0]
 802573e:	9203      	str	r2, [sp, #12]
 8025740:	2b00      	cmp	r3, #0
 8025742:	bfb8      	it	lt
 8025744:	f04f 33ff 	movlt.w	r3, #4294967295
 8025748:	f108 0802 	add.w	r8, r8, #2
 802574c:	9305      	str	r3, [sp, #20]
 802574e:	4d33      	ldr	r5, [pc, #204]	; (802581c <_vfiprintf_r+0x21c>)
 8025750:	f898 1000 	ldrb.w	r1, [r8]
 8025754:	2203      	movs	r2, #3
 8025756:	4628      	mov	r0, r5
 8025758:	f7da fd5a 	bl	8000210 <memchr>
 802575c:	b140      	cbz	r0, 8025770 <_vfiprintf_r+0x170>
 802575e:	2340      	movs	r3, #64	; 0x40
 8025760:	1b40      	subs	r0, r0, r5
 8025762:	fa03 f000 	lsl.w	r0, r3, r0
 8025766:	9b04      	ldr	r3, [sp, #16]
 8025768:	4303      	orrs	r3, r0
 802576a:	f108 0801 	add.w	r8, r8, #1
 802576e:	9304      	str	r3, [sp, #16]
 8025770:	f898 1000 	ldrb.w	r1, [r8]
 8025774:	482a      	ldr	r0, [pc, #168]	; (8025820 <_vfiprintf_r+0x220>)
 8025776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802577a:	2206      	movs	r2, #6
 802577c:	f108 0701 	add.w	r7, r8, #1
 8025780:	f7da fd46 	bl	8000210 <memchr>
 8025784:	2800      	cmp	r0, #0
 8025786:	d037      	beq.n	80257f8 <_vfiprintf_r+0x1f8>
 8025788:	4b26      	ldr	r3, [pc, #152]	; (8025824 <_vfiprintf_r+0x224>)
 802578a:	bb1b      	cbnz	r3, 80257d4 <_vfiprintf_r+0x1d4>
 802578c:	9b03      	ldr	r3, [sp, #12]
 802578e:	3307      	adds	r3, #7
 8025790:	f023 0307 	bic.w	r3, r3, #7
 8025794:	3308      	adds	r3, #8
 8025796:	9303      	str	r3, [sp, #12]
 8025798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802579a:	444b      	add	r3, r9
 802579c:	9309      	str	r3, [sp, #36]	; 0x24
 802579e:	e750      	b.n	8025642 <_vfiprintf_r+0x42>
 80257a0:	fb05 3202 	mla	r2, r5, r2, r3
 80257a4:	2001      	movs	r0, #1
 80257a6:	4688      	mov	r8, r1
 80257a8:	e78a      	b.n	80256c0 <_vfiprintf_r+0xc0>
 80257aa:	2300      	movs	r3, #0
 80257ac:	f108 0801 	add.w	r8, r8, #1
 80257b0:	9305      	str	r3, [sp, #20]
 80257b2:	4619      	mov	r1, r3
 80257b4:	250a      	movs	r5, #10
 80257b6:	4640      	mov	r0, r8
 80257b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80257bc:	3a30      	subs	r2, #48	; 0x30
 80257be:	2a09      	cmp	r2, #9
 80257c0:	d903      	bls.n	80257ca <_vfiprintf_r+0x1ca>
 80257c2:	2b00      	cmp	r3, #0
 80257c4:	d0c3      	beq.n	802574e <_vfiprintf_r+0x14e>
 80257c6:	9105      	str	r1, [sp, #20]
 80257c8:	e7c1      	b.n	802574e <_vfiprintf_r+0x14e>
 80257ca:	fb05 2101 	mla	r1, r5, r1, r2
 80257ce:	2301      	movs	r3, #1
 80257d0:	4680      	mov	r8, r0
 80257d2:	e7f0      	b.n	80257b6 <_vfiprintf_r+0x1b6>
 80257d4:	ab03      	add	r3, sp, #12
 80257d6:	9300      	str	r3, [sp, #0]
 80257d8:	4622      	mov	r2, r4
 80257da:	4b13      	ldr	r3, [pc, #76]	; (8025828 <_vfiprintf_r+0x228>)
 80257dc:	a904      	add	r1, sp, #16
 80257de:	4630      	mov	r0, r6
 80257e0:	f3af 8000 	nop.w
 80257e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80257e8:	4681      	mov	r9, r0
 80257ea:	d1d5      	bne.n	8025798 <_vfiprintf_r+0x198>
 80257ec:	89a3      	ldrh	r3, [r4, #12]
 80257ee:	065b      	lsls	r3, r3, #25
 80257f0:	f53f af7e 	bmi.w	80256f0 <_vfiprintf_r+0xf0>
 80257f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80257f6:	e77d      	b.n	80256f4 <_vfiprintf_r+0xf4>
 80257f8:	ab03      	add	r3, sp, #12
 80257fa:	9300      	str	r3, [sp, #0]
 80257fc:	4622      	mov	r2, r4
 80257fe:	4b0a      	ldr	r3, [pc, #40]	; (8025828 <_vfiprintf_r+0x228>)
 8025800:	a904      	add	r1, sp, #16
 8025802:	4630      	mov	r0, r6
 8025804:	f000 f888 	bl	8025918 <_printf_i>
 8025808:	e7ec      	b.n	80257e4 <_vfiprintf_r+0x1e4>
 802580a:	bf00      	nop
 802580c:	08029b0c 	.word	0x08029b0c
 8025810:	08029ab4 	.word	0x08029ab4
 8025814:	08029b2c 	.word	0x08029b2c
 8025818:	08029aec 	.word	0x08029aec
 802581c:	08029aba 	.word	0x08029aba
 8025820:	08029abe 	.word	0x08029abe
 8025824:	00000000 	.word	0x00000000
 8025828:	080255db 	.word	0x080255db

0802582c <_printf_common>:
 802582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025830:	4691      	mov	r9, r2
 8025832:	461f      	mov	r7, r3
 8025834:	688a      	ldr	r2, [r1, #8]
 8025836:	690b      	ldr	r3, [r1, #16]
 8025838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802583c:	4293      	cmp	r3, r2
 802583e:	bfb8      	it	lt
 8025840:	4613      	movlt	r3, r2
 8025842:	f8c9 3000 	str.w	r3, [r9]
 8025846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802584a:	4606      	mov	r6, r0
 802584c:	460c      	mov	r4, r1
 802584e:	b112      	cbz	r2, 8025856 <_printf_common+0x2a>
 8025850:	3301      	adds	r3, #1
 8025852:	f8c9 3000 	str.w	r3, [r9]
 8025856:	6823      	ldr	r3, [r4, #0]
 8025858:	0699      	lsls	r1, r3, #26
 802585a:	bf42      	ittt	mi
 802585c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025860:	3302      	addmi	r3, #2
 8025862:	f8c9 3000 	strmi.w	r3, [r9]
 8025866:	6825      	ldr	r5, [r4, #0]
 8025868:	f015 0506 	ands.w	r5, r5, #6
 802586c:	d107      	bne.n	802587e <_printf_common+0x52>
 802586e:	f104 0a19 	add.w	sl, r4, #25
 8025872:	68e3      	ldr	r3, [r4, #12]
 8025874:	f8d9 2000 	ldr.w	r2, [r9]
 8025878:	1a9b      	subs	r3, r3, r2
 802587a:	42ab      	cmp	r3, r5
 802587c:	dc28      	bgt.n	80258d0 <_printf_common+0xa4>
 802587e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8025882:	6822      	ldr	r2, [r4, #0]
 8025884:	3300      	adds	r3, #0
 8025886:	bf18      	it	ne
 8025888:	2301      	movne	r3, #1
 802588a:	0692      	lsls	r2, r2, #26
 802588c:	d42d      	bmi.n	80258ea <_printf_common+0xbe>
 802588e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025892:	4639      	mov	r1, r7
 8025894:	4630      	mov	r0, r6
 8025896:	47c0      	blx	r8
 8025898:	3001      	adds	r0, #1
 802589a:	d020      	beq.n	80258de <_printf_common+0xb2>
 802589c:	6823      	ldr	r3, [r4, #0]
 802589e:	68e5      	ldr	r5, [r4, #12]
 80258a0:	f8d9 2000 	ldr.w	r2, [r9]
 80258a4:	f003 0306 	and.w	r3, r3, #6
 80258a8:	2b04      	cmp	r3, #4
 80258aa:	bf08      	it	eq
 80258ac:	1aad      	subeq	r5, r5, r2
 80258ae:	68a3      	ldr	r3, [r4, #8]
 80258b0:	6922      	ldr	r2, [r4, #16]
 80258b2:	bf0c      	ite	eq
 80258b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80258b8:	2500      	movne	r5, #0
 80258ba:	4293      	cmp	r3, r2
 80258bc:	bfc4      	itt	gt
 80258be:	1a9b      	subgt	r3, r3, r2
 80258c0:	18ed      	addgt	r5, r5, r3
 80258c2:	f04f 0900 	mov.w	r9, #0
 80258c6:	341a      	adds	r4, #26
 80258c8:	454d      	cmp	r5, r9
 80258ca:	d11a      	bne.n	8025902 <_printf_common+0xd6>
 80258cc:	2000      	movs	r0, #0
 80258ce:	e008      	b.n	80258e2 <_printf_common+0xb6>
 80258d0:	2301      	movs	r3, #1
 80258d2:	4652      	mov	r2, sl
 80258d4:	4639      	mov	r1, r7
 80258d6:	4630      	mov	r0, r6
 80258d8:	47c0      	blx	r8
 80258da:	3001      	adds	r0, #1
 80258dc:	d103      	bne.n	80258e6 <_printf_common+0xba>
 80258de:	f04f 30ff 	mov.w	r0, #4294967295
 80258e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80258e6:	3501      	adds	r5, #1
 80258e8:	e7c3      	b.n	8025872 <_printf_common+0x46>
 80258ea:	18e1      	adds	r1, r4, r3
 80258ec:	1c5a      	adds	r2, r3, #1
 80258ee:	2030      	movs	r0, #48	; 0x30
 80258f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80258f4:	4422      	add	r2, r4
 80258f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80258fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80258fe:	3302      	adds	r3, #2
 8025900:	e7c5      	b.n	802588e <_printf_common+0x62>
 8025902:	2301      	movs	r3, #1
 8025904:	4622      	mov	r2, r4
 8025906:	4639      	mov	r1, r7
 8025908:	4630      	mov	r0, r6
 802590a:	47c0      	blx	r8
 802590c:	3001      	adds	r0, #1
 802590e:	d0e6      	beq.n	80258de <_printf_common+0xb2>
 8025910:	f109 0901 	add.w	r9, r9, #1
 8025914:	e7d8      	b.n	80258c8 <_printf_common+0x9c>
	...

08025918 <_printf_i>:
 8025918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802591c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025920:	460c      	mov	r4, r1
 8025922:	7e09      	ldrb	r1, [r1, #24]
 8025924:	b085      	sub	sp, #20
 8025926:	296e      	cmp	r1, #110	; 0x6e
 8025928:	4617      	mov	r7, r2
 802592a:	4606      	mov	r6, r0
 802592c:	4698      	mov	r8, r3
 802592e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025930:	f000 80b3 	beq.w	8025a9a <_printf_i+0x182>
 8025934:	d822      	bhi.n	802597c <_printf_i+0x64>
 8025936:	2963      	cmp	r1, #99	; 0x63
 8025938:	d036      	beq.n	80259a8 <_printf_i+0x90>
 802593a:	d80a      	bhi.n	8025952 <_printf_i+0x3a>
 802593c:	2900      	cmp	r1, #0
 802593e:	f000 80b9 	beq.w	8025ab4 <_printf_i+0x19c>
 8025942:	2958      	cmp	r1, #88	; 0x58
 8025944:	f000 8083 	beq.w	8025a4e <_printf_i+0x136>
 8025948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802594c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025950:	e032      	b.n	80259b8 <_printf_i+0xa0>
 8025952:	2964      	cmp	r1, #100	; 0x64
 8025954:	d001      	beq.n	802595a <_printf_i+0x42>
 8025956:	2969      	cmp	r1, #105	; 0x69
 8025958:	d1f6      	bne.n	8025948 <_printf_i+0x30>
 802595a:	6820      	ldr	r0, [r4, #0]
 802595c:	6813      	ldr	r3, [r2, #0]
 802595e:	0605      	lsls	r5, r0, #24
 8025960:	f103 0104 	add.w	r1, r3, #4
 8025964:	d52a      	bpl.n	80259bc <_printf_i+0xa4>
 8025966:	681b      	ldr	r3, [r3, #0]
 8025968:	6011      	str	r1, [r2, #0]
 802596a:	2b00      	cmp	r3, #0
 802596c:	da03      	bge.n	8025976 <_printf_i+0x5e>
 802596e:	222d      	movs	r2, #45	; 0x2d
 8025970:	425b      	negs	r3, r3
 8025972:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025976:	486f      	ldr	r0, [pc, #444]	; (8025b34 <_printf_i+0x21c>)
 8025978:	220a      	movs	r2, #10
 802597a:	e039      	b.n	80259f0 <_printf_i+0xd8>
 802597c:	2973      	cmp	r1, #115	; 0x73
 802597e:	f000 809d 	beq.w	8025abc <_printf_i+0x1a4>
 8025982:	d808      	bhi.n	8025996 <_printf_i+0x7e>
 8025984:	296f      	cmp	r1, #111	; 0x6f
 8025986:	d020      	beq.n	80259ca <_printf_i+0xb2>
 8025988:	2970      	cmp	r1, #112	; 0x70
 802598a:	d1dd      	bne.n	8025948 <_printf_i+0x30>
 802598c:	6823      	ldr	r3, [r4, #0]
 802598e:	f043 0320 	orr.w	r3, r3, #32
 8025992:	6023      	str	r3, [r4, #0]
 8025994:	e003      	b.n	802599e <_printf_i+0x86>
 8025996:	2975      	cmp	r1, #117	; 0x75
 8025998:	d017      	beq.n	80259ca <_printf_i+0xb2>
 802599a:	2978      	cmp	r1, #120	; 0x78
 802599c:	d1d4      	bne.n	8025948 <_printf_i+0x30>
 802599e:	2378      	movs	r3, #120	; 0x78
 80259a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80259a4:	4864      	ldr	r0, [pc, #400]	; (8025b38 <_printf_i+0x220>)
 80259a6:	e055      	b.n	8025a54 <_printf_i+0x13c>
 80259a8:	6813      	ldr	r3, [r2, #0]
 80259aa:	1d19      	adds	r1, r3, #4
 80259ac:	681b      	ldr	r3, [r3, #0]
 80259ae:	6011      	str	r1, [r2, #0]
 80259b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80259b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80259b8:	2301      	movs	r3, #1
 80259ba:	e08c      	b.n	8025ad6 <_printf_i+0x1be>
 80259bc:	681b      	ldr	r3, [r3, #0]
 80259be:	6011      	str	r1, [r2, #0]
 80259c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80259c4:	bf18      	it	ne
 80259c6:	b21b      	sxthne	r3, r3
 80259c8:	e7cf      	b.n	802596a <_printf_i+0x52>
 80259ca:	6813      	ldr	r3, [r2, #0]
 80259cc:	6825      	ldr	r5, [r4, #0]
 80259ce:	1d18      	adds	r0, r3, #4
 80259d0:	6010      	str	r0, [r2, #0]
 80259d2:	0628      	lsls	r0, r5, #24
 80259d4:	d501      	bpl.n	80259da <_printf_i+0xc2>
 80259d6:	681b      	ldr	r3, [r3, #0]
 80259d8:	e002      	b.n	80259e0 <_printf_i+0xc8>
 80259da:	0668      	lsls	r0, r5, #25
 80259dc:	d5fb      	bpl.n	80259d6 <_printf_i+0xbe>
 80259de:	881b      	ldrh	r3, [r3, #0]
 80259e0:	4854      	ldr	r0, [pc, #336]	; (8025b34 <_printf_i+0x21c>)
 80259e2:	296f      	cmp	r1, #111	; 0x6f
 80259e4:	bf14      	ite	ne
 80259e6:	220a      	movne	r2, #10
 80259e8:	2208      	moveq	r2, #8
 80259ea:	2100      	movs	r1, #0
 80259ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80259f0:	6865      	ldr	r5, [r4, #4]
 80259f2:	60a5      	str	r5, [r4, #8]
 80259f4:	2d00      	cmp	r5, #0
 80259f6:	f2c0 8095 	blt.w	8025b24 <_printf_i+0x20c>
 80259fa:	6821      	ldr	r1, [r4, #0]
 80259fc:	f021 0104 	bic.w	r1, r1, #4
 8025a00:	6021      	str	r1, [r4, #0]
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d13d      	bne.n	8025a82 <_printf_i+0x16a>
 8025a06:	2d00      	cmp	r5, #0
 8025a08:	f040 808e 	bne.w	8025b28 <_printf_i+0x210>
 8025a0c:	4665      	mov	r5, ip
 8025a0e:	2a08      	cmp	r2, #8
 8025a10:	d10b      	bne.n	8025a2a <_printf_i+0x112>
 8025a12:	6823      	ldr	r3, [r4, #0]
 8025a14:	07db      	lsls	r3, r3, #31
 8025a16:	d508      	bpl.n	8025a2a <_printf_i+0x112>
 8025a18:	6923      	ldr	r3, [r4, #16]
 8025a1a:	6862      	ldr	r2, [r4, #4]
 8025a1c:	429a      	cmp	r2, r3
 8025a1e:	bfde      	ittt	le
 8025a20:	2330      	movle	r3, #48	; 0x30
 8025a22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025a26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025a2a:	ebac 0305 	sub.w	r3, ip, r5
 8025a2e:	6123      	str	r3, [r4, #16]
 8025a30:	f8cd 8000 	str.w	r8, [sp]
 8025a34:	463b      	mov	r3, r7
 8025a36:	aa03      	add	r2, sp, #12
 8025a38:	4621      	mov	r1, r4
 8025a3a:	4630      	mov	r0, r6
 8025a3c:	f7ff fef6 	bl	802582c <_printf_common>
 8025a40:	3001      	adds	r0, #1
 8025a42:	d14d      	bne.n	8025ae0 <_printf_i+0x1c8>
 8025a44:	f04f 30ff 	mov.w	r0, #4294967295
 8025a48:	b005      	add	sp, #20
 8025a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025a4e:	4839      	ldr	r0, [pc, #228]	; (8025b34 <_printf_i+0x21c>)
 8025a50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025a54:	6813      	ldr	r3, [r2, #0]
 8025a56:	6821      	ldr	r1, [r4, #0]
 8025a58:	1d1d      	adds	r5, r3, #4
 8025a5a:	681b      	ldr	r3, [r3, #0]
 8025a5c:	6015      	str	r5, [r2, #0]
 8025a5e:	060a      	lsls	r2, r1, #24
 8025a60:	d50b      	bpl.n	8025a7a <_printf_i+0x162>
 8025a62:	07ca      	lsls	r2, r1, #31
 8025a64:	bf44      	itt	mi
 8025a66:	f041 0120 	orrmi.w	r1, r1, #32
 8025a6a:	6021      	strmi	r1, [r4, #0]
 8025a6c:	b91b      	cbnz	r3, 8025a76 <_printf_i+0x15e>
 8025a6e:	6822      	ldr	r2, [r4, #0]
 8025a70:	f022 0220 	bic.w	r2, r2, #32
 8025a74:	6022      	str	r2, [r4, #0]
 8025a76:	2210      	movs	r2, #16
 8025a78:	e7b7      	b.n	80259ea <_printf_i+0xd2>
 8025a7a:	064d      	lsls	r5, r1, #25
 8025a7c:	bf48      	it	mi
 8025a7e:	b29b      	uxthmi	r3, r3
 8025a80:	e7ef      	b.n	8025a62 <_printf_i+0x14a>
 8025a82:	4665      	mov	r5, ip
 8025a84:	fbb3 f1f2 	udiv	r1, r3, r2
 8025a88:	fb02 3311 	mls	r3, r2, r1, r3
 8025a8c:	5cc3      	ldrb	r3, [r0, r3]
 8025a8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8025a92:	460b      	mov	r3, r1
 8025a94:	2900      	cmp	r1, #0
 8025a96:	d1f5      	bne.n	8025a84 <_printf_i+0x16c>
 8025a98:	e7b9      	b.n	8025a0e <_printf_i+0xf6>
 8025a9a:	6813      	ldr	r3, [r2, #0]
 8025a9c:	6825      	ldr	r5, [r4, #0]
 8025a9e:	6961      	ldr	r1, [r4, #20]
 8025aa0:	1d18      	adds	r0, r3, #4
 8025aa2:	6010      	str	r0, [r2, #0]
 8025aa4:	0628      	lsls	r0, r5, #24
 8025aa6:	681b      	ldr	r3, [r3, #0]
 8025aa8:	d501      	bpl.n	8025aae <_printf_i+0x196>
 8025aaa:	6019      	str	r1, [r3, #0]
 8025aac:	e002      	b.n	8025ab4 <_printf_i+0x19c>
 8025aae:	066a      	lsls	r2, r5, #25
 8025ab0:	d5fb      	bpl.n	8025aaa <_printf_i+0x192>
 8025ab2:	8019      	strh	r1, [r3, #0]
 8025ab4:	2300      	movs	r3, #0
 8025ab6:	6123      	str	r3, [r4, #16]
 8025ab8:	4665      	mov	r5, ip
 8025aba:	e7b9      	b.n	8025a30 <_printf_i+0x118>
 8025abc:	6813      	ldr	r3, [r2, #0]
 8025abe:	1d19      	adds	r1, r3, #4
 8025ac0:	6011      	str	r1, [r2, #0]
 8025ac2:	681d      	ldr	r5, [r3, #0]
 8025ac4:	6862      	ldr	r2, [r4, #4]
 8025ac6:	2100      	movs	r1, #0
 8025ac8:	4628      	mov	r0, r5
 8025aca:	f7da fba1 	bl	8000210 <memchr>
 8025ace:	b108      	cbz	r0, 8025ad4 <_printf_i+0x1bc>
 8025ad0:	1b40      	subs	r0, r0, r5
 8025ad2:	6060      	str	r0, [r4, #4]
 8025ad4:	6863      	ldr	r3, [r4, #4]
 8025ad6:	6123      	str	r3, [r4, #16]
 8025ad8:	2300      	movs	r3, #0
 8025ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ade:	e7a7      	b.n	8025a30 <_printf_i+0x118>
 8025ae0:	6923      	ldr	r3, [r4, #16]
 8025ae2:	462a      	mov	r2, r5
 8025ae4:	4639      	mov	r1, r7
 8025ae6:	4630      	mov	r0, r6
 8025ae8:	47c0      	blx	r8
 8025aea:	3001      	adds	r0, #1
 8025aec:	d0aa      	beq.n	8025a44 <_printf_i+0x12c>
 8025aee:	6823      	ldr	r3, [r4, #0]
 8025af0:	079b      	lsls	r3, r3, #30
 8025af2:	d413      	bmi.n	8025b1c <_printf_i+0x204>
 8025af4:	68e0      	ldr	r0, [r4, #12]
 8025af6:	9b03      	ldr	r3, [sp, #12]
 8025af8:	4298      	cmp	r0, r3
 8025afa:	bfb8      	it	lt
 8025afc:	4618      	movlt	r0, r3
 8025afe:	e7a3      	b.n	8025a48 <_printf_i+0x130>
 8025b00:	2301      	movs	r3, #1
 8025b02:	464a      	mov	r2, r9
 8025b04:	4639      	mov	r1, r7
 8025b06:	4630      	mov	r0, r6
 8025b08:	47c0      	blx	r8
 8025b0a:	3001      	adds	r0, #1
 8025b0c:	d09a      	beq.n	8025a44 <_printf_i+0x12c>
 8025b0e:	3501      	adds	r5, #1
 8025b10:	68e3      	ldr	r3, [r4, #12]
 8025b12:	9a03      	ldr	r2, [sp, #12]
 8025b14:	1a9b      	subs	r3, r3, r2
 8025b16:	42ab      	cmp	r3, r5
 8025b18:	dcf2      	bgt.n	8025b00 <_printf_i+0x1e8>
 8025b1a:	e7eb      	b.n	8025af4 <_printf_i+0x1dc>
 8025b1c:	2500      	movs	r5, #0
 8025b1e:	f104 0919 	add.w	r9, r4, #25
 8025b22:	e7f5      	b.n	8025b10 <_printf_i+0x1f8>
 8025b24:	2b00      	cmp	r3, #0
 8025b26:	d1ac      	bne.n	8025a82 <_printf_i+0x16a>
 8025b28:	7803      	ldrb	r3, [r0, #0]
 8025b2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025b2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025b32:	e76c      	b.n	8025a0e <_printf_i+0xf6>
 8025b34:	08029ac5 	.word	0x08029ac5
 8025b38:	08029ad6 	.word	0x08029ad6

08025b3c <_sbrk_r>:
 8025b3c:	b538      	push	{r3, r4, r5, lr}
 8025b3e:	4c06      	ldr	r4, [pc, #24]	; (8025b58 <_sbrk_r+0x1c>)
 8025b40:	2300      	movs	r3, #0
 8025b42:	4605      	mov	r5, r0
 8025b44:	4608      	mov	r0, r1
 8025b46:	6023      	str	r3, [r4, #0]
 8025b48:	f7dd fadc 	bl	8003104 <_sbrk>
 8025b4c:	1c43      	adds	r3, r0, #1
 8025b4e:	d102      	bne.n	8025b56 <_sbrk_r+0x1a>
 8025b50:	6823      	ldr	r3, [r4, #0]
 8025b52:	b103      	cbz	r3, 8025b56 <_sbrk_r+0x1a>
 8025b54:	602b      	str	r3, [r5, #0]
 8025b56:	bd38      	pop	{r3, r4, r5, pc}
 8025b58:	2000ae70 	.word	0x2000ae70

08025b5c <_raise_r>:
 8025b5c:	291f      	cmp	r1, #31
 8025b5e:	b538      	push	{r3, r4, r5, lr}
 8025b60:	4604      	mov	r4, r0
 8025b62:	460d      	mov	r5, r1
 8025b64:	d904      	bls.n	8025b70 <_raise_r+0x14>
 8025b66:	2316      	movs	r3, #22
 8025b68:	6003      	str	r3, [r0, #0]
 8025b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8025b6e:	bd38      	pop	{r3, r4, r5, pc}
 8025b70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025b72:	b112      	cbz	r2, 8025b7a <_raise_r+0x1e>
 8025b74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025b78:	b94b      	cbnz	r3, 8025b8e <_raise_r+0x32>
 8025b7a:	4620      	mov	r0, r4
 8025b7c:	f000 f830 	bl	8025be0 <_getpid_r>
 8025b80:	462a      	mov	r2, r5
 8025b82:	4601      	mov	r1, r0
 8025b84:	4620      	mov	r0, r4
 8025b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025b8a:	f000 b817 	b.w	8025bbc <_kill_r>
 8025b8e:	2b01      	cmp	r3, #1
 8025b90:	d00a      	beq.n	8025ba8 <_raise_r+0x4c>
 8025b92:	1c59      	adds	r1, r3, #1
 8025b94:	d103      	bne.n	8025b9e <_raise_r+0x42>
 8025b96:	2316      	movs	r3, #22
 8025b98:	6003      	str	r3, [r0, #0]
 8025b9a:	2001      	movs	r0, #1
 8025b9c:	e7e7      	b.n	8025b6e <_raise_r+0x12>
 8025b9e:	2400      	movs	r4, #0
 8025ba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025ba4:	4628      	mov	r0, r5
 8025ba6:	4798      	blx	r3
 8025ba8:	2000      	movs	r0, #0
 8025baa:	e7e0      	b.n	8025b6e <_raise_r+0x12>

08025bac <raise>:
 8025bac:	4b02      	ldr	r3, [pc, #8]	; (8025bb8 <raise+0xc>)
 8025bae:	4601      	mov	r1, r0
 8025bb0:	6818      	ldr	r0, [r3, #0]
 8025bb2:	f7ff bfd3 	b.w	8025b5c <_raise_r>
 8025bb6:	bf00      	nop
 8025bb8:	200000c8 	.word	0x200000c8

08025bbc <_kill_r>:
 8025bbc:	b538      	push	{r3, r4, r5, lr}
 8025bbe:	4c07      	ldr	r4, [pc, #28]	; (8025bdc <_kill_r+0x20>)
 8025bc0:	2300      	movs	r3, #0
 8025bc2:	4605      	mov	r5, r0
 8025bc4:	4608      	mov	r0, r1
 8025bc6:	4611      	mov	r1, r2
 8025bc8:	6023      	str	r3, [r4, #0]
 8025bca:	f7dd fa13 	bl	8002ff4 <_kill>
 8025bce:	1c43      	adds	r3, r0, #1
 8025bd0:	d102      	bne.n	8025bd8 <_kill_r+0x1c>
 8025bd2:	6823      	ldr	r3, [r4, #0]
 8025bd4:	b103      	cbz	r3, 8025bd8 <_kill_r+0x1c>
 8025bd6:	602b      	str	r3, [r5, #0]
 8025bd8:	bd38      	pop	{r3, r4, r5, pc}
 8025bda:	bf00      	nop
 8025bdc:	2000ae70 	.word	0x2000ae70

08025be0 <_getpid_r>:
 8025be0:	f7dd ba00 	b.w	8002fe4 <_getpid>

08025be4 <__swbuf_r>:
 8025be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025be6:	460e      	mov	r6, r1
 8025be8:	4614      	mov	r4, r2
 8025bea:	4605      	mov	r5, r0
 8025bec:	b118      	cbz	r0, 8025bf6 <__swbuf_r+0x12>
 8025bee:	6983      	ldr	r3, [r0, #24]
 8025bf0:	b90b      	cbnz	r3, 8025bf6 <__swbuf_r+0x12>
 8025bf2:	f000 fa0b 	bl	802600c <__sinit>
 8025bf6:	4b21      	ldr	r3, [pc, #132]	; (8025c7c <__swbuf_r+0x98>)
 8025bf8:	429c      	cmp	r4, r3
 8025bfa:	d12a      	bne.n	8025c52 <__swbuf_r+0x6e>
 8025bfc:	686c      	ldr	r4, [r5, #4]
 8025bfe:	69a3      	ldr	r3, [r4, #24]
 8025c00:	60a3      	str	r3, [r4, #8]
 8025c02:	89a3      	ldrh	r3, [r4, #12]
 8025c04:	071a      	lsls	r2, r3, #28
 8025c06:	d52e      	bpl.n	8025c66 <__swbuf_r+0x82>
 8025c08:	6923      	ldr	r3, [r4, #16]
 8025c0a:	b363      	cbz	r3, 8025c66 <__swbuf_r+0x82>
 8025c0c:	6923      	ldr	r3, [r4, #16]
 8025c0e:	6820      	ldr	r0, [r4, #0]
 8025c10:	1ac0      	subs	r0, r0, r3
 8025c12:	6963      	ldr	r3, [r4, #20]
 8025c14:	b2f6      	uxtb	r6, r6
 8025c16:	4283      	cmp	r3, r0
 8025c18:	4637      	mov	r7, r6
 8025c1a:	dc04      	bgt.n	8025c26 <__swbuf_r+0x42>
 8025c1c:	4621      	mov	r1, r4
 8025c1e:	4628      	mov	r0, r5
 8025c20:	f000 f98a 	bl	8025f38 <_fflush_r>
 8025c24:	bb28      	cbnz	r0, 8025c72 <__swbuf_r+0x8e>
 8025c26:	68a3      	ldr	r3, [r4, #8]
 8025c28:	3b01      	subs	r3, #1
 8025c2a:	60a3      	str	r3, [r4, #8]
 8025c2c:	6823      	ldr	r3, [r4, #0]
 8025c2e:	1c5a      	adds	r2, r3, #1
 8025c30:	6022      	str	r2, [r4, #0]
 8025c32:	701e      	strb	r6, [r3, #0]
 8025c34:	6963      	ldr	r3, [r4, #20]
 8025c36:	3001      	adds	r0, #1
 8025c38:	4283      	cmp	r3, r0
 8025c3a:	d004      	beq.n	8025c46 <__swbuf_r+0x62>
 8025c3c:	89a3      	ldrh	r3, [r4, #12]
 8025c3e:	07db      	lsls	r3, r3, #31
 8025c40:	d519      	bpl.n	8025c76 <__swbuf_r+0x92>
 8025c42:	2e0a      	cmp	r6, #10
 8025c44:	d117      	bne.n	8025c76 <__swbuf_r+0x92>
 8025c46:	4621      	mov	r1, r4
 8025c48:	4628      	mov	r0, r5
 8025c4a:	f000 f975 	bl	8025f38 <_fflush_r>
 8025c4e:	b190      	cbz	r0, 8025c76 <__swbuf_r+0x92>
 8025c50:	e00f      	b.n	8025c72 <__swbuf_r+0x8e>
 8025c52:	4b0b      	ldr	r3, [pc, #44]	; (8025c80 <__swbuf_r+0x9c>)
 8025c54:	429c      	cmp	r4, r3
 8025c56:	d101      	bne.n	8025c5c <__swbuf_r+0x78>
 8025c58:	68ac      	ldr	r4, [r5, #8]
 8025c5a:	e7d0      	b.n	8025bfe <__swbuf_r+0x1a>
 8025c5c:	4b09      	ldr	r3, [pc, #36]	; (8025c84 <__swbuf_r+0xa0>)
 8025c5e:	429c      	cmp	r4, r3
 8025c60:	bf08      	it	eq
 8025c62:	68ec      	ldreq	r4, [r5, #12]
 8025c64:	e7cb      	b.n	8025bfe <__swbuf_r+0x1a>
 8025c66:	4621      	mov	r1, r4
 8025c68:	4628      	mov	r0, r5
 8025c6a:	f000 f80d 	bl	8025c88 <__swsetup_r>
 8025c6e:	2800      	cmp	r0, #0
 8025c70:	d0cc      	beq.n	8025c0c <__swbuf_r+0x28>
 8025c72:	f04f 37ff 	mov.w	r7, #4294967295
 8025c76:	4638      	mov	r0, r7
 8025c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c7a:	bf00      	nop
 8025c7c:	08029b0c 	.word	0x08029b0c
 8025c80:	08029b2c 	.word	0x08029b2c
 8025c84:	08029aec 	.word	0x08029aec

08025c88 <__swsetup_r>:
 8025c88:	4b32      	ldr	r3, [pc, #200]	; (8025d54 <__swsetup_r+0xcc>)
 8025c8a:	b570      	push	{r4, r5, r6, lr}
 8025c8c:	681d      	ldr	r5, [r3, #0]
 8025c8e:	4606      	mov	r6, r0
 8025c90:	460c      	mov	r4, r1
 8025c92:	b125      	cbz	r5, 8025c9e <__swsetup_r+0x16>
 8025c94:	69ab      	ldr	r3, [r5, #24]
 8025c96:	b913      	cbnz	r3, 8025c9e <__swsetup_r+0x16>
 8025c98:	4628      	mov	r0, r5
 8025c9a:	f000 f9b7 	bl	802600c <__sinit>
 8025c9e:	4b2e      	ldr	r3, [pc, #184]	; (8025d58 <__swsetup_r+0xd0>)
 8025ca0:	429c      	cmp	r4, r3
 8025ca2:	d10f      	bne.n	8025cc4 <__swsetup_r+0x3c>
 8025ca4:	686c      	ldr	r4, [r5, #4]
 8025ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025caa:	b29a      	uxth	r2, r3
 8025cac:	0715      	lsls	r5, r2, #28
 8025cae:	d42c      	bmi.n	8025d0a <__swsetup_r+0x82>
 8025cb0:	06d0      	lsls	r0, r2, #27
 8025cb2:	d411      	bmi.n	8025cd8 <__swsetup_r+0x50>
 8025cb4:	2209      	movs	r2, #9
 8025cb6:	6032      	str	r2, [r6, #0]
 8025cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025cbc:	81a3      	strh	r3, [r4, #12]
 8025cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8025cc2:	e03e      	b.n	8025d42 <__swsetup_r+0xba>
 8025cc4:	4b25      	ldr	r3, [pc, #148]	; (8025d5c <__swsetup_r+0xd4>)
 8025cc6:	429c      	cmp	r4, r3
 8025cc8:	d101      	bne.n	8025cce <__swsetup_r+0x46>
 8025cca:	68ac      	ldr	r4, [r5, #8]
 8025ccc:	e7eb      	b.n	8025ca6 <__swsetup_r+0x1e>
 8025cce:	4b24      	ldr	r3, [pc, #144]	; (8025d60 <__swsetup_r+0xd8>)
 8025cd0:	429c      	cmp	r4, r3
 8025cd2:	bf08      	it	eq
 8025cd4:	68ec      	ldreq	r4, [r5, #12]
 8025cd6:	e7e6      	b.n	8025ca6 <__swsetup_r+0x1e>
 8025cd8:	0751      	lsls	r1, r2, #29
 8025cda:	d512      	bpl.n	8025d02 <__swsetup_r+0x7a>
 8025cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025cde:	b141      	cbz	r1, 8025cf2 <__swsetup_r+0x6a>
 8025ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025ce4:	4299      	cmp	r1, r3
 8025ce6:	d002      	beq.n	8025cee <__swsetup_r+0x66>
 8025ce8:	4630      	mov	r0, r6
 8025cea:	f7ff fbb7 	bl	802545c <_free_r>
 8025cee:	2300      	movs	r3, #0
 8025cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8025cf2:	89a3      	ldrh	r3, [r4, #12]
 8025cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025cf8:	81a3      	strh	r3, [r4, #12]
 8025cfa:	2300      	movs	r3, #0
 8025cfc:	6063      	str	r3, [r4, #4]
 8025cfe:	6923      	ldr	r3, [r4, #16]
 8025d00:	6023      	str	r3, [r4, #0]
 8025d02:	89a3      	ldrh	r3, [r4, #12]
 8025d04:	f043 0308 	orr.w	r3, r3, #8
 8025d08:	81a3      	strh	r3, [r4, #12]
 8025d0a:	6923      	ldr	r3, [r4, #16]
 8025d0c:	b94b      	cbnz	r3, 8025d22 <__swsetup_r+0x9a>
 8025d0e:	89a3      	ldrh	r3, [r4, #12]
 8025d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025d18:	d003      	beq.n	8025d22 <__swsetup_r+0x9a>
 8025d1a:	4621      	mov	r1, r4
 8025d1c:	4630      	mov	r0, r6
 8025d1e:	f000 fa23 	bl	8026168 <__smakebuf_r>
 8025d22:	89a2      	ldrh	r2, [r4, #12]
 8025d24:	f012 0301 	ands.w	r3, r2, #1
 8025d28:	d00c      	beq.n	8025d44 <__swsetup_r+0xbc>
 8025d2a:	2300      	movs	r3, #0
 8025d2c:	60a3      	str	r3, [r4, #8]
 8025d2e:	6963      	ldr	r3, [r4, #20]
 8025d30:	425b      	negs	r3, r3
 8025d32:	61a3      	str	r3, [r4, #24]
 8025d34:	6923      	ldr	r3, [r4, #16]
 8025d36:	b953      	cbnz	r3, 8025d4e <__swsetup_r+0xc6>
 8025d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025d40:	d1ba      	bne.n	8025cb8 <__swsetup_r+0x30>
 8025d42:	bd70      	pop	{r4, r5, r6, pc}
 8025d44:	0792      	lsls	r2, r2, #30
 8025d46:	bf58      	it	pl
 8025d48:	6963      	ldrpl	r3, [r4, #20]
 8025d4a:	60a3      	str	r3, [r4, #8]
 8025d4c:	e7f2      	b.n	8025d34 <__swsetup_r+0xac>
 8025d4e:	2000      	movs	r0, #0
 8025d50:	e7f7      	b.n	8025d42 <__swsetup_r+0xba>
 8025d52:	bf00      	nop
 8025d54:	200000c8 	.word	0x200000c8
 8025d58:	08029b0c 	.word	0x08029b0c
 8025d5c:	08029b2c 	.word	0x08029b2c
 8025d60:	08029aec 	.word	0x08029aec

08025d64 <__register_exitproc>:
 8025d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d68:	4d2c      	ldr	r5, [pc, #176]	; (8025e1c <__register_exitproc+0xb8>)
 8025d6a:	682c      	ldr	r4, [r5, #0]
 8025d6c:	4607      	mov	r7, r0
 8025d6e:	460e      	mov	r6, r1
 8025d70:	4691      	mov	r9, r2
 8025d72:	4698      	mov	r8, r3
 8025d74:	b934      	cbnz	r4, 8025d84 <__register_exitproc+0x20>
 8025d76:	4b2a      	ldr	r3, [pc, #168]	; (8025e20 <__register_exitproc+0xbc>)
 8025d78:	4c2a      	ldr	r4, [pc, #168]	; (8025e24 <__register_exitproc+0xc0>)
 8025d7a:	602c      	str	r4, [r5, #0]
 8025d7c:	b113      	cbz	r3, 8025d84 <__register_exitproc+0x20>
 8025d7e:	681b      	ldr	r3, [r3, #0]
 8025d80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8025d84:	6863      	ldr	r3, [r4, #4]
 8025d86:	2b1f      	cmp	r3, #31
 8025d88:	dd3d      	ble.n	8025e06 <__register_exitproc+0xa2>
 8025d8a:	4b27      	ldr	r3, [pc, #156]	; (8025e28 <__register_exitproc+0xc4>)
 8025d8c:	b91b      	cbnz	r3, 8025d96 <__register_exitproc+0x32>
 8025d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8025d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d96:	208c      	movs	r0, #140	; 0x8c
 8025d98:	f7ff fb3c 	bl	8025414 <malloc>
 8025d9c:	4604      	mov	r4, r0
 8025d9e:	2800      	cmp	r0, #0
 8025da0:	d0f5      	beq.n	8025d8e <__register_exitproc+0x2a>
 8025da2:	2300      	movs	r3, #0
 8025da4:	682a      	ldr	r2, [r5, #0]
 8025da6:	6002      	str	r2, [r0, #0]
 8025da8:	6043      	str	r3, [r0, #4]
 8025daa:	6028      	str	r0, [r5, #0]
 8025dac:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8025db0:	b30f      	cbz	r7, 8025df6 <__register_exitproc+0x92>
 8025db2:	f44f 7084 	mov.w	r0, #264	; 0x108
 8025db6:	f7ff fb2d 	bl	8025414 <malloc>
 8025dba:	2800      	cmp	r0, #0
 8025dbc:	d0e7      	beq.n	8025d8e <__register_exitproc+0x2a>
 8025dbe:	2300      	movs	r3, #0
 8025dc0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025dc4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8025dc8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8025dcc:	6862      	ldr	r2, [r4, #4]
 8025dce:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8025dd2:	2301      	movs	r3, #1
 8025dd4:	4093      	lsls	r3, r2
 8025dd6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8025dda:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8025dde:	431a      	orrs	r2, r3
 8025de0:	2f02      	cmp	r7, #2
 8025de2:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8025de6:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8025dea:	bf02      	ittt	eq
 8025dec:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8025df0:	4313      	orreq	r3, r2
 8025df2:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025df6:	6863      	ldr	r3, [r4, #4]
 8025df8:	1c5a      	adds	r2, r3, #1
 8025dfa:	3302      	adds	r3, #2
 8025dfc:	6062      	str	r2, [r4, #4]
 8025dfe:	2000      	movs	r0, #0
 8025e00:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025e04:	e7c5      	b.n	8025d92 <__register_exitproc+0x2e>
 8025e06:	2f00      	cmp	r7, #0
 8025e08:	d0f5      	beq.n	8025df6 <__register_exitproc+0x92>
 8025e0a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025e0e:	2800      	cmp	r0, #0
 8025e10:	d1dc      	bne.n	8025dcc <__register_exitproc+0x68>
 8025e12:	4b05      	ldr	r3, [pc, #20]	; (8025e28 <__register_exitproc+0xc4>)
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	d0ba      	beq.n	8025d8e <__register_exitproc+0x2a>
 8025e18:	e7cb      	b.n	8025db2 <__register_exitproc+0x4e>
 8025e1a:	bf00      	nop
 8025e1c:	20009b84 	.word	0x20009b84
 8025e20:	08029ae8 	.word	0x08029ae8
 8025e24:	20009af8 	.word	0x20009af8
 8025e28:	08025415 	.word	0x08025415

08025e2c <__sflush_r>:
 8025e2c:	898a      	ldrh	r2, [r1, #12]
 8025e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e32:	4605      	mov	r5, r0
 8025e34:	0710      	lsls	r0, r2, #28
 8025e36:	460c      	mov	r4, r1
 8025e38:	d458      	bmi.n	8025eec <__sflush_r+0xc0>
 8025e3a:	684b      	ldr	r3, [r1, #4]
 8025e3c:	2b00      	cmp	r3, #0
 8025e3e:	dc05      	bgt.n	8025e4c <__sflush_r+0x20>
 8025e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025e42:	2b00      	cmp	r3, #0
 8025e44:	dc02      	bgt.n	8025e4c <__sflush_r+0x20>
 8025e46:	2000      	movs	r0, #0
 8025e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025e4e:	2e00      	cmp	r6, #0
 8025e50:	d0f9      	beq.n	8025e46 <__sflush_r+0x1a>
 8025e52:	2300      	movs	r3, #0
 8025e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025e58:	682f      	ldr	r7, [r5, #0]
 8025e5a:	6a21      	ldr	r1, [r4, #32]
 8025e5c:	602b      	str	r3, [r5, #0]
 8025e5e:	d032      	beq.n	8025ec6 <__sflush_r+0x9a>
 8025e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025e62:	89a3      	ldrh	r3, [r4, #12]
 8025e64:	075a      	lsls	r2, r3, #29
 8025e66:	d505      	bpl.n	8025e74 <__sflush_r+0x48>
 8025e68:	6863      	ldr	r3, [r4, #4]
 8025e6a:	1ac0      	subs	r0, r0, r3
 8025e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025e6e:	b10b      	cbz	r3, 8025e74 <__sflush_r+0x48>
 8025e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025e72:	1ac0      	subs	r0, r0, r3
 8025e74:	2300      	movs	r3, #0
 8025e76:	4602      	mov	r2, r0
 8025e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025e7a:	6a21      	ldr	r1, [r4, #32]
 8025e7c:	4628      	mov	r0, r5
 8025e7e:	47b0      	blx	r6
 8025e80:	1c43      	adds	r3, r0, #1
 8025e82:	89a3      	ldrh	r3, [r4, #12]
 8025e84:	d106      	bne.n	8025e94 <__sflush_r+0x68>
 8025e86:	6829      	ldr	r1, [r5, #0]
 8025e88:	291d      	cmp	r1, #29
 8025e8a:	d848      	bhi.n	8025f1e <__sflush_r+0xf2>
 8025e8c:	4a29      	ldr	r2, [pc, #164]	; (8025f34 <__sflush_r+0x108>)
 8025e8e:	40ca      	lsrs	r2, r1
 8025e90:	07d6      	lsls	r6, r2, #31
 8025e92:	d544      	bpl.n	8025f1e <__sflush_r+0xf2>
 8025e94:	2200      	movs	r2, #0
 8025e96:	6062      	str	r2, [r4, #4]
 8025e98:	04d9      	lsls	r1, r3, #19
 8025e9a:	6922      	ldr	r2, [r4, #16]
 8025e9c:	6022      	str	r2, [r4, #0]
 8025e9e:	d504      	bpl.n	8025eaa <__sflush_r+0x7e>
 8025ea0:	1c42      	adds	r2, r0, #1
 8025ea2:	d101      	bne.n	8025ea8 <__sflush_r+0x7c>
 8025ea4:	682b      	ldr	r3, [r5, #0]
 8025ea6:	b903      	cbnz	r3, 8025eaa <__sflush_r+0x7e>
 8025ea8:	6560      	str	r0, [r4, #84]	; 0x54
 8025eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025eac:	602f      	str	r7, [r5, #0]
 8025eae:	2900      	cmp	r1, #0
 8025eb0:	d0c9      	beq.n	8025e46 <__sflush_r+0x1a>
 8025eb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025eb6:	4299      	cmp	r1, r3
 8025eb8:	d002      	beq.n	8025ec0 <__sflush_r+0x94>
 8025eba:	4628      	mov	r0, r5
 8025ebc:	f7ff face 	bl	802545c <_free_r>
 8025ec0:	2000      	movs	r0, #0
 8025ec2:	6360      	str	r0, [r4, #52]	; 0x34
 8025ec4:	e7c0      	b.n	8025e48 <__sflush_r+0x1c>
 8025ec6:	2301      	movs	r3, #1
 8025ec8:	4628      	mov	r0, r5
 8025eca:	47b0      	blx	r6
 8025ecc:	1c41      	adds	r1, r0, #1
 8025ece:	d1c8      	bne.n	8025e62 <__sflush_r+0x36>
 8025ed0:	682b      	ldr	r3, [r5, #0]
 8025ed2:	2b00      	cmp	r3, #0
 8025ed4:	d0c5      	beq.n	8025e62 <__sflush_r+0x36>
 8025ed6:	2b1d      	cmp	r3, #29
 8025ed8:	d001      	beq.n	8025ede <__sflush_r+0xb2>
 8025eda:	2b16      	cmp	r3, #22
 8025edc:	d101      	bne.n	8025ee2 <__sflush_r+0xb6>
 8025ede:	602f      	str	r7, [r5, #0]
 8025ee0:	e7b1      	b.n	8025e46 <__sflush_r+0x1a>
 8025ee2:	89a3      	ldrh	r3, [r4, #12]
 8025ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025ee8:	81a3      	strh	r3, [r4, #12]
 8025eea:	e7ad      	b.n	8025e48 <__sflush_r+0x1c>
 8025eec:	690f      	ldr	r7, [r1, #16]
 8025eee:	2f00      	cmp	r7, #0
 8025ef0:	d0a9      	beq.n	8025e46 <__sflush_r+0x1a>
 8025ef2:	0793      	lsls	r3, r2, #30
 8025ef4:	680e      	ldr	r6, [r1, #0]
 8025ef6:	bf08      	it	eq
 8025ef8:	694b      	ldreq	r3, [r1, #20]
 8025efa:	600f      	str	r7, [r1, #0]
 8025efc:	bf18      	it	ne
 8025efe:	2300      	movne	r3, #0
 8025f00:	eba6 0807 	sub.w	r8, r6, r7
 8025f04:	608b      	str	r3, [r1, #8]
 8025f06:	f1b8 0f00 	cmp.w	r8, #0
 8025f0a:	dd9c      	ble.n	8025e46 <__sflush_r+0x1a>
 8025f0c:	4643      	mov	r3, r8
 8025f0e:	463a      	mov	r2, r7
 8025f10:	6a21      	ldr	r1, [r4, #32]
 8025f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025f14:	4628      	mov	r0, r5
 8025f16:	47b0      	blx	r6
 8025f18:	2800      	cmp	r0, #0
 8025f1a:	dc06      	bgt.n	8025f2a <__sflush_r+0xfe>
 8025f1c:	89a3      	ldrh	r3, [r4, #12]
 8025f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025f22:	81a3      	strh	r3, [r4, #12]
 8025f24:	f04f 30ff 	mov.w	r0, #4294967295
 8025f28:	e78e      	b.n	8025e48 <__sflush_r+0x1c>
 8025f2a:	4407      	add	r7, r0
 8025f2c:	eba8 0800 	sub.w	r8, r8, r0
 8025f30:	e7e9      	b.n	8025f06 <__sflush_r+0xda>
 8025f32:	bf00      	nop
 8025f34:	20400001 	.word	0x20400001

08025f38 <_fflush_r>:
 8025f38:	b538      	push	{r3, r4, r5, lr}
 8025f3a:	690b      	ldr	r3, [r1, #16]
 8025f3c:	4605      	mov	r5, r0
 8025f3e:	460c      	mov	r4, r1
 8025f40:	b1db      	cbz	r3, 8025f7a <_fflush_r+0x42>
 8025f42:	b118      	cbz	r0, 8025f4c <_fflush_r+0x14>
 8025f44:	6983      	ldr	r3, [r0, #24]
 8025f46:	b90b      	cbnz	r3, 8025f4c <_fflush_r+0x14>
 8025f48:	f000 f860 	bl	802600c <__sinit>
 8025f4c:	4b0c      	ldr	r3, [pc, #48]	; (8025f80 <_fflush_r+0x48>)
 8025f4e:	429c      	cmp	r4, r3
 8025f50:	d109      	bne.n	8025f66 <_fflush_r+0x2e>
 8025f52:	686c      	ldr	r4, [r5, #4]
 8025f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025f58:	b17b      	cbz	r3, 8025f7a <_fflush_r+0x42>
 8025f5a:	4621      	mov	r1, r4
 8025f5c:	4628      	mov	r0, r5
 8025f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025f62:	f7ff bf63 	b.w	8025e2c <__sflush_r>
 8025f66:	4b07      	ldr	r3, [pc, #28]	; (8025f84 <_fflush_r+0x4c>)
 8025f68:	429c      	cmp	r4, r3
 8025f6a:	d101      	bne.n	8025f70 <_fflush_r+0x38>
 8025f6c:	68ac      	ldr	r4, [r5, #8]
 8025f6e:	e7f1      	b.n	8025f54 <_fflush_r+0x1c>
 8025f70:	4b05      	ldr	r3, [pc, #20]	; (8025f88 <_fflush_r+0x50>)
 8025f72:	429c      	cmp	r4, r3
 8025f74:	bf08      	it	eq
 8025f76:	68ec      	ldreq	r4, [r5, #12]
 8025f78:	e7ec      	b.n	8025f54 <_fflush_r+0x1c>
 8025f7a:	2000      	movs	r0, #0
 8025f7c:	bd38      	pop	{r3, r4, r5, pc}
 8025f7e:	bf00      	nop
 8025f80:	08029b0c 	.word	0x08029b0c
 8025f84:	08029b2c 	.word	0x08029b2c
 8025f88:	08029aec 	.word	0x08029aec

08025f8c <std>:
 8025f8c:	2300      	movs	r3, #0
 8025f8e:	b510      	push	{r4, lr}
 8025f90:	4604      	mov	r4, r0
 8025f92:	e9c0 3300 	strd	r3, r3, [r0]
 8025f96:	6083      	str	r3, [r0, #8]
 8025f98:	8181      	strh	r1, [r0, #12]
 8025f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8025f9c:	81c2      	strh	r2, [r0, #14]
 8025f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025fa2:	6183      	str	r3, [r0, #24]
 8025fa4:	4619      	mov	r1, r3
 8025fa6:	2208      	movs	r2, #8
 8025fa8:	305c      	adds	r0, #92	; 0x5c
 8025faa:	f7ff fa4e 	bl	802544a <memset>
 8025fae:	4b05      	ldr	r3, [pc, #20]	; (8025fc4 <std+0x38>)
 8025fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8025fb2:	4b05      	ldr	r3, [pc, #20]	; (8025fc8 <std+0x3c>)
 8025fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8025fb6:	4b05      	ldr	r3, [pc, #20]	; (8025fcc <std+0x40>)
 8025fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025fba:	4b05      	ldr	r3, [pc, #20]	; (8025fd0 <std+0x44>)
 8025fbc:	6224      	str	r4, [r4, #32]
 8025fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8025fc0:	bd10      	pop	{r4, pc}
 8025fc2:	bf00      	nop
 8025fc4:	080261ed 	.word	0x080261ed
 8025fc8:	0802620f 	.word	0x0802620f
 8025fcc:	08026247 	.word	0x08026247
 8025fd0:	0802626b 	.word	0x0802626b

08025fd4 <_cleanup_r>:
 8025fd4:	4901      	ldr	r1, [pc, #4]	; (8025fdc <_cleanup_r+0x8>)
 8025fd6:	f000 b885 	b.w	80260e4 <_fwalk_reent>
 8025fda:	bf00      	nop
 8025fdc:	08025f39 	.word	0x08025f39

08025fe0 <__sfmoreglue>:
 8025fe0:	b570      	push	{r4, r5, r6, lr}
 8025fe2:	1e4a      	subs	r2, r1, #1
 8025fe4:	2568      	movs	r5, #104	; 0x68
 8025fe6:	4355      	muls	r5, r2
 8025fe8:	460e      	mov	r6, r1
 8025fea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025fee:	f7ff fa83 	bl	80254f8 <_malloc_r>
 8025ff2:	4604      	mov	r4, r0
 8025ff4:	b140      	cbz	r0, 8026008 <__sfmoreglue+0x28>
 8025ff6:	2100      	movs	r1, #0
 8025ff8:	e9c0 1600 	strd	r1, r6, [r0]
 8025ffc:	300c      	adds	r0, #12
 8025ffe:	60a0      	str	r0, [r4, #8]
 8026000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026004:	f7ff fa21 	bl	802544a <memset>
 8026008:	4620      	mov	r0, r4
 802600a:	bd70      	pop	{r4, r5, r6, pc}

0802600c <__sinit>:
 802600c:	6983      	ldr	r3, [r0, #24]
 802600e:	b510      	push	{r4, lr}
 8026010:	4604      	mov	r4, r0
 8026012:	bb33      	cbnz	r3, 8026062 <__sinit+0x56>
 8026014:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8026018:	6503      	str	r3, [r0, #80]	; 0x50
 802601a:	4b12      	ldr	r3, [pc, #72]	; (8026064 <__sinit+0x58>)
 802601c:	4a12      	ldr	r2, [pc, #72]	; (8026068 <__sinit+0x5c>)
 802601e:	681b      	ldr	r3, [r3, #0]
 8026020:	6282      	str	r2, [r0, #40]	; 0x28
 8026022:	4298      	cmp	r0, r3
 8026024:	bf04      	itt	eq
 8026026:	2301      	moveq	r3, #1
 8026028:	6183      	streq	r3, [r0, #24]
 802602a:	f000 f81f 	bl	802606c <__sfp>
 802602e:	6060      	str	r0, [r4, #4]
 8026030:	4620      	mov	r0, r4
 8026032:	f000 f81b 	bl	802606c <__sfp>
 8026036:	60a0      	str	r0, [r4, #8]
 8026038:	4620      	mov	r0, r4
 802603a:	f000 f817 	bl	802606c <__sfp>
 802603e:	2200      	movs	r2, #0
 8026040:	60e0      	str	r0, [r4, #12]
 8026042:	2104      	movs	r1, #4
 8026044:	6860      	ldr	r0, [r4, #4]
 8026046:	f7ff ffa1 	bl	8025f8c <std>
 802604a:	2201      	movs	r2, #1
 802604c:	2109      	movs	r1, #9
 802604e:	68a0      	ldr	r0, [r4, #8]
 8026050:	f7ff ff9c 	bl	8025f8c <std>
 8026054:	2202      	movs	r2, #2
 8026056:	2112      	movs	r1, #18
 8026058:	68e0      	ldr	r0, [r4, #12]
 802605a:	f7ff ff97 	bl	8025f8c <std>
 802605e:	2301      	movs	r3, #1
 8026060:	61a3      	str	r3, [r4, #24]
 8026062:	bd10      	pop	{r4, pc}
 8026064:	08029ab0 	.word	0x08029ab0
 8026068:	08025fd5 	.word	0x08025fd5

0802606c <__sfp>:
 802606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802606e:	4b1b      	ldr	r3, [pc, #108]	; (80260dc <__sfp+0x70>)
 8026070:	681e      	ldr	r6, [r3, #0]
 8026072:	69b3      	ldr	r3, [r6, #24]
 8026074:	4607      	mov	r7, r0
 8026076:	b913      	cbnz	r3, 802607e <__sfp+0x12>
 8026078:	4630      	mov	r0, r6
 802607a:	f7ff ffc7 	bl	802600c <__sinit>
 802607e:	3648      	adds	r6, #72	; 0x48
 8026080:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026084:	3b01      	subs	r3, #1
 8026086:	d503      	bpl.n	8026090 <__sfp+0x24>
 8026088:	6833      	ldr	r3, [r6, #0]
 802608a:	b133      	cbz	r3, 802609a <__sfp+0x2e>
 802608c:	6836      	ldr	r6, [r6, #0]
 802608e:	e7f7      	b.n	8026080 <__sfp+0x14>
 8026090:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026094:	b16d      	cbz	r5, 80260b2 <__sfp+0x46>
 8026096:	3468      	adds	r4, #104	; 0x68
 8026098:	e7f4      	b.n	8026084 <__sfp+0x18>
 802609a:	2104      	movs	r1, #4
 802609c:	4638      	mov	r0, r7
 802609e:	f7ff ff9f 	bl	8025fe0 <__sfmoreglue>
 80260a2:	6030      	str	r0, [r6, #0]
 80260a4:	2800      	cmp	r0, #0
 80260a6:	d1f1      	bne.n	802608c <__sfp+0x20>
 80260a8:	230c      	movs	r3, #12
 80260aa:	603b      	str	r3, [r7, #0]
 80260ac:	4604      	mov	r4, r0
 80260ae:	4620      	mov	r0, r4
 80260b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80260b2:	4b0b      	ldr	r3, [pc, #44]	; (80260e0 <__sfp+0x74>)
 80260b4:	6665      	str	r5, [r4, #100]	; 0x64
 80260b6:	e9c4 5500 	strd	r5, r5, [r4]
 80260ba:	60a5      	str	r5, [r4, #8]
 80260bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80260c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80260c4:	2208      	movs	r2, #8
 80260c6:	4629      	mov	r1, r5
 80260c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80260cc:	f7ff f9bd 	bl	802544a <memset>
 80260d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80260d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80260d8:	e7e9      	b.n	80260ae <__sfp+0x42>
 80260da:	bf00      	nop
 80260dc:	08029ab0 	.word	0x08029ab0
 80260e0:	ffff0001 	.word	0xffff0001

080260e4 <_fwalk_reent>:
 80260e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80260e8:	4680      	mov	r8, r0
 80260ea:	4689      	mov	r9, r1
 80260ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80260f0:	2600      	movs	r6, #0
 80260f2:	b914      	cbnz	r4, 80260fa <_fwalk_reent+0x16>
 80260f4:	4630      	mov	r0, r6
 80260f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80260fa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80260fe:	3f01      	subs	r7, #1
 8026100:	d501      	bpl.n	8026106 <_fwalk_reent+0x22>
 8026102:	6824      	ldr	r4, [r4, #0]
 8026104:	e7f5      	b.n	80260f2 <_fwalk_reent+0xe>
 8026106:	89ab      	ldrh	r3, [r5, #12]
 8026108:	2b01      	cmp	r3, #1
 802610a:	d907      	bls.n	802611c <_fwalk_reent+0x38>
 802610c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026110:	3301      	adds	r3, #1
 8026112:	d003      	beq.n	802611c <_fwalk_reent+0x38>
 8026114:	4629      	mov	r1, r5
 8026116:	4640      	mov	r0, r8
 8026118:	47c8      	blx	r9
 802611a:	4306      	orrs	r6, r0
 802611c:	3568      	adds	r5, #104	; 0x68
 802611e:	e7ee      	b.n	80260fe <_fwalk_reent+0x1a>

08026120 <__swhatbuf_r>:
 8026120:	b570      	push	{r4, r5, r6, lr}
 8026122:	460e      	mov	r6, r1
 8026124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026128:	2900      	cmp	r1, #0
 802612a:	b096      	sub	sp, #88	; 0x58
 802612c:	4614      	mov	r4, r2
 802612e:	461d      	mov	r5, r3
 8026130:	da07      	bge.n	8026142 <__swhatbuf_r+0x22>
 8026132:	2300      	movs	r3, #0
 8026134:	602b      	str	r3, [r5, #0]
 8026136:	89b3      	ldrh	r3, [r6, #12]
 8026138:	061a      	lsls	r2, r3, #24
 802613a:	d410      	bmi.n	802615e <__swhatbuf_r+0x3e>
 802613c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026140:	e00e      	b.n	8026160 <__swhatbuf_r+0x40>
 8026142:	466a      	mov	r2, sp
 8026144:	f000 f8b8 	bl	80262b8 <_fstat_r>
 8026148:	2800      	cmp	r0, #0
 802614a:	dbf2      	blt.n	8026132 <__swhatbuf_r+0x12>
 802614c:	9a01      	ldr	r2, [sp, #4]
 802614e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026152:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026156:	425a      	negs	r2, r3
 8026158:	415a      	adcs	r2, r3
 802615a:	602a      	str	r2, [r5, #0]
 802615c:	e7ee      	b.n	802613c <__swhatbuf_r+0x1c>
 802615e:	2340      	movs	r3, #64	; 0x40
 8026160:	2000      	movs	r0, #0
 8026162:	6023      	str	r3, [r4, #0]
 8026164:	b016      	add	sp, #88	; 0x58
 8026166:	bd70      	pop	{r4, r5, r6, pc}

08026168 <__smakebuf_r>:
 8026168:	898b      	ldrh	r3, [r1, #12]
 802616a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802616c:	079d      	lsls	r5, r3, #30
 802616e:	4606      	mov	r6, r0
 8026170:	460c      	mov	r4, r1
 8026172:	d507      	bpl.n	8026184 <__smakebuf_r+0x1c>
 8026174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026178:	6023      	str	r3, [r4, #0]
 802617a:	6123      	str	r3, [r4, #16]
 802617c:	2301      	movs	r3, #1
 802617e:	6163      	str	r3, [r4, #20]
 8026180:	b002      	add	sp, #8
 8026182:	bd70      	pop	{r4, r5, r6, pc}
 8026184:	ab01      	add	r3, sp, #4
 8026186:	466a      	mov	r2, sp
 8026188:	f7ff ffca 	bl	8026120 <__swhatbuf_r>
 802618c:	9900      	ldr	r1, [sp, #0]
 802618e:	4605      	mov	r5, r0
 8026190:	4630      	mov	r0, r6
 8026192:	f7ff f9b1 	bl	80254f8 <_malloc_r>
 8026196:	b948      	cbnz	r0, 80261ac <__smakebuf_r+0x44>
 8026198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802619c:	059a      	lsls	r2, r3, #22
 802619e:	d4ef      	bmi.n	8026180 <__smakebuf_r+0x18>
 80261a0:	f023 0303 	bic.w	r3, r3, #3
 80261a4:	f043 0302 	orr.w	r3, r3, #2
 80261a8:	81a3      	strh	r3, [r4, #12]
 80261aa:	e7e3      	b.n	8026174 <__smakebuf_r+0xc>
 80261ac:	4b0d      	ldr	r3, [pc, #52]	; (80261e4 <__smakebuf_r+0x7c>)
 80261ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80261b0:	89a3      	ldrh	r3, [r4, #12]
 80261b2:	6020      	str	r0, [r4, #0]
 80261b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80261b8:	81a3      	strh	r3, [r4, #12]
 80261ba:	9b00      	ldr	r3, [sp, #0]
 80261bc:	6163      	str	r3, [r4, #20]
 80261be:	9b01      	ldr	r3, [sp, #4]
 80261c0:	6120      	str	r0, [r4, #16]
 80261c2:	b15b      	cbz	r3, 80261dc <__smakebuf_r+0x74>
 80261c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80261c8:	4630      	mov	r0, r6
 80261ca:	f000 f887 	bl	80262dc <_isatty_r>
 80261ce:	b128      	cbz	r0, 80261dc <__smakebuf_r+0x74>
 80261d0:	89a3      	ldrh	r3, [r4, #12]
 80261d2:	f023 0303 	bic.w	r3, r3, #3
 80261d6:	f043 0301 	orr.w	r3, r3, #1
 80261da:	81a3      	strh	r3, [r4, #12]
 80261dc:	89a3      	ldrh	r3, [r4, #12]
 80261de:	431d      	orrs	r5, r3
 80261e0:	81a5      	strh	r5, [r4, #12]
 80261e2:	e7cd      	b.n	8026180 <__smakebuf_r+0x18>
 80261e4:	08025fd5 	.word	0x08025fd5

080261e8 <__malloc_lock>:
 80261e8:	4770      	bx	lr

080261ea <__malloc_unlock>:
 80261ea:	4770      	bx	lr

080261ec <__sread>:
 80261ec:	b510      	push	{r4, lr}
 80261ee:	460c      	mov	r4, r1
 80261f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261f4:	f000 f894 	bl	8026320 <_read_r>
 80261f8:	2800      	cmp	r0, #0
 80261fa:	bfab      	itete	ge
 80261fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80261fe:	89a3      	ldrhlt	r3, [r4, #12]
 8026200:	181b      	addge	r3, r3, r0
 8026202:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026206:	bfac      	ite	ge
 8026208:	6563      	strge	r3, [r4, #84]	; 0x54
 802620a:	81a3      	strhlt	r3, [r4, #12]
 802620c:	bd10      	pop	{r4, pc}

0802620e <__swrite>:
 802620e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026212:	461f      	mov	r7, r3
 8026214:	898b      	ldrh	r3, [r1, #12]
 8026216:	05db      	lsls	r3, r3, #23
 8026218:	4605      	mov	r5, r0
 802621a:	460c      	mov	r4, r1
 802621c:	4616      	mov	r6, r2
 802621e:	d505      	bpl.n	802622c <__swrite+0x1e>
 8026220:	2302      	movs	r3, #2
 8026222:	2200      	movs	r2, #0
 8026224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026228:	f000 f868 	bl	80262fc <_lseek_r>
 802622c:	89a3      	ldrh	r3, [r4, #12]
 802622e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026236:	81a3      	strh	r3, [r4, #12]
 8026238:	4632      	mov	r2, r6
 802623a:	463b      	mov	r3, r7
 802623c:	4628      	mov	r0, r5
 802623e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026242:	f000 b817 	b.w	8026274 <_write_r>

08026246 <__sseek>:
 8026246:	b510      	push	{r4, lr}
 8026248:	460c      	mov	r4, r1
 802624a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802624e:	f000 f855 	bl	80262fc <_lseek_r>
 8026252:	1c43      	adds	r3, r0, #1
 8026254:	89a3      	ldrh	r3, [r4, #12]
 8026256:	bf15      	itete	ne
 8026258:	6560      	strne	r0, [r4, #84]	; 0x54
 802625a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802625e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026262:	81a3      	strheq	r3, [r4, #12]
 8026264:	bf18      	it	ne
 8026266:	81a3      	strhne	r3, [r4, #12]
 8026268:	bd10      	pop	{r4, pc}

0802626a <__sclose>:
 802626a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802626e:	f000 b813 	b.w	8026298 <_close_r>
	...

08026274 <_write_r>:
 8026274:	b538      	push	{r3, r4, r5, lr}
 8026276:	4c07      	ldr	r4, [pc, #28]	; (8026294 <_write_r+0x20>)
 8026278:	4605      	mov	r5, r0
 802627a:	4608      	mov	r0, r1
 802627c:	4611      	mov	r1, r2
 802627e:	2200      	movs	r2, #0
 8026280:	6022      	str	r2, [r4, #0]
 8026282:	461a      	mov	r2, r3
 8026284:	f7dc feed 	bl	8003062 <_write>
 8026288:	1c43      	adds	r3, r0, #1
 802628a:	d102      	bne.n	8026292 <_write_r+0x1e>
 802628c:	6823      	ldr	r3, [r4, #0]
 802628e:	b103      	cbz	r3, 8026292 <_write_r+0x1e>
 8026290:	602b      	str	r3, [r5, #0]
 8026292:	bd38      	pop	{r3, r4, r5, pc}
 8026294:	2000ae70 	.word	0x2000ae70

08026298 <_close_r>:
 8026298:	b538      	push	{r3, r4, r5, lr}
 802629a:	4c06      	ldr	r4, [pc, #24]	; (80262b4 <_close_r+0x1c>)
 802629c:	2300      	movs	r3, #0
 802629e:	4605      	mov	r5, r0
 80262a0:	4608      	mov	r0, r1
 80262a2:	6023      	str	r3, [r4, #0]
 80262a4:	f7dc fef9 	bl	800309a <_close>
 80262a8:	1c43      	adds	r3, r0, #1
 80262aa:	d102      	bne.n	80262b2 <_close_r+0x1a>
 80262ac:	6823      	ldr	r3, [r4, #0]
 80262ae:	b103      	cbz	r3, 80262b2 <_close_r+0x1a>
 80262b0:	602b      	str	r3, [r5, #0]
 80262b2:	bd38      	pop	{r3, r4, r5, pc}
 80262b4:	2000ae70 	.word	0x2000ae70

080262b8 <_fstat_r>:
 80262b8:	b538      	push	{r3, r4, r5, lr}
 80262ba:	4c07      	ldr	r4, [pc, #28]	; (80262d8 <_fstat_r+0x20>)
 80262bc:	2300      	movs	r3, #0
 80262be:	4605      	mov	r5, r0
 80262c0:	4608      	mov	r0, r1
 80262c2:	4611      	mov	r1, r2
 80262c4:	6023      	str	r3, [r4, #0]
 80262c6:	f7dc fef4 	bl	80030b2 <_fstat>
 80262ca:	1c43      	adds	r3, r0, #1
 80262cc:	d102      	bne.n	80262d4 <_fstat_r+0x1c>
 80262ce:	6823      	ldr	r3, [r4, #0]
 80262d0:	b103      	cbz	r3, 80262d4 <_fstat_r+0x1c>
 80262d2:	602b      	str	r3, [r5, #0]
 80262d4:	bd38      	pop	{r3, r4, r5, pc}
 80262d6:	bf00      	nop
 80262d8:	2000ae70 	.word	0x2000ae70

080262dc <_isatty_r>:
 80262dc:	b538      	push	{r3, r4, r5, lr}
 80262de:	4c06      	ldr	r4, [pc, #24]	; (80262f8 <_isatty_r+0x1c>)
 80262e0:	2300      	movs	r3, #0
 80262e2:	4605      	mov	r5, r0
 80262e4:	4608      	mov	r0, r1
 80262e6:	6023      	str	r3, [r4, #0]
 80262e8:	f7dc fef3 	bl	80030d2 <_isatty>
 80262ec:	1c43      	adds	r3, r0, #1
 80262ee:	d102      	bne.n	80262f6 <_isatty_r+0x1a>
 80262f0:	6823      	ldr	r3, [r4, #0]
 80262f2:	b103      	cbz	r3, 80262f6 <_isatty_r+0x1a>
 80262f4:	602b      	str	r3, [r5, #0]
 80262f6:	bd38      	pop	{r3, r4, r5, pc}
 80262f8:	2000ae70 	.word	0x2000ae70

080262fc <_lseek_r>:
 80262fc:	b538      	push	{r3, r4, r5, lr}
 80262fe:	4c07      	ldr	r4, [pc, #28]	; (802631c <_lseek_r+0x20>)
 8026300:	4605      	mov	r5, r0
 8026302:	4608      	mov	r0, r1
 8026304:	4611      	mov	r1, r2
 8026306:	2200      	movs	r2, #0
 8026308:	6022      	str	r2, [r4, #0]
 802630a:	461a      	mov	r2, r3
 802630c:	f7dc feec 	bl	80030e8 <_lseek>
 8026310:	1c43      	adds	r3, r0, #1
 8026312:	d102      	bne.n	802631a <_lseek_r+0x1e>
 8026314:	6823      	ldr	r3, [r4, #0]
 8026316:	b103      	cbz	r3, 802631a <_lseek_r+0x1e>
 8026318:	602b      	str	r3, [r5, #0]
 802631a:	bd38      	pop	{r3, r4, r5, pc}
 802631c:	2000ae70 	.word	0x2000ae70

08026320 <_read_r>:
 8026320:	b538      	push	{r3, r4, r5, lr}
 8026322:	4c07      	ldr	r4, [pc, #28]	; (8026340 <_read_r+0x20>)
 8026324:	4605      	mov	r5, r0
 8026326:	4608      	mov	r0, r1
 8026328:	4611      	mov	r1, r2
 802632a:	2200      	movs	r2, #0
 802632c:	6022      	str	r2, [r4, #0]
 802632e:	461a      	mov	r2, r3
 8026330:	f7dc fe7a 	bl	8003028 <_read>
 8026334:	1c43      	adds	r3, r0, #1
 8026336:	d102      	bne.n	802633e <_read_r+0x1e>
 8026338:	6823      	ldr	r3, [r4, #0]
 802633a:	b103      	cbz	r3, 802633e <_read_r+0x1e>
 802633c:	602b      	str	r3, [r5, #0]
 802633e:	bd38      	pop	{r3, r4, r5, pc}
 8026340:	2000ae70 	.word	0x2000ae70

08026344 <_init>:
 8026344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026346:	bf00      	nop
 8026348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802634a:	bc08      	pop	{r3}
 802634c:	469e      	mov	lr, r3
 802634e:	4770      	bx	lr

08026350 <_fini>:
 8026350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026352:	bf00      	nop
 8026354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026356:	bc08      	pop	{r3}
 8026358:	469e      	mov	lr, r3
 802635a:	4770      	bx	lr
